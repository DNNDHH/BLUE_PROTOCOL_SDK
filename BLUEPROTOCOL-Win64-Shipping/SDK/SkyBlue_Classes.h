#pragma once

/**
 * Name: BLUEPROTOCOL-Win64-Shipping
 * Version: 1.6.0
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class SkyBlue.ASAnimNotifyState_MountStartJumpValueSwitch
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UASAnimNotifyState_MountStartJumpValueSwitch : public UAnimNotifyState
	{
	public:
		unsigned char                                              UnknownData_CGHL[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.AssetReferenceExportFL
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAssetReferenceExportFL : public UBlueprintFunctionLibrary
	{
	public:
		void ReadAssetName(const class FString& Filename, TArray<class FString>* FileData);
		void ExportReference(const class FString& Filename, TArray<class FName> AssetName, bool IsHard);
		void CreateExportFile(const class FString& Filename);
		void AddReference(const class FString& Filename, const class FString& AssetName, TArray<class FName> Reference, TArray<class FName> Dependency);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClassHudInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBClassHudInterface : public UInterface
	{
	public:
		bool UnregistClassHud(const class FString& Name);
		void RegistClassHud(class UUserWidget* Widget, const class FString& Name);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTickFromParentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBTickFromParentInterface : public UInterface
	{
	public:
		void ParentsCallTick(float InDeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWidgetChildrenInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBWidgetChildrenInterface : public UInterface
	{
	public:
		void RequestShow();
		void RequestSetOwnerCharacter(class ASBCharacter* OwnerCharacter);
		void RequestSetIconColorName(const class FString& ColorName);
		void RequestSetAnimationSpeed(float AnimationSpeed);
		void RequestHide();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDHCBattleInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDHCBattleInterface : public UInterface
	{
	public:
		float GetScore(class APlayerState* InPlayerState);
		bool GetIsSoloPlay();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.ListUpDeleteEnemyAssetsCmdFunctionCommandlet
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class UListUpDeleteEnemyAssetsCmdFunctionCommandlet : public UCommandlet
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbility
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class USBAbility : public UObject
	{
	public:
		unsigned char                                              UnknownData_CW7K[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              Owner;                                                   // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              Causer;                                                  // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GDNL[0x20];                                  // 0x0050(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBAbilityExpiration*                                Expiration;                                              // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2W6C[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityDummy
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityDummy : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusBase
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusBase : public USBAbility
	{
	public:
		ESBAbilityValueUpAndDown                                   Type;                                                    // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q94A[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusTimeBase
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusTimeBase : public USBAbility
	{
	public:
		ESBAbilityValueShortAndExten                               Type;                                                    // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V3OD[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityCondition
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBAbilityCondition : public UObject
	{
	public:
		class AActor*                                              Owner;                                                   // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNotEqual : 1;                                           // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0BB4[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionAnyTime
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionAnyTime : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionActiveBattleMode
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionActiveBattleMode : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionInWater
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionInWater : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionInBattleMap
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionInBattleMap : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionInMap
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionInMap : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionInGameContentID
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionInGameContentID : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionActiveAbilityID
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionActiveAbilityID : public USBAbilityCondition
	{
	public:
		struct FSBAbilityID                                        AbilityID;                                               // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionMapInfo
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionMapInfo : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionBattleRange
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionBattleRange : public USBAbilityCondition
	{
	public:
		ESBPlayerClassBattleRange                                  BattleRange;                                             // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UFOI[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionActiveAbilityFlag
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionActiveAbilityFlag : public USBAbilityCondition
	{
	public:
		ESBAbilityFlags                                            CheckAbilityFlag;                                        // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W9KY[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionOperator
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionOperator : public USBAbilityCondition
	{
	public:
		ESBAbilityConditionOperator                                OperatorType;                                            // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D8TC[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionCharacterLevel
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBAbilityConditionCharacterLevel : public USBAbilityConditionOperator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionPlayerClass
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionPlayerClass : public USBAbilityCondition
	{
	public:
		ESBClassType                                               ClassType;                                               // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C18G[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionPlayerClassTotalPower
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBAbilityConditionPlayerClassTotalPower : public USBAbilityConditionOperator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionPlayerSpiritRank
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBAbilityConditionPlayerSpiritRank : public USBAbilityConditionOperator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionRemainHitPointRate
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBAbilityConditionRemainHitPointRate : public USBAbilityConditionOperator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionSheathe
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionSheathe : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionInParty
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionInParty : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionSkillAttack
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionSkillAttack : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionPlayerResurrecting
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionPlayerResurrecting : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionDynamicTrigger
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionDynamicTrigger : public USBAbilityCondition
	{
	public:
		ESBAbilityDynamicTriggerType                               Type;                                                    // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8S5I[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionBerserkerComboGaugeAmount
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionBerserkerComboGaugeAmount : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionFindByEnemy
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionFindByEnemy : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionEnemyHasAttackOrder
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionEnemyHasAttackOrder : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionTimeZoneNoon
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionTimeZoneNoon : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionTimeZoneNight
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionTimeZoneNight : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionWeaponElement
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionWeaponElement : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionWeaponEnhance
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionWeaponEnhance : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionWeaponProficiency
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionWeaponProficiency : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityConditionWeaponTotalPower
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAbilityConditionWeaponTotalPower : public USBAbilityCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityDotBase
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityDotBase : public USBAbility
	{
	public:
		unsigned char                                              UnknownData_JBCA[0x8];                                   // 0x0080(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityDot
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class USBAbilityDot : public USBAbilityDotBase
	{
	public:
		int32_t                                                    AttackID;                                                // 0x0088(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAbilityDotAmountType                                    AmountType;                                              // 0x008C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_52IM[0xB];                                   // 0x008D(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityDotHPDamage
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USBAbilityDotHPDamage : public USBAbilityDot
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityDotHPHeal
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USBAbilityDotHPHeal : public USBAbilityDot
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityDotMPHeal
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class USBAbilityDotMPHeal : public USBAbilityDot
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityProjectileOnTimes
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityProjectileOnTimes : public USBAbilityDotBase
	{
	public:
		unsigned char                                              UnknownData_2PN7[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityAllyAttackAttackScale
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityAllyAttackAttackScale : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityAllyAttackElement
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityAllyAttackElement : public USBAbility
	{
	public:
		ESBAttribute                                               AttributeType;                                           // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UZ60[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityCurableByInteraction
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityCurableByInteraction : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityElementAccumulation
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilityElementAccumulation : public USBAbilityStatusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityGiveElementAccumulation
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilityGiveElementAccumulation : public USBAbilityStatusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityElementAccumulationTacticalSkillID
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityElementAccumulationTacticalSkillID : public USBAbilityStatusBase
	{
	public:
		ESBAttribute                                               AttributeType;                                           // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SQGJ[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityElementReset
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityElementReset : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityElementStatusReinforce
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class USBAbilityElementStatusReinforce : public USBAbility
	{
	public:
		ESBAttribute                                               AttributeType;                                           // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OJAJ[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAbilityElementStatusReinforceLevelModifySetting> StatusAilmentLevelModifySettingList;                     // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusAilmentHP
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusAilmentHP : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityExtendNegativeStatus
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityExtendNegativeStatus : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityOnlyEnemyStatus
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityOnlyEnemyStatus : public USBAbility
	{
	public:
		ESBAbilityOnlyEnemyStatus                                  StatusType;                                              // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S4IP[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusFlashStun
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusFlashStun : public USBAbilityOnlyEnemyStatus
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEvent
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEvent : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventWhenReceiveDamage
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventWhenReceiveDamage : public USBAbilityEvent
	{
	public:
		void OnEventAction(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* DamageDst);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventRecoverAttackerWhenReceiveDamage
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class USBAbilityEventRecoverAttackerWhenReceiveDamage : public USBAbilityEventWhenReceiveDamage
	{
	public:
		int32_t                                                    AttackID;                                                // 0x0080(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2H9R[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAttackID>                                 ExcludeAttackIDs;                                        // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventWhenServerGiveDamage
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventWhenServerGiveDamage : public USBAbilityEvent
	{
	public:
		void OnEventAction(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* DamageDst);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventAddBattleStatusWhenServerGiveDamage
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class USBAbilityEventAddBattleStatusWhenServerGiveDamage : public USBAbilityEventWhenServerGiveDamage
	{
	public:
		struct FDataTableRowHandle                                 SendBattleStatus;                                        // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventAddSelfBattleStatusWhenServerGiveDamage
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class USBAbilityEventAddSelfBattleStatusWhenServerGiveDamage : public USBAbilityEventWhenServerGiveDamage
	{
	public:
		struct FDataTableRowHandle                                 SendBattleStatus;                                        // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventWhenServerGiveDamageWhenBack
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventWhenServerGiveDamageWhenBack : public USBAbilityEvent
	{
	public:
		void OnEventAction(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* DamageDst);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventAddBattleStatusWhenServerGiveDamageWhenBack
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class USBAbilityEventAddBattleStatusWhenServerGiveDamageWhenBack : public USBAbilityEventWhenServerGiveDamageWhenBack
	{
	public:
		struct FDataTableRowHandle                                 SendBattleStatus;                                        // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventWhenTakeDamageAttackHit
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventWhenTakeDamageAttackHit : public USBAbilityEvent
	{
	public:
		void OnEventAction(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* DamageDst);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventHealStaminaWhenTakeDamageAttackHit
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventHealStaminaWhenTakeDamageAttackHit : public USBAbilityEventWhenTakeDamageAttackHit
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventDrainWhenTakeDamageAttackHit
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityEventDrainWhenTakeDamageAttackHit : public USBAbilityEventWhenTakeDamageAttackHit
	{
	public:
		int32_t                                                    AttackID;                                                // 0x0080(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GX26[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventWhenTakeDamageBeforeCalcDamage
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventWhenTakeDamageBeforeCalcDamage : public USBAbilityEvent
	{
	public:
		void OnEventAction(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* DamageDst, bool bInvincible);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventInvalidAttackWhenReceiveDamage
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventInvalidAttackWhenReceiveDamage : public USBAbilityEventWhenTakeDamageBeforeCalcDamage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventWhenTakeDamageBeforeCalcDamageAttacker
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventWhenTakeDamageBeforeCalcDamageAttacker : public USBAbilityEvent
	{
	public:
		void OnEventAction(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* DamageDst, bool bInvincible);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventForceCriticalWhenGiveDamage
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventForceCriticalWhenGiveDamage : public USBAbilityEventWhenTakeDamageBeforeCalcDamageAttacker
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityEventDarkWhenGiveDamage
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityEventDarkWhenGiveDamage : public USBAbilityEventWhenTakeDamageBeforeCalcDamageAttacker
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityExpiration
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBAbilityExpiration : public UObject
	{
	public:
		class AActor*                                              Owner;                                                   // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AEU3[0x30];                                  // 0x0030(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityExpirationUserAction
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class USBAbilityExpirationUserAction : public USBAbilityExpiration
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityExpirationTimeLimit
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class USBAbilityExpirationTimeLimit : public USBAbilityExpiration
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityExpirationCount
	 * Size -> 0x0008 (FullSize[0x0068] - InheritedSize[0x0060])
	 */
	class USBAbilityExpirationCount : public USBAbilityExpiration
	{
	public:
		unsigned char                                              UnknownData_8470[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityExpirationDotTimeCount
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class USBAbilityExpirationDotTimeCount : public USBAbilityExpirationCount
	{
	public:
		unsigned char                                              UnknownData_3RCK[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityExpirationCountWithTime
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class USBAbilityExpirationCountWithTime : public USBAbilityExpirationCount
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityHealHPRecovery
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityHealHPRecovery : public USBAbilityStatusBase
	{
	public:
		ESBHealRecoveryType                                        HealType;                                                // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5LM8[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityRecoveryHP
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityRecoveryHP : public USBAbility
	{
	public:
		int32_t                                                    AttackID;                                                // 0x0080(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAbilityRecoveryAmountType                               Type;                                                    // 0x0084(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JFR3[0x3];                                   // 0x0085(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityRecoveryHPBelowHPRate
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityRecoveryHPBelowHPRate : public USBAbilityRecoveryHP
	{
	public:
		unsigned char                                              UnknownData_R9B1[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStaminaRecovery
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityStaminaRecovery : public USBAbility
	{
	public:
		ESBAbilityRecoveryAmountType                               Type;                                                    // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4QE1[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusRecovery
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusRecovery : public USBAbility
	{
	public:
		TArray<ESBBattleEffectiveGroup>                            Groups;                                                  // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBAbilityID>                                AbilityIDs;                                              // 0x0090(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityResurrection
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityResurrection : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityLimit
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class USBAbilityLimit : public UObject
	{
	public:
		TMap<ESBAbilityLimitParamType, struct FSBAbilityLimitParam> Params;                                                  // 0x0028(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<ESBAbilityLimitSumParamType, struct FSBAbilityLimitParam> SumParams;                                               // 0x0078(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityOnlyPlayerStatus
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityOnlyPlayerStatus : public USBAbility
	{
	public:
		ESBAbilityOnlyPlayerStatus                                 StatusType;                                              // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RIQU[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityGuardShieldDamageRate
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityGuardShieldDamageRate : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityGuardSpecialGaugeRate
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityGuardSpecialGaugeRate : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityGuardReduceSkillRecastTime
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityGuardReduceSkillRecastTime : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityGuardReduceSpecialSkillRecastTime
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityGuardReduceSpecialSkillRecastTime : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilitySpecialGaugeCharge
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilitySpecialGaugeCharge : public USBAbilityStatusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityLancerMark
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityLancerMark : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityRecoveryShieldDurability
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityRecoveryShieldDurability : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityAddVoltageGauge
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityAddVoltageGauge : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityDotVoltageGaugeUp
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class USBAbilityDotVoltageGaugeUp : public USBAbilityDot
	{
	public:
		bool                                                       IsAddDuringFeverTime;                                    // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IWQO[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityDecreaseBoostCartridgeConsumption
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityDecreaseBoostCartridgeConsumption : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityScapeArmor
	 * Size -> 0x0028 (FullSize[0x00A8] - InheritedSize[0x0080])
	 */
	class USBAbilityScapeArmor : public USBAbility
	{
	public:
		unsigned char                                              UnknownData_0RJM[0x4];                                   // 0x0080(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBDefenceGuardConfig                               DefenceConfig;                                           // 0x0084(0x000C) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBGuardEffectSetting>                       GuardEffectSettingList;                                  // 0x0090(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsRateValue;                                            // 0x00A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H4VV[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilitySkillSkillCoolTime
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class USBAbilitySkillSkillCoolTime : public USBAbilityStatusTimeBase
	{
	public:
		TArray<ESBAbilitySkillPosition>                            SkillActions;                                            // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityTacticalSkillIDSkillCoolTime
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilityTacticalSkillIDSkillCoolTime : public USBAbilityStatusTimeBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilitySkillReduceStaminaByAll
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilitySkillReduceStaminaByAll : public USBAbilityStatusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilitySkillReduceStaminaByAction
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilitySkillReduceStaminaByAction : public USBAbilityStatusBase
	{
	public:
		ESBAbilityReduceStaminaType                                SkillAction;                                             // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4TMC[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilitySkillButtonChargeTime
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilitySkillButtonChargeTime : public USBAbilityStatusTimeBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilitySkillRecoveryCoolTime
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class USBAbilitySkillRecoveryCoolTime : public USBAbility
	{
	public:
		TArray<ESBAbilitySkillPosition>                            ActionTypes;                                             // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		ESBAbilityValueShortAndExten                               ValueType;                                               // 0x0090(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAbilityRecoveryAmountType                               AmountType;                                              // 0x0091(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ILST[0x6];                                   // 0x0092(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusInvincible
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusInvincible : public USBAbility
	{
	public:
		ESBInvincibleLevel                                         Level;                                                   // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_88V9[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusSuperArmor
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusSuperArmor : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusStun
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusStun : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusPoison
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusPoison : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusFreeze
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusFreeze : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusSleep
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusSleep : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusFear
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusFear : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusParalyze
	 * Size -> 0x0008 (FullSize[0x0088] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusParalyze : public USBAbility
	{
	public:
		unsigned char                                              UnknownData_LO4B[0x8];                                   // 0x0080(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusRestraint
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusRestraint : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusFixTarget
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusFixTarget : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilitySuccessRateControlBadCondition
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilitySuccessRateControlBadCondition : public USBAbilityStatusBase
	{
	public:
		ESBAbilityControlBadCondition                              BadConditionType;                                        // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NRS2[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityResistBadCondition
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityResistBadCondition : public USBAbilityStatusBase
	{
	public:
		ESBBattleStatusResistType                                  BadConditionType;                                        // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YZBU[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityInvalidStatus
	 * Size -> 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
	 */
	class USBAbilityInvalidStatus : public USBAbility
	{
	public:
		TArray<struct FSBAbilityID>                                AbilityIDList;                                           // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<ESBBattleEffectiveGroup>                            GroupList;                                               // 0x0090(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityPointGravity
	 * Size -> 0x0038 (FullSize[0x00B8] - InheritedSize[0x0080])
	 */
	class USBAbilityPointGravity : public USBAbility
	{
	public:
		TArray<class UCurveFloat*>                                 CurveValues;                                             // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UCurveFloat*                                         ResistAbsorbCurve;                                       // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PEXT[0x18];                                  // 0x0098(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUpdateGravityPointForCauserLocation;                    // 0x00B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LZWR[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusTaunted
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusTaunted : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityHateCalcMagnification
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilityHateCalcMagnification : public USBAbilityStatusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusFixHate
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityStatusFixHate : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityGutsSelfDamage
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityGutsSelfDamage : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityGutsOtherDamage
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USBAbilityGutsOtherDamage : public USBAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityBaseStatusBoost
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityBaseStatusBoost : public USBAbilityStatusBase
	{
	public:
		ESBBaseStatusBoostType                                     BaseStatusType;                                          // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3QM5[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityBaseStatusRateBoost
	 * Size -> 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
	 */
	class USBAbilityBaseStatusRateBoost : public USBAbilityBaseStatusBoost
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityCharacterStatus
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityCharacterStatus : public USBAbilityStatusBase
	{
	public:
		ESBAbilityCharacterStatusType                              StatusType;                                              // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QNIR[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusGiveDamage
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusGiveDamage : public USBAbilityStatusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusReceiveDamage
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusReceiveDamage : public USBAbilityStatusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusSkillActionGiveDamage
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusSkillActionGiveDamage : public USBAbilityStatusBase
	{
	public:
		TArray<ESBAbilitySkillPosition>                            SkillTypes;                                              // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusDamageAttackTypeGiveDamage
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusDamageAttackTypeGiveDamage : public USBAbilityStatusBase
	{
	public:
		ESBDamageAttackType                                        AttackType;                                              // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7FPW[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusDamageAttackTypeReceiveDamage
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusDamageAttackTypeReceiveDamage : public USBAbilityStatusBase
	{
	public:
		ESBDamageAttackType                                        AttackType;                                              // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HPHW[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusElementReceiveDamage
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusElementReceiveDamage : public USBAbilityStatusBase
	{
	public:
		ESBAttribute                                               Attribute;                                               // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BHC6[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusBattleImagineElementReceiveDamage
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusBattleImagineElementReceiveDamage : public USBAbilityStatusBase
	{
	public:
		ESBAttribute                                               Attribute;                                               // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FBSU[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusRaceGiveDamage
	 * Size -> 0x0008 (FullSize[0x0090] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusRaceGiveDamage : public USBAbilityStatusBase
	{
	public:
		ESBEnemyRaceType                                           RaceType;                                                // 0x0088(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UAMX[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusAttributeGiveDamage
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusAttributeGiveDamage : public USBAbilityStatusBase
	{
	public:
		TArray<ESBAbilityEnemyAttributeType>                       AttributeTypes;                                          // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusEnemyIDGiveDamage
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusEnemyIDGiveDamage : public USBAbilityStatusBase
	{
	public:
		TArray<class FString>                                      EnemyIDs;                                                // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusDungeonIDGiveDamage
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusDungeonIDGiveDamage : public USBAbilityStatusBase
	{
	public:
		TArray<class FString>                                      DungeonIds;                                              // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityStatusTacticalSkillIDGiveDamage
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAbilityStatusTacticalSkillIDGiveDamage : public USBAbilityStatusBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityTask_EnemyWaitGameplayEvent
	 * Size -> 0x0030 (FullSize[0x00B0] - InheritedSize[0x0080])
	 */
	class USBAbilityTask_EnemyWaitGameplayEvent : public UAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             EventReceived;                                           // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0J6O[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilitySystemComponent*                             OptionalExternalTarget;                                  // 0x0098(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B7FK[0x10];                                  // 0x00A0(0x0010) MISSED OFFSET (PADDING)

	public:
		class USBAbilityTask_EnemyWaitGameplayEvent* CreateSBEnemyWaitGameplayEventProxy(class UGameplayAbility* OwningAbility, const struct FGameplayTag& EventTag, class AActor* OptionalExternalTarget, bool OnlyTriggerOnce, bool OnlyMatchExact);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityTask_EnemyPlayAnimationAndWait
	 * Size -> 0x0038 (FullSize[0x00B8] - InheritedSize[0x0080])
	 */
	class USBAbilityTask_EnemyPlayAnimationAndWait : public UAbilityTask
	{
	public:
		class FScriptMulticastDelegate                             OnCompleted;                                             // 0x0080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefused;                                               // 0x0090(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCancelled;                                             // 0x00A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DR1A[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (PADDING)

	public:
		class USBAbilityTask_EnemyPlayAnimationAndWait* CreatePlayAnimationAndWaitProxy(class UGameplayAbility* OwningAbility);
		void AnimationWaitSimpleDelegate__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAchievementBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAchievementBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SortAchievementMasterDatasBySortId(TArray<struct FAchievementMasterData>* InAchievementMasterDatas);
		void SortAchievementList(TArray<struct FAchievementMasterData>* InAchievementMasterDatas, ESBAchievementSortType SortType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActivatedDungeonList
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBActivatedDungeonList : public UObject
	{
	public:
		unsigned char                                              UnknownData_0PMF[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		bool IsReady();
		TArray<struct FSBMissionListInfo> GetActivatedDungeonList();
		void Clear();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActivityBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBActivityBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SendLogout(class UObject* WorldContextObject);
		ESBActivityCategory GetCategory(ESBActivityType InType);
		bool ConvertToText(class UObject* WorldContextObject, class FText* OutText, const struct FSBActivityData& InData, const class FString& InAuthorName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorManagerActor
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBActorManagerActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorManager
	 * Size -> 0x0198 (FullSize[0x01C0] - InheritedSize[0x0028])
	 */
	class USBActorManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_WKZT[0x190];                                 // 0x0028(0x0190) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBActorManagerActor*                                m_ActorManagerActor;                                     // 0x01B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization

	public:
		void RemoveActor(class AActor* Actor);
		int32_t GetTargetableProjectileNum();
		class ASBProjectileBase* GetTargetableProjectile(int32_t Index);
		int32_t GetPlayerNum();
		class ASBPlayerCharacter* GetPlayer(int32_t Index);
		int32_t GetEnemyNum();
		class ASBEnemyCharacter* GetEnemyForID(const class FString& EnemyId);
		class ASBEnemyCharacter* GetEnemy(int32_t Index);
		class ASBPlayerCharacter* FindPlayerFromCharacterId(const class FString& CharacterId);
		void AddActor(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorParallelTickInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBActorParallelTickInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorPool
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBActorPool : public UObject
	{
	public:
		unsigned char                                              UnknownData_MWNN[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorPoolManager
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USBActorPoolManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_EEWR[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorRelationRendererComponent
	 * Size -> 0x0018 (FullSize[0x0480] - InheritedSize[0x0468])
	 */
	class USBActorRelationRendererComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_H8OK[0x8];                                   // 0x0468(0x0008) Fix Super Size
		unsigned char                                              UnknownData_XPP0[0x10];                                  // 0x0470(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorTransparentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBActorTransparentInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorVisibilityComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBActorVisibilityComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_3534[0x38];                                  // 0x00B8(0x0038) MISSED OFFSET (PADDING)

	public:
		void SetActorHiddenType(ESBActorHiddenType HiddenType, bool bIsHidden);
		bool BP_IsActorHidden(ESBActorHiddenType HiddenType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorVisibilityInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBActorVisibilityInterface : public UInterface
	{
	public:
		class USBActorVisibilityComponent* GetActorVisibilityComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActorVisibilityFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBActorVisibilityFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetHiddenCheck_OrnamentManage(class UObject* WorldContextObject, bool bIsHidden);
		void SetHiddenCheck_FishingMode(class UObject* WorldContextObject, bool bIsHidden);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAdditionalColorManager
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBAdditionalColorManager : public UObject
	{
	public:
		struct FLinearColor                                        IgnitionColor;                                           // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        FreezeColor;                                             // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        ShockColor;                                              // 0x0048(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAdminGotoBookmarkItem
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBAdminGotoBookmarkItem : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnUpdate;                                                // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDataChanged;                                           // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bSelected;                                               // 0x0048(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MTZW[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Index;                                                   // 0x004C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              MapId;                                                   // 0x0050(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              MapName;                                                 // 0x0060(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Description;                                             // 0x0070(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             Position;                                                // 0x0080(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XUPB[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetSelected(bool bValue);
		void SetPosition(const struct FVector& Value);
		void SetMapId(const class FString& Value);
		void SetDescription(const class FString& Value);
		void SetData(const class FString& InMapId, const class FString& InDescription, const struct FVector& InPosition);
		void OnUpdateDelegate__DelegateSignature(class USBAdminGotoBookmarkItem* Sender);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAdminReciever
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBAdminReciever : public UObject
	{
	public:
		unsigned char                                              UnknownData_7UKE[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAdventureBoard
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBAdventureBoard : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_LKY9[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateBoardParam(const struct FSBAdventureBoardParam& InBoard);
		void UpdateBoardPanel(int32_t InBoardId, const struct FSBAdventureBoardPanelParam& InPanel);
		void UpdateBoard(const struct FSBAdventureBoardParam& InBoard);
		void Sort();
		void SetBoardParamList(TArray<struct FSBAdventureBoardParam> InBoardParamList, bool IsSort);
		void Init();
		bool GetDebugIDDraw();
		bool GetBoardPanelMastaData(struct FSBAdventureBoardPanelParamMasterData* OutMasterData, int32_t InBoardId, int32_t InPanelId);
		bool GetBoardMastaData(struct FSBAdventureBoardParamMasterData* OutMasterData, int32_t InBoardId);
		void GetBoardList_Filting(class UObject* WorldContextObject, TArray<struct FSBAdventureBoardParam>* OutList, TArray<struct FFilterGroup> Filters, bool IsLimited, bool IsAllRewardGet);
		void GetBoardList(TArray<struct FSBAdventureBoardParam>* OutList);
		void GetBoard(int32_t BoardId, struct FSBAdventureBoardParam* OutBoard);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAdventureBoardManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBAdventureBoardManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_633W[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAdventureBoardFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAdventureBoardFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetNewClearPanelBP(const struct FSBAdventureBoardParam& InBoardData, struct FSBAdventureBoardParam* OutBoardData);
		void MargeBoardPanelParam(const struct FSBAdventureBoardParam& InSrcBoardData, TArray<struct FSBAdventureBoardPanelParam> InDstBoardPanelList, struct FSBAdventureBoardParam* OutBoardData);
		bool IsUpdateAdventureBoardPanel(class UObject* InWorldContextObject, ESBAdventureBoardType InType, ESBAdventureBoardRewardStatusType InRewardStatus);
		bool IsUpdateAdventureBoard(class UObject* InWorldContextObject, ESBAdventureBoardRewardStatusType InRewardStatus);
		bool IsUpdate(const struct FSBAdventureBoardParam& InBoardParam);
		bool IsTimeLimit(int32_t InBoardId);
		bool IsStart(int32_t InBoardId, int32_t InPanelId);
		bool IsRankBoard(int32_t InBoardId);
		bool IsNewAdventureBoard_BoardType(class UObject* InWorldContextObject, ESBAdventureBoardType InType, ESBAdventureBoardRewardStatusType InRewardStatus);
		bool IsNewAdventureBoard(class UObject* InWorldContextObject);
		bool IsGoalByMasterData(const struct FSBAdventureBoardPanelParamMasterData& InMaster);
		bool IsGoalAter(const struct FSBAdventureBoardParam& InBoardParam);
		bool IsGoal(int32_t InBoardId, int32_t InPanelId);
		bool IsFree(int32_t InBoardId, int32_t InPanelId);
		bool IsEnableVersion(int32_t InBoardId);
		bool IsEmphasis(int32_t InBoardId, int32_t InPanelId);
		bool IsCompleteRewardInGashaTicket(int32_t InBoardId);
		bool IsBoardComplete(const struct FSBAdventureBoardParam& InBoardParam);
		bool IsBoardActive(TArray<struct FSBAdventureBoardParam> InList);
		int32_t GetVersionNumber(const class FString& InVersionId);
		int32_t GetStartPanelId(const struct FSBAdventureBoardParam& InBoardData);
		bool GetRewardTermString(class UObject* WorldContextObject, int32_t InBoardId, class FString* TermDate);
		bool GetRewardTerm(class UObject* WorldContextObject, int32_t InBoardId, struct FDateTime* OutTermDate);
		int32_t GetRemainingRewardCount(const struct FSBAdventureBoardParam& InBoardParam);
		void GetRankupAdventureBoardIdList(TArray<int32_t> InBoardIdList, TArray<int32_t>* OutRankupBoardIdList, TArray<int32_t>* OutOtherBoardIdList);
		bool GetProjectVersion(class FString* OutProjectVersion);
		int32_t GetProgressCount(const struct FSBAdventureBoardPanelParam& InPanelParam, const struct FSBAdventureBoardMissionParamMasterData& InMissionMaster, const struct FSBAdventureBoardPanelParamMasterData& InPanelMaster);
		struct FVector2D GetPanelUIPosByMasterData(const struct FSBAdventureBoardPanelParamMasterData& InMaster);
		bool GetPanelUIPos(class UObject* WorldContextObject, int32_t InBoardId, int32_t InPabelId, struct FVector2D* OutUIPos);
		int32_t GetPanelCount(const struct FSBAdventureBoardParam& InBoardParam);
		int32_t GetPanelClearCount(const struct FSBAdventureBoardParam& InBoardParam);
		TArray<int32_t> GetNextPanelIdListByMasterData(const struct FSBAdventureBoardPanelParamMasterData& InMaster);
		bool GetNextPanelIdList(class UObject* WorldContextObject, int32_t InBoardId, int32_t InPabelId, TArray<int32_t>* OutPanelId);
		void GetNewOpenStartPanelBP(const struct FSBAdventureBoardParam& InBoardData, TArray<int32_t>* OutStartPaneIdList);
		bool GetMissionTermString(class UObject* WorldContextObject, int32_t InBoardId, class FString* TermDate);
		bool GetMissionTerm(class UObject* WorldContextObject, int32_t InBoardId, struct FDateTime* OutTermDate);
		bool GetMissionParamMaster(int32_t InBoardId, int32_t InPanelId, struct FSBAdventureBoardMissionParamMasterData* OutMissionParam);
		void GetConnectPanel(const struct FSBAdventureBoardParam& InBoardData, int32_t InPanelId, TArray<int32_t>* OutConnectPanelIdList, bool CheckRoute);
		int32_t GetCompleteCount(const struct FSBAdventureBoardPanelParam& InPanelParam, const struct FSBAdventureBoardMissionParamMasterData& InMissionMaster, const struct FSBAdventureBoardPanelParamMasterData& InPanelMaster);
		ESBAdventureBoardType GetBoardTypeByMasterData(const struct FSBAdventureBoardParamMasterData& InMaster);
		ESBAdventureBoardType GetBoardType(class UObject* WorldContextObject, int32_t InBoardId);
		void GetBoardPanelReward_MailData(int32_t InBoardId, int32_t InPanelId, TArray<struct FSBMailData>* OutMailData);
		bool GetBoardPanelMaster(class UObject* WorldContextObject, int32_t InBoardId, int32_t InPanelId, struct FSBAdventureBoardPanelParamMasterData* OutPanelMaster);
		bool GetBoardMaster(class UObject* WorldContextObject, int32_t InBoardId, struct FSBAdventureBoardParamMasterData* OutPanelMaster);
		class FName GetBoardIconIdByMasterData(const struct FSBAdventureBoardParamMasterData& InMaster);
		class FName GetBoardIconId(class UObject* WorldContextObject, int32_t InBoardId);
		void GetBoardCompleteReward_MailData(int32_t InBoardId, TArray<struct FSBMailData>* OutMailData);
		int32_t GetAdventureRank(int32_t InBoardId);
		class FString GetAdventureBoardStoryString(int32_t InBoardId);
		int32_t GetAdventureBoardMissionTypeByMasterData(const struct FSBAdventureBoardMissionParamMasterData& InMaster);
		int32_t GetAdventureBoardMissionType(const class FString& InMissionId);
		class FString GetAdventureBoardMissionCoundStringByMasterData(const struct FSBAdventureBoardMissionParamMasterData& MasterData);
		class FString GetAdventureBoardMissionCoundString(const class FString& InMissionId);
		class FString GetAdventureBoardBoardNameDirect(const struct FSBTextTableHash& InNameId);
		class FString GetAdventureBoardBoardNameByMasterData(const struct FSBAdventureBoardParamMasterData& InMaster);
		class FString GetAdventureBoardBoardName(int32_t InBoardId);
		int32_t GetActiveBoardMax();
		int32_t GetActiveBoardCount(TArray<struct FSBAdventureBoardParam> InList);
		bool AdventureBoard_IsGetBoardCompleteReward(const struct FSBAdventureBoardParam& InBoard);
		bool AdventureBoard_CheckRewardAdventureBoard(TArray<class FString> InRewardIdList);
		bool AdventureBoard_CheckMailRewardAdventureBoard(const struct FSBMailRewardData& InRewardData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAestheShopComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBAestheShopComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnLoadAppearanceInfoDelegate;                            // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveAppearanceInfoDelegate;                            // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUploadAppearanceInfoDelegate;                          // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDownloadCharaCreateParamDelegate;                      // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCheckAestheShopStatus;                                 // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		bool Request_UploadAppearanceInfo(const class FString& InCharacterId, ESBClassType InClassType, const struct FSBCharaCreateParameter& InCharaCreateParam, const struct FSBCharaCreateParameter& InDefaultCharaCreateParam, const struct FSBCharaCreatePartsIconIdData& InCharaCreatePartsIconIdData, bool IsCharacterGenderChanged, int32_t InCourseId, int32_t InTicketConsumeAmount);
		bool Request_SaveAppearanceInfo(const class FString& InCharacterId, const struct FSBAestheShopAppearanceInfo& InAppearanceInfo);
		bool Request_LoadAppearanceInfo(const class FString& InCharacterId);
		bool Request_DownloadCharaCreateParam(const class FString& InCharacterId);
		void Request_CheckAestheShopStatus(class ASBPlayerController* PlayerController, int32_t InTicketTokenId);
		void OnUploadAppearanceInfoDelegate__DelegateSignature(bool Result, int32_t RetCode);
		void OnSaveAppearanceInfoDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FSBAestheShopAppearanceInfo> AppearanceInfos);
		void OnLoadAppearanceInfoDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FSBAestheShopAppearanceInfo> AppearanceInfos);
		void OnDownloadCharaCreateParamDelegate__DelegateSignature(bool Result, int32_t RetCode, const struct FSBCharaCreateParameter& CharaCreateParam);
		void MakeCharaParamRestrictionMasterDataParamValueList(const struct FSBAestheShopCharaParamRestrictionMasterData& InData, TArray<float>* OutParamValueList);
		float CorrectValueToCharaParamRestrictionMasterDataPatternListValue(const struct FSBAestheShopCharaParamRestrictionMasterData& InData, float InValue);
		bool CheckIfValueIsInCharaParamRestrictionMasterDataPatternList(const struct FSBAestheShopCharaParamRestrictionMasterData& InData, int32_t InValue);
		bool CheckIfValueIsInCharaParamRestrictionMasterDataParamMinAndMaxRangeInt(const struct FSBAestheShopCharaParamRestrictionMasterData& InData, int32_t InValue);
		bool CheckIfValueIsInCharaParamRestrictionMasterDataParamMinAndMaxRangeFloat(const struct FSBAestheShopCharaParamRestrictionMasterData& InData, float InValue);
		bool CheckIfCharaCreateParameterMakeupIsEdited(const struct FSBCharaCreateParameter& InBaseParam, const struct FSBCharaCreateParameter& InTargetParam);
		bool CheckIfCharaCreateParameterIsEdited(const struct FSBCharaCreateParameter& InBaseParam, const struct FSBCharaCreateParameter& InTargetParam);
		bool CheckIfCharaCreateParameterHairIsEdited(const struct FSBCharaCreateParameter& InBaseParam, const struct FSBCharaCreateParameter& InTargetParam);
		bool CheckIfCharaCreateParameterAppearanceIsEdited(const struct FSBCharaCreateParameter& InBaseParam, const struct FSBCharaCreateParameter& InTargetParam, bool InIgnoreHair, bool InIgnoreMakeup);
		void CheckAestheShopStatus__DelegateSignature(int32_t RetCode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIAttackHitComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBAIAttackHitComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_QSS6[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIComboComponent
	 * Size -> 0x0028 (FullSize[0x00E0] - InheritedSize[0x00B8])
	 */
	class USBAIComboComponent : public UActorComponent
	{
	public:
		class USCTGraph*                                           SkillTreeGraph;                                          // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIComboTree*                                      ComboTree;                                               // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7SQC[0x18];                                  // 0x00C8(0x0018) MISSED OFFSET (PADDING)

	public:
		void Initialize(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIComboTree
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBAIComboTree : public UObject
	{
	public:
		unsigned char                                              UnknownData_SBKK[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAICommand
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBAICommand : public UDataAsset
	{
	public:
		class FString                                              Command;                                                 // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      TacticalSkills;                                          // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAICommanderComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBAICommanderComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_6K2H[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAICommanderInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAICommanderInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIEnemyActionLotteryRule
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAIEnemyActionLotteryRule : public UDataAsset
	{
	public:
		bool                                                       bInvertResult;                                           // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X9QE[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIEnemyActionLotteryRule_OnAnchor
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAIEnemyActionLotteryRule_OnAnchor : public USBAIEnemyActionLotteryRule
	{
	public:
		int32_t                                                    LocationAnchorID;                                        // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Radius;                                                  // 0x003C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIEnemyActionOrderList
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class USBAIEnemyActionOrderList : public UObject
	{
	public:
		unsigned char                                              UnknownData_UX74[0x58];                                  // 0x0028(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIControllerBase
	 * Size -> 0x0008 (FullSize[0x0338] - InheritedSize[0x0330])
	 */
	class ASBAIControllerBase : public AAIController
	{
	public:
		class USBAILookAtControlComponent*                         LookAtControlComponent;                                  // 0x0330(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIController_Enemy
	 * Size -> 0x0408 (FullSize[0x0740] - InheritedSize[0x0338])
	 */
	class ASBAIController_Enemy : public ASBAIControllerBase
	{
	public:
		unsigned char                                              UnknownData_UX3L[0x8];                                   // 0x0338(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAIFwBlackboardComponent*                            AIFwBlackboardComponent;                                 // 0x0340(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIPerceptionComponent*                            SBAIPerceptionComponent;                                 // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwHTNPlanningComponent*                           HTNPlanningComponent;                                    // 0x0350(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBUtilityBrainComponent*                            UtilityBrainComponent;                                   // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAITacticalComponent*                              TacticalComponent;                                       // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwReactiveComponent*                              ReactiveComponent;                                       // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyEmotionComponent*                            EmotionComponent;                                        // 0x0370(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBSquadMemberComponent*                             SquadMemberComponent;                                    // 0x0378(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIRoleComponent*                                  RoleComponent;                                           // 0x0380(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIComboComponent*                                 ComboComponent;                                          // 0x0388(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAICustomComponent*                                AICustomComponent;                                       // 0x0390(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBHateManagementComponent*                          HateManagementComponent;                                 // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIAttackHitComponent*                             AttackHitComponent;                                      // 0x03A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAIFwParameterizedBTRequest                         TargetingQuery;                                          // 0x03A8(0x0018) Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnSensedActorDelegate;                                   // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnLostActorDelegate;                                     // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class USBAISkillAssets_TacticalSkill*                      TacticalSkillAssetTable;                                 // 0x03E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAISkillAssets_ReactiveSkill*                      ReactiveSkillAssetTable;                                 // 0x03E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UDataTable*>                                  TacticalSkillTables;                                     // 0x03F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UDataTable*>                                  ReactiveSkillTables;                                     // 0x0400(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UDataTable*>                                  ComboTables;                                             // 0x0410(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              GroundNavigationFilterClass;                             // 0x0420(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              TidalAreaNavigationFilterClass;                          // 0x0428(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UDNX[0xF0];                                  // 0x0430(0x00F0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EncounterSignalRange;                                    // 0x0520(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EncounterSignalRange_Dungeon;                            // 0x0524(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NormalFlyingHeight;                                      // 0x0528(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NormalFlyingHeightTolerance;                             // 0x052C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BattleFlyingHeight;                                      // 0x0530(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BattleFlyingHeightTolerance;                             // 0x0534(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TBG4[0x10];                                  // 0x0538(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              TargetActorCache;                                        // 0x0548(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              FixedTarget;                                             // 0x0550(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBCharacter*                                        OrderSource;                                             // 0x0558(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              OrderedTarget;                                           // 0x0560(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z5H4[0x8];                                   // 0x0568(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBAIFlyingMoveDestination*                          FlyingMoveDest;                                          // 0x0570(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuddyFollowingSpringStiffness;                           // 0x0578(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuddyFollowingDampingConstant;                           // 0x057C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBAIFollowTargetActor*                              BuddyFollowingActor;                                     // 0x0580(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APawn*                                               MasterPawnCache;                                         // 0x0588(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0M6V[0x158];                                 // 0x0590(0x0158) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          ActionLotteryTable;                                      // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNoAttackRequestRequired;                                // 0x06F0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M095[0x7];                                   // 0x06F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FActionLotteryTableSpecified>                ActionLotteryTableSpecifiedList;                         // 0x06F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      ActionLotteryStallDuration;                              // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MoveToAttackTimeout;                                     // 0x070C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIEnemyActionOrderList*                           ActionOrderList;                                         // 0x0710(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_99Q5[0x28];                                  // 0x0718(0x0028) MISSED OFFSET (PADDING)

	public:
		void TakeStimulation();
		bool SetTidalAreaNaigationFilterClass();
		bool SetGroundNaigationFilterClass();
		void SetDefaultTerritoryRange(float Range);
		void SetActionArea(ESBAIActionAreaType AreaType, const struct FVector& Origin, float Radius);
		void OnCharacterDeadForActionLotteryModifier(class AActor* Actor);
		void OnCharacterDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		bool IsInCurrentActionArea(const struct FVector& Location);
		class AActor* GetTargetActor();
		float GetDefaultTerritoryRange();
		void DisableActionArea(ESBAIActionAreaType AreaType);
		ESBAICanAttackResult CanAttackTargetSimple(bool bAllowTurn, bool bAllowMove);
		void AbortCurrentPlan();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIController_Imagine
	 * Size -> 0x0008 (FullSize[0x0340] - InheritedSize[0x0338])
	 */
	class ASBAIController_Imagine : public ASBAIControllerBase
	{
	public:
		class UAIFwBlackboardComponent*                            AIFwBlackboardComponent;                                 // 0x0338(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIController_Npc
	 * Size -> 0x0018 (FullSize[0x0350] - InheritedSize[0x0338])
	 */
	class ASBAIController_Npc : public ASBAIControllerBase
	{
	public:
		class USBUtilityBrainComponent*                            UtilityBrainComponent;                                   // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwBlackboardComponent*                            AIFwBlackboardComponent;                                 // 0x0340(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HPVO[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		bool RemoveTalkOption();
		void AddTalkOption(class USBUtilityOption* InOption);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIControllerBot
	 * Size -> 0x0028 (FullSize[0x0358] - InheritedSize[0x0330])
	 */
	class ASBAIControllerBot : public AAIController
	{
	public:
		class UAIFwBlackboardComponent*                            AIFwBlackboardComponent;                                 // 0x0330(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwPerceptionComponent*                            AIFwPerceptionComponent;                                 // 0x0338(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceToAllowDash;                                     // 0x0340(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceToStartBraking;                                  // 0x0344(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceToWalk;                                          // 0x0348(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FK83[0x4];                                   // 0x034C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               MasterPawn;                                              // 0x0350(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAICustom_Base
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USBAICustom_Base : public UObject
	{
	public:
		ESBAICustomPriority                                        Priority;                                                // 0x0028(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A81X[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      EnableSkills;                                            // 0x0030(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      DisableSkills;                                           // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class FName>                                        ActivateTags;                                            // 0x0050(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        DeactivateTags;                                          // 0x0060(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              NewRoleClass;                                            // 0x0070(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAICustom_BlueprintBase
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class USBAICustom_BlueprintBase : public USBAICustom_Base
	{
	public:
		void ReceiveTick(float DeltaTime, class USBAICustomComponent* OwnerComp, class ASBAIController_Enemy* Controller);
		void ReceiveDeactivate(class USBAICustomComponent* OwnerComp, class ASBAIController_Enemy* Controller);
		void ReceiveActivate(class USBAICustomComponent* OwnerComp, class ASBAIController_Enemy* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAICustomComponent
	 * Size -> 0x00A0 (FullSize[0x0158] - InheritedSize[0x00B8])
	 */
	class USBAICustomComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_TFY9[0x68];                                  // 0x00B8(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      DefaultCustomClasses;                                    // 0x0120(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      IgnoreResetCustomClasses;                                // 0x0130(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class USBAICustom_Base*>                            CustomArray;                                             // 0x0140(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5FQ7[0x8];                                   // 0x0150(0x0008) MISSED OFFSET (PADDING)

	public:
		void RemoveCustomization(class UClass* CustomClass);
		void AddCustomization(class UClass* CustomClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIDirector
	 * Size -> 0x0048 (FullSize[0x0280] - InheritedSize[0x0238])
	 */
	class ASBAIDirector : public AAIFwAIDirector
	{
	public:
		class USBAIWorldProfilerComponent*                         WorldProfilerComponent;                                  // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              RootCoordinatorClass;                                    // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBRootCoordinator*                                  RootCoordinator;                                         // 0x0248(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              EnemySpawnerClass;                                       // 0x0250(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBEnemySpawner*                                     EnemySpawner;                                            // 0x0258(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              NpcSpawnerClass;                                         // 0x0260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBNpcSpawner*                                       NpcSpawner;                                              // 0x0268(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnActorDeadDelegete;                                     // 0x0270(0x0010) ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic

	public:
		void RunSpawnTreeWithEncounterVolume(class UObject* WorldContextObject, class ASBEncounterVolume* EncounterVolume);
		void OnActorDeadDelegete__DelegateSignature(class AActor* Actor);
		void OnActorDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIEmotionComponent
	 * Size -> 0x0078 (FullSize[0x0130] - InheritedSize[0x00B8])
	 */
	class USBAIEmotionComponent : public UActorComponent
	{
	public:
		class AAIController*                                       AIOwner;                                                 // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QAE9[0x70];                                  // 0x00C0(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIEnemyActionLotteryRule_TurnTowardsAnchor
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAIEnemyActionLotteryRule_TurnTowardsAnchor : public USBAIEnemyActionLotteryRule
	{
	public:
		int32_t                                                    LocationAnchorID;                                        // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DSWY[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIFlyingMoveDestination
	 * Size -> 0x0000 (FullSize[0x0250] - InheritedSize[0x0250])
	 */
	class ASBAIFlyingMoveDestination : public ANavigationObjectBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIFollowTargetActor
	 * Size -> 0x0048 (FullSize[0x0298] - InheritedSize[0x0250])
	 */
	class ASBAIFollowTargetActor : public ANavigationObjectBase
	{
	public:
		class AActor*                                              BaseActor;                                               // 0x0250(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UZW5[0x40];                                  // 0x0258(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIGroup
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBAIGroup : public AActor
	{
	public:
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwHierarchyComponent*                             HierarchyComponent;                                      // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AController*                                         Leader;                                                  // 0x0238(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIHierarchyComponent
	 * Size -> 0x0028 (FullSize[0x00F8] - InheritedSize[0x00D0])
	 */
	class USBAIHierarchyComponent : public UAIFwHierarchyComponent
	{
	public:
		unsigned char                                              UnknownData_FNYO[0x28];                                  // 0x00D0(0x0028) MISSED OFFSET (PADDING)

	public:
		void CancelOrder(bool bForce);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAilmentRespawnPoint
	 * Size -> 0x0008 (FullSize[0x0258] - InheritedSize[0x0250])
	 */
	class ASBAilmentRespawnPoint : public ANavigationObjectBase
	{
	public:
		class FName                                                PlayerStartTag;                                          // 0x0250(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAILookAtControlComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBAILookAtControlComponent : public UActorComponent
	{
	public:
		class AAIController*                                       AIOwner;                                                 // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAnimationControlComponent*                        AnimControlComp;                                         // 0x00C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BA8O[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              LookAtActor;                                             // 0x00D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JKI1[0x10];                                  // 0x00D8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAimCamera
	 * Size -> 0x0040 (FullSize[0x0A20] - InheritedSize[0x09E0])
	 */
	class ASBAimCamera : public ACameraActor
	{
	public:
		unsigned char                                              UnknownData_1GXE[0x40];                                  // 0x09E0(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIMessageDispatchingComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBAIMessageDispatchingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_RF6V[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIPerceptionComponent
	 * Size -> 0x0050 (FullSize[0x0130] - InheritedSize[0x00E0])
	 */
	class USBAIPerceptionComponent : public UAIFwPerceptionComponent
	{
	public:
		class USBEnemySenserSetting*                               SenserSetting;                                           // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FAIFwParameterizedBTRequest>                 NonActiveSensers;                                        // 0x00E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KJ7M[0x38];                                  // 0x00F8(0x0038) MISSED OFFSET (PADDING)

	public:
		void SetSensorSetting(class USBEnemySenserSetting* Setting);
		void RemoveEnabledSenseTag(const class FString& Tag);
		void RemoveDisabledSenseTag(const class FString& Tag);
		void AddEnabledSenseTag(const class FString& Tag);
		void AddDisabledSenseTag(const class FString& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIPlayerMonitor
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBAIPlayerMonitor : public AActor
	{
	public:
		class USBSquadMemberComponent*                             SquadMemberComponent;                                    // 0x0228(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBPlayerCharacter*                                  PlayerCharacter;                                         // 0x0230(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnPlayerDestroyed(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIQueryManager
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class USBAIQueryManager : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_KCXY[0x18];                                  // 0x0030(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIReactiveSkill_TakeDamage
	 * Size -> 0x0010 (FullSize[0x0098] - InheritedSize[0x0088])
	 */
	class USBAIReactiveSkill_TakeDamage : public UAIFwReactiveSkill_TakeDamage
	{
	public:
		unsigned char                                              UnknownData_NQVF[0x10];                                  // 0x0088(0x0010) MISSED OFFSET (PADDING)

	public:
		void TakeAnyDamageWithDamageEventImpl(class ASBEnemyCharacter* DamagedActor, float Damage, const struct FSBDamageEvent& DamageEvent, class AController* InstigatedBy, class AActor* DamageCauser);
		void ReceiveCharacterTakeDamage(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser);
		void ReceiveAnyDamageWithDamageEvent(float Damage, const struct FSBEnemyDamageEventInfo& DamageEventInfo, class AController* InstigatedBy, class AActor* DamageCauser);
		void CharacterTakeDamageImpl(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIReactiveSkill_Counter
	 * Size -> 0x0040 (FullSize[0x00D8] - InheritedSize[0x0098])
	 */
	class USBAIReactiveSkill_Counter : public USBAIReactiveSkill_TakeDamage
	{
	public:
		class FName                                                Command;                                                 // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseManualAreaSettings : 1;                              // 0x00A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H98P[0x3];                                   // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBAIAttackableArea                                 AttackableArea;                                          // 0x00A4(0x0024) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              Priority;                                                // 0x00C8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIncludeZeroDamage : 1;                                  // 0x00C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I5QZ[0x2];                                   // 0x00CA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBAIReactiveSkill_GuardState                              GuardStateBeforeAttack;                                  // 0x00CC(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OKE7[0x3];                                   // 0x00CD(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class APawn*                                               OwnerPawn;                                               // 0x00D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIReactiveSkill_GuardCounter
	 * Size -> 0x0008 (FullSize[0x00E0] - InheritedSize[0x00D8])
	 */
	class USBAIReactiveSkill_GuardCounter : public USBAIReactiveSkill_Counter
	{
	public:
		class USBAITacticalSkill_GuardCounter*                     OwnerTacticalSkill;                                      // 0x00D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIReactiveSkill_PerceiveAttack
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class USBAIReactiveSkill_PerceiveAttack : public UAIFwReactiveSkill
	{
	public:
		unsigned char                                              UnknownData_JV7I[0x14];                                  // 0x0068(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPerceiveAttackSettings                           PerceiveAttackSettings;                                  // 0x007C(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9JZV[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIResource_StateMachine
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAIResource_StateMachine : public UGameplayTaskResource
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIRoleBase
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBAIRoleBase : public UObject
	{
	public:
		TArray<class UClass*>                                      TacticalSkills;                                          // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		float                                                      BattleRange;                                             // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefensePriority;                                         // 0x003C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LineAreaRestriction;                                     // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3OEO[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              Owner;                                                   // 0x0048(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AAIController*                                       OwnerAI;                                                 // 0x0050(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YDR8[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReceivePrepareForPlanning();
		void ReceiveDeactivate();
		float ReceiveCalcAttackUtility();
		void ReceiveActivate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIRoleAttackerBase
	 * Size -> 0x0008 (FullSize[0x0068] - InheritedSize[0x0060])
	 */
	class USBAIRoleAttackerBase : public USBAIRoleBase
	{
	public:
		unsigned char                                              UnknownData_FV1X[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIRoleComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBAIRoleComponent : public UActorComponent
	{
	public:
		class UClass*                                              DefaultRoleClass;                                        // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              AttackerRoleClass;                                       // 0x00C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultRolePriority;                                     // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Aggression;                                              // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAIPositioningType                                       DesiredPositioningType;                                  // 0x00D0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F8BI[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DesiredPositioningIntensity;                             // 0x00D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VanguardRange;                                           // 0x00D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RearguardRange;                                          // 0x00DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SupporterBattleRange;                                    // 0x00E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SupporterDefensePriority;                                // 0x00E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBAIRoleBase*                                       DefaultRole;                                             // 0x00E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIRoleAttackerBase*                               AttackerRole;                                            // 0x00F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIRoleBase*                                       CurrentRole;                                             // 0x00F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAIPositioningType                                       PositioningType;                                         // 0x0100(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L0I2[0x7];                                   // 0x0101(0x0007) MISSED OFFSET (PADDING)

	public:
		void ResetDefaultRole();
		void ReleaseCurrentRole();
		void OverrideDefaultRole(class UClass* NewRoleClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIRoleDistributionComponent
	 * Size -> 0x0048 (FullSize[0x0100] - InheritedSize[0x00B8])
	 */
	class USBAIRoleDistributionComponent : public UActorComponent
	{
	public:
		float                                                      MinAttackerRatio;                                        // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackRequestRatioToPlayerNum;                           // 0x00BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttackRequestRatioToEnemyNum;                            // 0x00C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J5UW[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBAIWorldProfilerComponent*                         WorldProfilerComponent;                                  // 0x00C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBSquadAI*                                          SquadAI;                                                 // 0x00D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USBAIRoleComponent*>                          Members;                                                 // 0x00D8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class USBAIRoleComponent*                                  Leader;                                                  // 0x00E8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IFU1[0x10];                                  // 0x00F0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIRoleLeaderBase
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class USBAIRoleLeaderBase : public USBAIRoleAttackerBase
	{
	public:
		class USBUtilityOption*                                    Strategy;                                                // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIRoleSupporterBase
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class USBAIRoleSupporterBase : public USBAIRoleBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAISharedInfoComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBAISharedInfoComponent : public UActorComponent
	{
	public:
		TArray<class AAIController*>                               TargetedList;                                            // 0x00B8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAISkillAssets_ReactiveSkill
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USBAISkillAssets_ReactiveSkill : public UDataAsset
	{
	public:
		TMap<class FName, class UClass*>                           ReactiveSkills;                                          // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAISkillAssets_TacticalSkill
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USBAISkillAssets_TacticalSkill : public UDataAsset
	{
	public:
		TMap<class FName, class UClass*>                           TacticalSkills;                                          // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITacticalComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBAITacticalComponent : public UActorComponent
	{
	public:
		TArray<class UClass*>                                      SkillClasses;                                            // 0x00B8(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class USBAITacticalSkill*>                          Skills;                                                  // 0x00C8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		TArray<class USBAITacticalSkill*> GetSkills();
		class USBAITacticalSkill* FindSkill(const class FString& SkillName);
		void EnableSkill(class UClass* SkillClass, bool bAllowAdd);
		void DisableSkill(class UClass* SkillClass);
		void AddSkill(class UClass* SkillClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITacticalSkill
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class USBAITacticalSkill : public UObject
	{
	public:
		class USBAITacticalComponent*                              OwnerComp;                                               // 0x0028(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              OwnerActor;                                              // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AAIController*                                       OwnerAI;                                                 // 0x0038(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      DependentSkills;                                         // 0x0040(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      CoordinatorSkills;                                       // 0x0050(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class USBSquadMessageListener*>                     MessageListeners;                                        // 0x0060(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class USBSquadMemberComponent*                             SquadMemberComp;                                         // 0x0070(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<int32_t>                                            UseLocationAnchorIDs;                                    // 0x0078(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              NoAnchorSkill;                                           // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NZ8P[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReceiveInitializeForPawn(class APawn* Pawn);
		void ReceiveInitialize();
		void ReceiveDeactivate();
		void ReceiveActivate();
		void Deactivate();
		void AddMessageListener(class USBSquadMessageListener* MessageListener);
		void Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITacticalSkill_HTNBase
	 * Size -> 0x00E8 (FullSize[0x0180] - InheritedSize[0x0098])
	 */
	class USBAITacticalSkill_HTNBase : public USBAITacticalSkill
	{
	public:
		struct FAIFwParameterizedHTNDomain                         ParameterizedDomain;                                     // 0x0098(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBAITacticalSkillRootTask>                  RootTasks;                                               // 0x00B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UAIFwHTNPlanningComponent*                           HTNComp;                                                 // 0x00C0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, struct FAIFwParameterizedBTRequest>    PerceptionTreeMap;                                       // 0x00C8(0x0050) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XTKC[0x68];                                  // 0x0118(0x0068) MISSED OFFSET (PADDING)

	public:
		void SetContextValueAsVector(const class FString& Key, const struct FVector& Value);
		void SetContextValueAsString(const class FString& Key, const class FString& Value);
		void SetContextValueAsObject(const class FString& Key, class UObject* Value);
		void SetContextValueAsInt(const class FString& Key, int32_t Value);
		void SetContextValueAsFloat(const class FString& Key, float Value);
		void SetContextValueAsBool(const class FString& Key, bool bValue);
		void ReceivePrepareForPlanning();
		void AddTrajectoryPreference(const class FString& Name, class UAIFwHTNTemporalModalOperator* TemporalOperator, bool bHardConstraint);
		void AddPreconditionPreference(const class FString& Name, const class FString& TaskName, const class FString& MethodName, class UAIFwHTNOperator* Operator, bool bHardConstraint);
		void AddMetricWeight(const class FString& Name, float Weight);
		void AddGoalPreference(const class FString& Name, class UAIFwHTNOperator* Operator, bool bHardConstraint);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITacticalSkill_TemplateBase
	 * Size -> 0x0038 (FullSize[0x01B8] - InheritedSize[0x0180])
	 */
	class USBAITacticalSkill_TemplateBase : public USBAITacticalSkill_HTNBase
	{
	public:
		struct FAIFwParameterizedHTNDomain                         Template;                                                // 0x0180(0x0018) Edit, NativeAccessSpecifierPublic
		TArray<class FString>                                      SharedTasks;                                             // 0x0198(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBAITacticalSkill_DomainOverride>           Overrides;                                               // 0x01A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITacticalSkill_CommandAction
	 * Size -> 0x00A0 (FullSize[0x0258] - InheritedSize[0x01B8])
	 */
	class USBAITacticalSkill_CommandAction : public USBAITacticalSkill_TemplateBase
	{
	public:
		bool                                                       bEnableServerRefreshBones;                               // 0x01B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EDN1[0x7];                                   // 0x01B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Command;                                                 // 0x01C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SubCommand;                                              // 0x01D0(0x0010) Edit, ZeroConstructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              Category;                                                // 0x01E0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBAITacticalSkill_AdditionalPrecondition>   AdditionalPreconditions;                                 // 0x01F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBAITacticalSkill_AdditionalEffect>         AdditionalEffects;                                       // 0x0200(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FString                                              ActionName;                                              // 0x0210(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FP3O[0x38];                                  // 0x0220(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITacticalSkill_AttackBase
	 * Size -> 0x0060 (FullSize[0x02B8] - InheritedSize[0x0258])
	 */
	class USBAITacticalSkill_AttackBase : public USBAITacticalSkill_CommandAction
	{
	public:
		ESBAITacticalSkill_GuardState                              GuardStateBeforeAttack;                                  // 0x0258(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3SGO[0x3];                                   // 0x0259(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		ESBAITacticalSkill_GuardState                              GuardStateAfterAttack;                                   // 0x025C(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8DJY[0x3];                                   // 0x025D(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		bool                                                       bInstantly;                                              // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeedOnNavMesh;                                          // 0x0261(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseTargetLocationPrediction;                            // 0x0262(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2OJX[0x1];                                   // 0x0263(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UsabilityForOutOfAreaTarget;                             // 0x0264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YUZJ[0x28];                                  // 0x0268(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBHTNOperator_PartyStrategy*                        PartyStrategy;                                           // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBHTNOperator_Constant*                             Noise;                                                   // 0x0298(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBHTNOperator_ActionLottery*                        ActionLottery;                                           // 0x02A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8VK1[0x10];                                  // 0x02A8(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetAttackRange(float MinRange, float MaxRange, float LeftAngle, float RightAngle, float UpperAngle, float LowerAngle);
		void ReceiveGetSummonEnemyIds(TArray<class FString>* InEnemyIds);
		void ReceiveAddDefaultPreference();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITacticalSkill_CoopAction
	 * Size -> 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
	 */
	class USBAITacticalSkill_CoopAction : public USBAITacticalSkill_CommandAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITacticalSkill_GuardCounter
	 * Size -> 0x0038 (FullSize[0x0290] - InheritedSize[0x0258])
	 */
	class USBAITacticalSkill_GuardCounter : public USBAITacticalSkill_CommandAction
	{
	public:
		class FName                                                CounterCommand;                                          // 0x0258(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIReactiveSkill_GuardCounter*                     ReactiveSkill;                                           // 0x0260(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0FTV[0x28];                                  // 0x0268(0x0028) MISSED OFFSET (PADDING)

	public:
		bool IsGuardSucceeded(const struct FSBDamageEvent& DamageEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask
	 * Size -> 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
	 */
	class USBAITask : public UAITask
	{
	public:
		TArray<class UClass*>                                      AdditionalRequiredResources;                             // 0x0070(0x0010) Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AdditionalClaimedResources;                              // 0x0080(0x0010) Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_BlueprintBase
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class USBAITask_BlueprintBase : public UAITask
	{
	public:
		TArray<class UClass*>                                      AdditionalRequiredResources;                             // 0x0070(0x0010) Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AdditionalClaimedResources;                              // 0x0080(0x0010) Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		bool                                                       bIsAbortable : 1;                                        // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TIUD[0x17];                                  // 0x0091(0x0017) MISSED OFFSET (PADDING)

	public:
		void TaskTick(class AAIController* Controller, class APawn* ControlledPawn, float DeltaSeconds);
		void TaskStart(class AAIController* Controller, class APawn* ControlledPawn);
		void TaskResume(class AAIController* Controller, class APawn* ControlledPawn);
		void TaskPause(class AAIController* Controller, class APawn* ControlledPawn);
		void TaskFinish(class AAIController* Controller, class APawn* ControlledPawn, bool bInOwnerFinished);
		void SetFinishOnMessage(const class FName& MessageName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_ChangeBattleMode
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class USBAITask_ChangeBattleMode : public UAITask
	{
	public:
		class USBEnemyBattleConditionComponent*                    BattleConditionComp;                                     // 0x0070(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B5HE[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_SendAnimCommandWithAbility
	 * Size -> 0x0030 (FullSize[0x00C0] - InheritedSize[0x0090])
	 */
	class USBAITask_SendAnimCommandWithAbility : public USBAITask
	{
	public:
		unsigned char                                              UnknownData_L60F[0x18];                                  // 0x0090(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableAnimationWaitEnd : 1;                             // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q458[0x3];                                   // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                Command;                                                 // 0x00AC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                SubCommand;                                              // 0x00B4(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WA2U[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_Dodge
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAITask_Dodge : public USBAITask_SendAnimCommandWithAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_FleeFrom
	 * Size -> 0x0098 (FullSize[0x01A8] - InheritedSize[0x0110])
	 */
	class USBAITask_FleeFrom : public UAITask_MoveTo
	{
	public:
		unsigned char                                              UnknownData_MYSD[0x98];                                  // 0x0110(0x0098) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_FollowingWarp
	 * Size -> 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
	 */
	class USBAITask_FollowingWarp : public UAITask
	{
	public:
		unsigned char                                              UnknownData_2Y8I[0x20];                                  // 0x0070(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_Jump
	 * Size -> 0x0028 (FullSize[0x00E8] - InheritedSize[0x00C0])
	 */
	class USBAITask_Jump : public USBAITask_SendAnimCommandWithAbility
	{
	public:
		unsigned char                                              UnknownData_XKP2[0x28];                                  // 0x00C0(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_PerceiveAttackGuard
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAITask_PerceiveAttackGuard : public USBAITask_SendAnimCommandWithAbility
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_PlayerDodge
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAITask_PlayerDodge : public UAITask
	{
	public:
		unsigned char                                              UnknownData_JZ6Z[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_PlayerSkill
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAITask_PlayerSkill : public UAITask
	{
	public:
		ESkillActionPosition                                       SkillAction;                                             // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RU0B[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_PrevJump
	 * Size -> 0x0028 (FullSize[0x00B8] - InheritedSize[0x0090])
	 */
	class USBAITask_PrevJump : public USBAITask
	{
	public:
		unsigned char                                              UnknownData_AKPY[0x28];                                  // 0x0090(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_Runaway
	 * Size -> 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
	 */
	class USBAITask_Runaway : public UAITask
	{
	public:
		unsigned char                                              UnknownData_AMP5[0x10];                                  // 0x0070(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBEnemyCharacterMovementComponent*                  MovementComp;                                            // 0x0080(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_SuperFastMoveTo
	 * Size -> 0x0060 (FullSize[0x00D0] - InheritedSize[0x0070])
	 */
	class USBAITask_SuperFastMoveTo : public UAITask
	{
	public:
		unsigned char                                              UnknownData_ENQF[0x60];                                  // 0x0070(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_Turn
	 * Size -> 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
	 */
	class USBAITask_Turn : public UAITask
	{
	public:
		struct FBlackboardKeySelector                              BlackboardKey;                                           // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic
		class AActor*                                              TargetActor;                                             // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HE4S[0x10];                                  // 0x00A0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_UnableAction
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAITask_UnableAction : public UAITask
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_WaitForAnimation
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAITask_WaitForAnimation : public UAITask
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAITask_WarpMoveTo
	 * Size -> 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
	 */
	class USBAITask_WarpMoveTo : public UAITask
	{
	public:
		unsigned char                                              UnknownData_ABO1[0x20];                                  // 0x0070(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAIWorldProfilerComponent
	 * Size -> 0x0080 (FullSize[0x0138] - InheritedSize[0x00B8])
	 */
	class USBAIWorldProfilerComponent : public UActorComponent
	{
	public:
		float                                                      ClusteringDistance;                                      // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PFUL[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      UninitializedActors;                                     // 0x00C0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q2EJ[0x68];                                  // 0x00D0(0x0068) MISSED OFFSET (PADDING)

	public:
		void OnActorDestroyed(class AActor* DestroyedActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAkEventLODAssetUserData
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBAkEventLODAssetUserData : public UAssetUserData
	{
	public:
		ESBAkEventLOD                                              LOD;                                                     // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZUE6[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAkEventTriggerVolume
	 * Size -> 0x0028 (FullSize[0x0288] - InheritedSize[0x0260])
	 */
	class ASBAkEventTriggerVolume : public ATriggerVolume
	{
	public:
		bool                                                       IsActive;                                                // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R3Y2[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CategoryName;                                            // 0x0268(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       BeginOverlapAkEvent;                                     // 0x0278(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       EndOverlapAkEvent;                                       // 0x0280(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAkEventTriggerBox
	 * Size -> 0x0028 (FullSize[0x0258] - InheritedSize[0x0230])
	 */
	class ASBAkEventTriggerBox : public ATriggerBox
	{
	public:
		bool                                                       IsActive;                                                // 0x0230(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6FSN[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CategoryName;                                            // 0x0238(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       BeginOverlapAkEvent;                                     // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       EndOverlapAkEvent;                                       // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAkEventTriggerSphere
	 * Size -> 0x0028 (FullSize[0x0258] - InheritedSize[0x0230])
	 */
	class ASBAkEventTriggerSphere : public ATriggerSphere
	{
	public:
		bool                                                       IsActive;                                                // 0x0230(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5NZT[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CategoryName;                                            // 0x0238(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       BeginOverlapAkEvent;                                     // 0x0248(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       EndOverlapAkEvent;                                       // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAkEventTriggerAreaVolume
	 * Size -> 0x0038 (FullSize[0x0298] - InheritedSize[0x0260])
	 */
	class ASBAkEventTriggerAreaVolume : public ATriggerVolume
	{
	public:
		struct FSBAkEventTriggerAreaData                           TriggerAreaData;                                         // 0x0260(0x0038) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAkEventTriggerAreaBox
	 * Size -> 0x0038 (FullSize[0x0268] - InheritedSize[0x0230])
	 */
	class ASBAkEventTriggerAreaBox : public ATriggerBox
	{
	public:
		struct FSBAkEventTriggerAreaData                           TriggerAreaData;                                         // 0x0230(0x0038) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAkEventTriggerAreaSphere
	 * Size -> 0x0038 (FullSize[0x0268] - InheritedSize[0x0230])
	 */
	class ASBAkEventTriggerAreaSphere : public ATriggerSphere
	{
	public:
		struct FSBAkEventTriggerAreaData                           TriggerAreaData;                                         // 0x0230(0x0038) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileMovementBaseComponent
	 * Size -> 0x0048 (FullSize[0x0140] - InheritedSize[0x00F8])
	 */
	class USBProjectileMovementBaseComponent : public UMovementComponent
	{
	public:
		unsigned char                                              UnknownData_E9SN[0x10];                                  // 0x00F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSbGroundHit;                                           // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		TArray<class UPrimitiveComponent*>                         ShapeCollisionComponentList;                             // 0x0118(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4YVF[0x18];                                  // 0x0128(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnGroundHitMovementDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
		void OnGroundHitMovement(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileMovementHomingComponent
	 * Size -> 0x00D8 (FullSize[0x0218] - InheritedSize[0x0140])
	 */
	class USBProjectileMovementHomingComponent : public USBProjectileMovementBaseComponent
	{
	public:
		float                                                      InitialSpeed;                                            // 0x0140(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_A6OS[0xC];                                   // 0x0144(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSpeed;                                                // 0x0150(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MinSpeed;                                                // 0x0154(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NCQ7[0x4];                                   // 0x0158(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxSimulationIterations;                                 // 0x015C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxSimulationTimeStep;                                   // 0x0160(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bForceSubStepping : 1;                                   // 0x0164(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bRotationFollowsVelocity : 1;                            // 0x0164(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UnknownData_12QX : 1;                                    // 0x0164(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsEnableGravity : 1;                                    // 0x0164(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_P1DE[0x3];                                   // 0x0165(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProjectileGravityScale;                                  // 0x0168(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      BeginEffectiveGravityTime;                               // 0x016C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      EndEffectiveGravityTime;                                 // 0x0170(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E17P[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LimitTotalDistance;                                      // 0x0178(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UnknownData_GLMC : 1;                                    // 0x017C(0x0001) BIT_FIELD (PADDING)
		bool                                                       bLimitDistance : 1;                                      // 0x017C(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UnknownData_C8RX : 2;                                    // 0x017C(0x0001) BIT_FIELD (PADDING)
		bool                                                       bStopMoveWhenGroundHit : 1;                              // 0x017C(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T0W6[0x3B];                                  // 0x017D(0x003B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FProjectileHomingConfig                             HomingConfig;                                            // 0x01B8(0x0040) Transient, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WBX5[0x20];                                  // 0x01F8(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetHomingTargetPoint(const struct FVector& Target);
		void SetHomingTarget(class USceneComponent* Target);
		bool IsProcessHomingTime();
		bool IsEnableHomingTarget();
		bool IsEnableHoming();
		EHomingType GetHomingType();
		float GetHomingAccelerateMagnitude();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAlongGroundMovementComponent
	 * Size -> 0x0030 (FullSize[0x0248] - InheritedSize[0x0218])
	 */
	class USBAlongGroundMovementComponent : public USBProjectileMovementHomingComponent
	{
	public:
		struct FSBProjectileAlongGroundParameter                   AlongGroundParam;                                        // 0x0218(0x001C) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LG0C[0x14];                                  // 0x0234(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAmbientAkComponent
	 * Size -> 0x0000 (FullSize[0x03F0] - InheritedSize[0x03F0])
	 */
	class USBAmbientAkComponent : public UAkComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAmbientAkEventAssetUserData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBAmbientAkEventAssetUserData : public UAssetUserData
	{
	public:
		class UAkAudioEvent*                                       AkEvent;                                                 // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBAmbientAkEventShape                                     Shape;                                                   // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsChangeActiveDistance;                                 // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S54A[0x2];                                   // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ActiveDistance;                                          // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnchorComponent
	 * Size -> 0x0008 (FullSize[0x0210] - InheritedSize[0x0208])
	 */
	class USBAnchorComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_98MN[0x8];                                   // 0x0208(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMobCharacter
	 * Size -> 0x0238 (FullSize[0x0728] - InheritedSize[0x04F0])
	 */
	class ASBMobCharacter : public AASCharacterBase
	{
	public:
		unsigned char                                              UnknownData_LVDX[0x38];                                  // 0x04F0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBAnimationControlComponent*                        AnimationControlComp;                                    // 0x0528(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBNamePlateComponent2D*                             NamePlateComp;                                           // 0x0530(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBInteractionTargetComponent*                       InteractionTargetComp;                                   // 0x0538(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBInfluenceSourceComponent*                         WandererDensitySourceComp;                               // 0x0540(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBNpcPerformanceOptimizationComponent*              PerfOptComp;                                             // 0x0548(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGameplayTasksComponent*                             GameplayTasksComp;                                       // 0x0550(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBFootprintComponent*                               FootprintComponent;                                      // 0x0558(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBActorVisibilityComponent*                         ActorVisibilityComponent;                                // 0x0560(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBFieldStatusComponent*                             FieldStatusComponent;                                    // 0x0568(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D9PJ[0x4C];                                  // 0x0570(0x004C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ProfileDataId;                                           // 0x05BC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E3Y9[0x2C];                                  // 0x05C4(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CharacterName;                                           // 0x05F0(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBNpcScriptInfo                                    ScriptInfo;                                              // 0x0600(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       bCanWander : 1;                                          // 0x0628(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_996S[0x7];                                   // 0x0629(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             WanderingModeChangedDelegate;                            // 0x0630(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2WE9[0x8];                                   // 0x0640(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Animation;                                               // 0x0648(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              AnimationSubCommand;                                     // 0x0658(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_512T[0x8];                                   // 0x0668(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMobPostSpawnDelegate;                                  // 0x0670(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMobDeactivateDelegate;                                 // 0x0680(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_410V[0x28];                                  // 0x0690(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBNpcWaitParamComponent*                            WaitParamComp;                                           // 0x06B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_30KE[0x8];                                   // 0x06C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBNpcTalkActionComponent*                           TalkActionComp;                                          // 0x06C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, class FString>                           ScriptParameters;                                        // 0x06D0(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      CameraTransparentComponentEnableLength;                  // 0x0720(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9WHZ[0x4];                                   // 0x0724(0x0004) Fix size for supers

	public:
		void ReceivePostSpawnBySpawner();
		class FName GetProfileDataId();
		struct FSBCharacterProfileData GetProfileData();
		class FString GetCharacterName();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimalCharacter
	 * Size -> 0x0018 (FullSize[0x0740] - InheritedSize[0x0728])
	 */
	class ASBAnimalCharacter : public ASBMobCharacter
	{
	public:
		TArray<struct FAnimalWaitParamInfo>                        AnimalWaitParamTable;                                    // 0x0728(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class USBCameraTransparentBoxComponent*                    CameraTransparentComponent;                              // 0x0738(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimInstance
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBAnimInstance : public UASAnimInstance
	{
	public:
		unsigned char                                              UnknownData_4RFM[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimInstance
	 * Size -> 0x0B68 (FullSize[0x0FD8] - InheritedSize[0x0470])
	 */
	class USBCharacterAnimInstance : public USBAnimInstance
	{
	public:
		unsigned char                                              UnknownData_CDPK[0x30];                                  // 0x0470(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HeadScale;                                               // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AJVT[0x8];                                   // 0x04A4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TestBustType;                                            // 0x04AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2ZHD[0x8];                                   // 0x04B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBAnimNotifyState_ControlRotation*                  ControlRotationNotify;                                   // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_76UA[0x4];                                   // 0x04C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CachedVelocity;                                          // 0x04C4(0x000C) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CachedAnimTime;                                          // 0x04D0(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CachedInputVector;                                       // 0x04D4(0x000C) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class USBPartsDamageAnimParamter>           PartsDamageAnimParamter;                                 // 0x04E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSitActive;                                              // 0x04E8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLookAtActive;                                           // 0x04E9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLookAtForceDisable;                                     // 0x04EA(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLookAtCustomEyeActive;                                  // 0x04EB(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LookAtCustomEyePosition;                                 // 0x04EC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LookAtPosition;                                          // 0x04F8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TargetingPosition;                                       // 0x0504(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBLookAtCustomParam                                LookAtCustomParam;                                       // 0x0510(0x001C) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bExtraLookAtActive1;                                     // 0x052C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SK2H[0x3];                                   // 0x052D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ExtraLookAtPosition1;                                    // 0x0530(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExtraLookAtActive2;                                     // 0x053C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_663Q[0x3];                                   // 0x053D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ExtraLookAtPosition2;                                    // 0x0540(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExtraLookAtActive3;                                     // 0x054C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V6PY[0x3];                                   // 0x054D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ExtraLookAtPosition3;                                    // 0x0550(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIKActive;                                               // 0x055C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MJEJ[0x3];                                   // 0x055D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBIKStatusAll                                      IKStatusAll;                                             // 0x0560(0x0010) BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic
		bool                                                       bLieOnGroundActive;                                      // 0x0570(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRunningLieOnGroundActive;                               // 0x0571(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLimbsRetargetActive;                                    // 0x0572(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S0L9[0x1];                                   // 0x0573(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class USBDemoParameterComponent>            DemoParameterComponent;                                  // 0x0574(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBreastPhysicsActive;                                    // 0x057C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4E9M[0x3];                                   // 0x057D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BreastPhysicsScale;                                      // 0x0580(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZL10[0x4];                                   // 0x0584(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBExtraCurveForce                                  BreastPhysicsExternalForce;                              // 0x0588(0x0150) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBExtraCurveForce                                  LeftBreastPhysicsExternalForce;                          // 0x06D8(0x0150) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBExtraCurveForce                                  RightBreastPhysicsExternalForce;                         // 0x0828(0x0150) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bHairPhysicsActive;                                      // 0x0978(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPartsDamageShake;                                       // 0x0979(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHairComponentSpaceSimulation;                           // 0x097A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S7QW[0x1];                                   // 0x097B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SkeletalControlAlpha;                                    // 0x097C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBExtraCurveForce                                  HairPhysicsExternalForce;                                // 0x0980(0x0150) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FVector                                             IKOffset;                                                // 0x0AD0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N2ZP[0x4B4];                                 // 0x0ADC(0x04B4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBLimbIKUpdateParam                                HandIKParamL;                                            // 0x0F90(0x0010) Edit, BlueprintVisible, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBLimbIKUpdateParam                                HandIKParamR;                                            // 0x0FA0(0x0010) Edit, BlueprintVisible, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsHandIkActive;                                         // 0x0FB0(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsLookAtTargetActive;                                   // 0x0FB1(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4BCM[0x2];                                   // 0x0FB2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBLimbIKUpdateParam                                HoldHandIKParamL;                                        // 0x0FB4(0x0010) Edit, BlueprintVisible, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBLimbIKUpdateParam                                HoldHandIKParamR;                                        // 0x0FC4(0x0010) Edit, BlueprintVisible, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsHoldHandIkActive;                                     // 0x0FD4(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YKL0[0x3];                                   // 0x0FD5(0x0003) Fix size for supers

	public:
		void TriggerHairPhysics();
		void TriggerBreastPhysics();
		struct FVector SetTemporaryVector(const class FName& TypeName, const struct FVector& Value);
		class USceneComponent* SetTemporarySceneComponent(const class FName& TypeName, class USceneComponent* SceneComponent);
		struct FRotator SetTemporaryRotator(const class FName& TypeName, const struct FRotator& Value);
		class FName SetTemporaryName(const class FName& TypeName, const class FName& Value);
		int32_t SetTemporaryInt32(const class FName& TypeName, int32_t Value);
		float SetTemporaryFloat(const class FName& TypeName, float Value);
		bool SetTemporaryBool(const class FName& TypeName, bool Value);
		class AActor* SetTemporaryActor(const class FName& TypeName, class AActor* Actor);
		void RemoveTemporaryVariable(TArray<class FName> TypeNameList);
		struct FVector GetTemporaryVector(const class FName& TypeName);
		class USceneComponent* GetTemporarySceneComponent(const class FName& TypeName);
		struct FRotator GetTemporaryRotator(const class FName& TypeName);
		class FName GetTemporaryName(const class FName& TypeName);
		int32_t GetTemporaryInt32(const class FName& TypeName);
		float GetTemporaryFloat(const class FName& TypeName);
		bool GetTemporaryBool(const class FName& TypeName);
		class AActor* GetTemporaryActor(const class FName& TypeName);
		ERootMotionMode GetRootMotionMode();
		struct FVector AddTemporaryVector(const class FName& TypeName, const struct FVector& Value);
		struct FRotator AddTemporaryRotator(const class FName& TypeName, const struct FRotator& Value);
		int64_t AddTemporaryInt64(const class FName& TypeName, int64_t Value);
		int32_t AddTemporaryInt32(const class FName& TypeName, int32_t Value);
		float AddTemporaryFloat(const class FName& TypeName, float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcCharacterAnimInstance
	 * Size -> 0x0018 (FullSize[0x0FF0] - InheritedSize[0x0FD8])
	 */
	class USBNpcCharacterAnimInstance : public USBCharacterAnimInstance
	{
	public:
		unsigned char                                              UnknownData_K0HT[0x4];                                   // 0x0FD8(0x0004) Fix Super Size
		struct FVector                                             TargetLocation;                                          // 0x0FDC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDateTime                                           TurnStartTime;                                           // 0x0FE8(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimalCharacterAnimInstance
	 * Size -> 0x02E0 (FullSize[0x12D0] - InheritedSize[0x0FF0])
	 */
	class USBAnimalCharacterAnimInstance : public USBNpcCharacterAnimInstance
	{
	public:
		TArray<struct FSBFootprintSideSocket>                      FootprintSockets;                                        // 0x0FF0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBSurfaceFootprintSettingList                      SurfaceFootprintSettingList;                             // 0x1000(0x02B0) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bOverrideCameraTransparentCheckDistance;                 // 0x12B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UUPR[0x3];                                   // 0x12B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCameraShieldingTransparentParam                  CameraShieldingTransparentParam;                         // 0x12B4(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             CameraTransparentBoxExtent;                              // 0x12BC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OUXF[0x8];                                   // 0x12C8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimationControlComponent
	 * Size -> 0x00C0 (FullSize[0x0178] - InheritedSize[0x00B8])
	 */
	class USBAnimationControlComponent : public UActorComponent
	{
	public:
		bool                                                       bEnableIK;                                               // 0x00B8(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIKActive;                                               // 0x00B9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableLookAt;                                           // 0x00BA(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLookAtActive;                                           // 0x00BB(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LookAtPosition;                                          // 0x00BC(0x000C) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              LookAtTargetActor;                                       // 0x00C8(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLookAtCustomEyeActive;                                  // 0x00D0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RT5U[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LookAtCustomEyePosition;                                 // 0x00D4(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              LookAtCustomEyeTargetActor;                              // 0x00E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBLookAtCustomParam                                LookAtCustomParam;                                       // 0x00E8(0x001C) BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bExtraLookAtActive1;                                     // 0x0104(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6JHP[0x3];                                   // 0x0105(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ExtraLookAtPosition1;                                    // 0x0108(0x000C) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LV88[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              ExtraLookAtTargetActor1;                                 // 0x0118(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExtraLookAtActive2;                                     // 0x0120(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7JWY[0x3];                                   // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ExtraLookAtPosition2;                                    // 0x0124(0x000C) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              ExtraLookAtTargetActor2;                                 // 0x0130(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExtraLookAtActive3;                                     // 0x0138(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SXJB[0x3];                                   // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ExtraLookAtPosition3;                                    // 0x013C(0x000C) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              ExtraLookAtTargetActor3;                                 // 0x0148(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableLieOnGround;                                      // 0x0150(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLieOnGroundActive;                                      // 0x0151(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableRunningLieOnGround;                               // 0x0152(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRunningLieOnGroundActive;                               // 0x0153(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableLimbsRetarget;                                    // 0x0154(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableBreastPhysics;                                    // 0x0155(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBreastPhysicsActive;                                    // 0x0156(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A031[0x1];                                   // 0x0157(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BreastPhysicsScale;                                      // 0x0158(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnablePartsDamageShake;                                 // 0x015C(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPartsDamageShakeActive;                                 // 0x015D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHairPhysics;                                            // 0x015E(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHairPhysicsActive;                                      // 0x015F(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHairComponentSpaceSimulation;                           // 0x0160(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H0AZ[0x3];                                   // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SkeletalControlAlpha;                                    // 0x0164(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBAnimationControlComponent*                        CacheObject;                                             // 0x0168(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E3XL[0x8];                                   // 0x0170(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetLookAtActive(bool Flag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimationSamplingLevelScriptActor
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class ASBAnimationSamplingLevelScriptActor : public ALevelScriptActor
	{
	public:
		TArray<class UClass*>                                      DestroyComponentClasses;                                 // 0x0230(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify
	 * Size -> 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
	 */
	class USBAnimNotify : public UAnimNotify
	{
	public:
		struct FSBNotifyRuleSetting                                NotifyRuleSetting;                                       // 0x0038(0x0038) Edit, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ActivateAbilityDynamicTrigger
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_ActivateAbilityDynamicTrigger : public USBAnimNotify
	{
	public:
		ESBAbilityDynamicTriggerType                               DynamicTriggerType;                                      // 0x0070(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q4SC[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_AddVoltageGaugeAmount
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_AddVoltageGaugeAmount : public UAnimNotify
	{
	public:
		float                                                      AddAmount;                                               // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsAddDuringFeverTime;                                    // 0x003C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0CEU[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_SoundBase
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_SoundBase : public USBAnimNotify
	{
	public:
		ESBAkEventLOD                                              LOD;                                                     // 0x0070(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsStopAnimChange;                                       // 0x0071(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPlayLoopOnce;                                         // 0x0072(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsStopEnemyUnableActionCondition;                       // 0x0073(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FS8O[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_AkEvent
	 * Size -> 0x0028 (FullSize[0x00A0] - InheritedSize[0x0078])
	 */
	class USBAnimNotify_AkEvent : public USBAnimNotify_SoundBase
	{
	public:
		class UAkAudioEvent*                                       Event;                                                   // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<ESBAkEventSwitchType>                               SwitchType;                                              // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsUserFootSESocketType;                                 // 0x0090(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBFootSESocketType                                        FootSESocketType;                                        // 0x0091(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W8D4[0x2];                                   // 0x0092(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                FootSESocketName;                                        // 0x0094(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FootSELineLength;                                        // 0x009C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool Play(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const class FName& AttachName, bool bStopWhenOwnerDestroyed, bool bCanReuseAkComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_AkEvent2D
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class USBAnimNotify_AkEvent2D : public USBAnimNotify_SoundBase
	{
	public:
		class UAkAudioEvent*                                       Event;                                                   // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_BImagineDisableDisappearSummonEffect
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_BImagineDisableDisappearSummonEffect : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_BImagineFloat
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_BImagineFloat : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_BuddyRestartLogic
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_BuddyRestartLogic : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ChangeDamageBlocker
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_ChangeDamageBlocker : public UAnimNotify
	{
	public:
		float                                                      NewValue;                                                // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YKFB[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ChangeEmissiveColor
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_ChangeEmissiveColor : public UAnimNotify
	{
	public:
		TArray<int32_t>                                            TargetMaterialIndex;                                     // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FNotifyStateChangeEmissiveColorTarget>       TargetWeapon;                                            // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    NewColorIndex;                                           // 0x0058(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XGCG[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ChangeProjectileState
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_ChangeProjectileState : public UAnimNotify
	{
	public:
		int32_t                                                    StateNum;                                                // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_767U[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ClarifyAttribute
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_ClarifyAttribute : public USBAnimNotify
	{
	public:
		ESBAttribute                                               ClarifyAttribute;                                        // 0x0070(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T5SG[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EncounterSignal
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EncounterSignal : public USBAnimNotify
	{
	public:
		float                                                      EncounterSignalRange;                                    // 0x0070(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EI2H[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EndSkillPreInputAccept
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EndSkillPreInputAccept : public UAnimNotify
	{
	public:
		float                                                      LaunchSkillPreInputTime;                                 // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZ6X[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyActionWaitEnd
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyActionWaitEnd : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyAttackHitTrigger
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyAttackHitTrigger : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyBeginChant
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemyBeginChant : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_BImagineBeginChant
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_BImagineBeginChant : public UAnimNotify
	{
	public:
		float                                                      ActionChantTime;                                         // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2SEV[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyBroadcastDelegate
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemyBroadcastDelegate : public UAnimNotify
	{
	public:
		class FName                                                BroadcastString;                                         // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyChangeBattleMode
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemyChangeBattleMode : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyChangeStance
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyChangeStance : public USBAnimNotify
	{
	public:
		class FName                                                StanceName;                                              // 0x0070(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyCoopActionMessage
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyCoopActionMessage : public USBAnimNotify
	{
	public:
		class FString                                              Message;                                                 // 0x0070(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyCustomAction
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyCustomAction : public USBAnimNotify
	{
	public:
		class FString                                              CustomActionName;                                        // 0x0070(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyDeathEffect
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemyDeathEffect : public UAnimNotify
	{
	public:
		bool                                                       bMulticastCall;                                          // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E64X[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyEndActionAbility
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyEndActionAbility : public USBAnimNotify
	{
	public:
		ESBEnemyAbilityType                                        AbilityType;                                             // 0x0070(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q759[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ExProjectile
	 * Size -> 0x0068 (FullSize[0x00D8] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_ExProjectile : public USBAnimNotify
	{
	public:
		unsigned char                                              UnknownData_WGUK[0x10];                                  // 0x0070(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNotifyProjectileConfigPackage>              ProjectileConfigPackageList;                             // 0x0080(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    FixLaunchProjectileNum;                                  // 0x0090(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LaunchProjectileCategory;                                // 0x0094(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAdjustTargetPositionToGround;                         // 0x0098(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsUsePreMarkedTargetPos;                                // 0x0099(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZX5A[0x6];                                   // 0x009A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FNotityProjectile                                   ForecastProjectileConfig;                                // 0x00A0(0x0020) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsSameCalcTargetPosAsLaunchForecast;                    // 0x00C0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AONY[0x3];                                   // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DummyRangeFromTarget;                                    // 0x00C4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsManageProjectileHandle : 1;                           // 0x00C8(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSetPlayerSkillActionInfo : 1;                         // 0x00C8(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HRRS[0xF];                                   // 0x00C9(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyExProjectile
	 * Size -> 0x0020 (FullSize[0x00F8] - InheritedSize[0x00D8])
	 */
	class USBAnimNotify_EnemyExProjectile : public USBAnimNotify_ExProjectile
	{
	public:
		struct FSBEnemyProjectileNotifyParam                       EnemyProjectileNotifyParam;                              // 0x00D8(0x001C) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YA0Y[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyExProjectileWithChant
	 * Size -> 0x0018 (FullSize[0x0110] - InheritedSize[0x00F8])
	 */
	class USBAnimNotify_EnemyExProjectileWithChant : public USBAnimNotify_EnemyExProjectile
	{
	public:
		uint32_t                                                   AnimNotifyID;                                            // 0x00F8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6Q26[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEnemyNotifyCastMagicEffectParams>         MagicParamList;                                          // 0x0100(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyForceSetLocationZ_DragonAlbus
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyForceSetLocationZ_DragonAlbus : public USBAnimNotify
	{
	public:
		float                                                      LocationZ;                                               // 0x0070(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GTWT[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyGiveAilment
	 * Size -> 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyGiveAilment : public USBAnimNotify
	{
	public:
		struct FAIFwParameterizedBTRequest                         TargetingQuery;                                          // 0x0070(0x0018) Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaxCount;                                                // 0x0088(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y21N[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BlackboardKey;                                           // 0x0090(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 StatusHandle;                                            // 0x00A0(0x0010) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyIncreseActionUniqueCount
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyIncreseActionUniqueCount : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyPredictTargetLocation
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyPredictTargetLocation : public USBAnimNotify
	{
	public:
		ESBEnemyTargetType                                         TargetType;                                              // 0x0070(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7SAF[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TargetIndex;                                             // 0x0074(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PredictSeconds;                                          // 0x0078(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUsePredictedVelocity;                                   // 0x007C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QV6G[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCharacterAdjustRootMotionSetupPicker             AdjustRootMotionSetupPicker;                             // 0x0080(0x0010) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate
		struct FSBEnemyPredictTargetProjectileInfo                 ProjectileInfo;                                          // 0x0090(0x0018) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_Projectile
	 * Size -> 0x0060 (FullSize[0x00D0] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_Projectile : public USBAnimNotify
	{
	public:
		unsigned char                                              UnknownData_ST7Y[0x10];                                  // 0x0070(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEditableConfigCategory;                                 // 0x0080(0x0001) BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JKRT[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FNotityProjectile                                   NotifyConfig;                                            // 0x0088(0x0020) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FNotifyProjectileByTag>                      NotifyByTagArray;                                        // 0x00A8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FNotifyProjectileByCondition>                NotifyByConditionArray;                                  // 0x00B8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsManageProjectileHandle : 1;                           // 0x00C8(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSetPlayerSkillActionInfo : 1;                         // 0x00C8(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JIQW[0x7];                                   // 0x00C9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyProjectile
	 * Size -> 0x0020 (FullSize[0x00F0] - InheritedSize[0x00D0])
	 */
	class USBAnimNotify_EnemyProjectile : public USBAnimNotify_Projectile
	{
	public:
		int32_t                                                    SelectTargetIndex;                                       // 0x00D0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseLookAtVirtualSocket;                                 // 0x00D4(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QE7S[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LookAtVirtualSocketSpownLocation;                        // 0x00D8(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LookAtVirtualSocketRotateLocation;                       // 0x00E4(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyProjectileWithNotifyID
	 * Size -> 0x0008 (FullSize[0x00F8] - InheritedSize[0x00F0])
	 */
	class USBAnimNotify_EnemyProjectileWithNotifyID : public USBAnimNotify_EnemyProjectile
	{
	public:
		unsigned char                                              NotifyID;                                                // 0x00F0(0x0001) BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YN2Q[0x7];                                   // 0x00F1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ProjectileWithChantEffect
	 * Size -> 0x0010 (FullSize[0x0108] - InheritedSize[0x00F8])
	 */
	class USBAnimNotify_ProjectileWithChantEffect : public USBAnimNotify_EnemyProjectileWithNotifyID
	{
	public:
		TArray<struct FSBEnemyNotifyCastMagicEffectParams>         MagicParamList;                                          // 0x00F8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_BImagineProjectileWithChantEffect
	 * Size -> 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
	 */
	class USBAnimNotify_BImagineProjectileWithChantEffect : public USBAnimNotify_ProjectileWithChantEffect
	{
	public:
		float                                                      EffectEndTime;                                           // 0x0108(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I1AE[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyProjectileWithChant
	 * Size -> 0x0060 (FullSize[0x0168] - InheritedSize[0x0108])
	 */
	class USBAnimNotify_EnemyProjectileWithChant : public USBAnimNotify_ProjectileWithChantEffect
	{
	public:
		bool                                                       bAllowAddingAvailableRules;                              // 0x0108(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KMZ4[0x7];                                   // 0x0109(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      AvailableRules;                                          // 0x0110(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		struct FSBEnemyProjectileChantEffectInfo                   ChantEffectInfo;                                         // 0x0120(0x0030) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FSBEnemyChantMarkerParams>                   ChantMarkerParamsList;                                   // 0x0150(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       bFixTargetLocation;                                      // 0x0160(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3C8X[0x3];                                   // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WaitFixTargetLocationTime;                               // 0x0164(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyResetCollisionHit
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyResetCollisionHit : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyResetTakeDamageCounter
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyResetTakeDamageCounter : public USBAnimNotify
	{
	public:
		class FName                                                AttackIDName;                                            // 0x0070(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemySamplingActionDerivation
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemySamplingActionDerivation : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemySelfChanceTimeDown
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemySelfChanceTimeDown : public USBAnimNotify
	{
	public:
		class FName                                                CommandName;                                             // 0x0070(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemySelfDeath
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemySelfDeath : public UAnimNotify
	{
	public:
		float                                                      DestroyWaitTime;                                         // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5K3I[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemySetDownState
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemySetDownState : public UAnimNotify
	{
	public:
		bool                                                       bEnable;                                                 // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SHHE[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemySetPartsStep
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemySetPartsStep : public USBAnimNotify
	{
	public:
		TArray<struct FSBPartsBreakInfo>                           PartsStepInfos;                                          // 0x0070(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemySummon
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemySummon : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemySwitchSheathe
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemySwitchSheathe : public UAnimNotify
	{
	public:
		bool                                                       bIsSheathe;                                              // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BKX9[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemySwitchWeaponAttachment
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemySwitchWeaponAttachment : public UAnimNotify
	{
	public:
		TArray<int32_t>                                            TargetWeaponIndex;                                       // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       bIsSheathe;                                              // 0x0048(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1K2N[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyTurnTowardsAnchor
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemyTurnTowardsAnchor : public UAnimNotify
	{
	public:
		int32_t                                                    TowardsAnchorID;                                         // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2ZOC[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyWaitEndForAiming
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_EnemyWaitEndForAiming : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_EnemyWarpTiming
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_EnemyWarpTiming : public USBAnimNotify
	{
	public:
		int32_t                                                    WarpEffectIndex;                                         // 0x0070(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SKOR[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_FilterLOD
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_FilterLOD : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_FilterServer
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_FilterServer : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_Footprint
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_Footprint : public USBAnimNotify_FilterServer
	{
	public:
		ESBEffectVisibleType                                       VisibleType;                                             // 0x0070(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PC32[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		bool IsLocomotion();
		bool IsDisableSound();
		bool IsDisableEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_GreatGuardConsumeShieldDurability
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_GreatGuardConsumeShieldDurability : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_HateControl
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_HateControl : public UAnimNotify
	{
	public:
		float                                                      HatedValue;                                              // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DJ4K[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_LaunchForecastSkillProjectileEnemyLocation
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_LaunchForecastSkillProjectileEnemyLocation : public UAnimNotify
	{
	public:
		struct FDataTableRowHandle                                 ProjectileHandle;                                        // 0x0038(0x0010) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_MeshClimbingCanMove
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_MeshClimbingCanMove : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_MobEndTalkAction
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_MobEndTalkAction : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_MobEndTalkTurn
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_MobEndTalkTurn : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_MobEndWaitAction
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_MobEndWaitAction : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ParticleEffect
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_ParticleEffect : public USBAnimNotify
	{
	public:
		unsigned char                                              UnknownData_TPLD[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBNotifyParticleEffectParams>               ParamsList;                                              // 0x0078(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBEffectSetting>                            EffectList;                                              // 0x0088(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              AttackEffectId;                                          // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAnimNotifyPlayType                                      PlayType;                                                // 0x0099(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4JZE[0x2];                                   // 0x009A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CorrespondSBAttackName;                                  // 0x009C(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBEColorOverride                                          EColorOverride;                                          // 0x00A4(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsChangeLightingChannel;                                // 0x00A5(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_68O1[0x2];                                   // 0x00A6(0x0002) MISSED OFFSET (PADDING)

	public:
		void AddFloatParameter(int32_t effectIndex, const class FName& ParamName, float ParamValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_PlayBuddyConditionalVoice
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_PlayBuddyConditionalVoice : public UAnimNotify
	{
	public:
		class FName                                                ConditionId;                                             // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPlayOwnerBuddyVoice;                                    // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bDisablePlayForOwenerBuddy;                              // 0x0041(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UFRE[0x6];                                   // 0x0042(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_PlayBuddyVoice
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class USBAnimNotify_PlayBuddyVoice : public USBAnimNotify_SoundBase
	{
	public:
		class UAkAudioEvent*                                       Event;                                                   // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_PlayEnemyVoice
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class USBAnimNotify_PlayEnemyVoice : public USBAnimNotify_SoundBase
	{
	public:
		unsigned char                                              UnknownData_O66S[0x10];                                  // 0x0078(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              EnemyCharacter[0x28];                                    // 0x0088(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		bool PlayEventNode(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const class FString& InEventName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_PlayParticleEffect
	 * Size -> 0x0010 (FullSize[0x00A0] - InheritedSize[0x0090])
	 */
	class USBAnimNotify_PlayParticleEffect : public UAnimNotify_PlayParticleEffect
	{
	public:
		ESBEffectVisibleType                                       VisibleType;                                             // 0x0090(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEffectTarget                                              AttachTargetType;                                        // 0x0091(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GCDW[0xE];                                   // 0x0092(0x000E) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_PlayPlayerSkillVoice
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class USBAnimNotify_PlayPlayerSkillVoice : public USBAnimNotify_SoundBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_PlayPlayerVoice
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class USBAnimNotify_PlayPlayerVoice : public USBAnimNotify_SoundBase
	{
	public:
		class UAkAudioEvent*                                       Event;                                                   // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_PlaySoundProjectileOnInstigator
	 * Size -> 0x0058 (FullSize[0x00D0] - InheritedSize[0x0078])
	 */
	class USBAnimNotify_PlaySoundProjectileOnInstigator : public USBAnimNotify_SoundBase
	{
	public:
		struct FAkEventVariables                                   AkEventVariables;                                        // 0x0078(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      EffectiveRange;                                          // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z88L[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 TargetProjectileHandle;                                  // 0x00C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_PrintLapTime
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_PrintLapTime : public UAnimNotify
	{
	public:
		bool                                                       bOnlySetup;                                              // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPrintToScreen;                                          // 0x0039(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPrintToLog;                                             // 0x003A(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YXRX[0x1];                                   // 0x003B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        TextColor;                                               // 0x003C(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Duration;                                                // 0x004C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ProjectileEnd
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_ProjectileEnd : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_RequestAmpBuffArea
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_RequestAmpBuffArea : public UAnimNotify
	{
	public:
		bool                                                       bIsBuffSkill;                                            // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsDebuffSkill;                                          // 0x0039(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsHealSkill;                                            // 0x003A(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4IWB[0x5];                                   // 0x003B(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_RequestCamera
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_RequestCamera : public UAnimNotify
	{
	public:
		struct FDataTableRowHandle                                 Handle;                                                  // 0x0038(0x0010) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsAdd;                                                   // 0x0048(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZSNM[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ResetElementDamageAll
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_ResetElementDamageAll : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ResetSkillInputCount
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_ResetSkillInputCount : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_RoundBlowLoop
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_RoundBlowLoop : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_SamplingSimulateEnemyActionSetStartPoint
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_SamplingSimulateEnemyActionSetStartPoint : public USBAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_SetCanGuard
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_SetCanGuard : public UAnimNotify
	{
	public:
		bool                                                       CanGuardAfterCounter;                                    // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1JBJ[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_SetCupsuleCollisionEnabled
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_SetCupsuleCollisionEnabled : public USBAnimNotify
	{
	public:
		bool                                                       bEnabled;                                                // 0x0070(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1YJT[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_SetFishingLineVisibility
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_SetFishingLineVisibility : public UAnimNotify
	{
	public:
		bool                                                       bIsVisible;                                              // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L5Q1[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_SetMovementMode
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_SetMovementMode : public UAnimNotify
	{
	public:
		EMovementMode                                              NewMovementMode;                                         // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECustomMoveMode                                            NewCustomMode;                                           // 0x0039(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LF1N[0x6];                                   // 0x003A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ShowMarkerBeforeExProjectile
	 * Size -> 0x0050 (FullSize[0x00C0] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_ShowMarkerBeforeExProjectile : public USBAnimNotify
	{
	public:
		unsigned char                                              UnknownData_WJYO[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FixLaunchProjectileNum;                                  // 0x0078(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LaunchProjectileCategory;                                // 0x007C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAdjustTargetPositionToGround;                         // 0x0080(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NXWU[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FNotityProjectile                                   ForecastProjectileConfig;                                // 0x0088(0x0020) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      DummyRangeFromTarget;                                    // 0x00A8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UF2O[0x14];                                  // 0x00AC(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ShowMarkerBeforeExProjectileOnAnchor
	 * Size -> 0x0050 (FullSize[0x00C0] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_ShowMarkerBeforeExProjectileOnAnchor : public USBAnimNotify
	{
	public:
		unsigned char                                              UnknownData_C0FP[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            TargetAnchorIDList;                                      // 0x0078(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    LaunchProjectileCategory;                                // 0x0088(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAdjustTargetPositionToGround;                         // 0x008C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S4Q5[0x3];                                   // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FNotityProjectile                                   ForecastProjectileConfig;                                // 0x0090(0x0020) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LJAU[0x10];                                  // 0x00B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_ShowSimpleAlertByType
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_ShowSimpleAlertByType : public UAnimNotify
	{
	public:
		ESimpleAlertType                                           AlertType;                                               // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IN1M[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_SpawnLevelSequence
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_SpawnLevelSequence : public UAnimNotify
	{
	public:
		class ULevelSequence*                                      LevelSequence;                                           // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              LevelSequenceActorClass;                                 // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_StartFeverTime
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_StartFeverTime : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_StartSkillCancelStep
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_StartSkillCancelStep : public UAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_StatusAilment
	 * Size -> 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_StatusAilment : public USBAnimNotify
	{
	public:
		struct FDataTableRowHandle                                 StatusHandle;                                            // 0x0070(0x0010) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsDeactiveStatus : 1;                                   // 0x0080(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsForceDeactive : 1;                                    // 0x0080(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B1S7[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_SwitchComponentVisibility
	 * Size -> 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_SwitchComponentVisibility : public UAnimNotify
	{
	public:
		struct FNotifySwitchVisibilityTarget                       Target;                                                  // 0x0038(0x0038) Edit, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_TrigForExProjectile
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBAnimNotify_TrigForExProjectile : public USBAnimNotify
	{
	public:
		int32_t                                                    TrigRequestProjectileNum;                                // 0x0070(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9ZWF[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_WeaponAnimation
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_WeaponAnimation : public UAnimNotify
	{
	public:
		int32_t                                                    InventoryIndex;                                          // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AnimationIndex;                                          // 0x003C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AnimationName;                                           // 0x0040(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLooping;                                                // 0x0048(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JRL5[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotify_WeaponVisibility
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBAnimNotify_WeaponVisibility : public UAnimNotify
	{
	public:
		bool                                                       bIsHidden;                                               // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBWeaponVisibilitySlot                                    Slot;                                                    // 0x0039(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_81HK[0x6];                                   // 0x003A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNotifyChangedDetector
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNotifyChangedDetector : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyInterface_NeedsAdjustRootMotion
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyInterface_NeedsAdjustRootMotion : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule : public UObject
	{
	public:
		bool IsNotifyExecutable(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_CanPlayDamageVoice
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_CanPlayDamageVoice : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_CanPlayDeadVoice
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_CanPlayDeadVoice : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_CheckStanLevel
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_CheckStanLevel : public USBAnimNotifyRule
	{
	public:
		int32_t                                                    StanLevel;                                               // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9VSC[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRuleOnServer
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRuleOnServer : public UObject
	{
	public:
		bool IsNotifyExecutable(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRuleOnServer_EnemyFinishedElementalBurst
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRuleOnServer_EnemyFinishedElementalBurst : public USBAnimNotifyRuleOnServer
	{
	public:
		uint16_t                                                   Flags;                                                   // 0x0028(0x0002) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ABXO[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_HasCoopActionPower
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_HasCoopActionPower : public USBAnimNotifyRule
	{
	public:
		int32_t                                                    TargetPower;                                             // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FXBQ[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_HasSpecifiedAppearanceID
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_HasSpecifiedAppearanceID : public USBAnimNotifyRule
	{
	public:
		class FString                                              TargetAppearanceID;                                      // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_HasSpecifiedAttribute
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_HasSpecifiedAttribute : public USBAnimNotifyRule
	{
	public:
		ESBAttribute                                               TargetAttribute;                                         // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AWNM[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsAttackHit
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsAttackHit : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsBuddyRevival
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsBuddyRevival : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsCurrentActionSpecifiedName
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsCurrentActionSpecifiedName : public USBAnimNotifyRule
	{
	public:
		class FName                                                TargetActionName;                                        // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsDodging
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsDodging : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRuleOnServer_IsElementalBurst
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRuleOnServer_IsElementalBurst : public USBAnimNotifyRuleOnServer
	{
	public:
		uint16_t                                                   Flags;                                                   // 0x0028(0x0002) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5DWO[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsFallDamage
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsFallDamage : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsJumping
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsJumping : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsLocallyControlled
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsLocallyControlled : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsMenuOpen
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsMenuOpen : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsPartsBroken
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsPartsBroken : public USBAnimNotifyRule
	{
	public:
		struct FSBPartsBreakState                                  PartsBreakState;                                         // 0x0028(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsPlayDemo
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsPlayDemo : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsSABAttack
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsSABAttack : public USBAnimNotifyRuleOnServer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsSABReaction
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsSABReaction : public USBAnimNotifyRuleOnServer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsSBPlayerTransformCharacter
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsSBPlayerTransformCharacter : public USBAnimNotifyRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyRule_IsSkillEquipped
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBAnimNotifyRule_IsSkillEquipped : public USBAnimNotifyRule
	{
	public:
		int32_t                                                    SkillId;                                                 // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FQO8[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState
	 * Size -> 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState : public UASAnimNotifyState
	{
	public:
		class FName                                                NotifyName;                                              // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBNotifyRuleSetting                                NotifyRuleSetting;                                       // 0x0038(0x0038) Edit, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<TWeakObjectPtr<class AActor>, float>                  DeactivatedActorsWithRemainTime;                         // 0x0070(0x0050) BlueprintReadOnly, Transient, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_AcceptTSkillStepInput
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_AcceptTSkillStepInput : public UAnimNotifyState
	{
	public:
		unsigned char                                              CheckDirectionFlags;                                     // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0QO9[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CheckAngle;                                              // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ClearPrevInput;                                          // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TSJ5[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_AdditionalInputLaunchProjectile
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_AdditionalInputLaunchProjectile : public UAnimNotifyState
	{
	public:
		int32_t                                                    NotifyStateIndex;                                        // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LaunchProjectileMaxCount;                                // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4ZXB[0x30];                                  // 0x0038(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_AdjustEnemyRootMotion
	 * Size -> 0x00F8 (FullSize[0x01B8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_AdjustEnemyRootMotion : public USBAnimNotifyState
	{
	public:
		unsigned char                                              UnknownData_QI7S[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBAdjustRootMotionSettings                         RootMotionSettings;                                      // 0x00C8(0x00C0) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      MinAdjustEnemyLength;                                    // 0x0188(0x0004) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxAdjustEnemyLength;                                    // 0x018C(0x0004) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      YawMaxAngle;                                             // 0x0190(0x0004) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PitchMaxAngle;                                           // 0x0194(0x0004) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAdjustNavMeshArea;                                      // 0x0198(0x0001) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAdjustWithZAxis;                                        // 0x0199(0x0001) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bScaleMode;                                              // 0x019A(0x0001) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M8JH[0x1];                                   // 0x019B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ScaleModeRatio;                                          // 0x019C(0x000C) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             TargetOffset;                                            // 0x01A8(0x000C) BlueprintReadOnly, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GVYY[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_AllowJump
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_AllowJump : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_ArcBladeMove
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_ArcBladeMove : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_Attack
	 * Size -> 0x0188 (FullSize[0x0220] - InheritedSize[0x0098])
	 */
	class USBAnimNotifyState_Attack : public UASAnimNotifyState_Attack
	{
	public:
		class FName                                                SBAttackName;                                            // 0x0098(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bApplyCustomWeaponScale : 1;                             // 0x00A0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bApplyCustomMeshScale : 1;                               // 0x00A0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInventoryIndex1 : 1;                                    // 0x00A0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F03N[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         StatusAilmentHandleList;                                 // 0x00A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBAttackHitStatusAilmentCondition>          StatusAilmentHandleWithConditionList;                    // 0x00B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      FoliageReaction;                                         // 0x00C8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y7IX[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAttackCollisionAddition>                  SBAttackCollisionAdditions;                              // 0x00D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       bUpdateCollisionScaleWhenPlaying;                        // 0x00E0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EOverlapBattleStatusTarget                                 OverlapBattleStatusTarget;                               // 0x00E1(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UCF0[0x6];                                   // 0x00E2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 OverlapBattleStatus;                                     // 0x00E8(0x0010) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bReflectSkillPreInput;                                   // 0x00F8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8YSG[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReleaseSkillCancelTime;                                  // 0x00FC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRestrictCorrespondPassiveSkill;                         // 0x0100(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3WNU[0x7];                                   // 0x0101(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         CorrespondPassiveSkillList;                              // 0x0108(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		struct FSBAttackID                                         AttackID;                                                // 0x0118(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		float                                                      OverrideTotalDuration;                                   // 0x011C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZXXH[0xB0];                                  // 0x0120(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBNotifyRuleSetting                                NotifyRuleSetting;                                       // 0x01D0(0x0038) Edit, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      IgnoreActors;                                            // 0x0208(0x0010) BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_HTTM[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_BallVisibility
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_BallVisibility : public USBAnimNotifyState
	{
	public:
		int32_t                                                    InventoryIndex;                                          // 0x00C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XP6W[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_BImagineWeaponVisibilityNoManaged
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_BImagineWeaponVisibilityNoManaged : public UAnimNotifyState
	{
	public:
		bool                                                       bIsHidden;                                               // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3NY3[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InventoryIdentifyIndex;                                  // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_CameraAnim
	 * Size -> 0x0200 (FullSize[0x0230] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_CameraAnim : public UAnimNotifyState
	{
	public:
		ECameraSettingsType                                        CameraSettingsType;                                      // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SLZ2[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayCameraSettings                             CustomCameraSettings;                                    // 0x0038(0x01B0) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		ECameraPriority                                            CameraSettingsPriority;                                  // 0x01E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7U12[0x7];                                   // 0x01E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraAnim*                                         CameraAnimation;                                         // 0x01F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Rate;                                                    // 0x01F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Scale;                                                   // 0x01FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlendInTime;                                             // 0x0200(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlendOutTime;                                            // 0x0204(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Loop;                                                    // 0x0208(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       RandomStartTime;                                         // 0x0209(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6VKA[0x2];                                   // 0x020A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Duration;                                                // 0x020C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ECameraAnimNotifyPlaySpace                                 PlaySpace;                                               // 0x0210(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8P5I[0x1F];                                  // 0x0211(0x001F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_ChangeCreationCharacterMaterialParam
	 * Size -> 0x0028 (FullSize[0x00E8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_ChangeCreationCharacterMaterialParam : public USBAnimNotifyState
	{
	public:
		class FName                                                MaterialParamName;                                       // 0x00C0(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseScalarValueCurve;                                    // 0x00C8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QSD2[0x7];                                   // 0x00C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         ScalarValueCurve;                                        // 0x00D0(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScalarValueBegin;                                        // 0x00D8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScalarValueEnd;                                          // 0x00DC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FH23[0x8];                                   // 0x00E0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_ChangeEmissiveColorGradually
	 * Size -> 0x0028 (FullSize[0x00E8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_ChangeEmissiveColorGradually : public USBAnimNotifyState
	{
	public:
		TArray<int32_t>                                            TargetMaterialIndex;                                     // 0x00C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FNotifyStateChangeEmissiveColorTarget>       TargetWeapon;                                            // 0x00D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    OldColorIndex;                                           // 0x00E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NewColorIndex;                                           // 0x00E4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_ControlRotation
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_ControlRotation : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_CorrectWeaponDirectionForTarget
	 * Size -> 0x0040 (FullSize[0x0100] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_CorrectWeaponDirectionForTarget : public USBAnimNotifyState
	{
	public:
		int32_t                                                    InventoryWeaponIndex;                                    // 0x00C0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_66PR[0xC];                                   // 0x00C4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCorrectTargetDirectionInfo                       CorrectDirectionInfo;                                    // 0x00D0(0x0030) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyAction
	 * Size -> 0x0010 (FullSize[0x00D0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyAction : public USBAnimNotifyState
	{
	public:
		class FString                                              CustomActionName;                                        // 0x00C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyActivateDamageCollision
	 * Size -> 0x0018 (FullSize[0x00D8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyActivateDamageCollision : public USBAnimNotifyState
	{
	public:
		bool                                                       bIsActivated;                                            // 0x00C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KV2B[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        TargetDamageCollisionNames;                              // 0x00C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyActivateModifier
	 * Size -> 0x0010 (FullSize[0x00D0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyActivateModifier : public USBAnimNotifyState
	{
	public:
		TArray<class FName>                                        ModifierNames;                                           // 0x00C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyAttack
	 * Size -> 0x0020 (FullSize[0x0240] - InheritedSize[0x0220])
	 */
	class USBAnimNotifyState_EnemyAttack : public USBAnimNotifyState_Attack
	{
	public:
		class FName                                                CollisionGroupName;                                      // 0x0220(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FASAttackCollision>                          AttackCollisionsOnPartsBroken;                           // 0x0228(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_58UN[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyChangeMaterialParamTemporary
	 * Size -> 0x00B0 (FullSize[0x0170] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyChangeMaterialParamTemporary : public USBAnimNotifyState
	{
	public:
		class FName                                                MaterialParamName;                                       // 0x00C0(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Value;                                                   // 0x00C8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UMLQ[0xA4];                                  // 0x00CC(0x00A4) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyChangeStance
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyChangeStance : public USBAnimNotifyState
	{
	public:
		class FName                                                StanceName;                                              // 0x00C0(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_CoopActionPowerSupply
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_CoopActionPowerSupply : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_ExProjectileWithTrig
	 * Size -> 0x0070 (FullSize[0x0130] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_ExProjectileWithTrig : public USBAnimNotifyState
	{
	public:
		unsigned char                                              UnknownData_HLF0[0x10];                                  // 0x00C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNotifyProjectileConfigPackage>              ProjectileConfigPackageList;                             // 0x00D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    FixLaunchProjectileNum;                                  // 0x00E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LaunchProjectileCategory;                                // 0x00E4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAdjustTargetPositionToGround;                         // 0x00E8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsUsePreMarkedTargetPos;                                // 0x00E9(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6KFM[0x6];                                   // 0x00EA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FNotityProjectile                                   ForecastProjectileConfig;                                // 0x00F0(0x0020) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsSameCalcTargetPosAsLaunchForecast;                    // 0x0110(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZX38[0x3];                                   // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DummyRangeFromTarget;                                    // 0x0114(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsManageProjectileHandle : 1;                           // 0x0118(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSetPlayerSkillActionInfo : 1;                         // 0x0118(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4QZN[0x17];                                  // 0x0119(0x0017) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyExProjectileWithTrig
	 * Size -> 0x0020 (FullSize[0x0150] - InheritedSize[0x0130])
	 */
	class USBAnimNotifyState_EnemyExProjectileWithTrig : public USBAnimNotifyState_ExProjectileWithTrig
	{
	public:
		struct FSBEnemyProjectileNotifyParam                       EnemyProjectileNotifyParam;                              // 0x0130(0x001C) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z76G[0x4];                                   // 0x014C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyHandIKActivate
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyHandIKActivate : public USBAnimNotifyState
	{
	public:
		bool                                                       bRightHand;                                              // 0x00C0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7RXH[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyHitBrake
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyHitBrake : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyLookAt
	 * Size -> 0x0020 (FullSize[0x00E0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyLookAt : public USBAnimNotifyState
	{
	public:
		bool                                                       LookAtActivate;                                          // 0x00C0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CB42[0x3];                                   // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBLookAtCustomParam                                LookAtCustomParam;                                       // 0x00C4(0x001C) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyModifyAnimPlayRateWithMoveSpeedRate
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyModifyAnimPlayRateWithMoveSpeedRate : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyNoActionInhibitionStatus
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyNoActionInhibitionStatus : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyPerformanceCameraInvincible
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyPerformanceCameraInvincible : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyPerformanceCameraStatus
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyPerformanceCameraStatus : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemySABSection
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemySABSection : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemyShowMarker
	 * Size -> 0x0020 (FullSize[0x00E0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemyShowMarker : public USBAnimNotifyState
	{
	public:
		unsigned char                                              UnknownData_JX29[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEnemyChantMarkerMinimumParams>            ChantMarkerMinimumParamsList;                            // 0x00C8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bFixTargetLocation;                                      // 0x00D8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4PEY[0x7];                                   // 0x00D9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_EnemySwitchWeaponAttachment
	 * Size -> 0x0018 (FullSize[0x00D8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_EnemySwitchWeaponAttachment : public USBAnimNotifyState
	{
	public:
		TArray<int32_t>                                            TargetWeaponIndex;                                       // 0x00C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       bIsSheathe;                                              // 0x00D0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SXYL[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_FoliageReaction
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_FoliageReaction : public UAnimNotifyState
	{
	public:
		TArray<struct FSBFoliageReactionNotify>                    ReactionParams;                                          // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_Footprint
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_Footprint : public USBAnimNotifyState
	{
	public:
		ESBEffectVisibleType                                       VisibleType;                                             // 0x00C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UXGU[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (PADDING)

	public:
		bool IsLocomotion();
		bool IsDisableSound();
		bool IsDisableEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_GuardPoint
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_GuardPoint : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_IKContact
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_IKContact : public UAnimNotifyState
	{
	public:
		int32_t                                                    Index;                                                   // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KZ9J[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_Invincible
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_Invincible : public USBAnimNotifyState
	{
	public:
		ESBInvincibleAnimation                                     InvincibleType;                                          // 0x00C0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UnsheatheIfSuccess;                                      // 0x00C1(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S5Y2[0x6];                                   // 0x00C2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_JustMeterInput
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_JustMeterInput : public UAnimNotifyState
	{
	public:
		float                                                      ShiftStartTime;                                          // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SuccessBeginTime;                                        // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SuccessEndTime;                                          // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GreatSuccessBeginTime;                                   // 0x003C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GreatSuccessEndTime;                                     // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OOQ4[0xC];                                   // 0x0044(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_LegIKActive
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_LegIKActive : public UAnimNotifyState
	{
	public:
		bool                                                       bActive;                                                 // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FBDP[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_LieOnGroundActive
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_LieOnGroundActive : public UAnimNotifyState
	{
	public:
		bool                                                       bActive;                                                 // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBLieOnGroundSituation                                    LieOnGroundSituation;                                    // 0x0031(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEndlessForDemo;                                         // 0x0032(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ES0O[0x5];                                   // 0x0033(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_Listener
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_Listener : public USBAnimNotifyState
	{
	public:
		ESBListenerPosition                                        ListenerPosition;                                        // 0x00C0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KICK[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_LookAtTargetingPosition
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_LookAtTargetingPosition : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_ParticleEffect
	 * Size -> 0x0090 (FullSize[0x0150] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_ParticleEffect : public USBAnimNotifyState
	{
	public:
		unsigned char                                              UnknownData_B9SN[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBNotifyParticleEffectParams>               ParamsTable;                                             // 0x00C8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBEffectSetting>                            EffectList;                                              // 0x00D8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              AttackEffectId;                                          // 0x00E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAnimNotifyPlayType                                      PlayType;                                                // 0x00E9(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDetachAtEnd;                                            // 0x00EA(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z1BS[0x1];                                   // 0x00EB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBEColorOverride                                          EColorOverride;                                          // 0x00EC(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsChangeLightingChannel;                                // 0x00ED(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4XOH[0x52];                                  // 0x00EE(0x0052) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBNotifyStatePlayingEffect>                 m_PlayingEffectList;                                     // 0x0140(0x0010) BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_PlayerHandIK
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_PlayerHandIK : public UAnimNotifyState
	{
	public:
		bool                                                       bRightHand;                                              // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z7O2[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                WeaponSocketName;                                        // 0x0034(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7FU5[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_RequestCamera
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_RequestCamera : public UAnimNotifyState
	{
	public:
		struct FDataTableRowHandle                                 Handle;                                                  // 0x0030(0x0010) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SendBattleStatus
	 * Size -> 0x0010 (FullSize[0x00D0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_SendBattleStatus : public USBAnimNotifyState
	{
	public:
		struct FDataTableRowHandle                                 StatusHandle;                                            // 0x00C0(0x0010) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SendMaterialParam
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_SendMaterialParam : public UAnimNotifyState
	{
	public:
		bool                                                       bIsEnable : 1;                                           // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9OIT[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBSendMaterialParamCalcType                               CalcType;                                                // 0x0034(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1NEW[0x3];                                   // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsReverse : 1;                                          // 0x0038(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_66M2[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                MaterialParamName;                                       // 0x003C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MF38[0x14];                                  // 0x0044(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SendMaterialScalerParam
	 * Size -> 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
	 */
	class USBAnimNotifyState_SendMaterialScalerParam : public USBAnimNotifyState_SendMaterialParam
	{
	public:
		class UCurveFloat*                                         CurveDataScaler;                                         // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1TQW[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SendMaterialVectorParam
	 * Size -> 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
	 */
	class USBAnimNotifyState_SendMaterialVectorParam : public USBAnimNotifyState_SendMaterialParam
	{
	public:
		class UCurveVector*                                        CurveDataVector;                                         // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S1IY[0x10];                                  // 0x0060(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SitActive
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_SitActive : public UAnimNotifyState
	{
	public:
		bool                                                       bActive;                                                 // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LFFJ[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SkillCharaInvisible
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_SkillCharaInvisible : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SlashDisk
	 * Size -> 0x0010 (FullSize[0x00D0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_SlashDisk : public USBAnimNotifyState
	{
	public:
		unsigned char                                              UnknownData_RZEM[0x4];                                   // 0x00C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InventoryIndex;                                          // 0x00C4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bEnableWeaponBend;                                       // 0x00C8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bReverseWeaponBend;                                      // 0x00C9(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsULT;                                                  // 0x00CA(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_52L4[0x5];                                   // 0x00CB(0x0005) MISSED OFFSET (PADDING)

	public:
		void SetReverseWeaponBend(bool bReverse);
		void SetInventoryIndex(int32_t Index);
		void SetEnableWeaponBend(bool bEnable);
		bool Received_IsSlashDiskEnable();
		bool IsULT();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_StepWaitEnd
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_StepWaitEnd : public USBAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SuperArmor
	 * Size -> 0x0008 (FullSize[0x00C8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_SuperArmor : public USBAnimNotifyState
	{
	public:
		int32_t                                                    DamageAdjust;                                            // 0x00C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9PU2[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SwitchComponentVisibility
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_SwitchComponentVisibility : public UAnimNotifyState
	{
	public:
		struct FNotifySwitchVisibilityTarget                       Target;                                                  // 0x0030(0x0038) Edit, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_SwitchWeapon
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_SwitchWeapon : public UAnimNotifyState
	{
	public:
		ESBWeaponAttach                                            WeaponAttach1;                                           // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESBWeaponAttach                                            WeaponAttach2;                                           // 0x0031(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H3M1[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_TimedParticleEffect
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
	{
	public:
		class UParticleSystem*                                     PSTemplate;                                              // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBEffectVisibleType                                       VisibleType;                                             // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_30JG[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SocketName;                                              // 0x003C(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LocationOffset;                                          // 0x0044(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            RotationOffset;                                          // 0x0050(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bDestroyAtEnd;                                           // 0x005C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YL43[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_Trail
	 * Size -> 0x0018 (FullSize[0x00D8] - InheritedSize[0x00C0])
	 */
	class USBAnimNotifyState_Trail : public USBAnimNotifyState
	{
	public:
		TArray<struct FSBNotifyTrailParams>                        ParamsTable;                                             // 0x00C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    PlayIndex;                                               // 0x00D0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBEffectVisibleType                                       VisibleType;                                             // 0x00D4(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X9UI[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (PADDING)

	public:
		class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_TwoHandedByWeaponRotation
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_TwoHandedByWeaponRotation : public UAnimNotifyState
	{
	public:
		ESBWeaponAttach                                            WeaponAttach;                                            // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2URI[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_WeaponVisibility
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_WeaponVisibility : public UAnimNotifyState
	{
	public:
		bool                                                       bIsHidden;                                               // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsFade;                                                 // 0x0031(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBWeaponVisibilitySlot                                    Slot;                                                    // 0x0032(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WWOW[0x5];                                   // 0x0033(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimNotifyState_WeaponVisibilityNoManaged
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBAnimNotifyState_WeaponVisibilityNoManaged : public UAnimNotifyState
	{
	public:
		bool                                                       bIsHidden;                                               // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CKZT[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                TargetComponentTag;                                      // 0x0034(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TQNH[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAnimSingleNodeInstance
	 * Size -> 0x0020 (FullSize[0x02F0] - InheritedSize[0x02D0])
	 */
	class USBAnimSingleNodeInstance : public UAnimSingleNodeInstance
	{
	public:
		unsigned char                                              UnknownData_0LKJ[0x20];                                  // 0x02D0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_ClimbBase
	 * Size -> 0x0018 (FullSize[0x00A0] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_ClimbBase : public UAutoPlayTask_BlueprintBase
	{
	public:
		struct FVector                                             HighestPoint;                                            // 0x0088(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LowestPoint;                                             // 0x0094(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_BehaviorTree
	 * Size -> 0x0028 (FullSize[0x00B0] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_BehaviorTree : public UAutoPlayTask
	{
	public:
		struct FAIFwParameterizedBTRequest                         BehaviorTree;                                            // 0x0088(0x0018) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		bool                                                       bLooping;                                                // 0x00A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IL33[0xF];                                   // 0x00A1(0x000F) MISSED OFFSET (PADDING)

	public:
		void SetBehaviorTree(const struct FAIFwParameterizedBTRequest& InBehaviorTree);
		void ReceiveTick(float DeltaTime);
		void ReceiveStop();
		void ReceiveStart(class UAIFwBlackboardComponent* BlackboardComponent);
		void OnPawnControllerChanged(class APawn* Pawn, class AController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_DestroyBase
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class USBAutoPlayTask_DestroyBase : public USBAutoPlayTask_BehaviorTree
	{
	public:
		class AActor*                                              Actor;                                                   // 0x00B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_StandbyBase
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USBAutoPlayTask_StandbyBase : public USBAutoPlayTask_BehaviorTree
	{
	public:
		struct FVector                                             Center;                                                  // 0x00B0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Radius;                                                  // 0x00BC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_WarpBase
	 * Size -> 0x0010 (FullSize[0x00C0] - InheritedSize[0x00B0])
	 */
	class USBAutoPlayTask_WarpBase : public USBAutoPlayTask_BehaviorTree
	{
	public:
		struct FVector                                             InteractionPoint;                                        // 0x00B0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZKTB[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAreaSoundVolume
	 * Size -> 0x0058 (FullSize[0x02B8] - InheritedSize[0x0260])
	 */
	class ASBAreaSoundVolume : public ATriggerVolume
	{
	public:
		class FString                                              Category;                                                // 0x0260(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              LocationSourceSoftPtr[0x28];                             // 0x0270(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UAkAudioEvent*                                       AudioEvent;                                              // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       BeginOverlapEvent;                                       // 0x02A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       EndOverlapEvent;                                         // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        AkComponent;                                             // 0x02B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBArenaEnemyWaveCounter
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBArenaEnemyWaveCounter : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUserWidget
	 * Size -> 0x0038 (FullSize[0x02B0] - InheritedSize[0x0278])
	 */
	class USBUserWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_51YT[0x30];                                  // 0x0278(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHandleOptionKeys;                                       // 0x02A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoFocusChange;                                        // 0x02A9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9Z2Q[0x6];                                   // 0x02AA(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetFocusWidget(class UWidget* InWidget);
		void SetFocusAt(int32_t InIndex);
		void SetBlockInputByName(const class FName& InName);
		void SetBlockInputByAction(ESBUIKeyConfigAction InAction);
		void SetBlockInput();
		void ResetFocusIfFocused(class UWidget* InWidget);
		void ResetFocus();
		void ResetBlockInputByName(const class FName& InName);
		void ResetBlockInputByAction(ESBUIKeyConfigAction InAction);
		void ResetBlockInput();
		void ReRegisterInputComponent();
		void RemoveFocusableWidget(class UWidget* InWidget);
		void ProcVisibleSettingChange(ESBUIType InUIType, bool bInVisibility, bool bInInstantly);
		void OnVisibleSettingChange(ESBUIType InUIType, bool bInVisibility, bool bInInstantly);
		void OnRepeat_Up();
		void OnRepeat_Right();
		void OnRepeat_Left();
		void OnRepeat_Down();
		void OnPress_QuickAccess(ESBKeyConfigAction QuickAccess);
		void OnPress_Ok();
		void OnPress_MainMenu();
		void OnPress_Cancel();
		void OnInput_GamepadRightStickY(float Val);
		void OnInput_GamepadRightStickX(float Val);
		void OnInput_GamepadLeftStickY(float Val);
		void OnInput_GamepadLeftStickX(float Val);
		void OnDestructMainWidget();
		void Native_OnRepeat_Up();
		void Native_OnRepeat_Right();
		void Native_OnRepeat_Left();
		void Native_OnRepeat_Down();
		void Native_OnPress_QuickAccess(ESBKeyConfigAction QuickAccess);
		void Native_OnPress_Ok();
		void Native_OnPress_MainMenu();
		void Native_OnPress_Interaction(bool bPressed);
		void Native_OnPress_Cancel();
		void Native_OnInput_GamepadRightStickY(float Val);
		void Native_OnInput_GamepadRightStickX(float Val);
		void Native_OnInput_GamepadLeftStickY(float Val);
		void Native_OnInput_GamepadLeftStickX(float Val);
		void Native_DummyAxisEvent(float Val);
		void Native_DummyActionEvent();
		void HandleKeyReleased(const struct FKey& InKey);
		void HandleKeyPress(const struct FKey& InKey);
		class ASBPlayerState* GetOwningPlayerState();
		int32_t GetFocusWidgetIndex();
		class UWidget* GetFocusWidget();
		void FocusChangeByKey(const struct FKey& InKey);
		void BP_SetVisibility(ESlateVisibility InVisibility);
		bool AddInputHandleWidget(class UWidget* InWidget);
		bool AddFocusableWidget(class UWidget* InWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBContentsHUDBase
	 * Size -> 0x0028 (FullSize[0x02D8] - InheritedSize[0x02B0])
	 */
	class USBContentsHUDBase : public USBUserWidget
	{
	public:
		unsigned char                                              UnknownData_9E1C[0x8];                                   // 0x02B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextBlock*                                          respawncountertextblock;                                 // 0x02B8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          timertextblock_min;                                      // 0x02C0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          timertextblock_sec;                                      // 0x02C8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          timertextblock_millisec;                                 // 0x02D0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetTimerTextBlock(class UTextBlock* respawncountertextblock, class UTextBlock* timertextblock_min, class UTextBlock* timertextblock_sec, class UTextBlock* timertextblock_millisec);
		void SetDungeonDisplayName(class UTextBlock* DungeonNamePlate);
		void OnDelegated_StopTimerTimeOver();
		void OnDelegated_StopTimerGameOver();
		void Init();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBArenaHUD
	 * Size -> 0x0000 (FullSize[0x02D8] - InheritedSize[0x02D8])
	 */
	class USBArenaHUD : public USBContentsHUDBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBArenaMissionWatcher
	 * Size -> 0x0118 (FullSize[0x0320] - InheritedSize[0x0208])
	 */
	class USBArenaMissionWatcher : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_SZLG[0x8];                                   // 0x0208(0x0008) Fix Super Size
		unsigned char                                              UnknownData_6SC5[0x8];                                   // 0x0210(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FArenaMissionInfo                                   MissionInfo;                                             // 0x0218(0x0048) Net, Transient, RepNotify, NativeAccessSpecifierPrivate
		struct FArenaMissionProgressInfo                           MissionProgressInfo;                                     // 0x0260(0x0028) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      MissionLimitTime;                                        // 0x0288(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bActiveMission;                                          // 0x028C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_83AU[0x3];                                   // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FArenaMissionInfo>                           ArenaMissionInfoList;                                    // 0x0290(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		int32_t                                                    MissionCount;                                            // 0x02A0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MS4L[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartDelegate_Client;                                  // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMissionInfoSetDelegate;                                // 0x02B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateDelegate;                                        // 0x02C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTimeOutDelegate_Client;                                // 0x02D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearDelegate_Client;                                  // 0x02E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTimeOutDelegate_Server;                                // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearDelegate_Server;                                  // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QC24[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUpdateDelegate__DelegateSignature(const class FName& InMissionName);
		void OnTimeOutDelegate__DelegateSignature(const class FName& InMissionName);
		void OnStartDelegate__DelegateSignature(const class FName& InMissionName);
		void OnRep_MissionTime();
		void OnRep_MissionProgressInfo();
		void OnRep_MissionInfo();
		void OnMissionInfoSetDelegate__DelegateSignature(const class FName& InMissionName);
		void OnClearDelegate__DelegateSignature(const class FName& InMissionName);
		void NotifyTimerRespawnHUDInit();
		void NotifySummonImagine(class ASBPlayerCharacter* InPlayerCharacter);
		void NotifySkillHit(class ASBEnemyCharacter* InEnemyCharacter, ESkillActionPosition Position);
		void NotifyEnemyTakeDamage(class ASBEnemyCharacter* InEnemyCharacter, class ASBPlayerController* InAttacker, float InDamage);
		void NotifyEnemyDead(class ASBEnemyCharacter* InEnemyCharacter);
		void NotifyCriticalHit(class ASBEnemyCharacter* InEnemyCharacter);
		void NotifyCastSkill(class ASBPlayerCharacter* InPlayerCharacter);
		void NotifyBreakAction(class ASBEnemyCharacter* InEnemyCharacter);
		void NotifyAbsoluteDefense(class ASBPlayerCharacter* InPlayerCharacter);
		void Multicast_NotifySucceededArenaMission(const class FName& InMissionName);
		void Multicast_NotifyStartArenaMission(const class FName& InMissionName);
		void Multicast_NotifyFailedArenaMission(const class FName& InMissionName);
		bool IsActiveMission();
		struct FArenaMissionProgressInfo GetMissionProgressInfo();
		float GetMissionLimitTime();
		struct FArenaMissionInfo GetMissionInfo();
		int32_t GetMissionCount();
		int32_t GetMissionClearCount();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBArrayBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBArrayBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		TArray<int32_t> SortRecepiId(TArray<struct FCharacterCraftRecepi> Recepi, TArray<int32_t>* Indexes, ESBSortType SortType);
		TArray<struct FOwnItemInfo> SortOwnItemsWeaponExp(TArray<struct FOwnItemInfo>* InOwnItemInfos, ESBSortType SortType);
		TArray<struct FOwnItemInfo> SortOwnItemsWeaponEnhanceLevel(TArray<struct FOwnItemInfo>* InOwnItemInfos, ESBSortType SortType);
		TArray<int32_t> SortMaxItemLevel(TArray<struct FCharacterCraftRecepi> Recepi, TArray<int32_t>* Indexes, ESBSortType SortType);
		TArray<int32_t> SortMaxImagineLevel(TArray<struct FCharacterCraftRecepi> Recepi, TArray<int32_t>* Indexes, ESBSortType SortType);
		TArray<struct FPlayerProfileSummaryData> SortCharacterSearchList(TArray<struct FPlayerProfileSummaryData>* PlayerList);
		TArray<int32_t> SortArray(TArray<int32_t>* Array, ESBSortType SortType);
		void SortAestheShopCharaPartsIconInfo(TArray<struct FSBAestheShopCharaPartsIconInfoForSort>* InInfo, TArray<struct FSBAestheShopCharaPartsIconInfoForSort>* Dest, ESBSortType InSortType);
		TArray<int32_t> SortAdventurerRankImagine(TArray<struct FCharacterCraftRecepi> Recepi, TArray<int32_t>* Indexes, ESBSortType SortType);
		TArray<int32_t> SortAdventurerRank(TArray<struct FCharacterCraftRecepi> Recepi, TArray<int32_t>* Indexes, ESBSortType SortType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAssetDataHolder
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class USBAssetDataHolder : public UObject
	{
	public:
		unsigned char                                              UnknownData_2YJE[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleRegidentData
	 * Size -> 0x00C8 (FullSize[0x00F8] - InheritedSize[0x0030])
	 */
	class USBBattleRegidentData : public UPrimaryDataAsset
	{
	public:
		unsigned char                                              BattleHUD[0x28];                                         // 0x0030(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              PlayerCharacter[0x28];                                   // 0x0058(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              EnemyCharacter[0x28];                                    // 0x0080(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              NpcCharacter[0x28];                                      // 0x00A8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              SkySphere[0x28];                                         // 0x00D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAssetManager
	 * Size -> 0x00F8 (FullSize[0x0570] - InheritedSize[0x0478])
	 */
	class USBAssetManager : public UAssetManager
	{
	public:
		unsigned char                                              UnknownData_2YBQ[0x38];                                  // 0x0478(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedLevels;                                            // 0x04B0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class UObject*>                                     StoreAssets;                                             // 0x04C0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              BattleRegidentData[0x28];                                // 0x04D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<class UObject*>                                     BattleRegidentAssets;                                    // 0x04F8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y9RT[0x68];                                  // 0x0508(0x0068) MISSED OFFSET (PADDING)

	public:
		bool Tick(float InDeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSegmentNavLinkProxy
	 * Size -> 0x0048 (FullSize[0x0270] - InheritedSize[0x0228])
	 */
	class ASBSegmentNavLinkProxy : public AActor
	{
	public:
		unsigned char                                              UnknownData_22HU[0x10];                                  // 0x0228(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNavigationSegmentLink>                      SegmentLinks;                                            // 0x0238(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		class USBSegmentNavLinkComponent*                          SmartSegmentLinkComp;                                    // 0x0248(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSmartLinkIsRelevant;                                    // 0x0250(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7PCJ[0x7];                                   // 0x0251(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSmartLinkReached;                                      // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class USBNavLinkJumpComponent*                             NavLinkJumpComp;                                         // 0x0268(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetSmartLinkEnabled(bool bEnabled);
		void SetbSmartLinkIsRelevant(bool bRelevant);
		void ResumePathFollowing(class AActor* Agent);
		void ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination);
		void OnJumpStart(class AActor* PathOwner, const struct FVector& Destination);
		bool IsSmartLinkEnabled();
		bool HasMovingAgents();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoCreatedNavLinkProxy
	 * Size -> 0x0008 (FullSize[0x0278] - InheritedSize[0x0270])
	 */
	class ASBAutoCreatedNavLinkProxy : public ASBSegmentNavLinkProxy
	{
	public:
		bool                                                       Blocked;                                                 // 0x0270(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DUVS[0x7];                                   // 0x0271(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSwitchableNavModifierVolume
	 * Size -> 0x0048 (FullSize[0x02C0] - InheritedSize[0x0278])
	 */
	class ASBSwitchableNavModifierVolume : public ANavModifierVolume
	{
	public:
		class UClass*                                              CurrentAreaClass;                                        // 0x0278(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   ConvexPolygon;                                           // 0x0280(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      Height;                                                  // 0x0290(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BrushRadius;                                             // 0x0294(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<uint64_t>                                           PolysInVolume;                                           // 0x0298(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<struct FNavDataInfo>                                PolyNumOfNavMeshes;                                      // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EJIQ[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetNavAreaInGameplay_Client(class UClass* NewAreaClass);
		void SetNavAreaInGameplay(class UClass* NewAreaClass);
		void OnRep_CurrentAreaClass();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoCreatedSwitchableNavModifierVolume
	 * Size -> 0x0010 (FullSize[0x02D0] - InheritedSize[0x02C0])
	 */
	class ASBAutoCreatedSwitchableNavModifierVolume : public ASBSwitchableNavModifierVolume
	{
	public:
		TWeakObjectPtr<class AActor>                               CreaterActor;                                            // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6440[0x8];                                   // 0x02C8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoCreatedWallNavLinkProxy
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class ASBAutoCreatedWallNavLinkProxy : public ASBAutoCreatedNavLinkProxy
	{
	public:
		class FName                                                ClimbingWallActorName;                                   // 0x0278(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8IZ0[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoDeliveryQuestManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBAutoDeliveryQuestManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_IEKE[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoLinkCreaterComponent
	 * Size -> 0x0090 (FullSize[0x0148] - InheritedSize[0x00B8])
	 */
	class USBAutoLinkCreaterComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_CZZQ[0x48];                                  // 0x00B8(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBAutoCreatedNavLinkProxy*>                  AutoCreatedProxyList;                                    // 0x0100(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I1UQ[0x38];                                  // 0x0110(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoLinkNullAreaVolume
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ASBAutoLinkNullAreaVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayAgent
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBAutoPlayAgent : public AActor
	{
	public:
		class APlayerController*                                   PlayerController;                                        // 0x0228(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_221L[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayInteractionAgent
	 * Size -> 0x0018 (FullSize[0x0258] - InheritedSize[0x0240])
	 */
	class ASBAutoPlayInteractionAgent : public ASBAutoPlayAgent
	{
	public:
		class UPathFollowingComponent*                             PathFollowingComp;                                       // 0x0240(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8L40[0x10];                                  // 0x0248(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayMap_Global
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBAutoPlayMap_Global : public UAutoPlayMap
	{
	public:
		unsigned char                                              UnknownData_CERN[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayMap_Local
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBAutoPlayMap_Local : public UAutoPlayMap
	{
	public:
		float                                                      CellSize;                                                // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TileSize;                                                // 0x002C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              MapSize;                                                 // 0x002D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q7RR[0x22];                                  // 0x002E(0x0022) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayMoveAgent
	 * Size -> 0x0018 (FullSize[0x0258] - InheritedSize[0x0240])
	 */
	class ASBAutoPlayMoveAgent : public ASBAutoPlayAgent
	{
	public:
		class UPathFollowingComponent*                             PathFollowingComp;                                       // 0x0240(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CART[0x10];                                  // 0x0248(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlaySensor_Collision
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBAutoPlaySensor_Collision : public UAutoPlaySensor
	{
	public:
		float                                                      Range;                                                   // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumLaser;                                                // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationsPerSecond;                                      // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumTracePerSecond;                                       // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxTracePerTick;                                         // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LaserUpper;                                              // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LaserLower;                                              // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeightOffset;                                            // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JYKI[0x48];                                  // 0x0048(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayService_UpdateMap
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBAutoPlayService_UpdateMap : public UAutoPlayService
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlaySubsystem
	 * Size -> 0x0160 (FullSize[0x0190] - InheritedSize[0x0030])
	 */
	class USBAutoPlaySubsystem : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_XVY3[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FSoftClassPath>                   AgentClasses;                                            // 0x0038(0x0050) Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FSoftClassPath>                   TaskClasses;                                             // 0x0088(0x0050) Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FName, class UClass*>                           TaskClassesCache;                                        // 0x00D8(0x0050) Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_840U[0x68];                                  // 0x0128(0x0068) MISSED OFFSET (PADDING)

	public:
		void StopAutoPlay();
		void ShowDebugAutoPlay();
		void SetAutoPlayMode(const class FName& Mode);
		void APFarming(float Range);
		void APClearDungeon();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_DirectMoveTo
	 * Size -> 0x0028 (FullSize[0x00B0] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_DirectMoveTo : public UAutoPlayTask
	{
	public:
		unsigned char                                              UnknownData_CO00[0x28];                                  // 0x0088(0x0028) MISSED OFFSET (PADDING)

	public:
		void SetGoalLocation(const struct FVector& Location);
		void SetGoalActor(class AActor* Actor);
		void SetAcceptanceRadius(float InAcceptanceRadius);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_Explore
	 * Size -> 0x0078 (FullSize[0x0100] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_Explore : public UAutoPlayTask
	{
	public:
		unsigned char                                              UnknownData_8HH9[0x78];                                  // 0x0088(0x0078) MISSED OFFSET (PADDING)

	public:
		void SetNavigationFilter(class UClass* Filter);
		void SetLookAt(bool bInLookAt);
		void SetGoalLocation(const struct FVector& Location);
		void SetGoalActor(class AActor* Actor);
		void SetAcceptanceRadius(float InAcceptanceRadius);
		class UAutoPlayTask* RequestCustomTask(class UClass* TaskClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_MoveTo
	 * Size -> 0x0060 (FullSize[0x00E8] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_MoveTo : public UAutoPlayTask
	{
	public:
		unsigned char                                              UnknownData_0240[0x60];                                  // 0x0088(0x0060) MISSED OFFSET (PADDING)

	public:
		void SetNavigationFilter(class UClass* Filter);
		void SetLookAt(bool bInLookAt);
		void SetGoalLocation(const struct FVector& Location);
		void SetGoalActor(class AActor* Actor);
		void SetAcceptanceRadius(float InAcceptanceRadius);
		class UAutoPlayTask* RequestCustomTask(class UClass* TaskClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_ExploreTo
	 * Size -> 0x0008 (FullSize[0x00F0] - InheritedSize[0x00E8])
	 */
	class USBAutoPlayTask_ExploreTo : public USBAutoPlayTask_MoveTo
	{
	public:
		unsigned char                                              UnknownData_7D09[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_FinishTalk
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_FinishTalk : public UAutoPlayTask
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_InputAction
	 * Size -> 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_InputAction : public UAutoPlayTask
	{
	public:
		unsigned char                                              UnknownData_KQLM[0x20];                                  // 0x0088(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetAction(ESBUIKeyConfigAction InAction, float InDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_Interact
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_Interact : public UAutoPlayTask
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoPlayTask_LookAt
	 * Size -> 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
	 */
	class USBAutoPlayTask_LookAt : public UAutoPlayTask
	{
	public:
		unsigned char                                              UnknownData_3QQW[0x20];                                  // 0x0088(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetLookAtLocation(const struct FVector& InLocation);
		void SetLookAtActor(class AActor* InActor, const class FName& InSocketName);
		void SetAcceptanceAngle(float Angle);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoWordSetting
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class USBAutoWordSetting : public UObject
	{
	public:
		float                                                      PostTime;                                                // 0x0028(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XSMV[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EAutoWordEventType, struct FSBAutoWordData>           SBAutoWordDataMap;                                       // 0x0030(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class FName>                                        FreezStatusList;                                         // 0x0080(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class FName>                                        ElementalLv3List;                                        // 0x0090(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      ElementalLv3DistanceMeter;                               // 0x00A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IHD3[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoWordComponent
	 * Size -> 0x0098 (FullSize[0x0150] - InheritedSize[0x00B8])
	 */
	class USBAutoWordComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_HXMA[0x60];                                  // 0x00B8(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      LastCauserList;                                          // 0x0118(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_68S0[0x10];                                  // 0x0128(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AutoWordSettingClass;                                    // 0x0138(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YL5Z[0x10];                                  // 0x0140(0x0010) MISSED OFFSET (PADDING)

	public:
		void NotifyUsedUltimateSkillPreparation();
		void NotifyUsedUltimateSkill();
		void NotifyUsableUltimateSkill();
		void NotifySpawn();
		void NotifyResurrection(TArray<class AActor*>* PlayerResurrectorList);
		void NotifyRespawn();
		void NotifyFreeze();
		void NotifyDead();
		void NotifyChangeHp(float InCurrentHpRate, float InAdjustValue, class AActor* InDamageCauser);
		bool IsEnableAutoWordEventType(EAutoWordEventType InEventType);
		bool IsActiveAutoWordEventType(EAutoWordEventType InEventType);
		TArray<EAutoWordEventType> GetEnableAutoWordEventTypeList();
		struct FSBAutoWordData GetAutoWordData(EAutoWordEventType InEventType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySpecializerComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBEnemySpecializerComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAvaritiaOgreComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBAvaritiaOgreComponent : public USBEnemySpecializerComponent
	{
	public:
		bool                                                       bIsHeadGuardMode;                                        // 0x00B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2ASE[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (PADDING)

	public:
		bool IsHeadGuardMode();
		void DeactivateHeadGuard();
		void ActivateHeadGuard(class UClass* AssetClass, ESBWeaponAttach WeaponAttach, const struct FTransform& Transform);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBalloonWindow
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBBalloonWindow : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             EndDelegate;                                             // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RSY3[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void Terminate();
		void Show(const struct FSBBalloonWindowRequest& InRequest, bool isForce);
		void SetUseCamera(bool IsFlag);
		void SetRoundPosition(bool IsFlag);
		void SetIgnoreInput(bool IsFlag);
		void SetHide(bool IsFlag);
		void PlayAnimOut();
		void PlayAnimIn();
		void OnTick();
		void OnShow(const struct FSBBalloonWindowRequest& InRequest);
		bool IsUseCamera();
		bool IsRoundPosition();
		bool IsIgnoreInput();
		void Hide();
		void EndDelegate__DelegateSignature(class USBBalloonWindow* InBalloonWindow);
		void CallEndDelegate(bool bInClear);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBalloonWindowComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBBalloonWindowComponent : public UActorComponent
	{
	public:
		int32_t                                                    RenderTargetSizeX;                                       // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RenderTargetSizeY;                                       // 0x00BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GYYQ[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              RenderTarget;                                            // 0x00C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KZZ9[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowWindow(const class FString& InText);
		void SetForceShow(bool IsFlag);
		void OnCloseWindow(class USBBalloonWindow* InWindow);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleArea
	 * Size -> 0x0068 (FullSize[0x0290] - InheritedSize[0x0228])
	 */
	class ASBBattleArea : public AActor
	{
	public:
		class UCapsuleComponent*                                   CapsuleRoot;                                             // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                StaticMesh;                                              // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsValidBGMGameModeList;                                 // 0x0238(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DHL2[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ESBBGMMapGameMode>                                  BGMGameModeList;                                         // 0x0240(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected
		ESBBattleBGMType                                           BattleBGMType;                                           // 0x0250(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B4I7[0x7];                                   // 0x0251(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       BattleBGMEvent;                                          // 0x0258(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBBGMBattleAreaContentIdData>               BGMContentIdDataList;                                    // 0x0260(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected
		bool                                                       bAvailableWall;                                          // 0x0270(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAvailableArea;                                          // 0x0271(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3DQU[0x6];                                   // 0x0272(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBPlayerCharacter*>                          PlayerList;                                              // 0x0278(0x0010) BlueprintVisible, Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UClass*                                              NavModifierArea;                                         // 0x0288(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void PlayerCountDown(class ASBPlayerCharacter* PlayerCharacter, float Time);
		bool NotifyPlayerLeave(class ASBPlayerCharacter* Player);
		void NotifyBattleAreaStart();
		void NotifyBattleAreaClear();
		void InitAfterSublevelLoaded();
		void GiveAllTreasureEnemyDropped(class ASBPlayerCharacter* Character);
		int32_t GetPlayerNumInArea();
		int32_t GetAlivePlayerNumInArea();
		void ChangeNavModifierArea(class UClass* InNavModifierArea);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleAreaResetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBattleAreaResetInterface : public UInterface
	{
	public:
		void ResetActorForBattleArea();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleBPFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBattleBPFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetEffectParamForIdentificationFriendOrFoe(class UParticleSystemComponent* PS, class AActor* InstigatorActor, bool bHeal);
		bool RequestPlayerDeactivateReverberationGodMode(class ASBPlayerCharacter* PlayerCharacter);
		bool RequestPlayerDeactivateGodMode(class ASBPlayerCharacter* PlayerCharacter, ESBGodModeType GodModeType, bool bReverberation);
		bool RequestPlayerActivateGodMode(class ASBPlayerCharacter* PlayerCharacter, ESBGodModeType GodModeType);
		void RequestFinishCutInImagine(class AActor* Instigator);
		bool IsShieldThroughDefenceIncludeAttackType(ESBDamageAttackType AttackType, const struct FSBDefenceGuardConfig& Defence);
		bool IsShieldDefenceIncludeAttackType(ESBDamageAttackType AttackType, const struct FSBDefenceGuardConfig& Defence);
		bool IsPlayerSameParty(class AActor* Owner, class AActor* Target);
		bool IsPlayerIsInBattle(class UObject* WorldContextObject);
		bool IsLocalHitAuthority(class AActor* Owner);
		bool IsInParty(class AActor* Owner);
		bool IsHostile(class AActor* Owner, class AActor* Target);
		bool IsExistPlayerBlockCollision(class ASBPlayerCharacter* PlayerCharacter, const struct FVector& Direction, float Distance, float SphereRadius);
		bool IsDelegateHitAuthority(class AActor* Owner);
		bool IsCharacterWalking(class ACharacter* Character);
		bool IsBattleStatusEffectiveFlag(class AActor* Owner, ESBAbilityFlags Flag);
		bool IsAllyOrMyself(class AActor* Owner, class AActor* Target);
		bool IsAlly(class AActor* Owner, class AActor* Target);
		float GetPlayerDiedCountDown(class UObject* WorldContextObject, int32_t TeamNumber);
		float GetCapsuleToTargetDistanceXY(class AActor* Actor, class USBTargetableComponent* OtherComp);
		float GetCapsuleToLocationDistanceXY(class AActor* Actor, const struct FVector& Location);
		float GetCapsuleToCapsuleDistanceXY(class AActor* Actor, class AActor* OtherActor);
		float GetCapsuleSize(class AActor* Actor);
		class UDataTable* GetBattleStatusDataTableSerchByName(const class FName& AssetName);
		struct FVector GetAttackMoveDestination(class ASBPlayerCharacter* PlayerCharacter, float MaxRange, int32_t MoveSpeedRateAffectType, float RangeOffset, bool bSetNoTargetRange, float NoTargetRange, float NoTargetHeightOffset, ESBAttackMoveDestinationHeight HeightType, float BlockingCheckRadius, bool bOverrideBlockingCheckPitch, float BlockingCheckPitch, float TargetHeightLimit);
		void GetAllBattleStatusDataTable(TArray<class UDataTable*>* Tables, TArray<class FName>* Names);
		void CreateEffectDynamicMaterialInstance(class UParticleSystemComponent* PS);
		float ComvertAddElementResistRate(float InValue);
		bool CanAttack(class AActor* Owner, class AActor* Target);
		void ApplyFixDamageBySystem(int32_t AttackID, class AActor* DamagedActor, float SendDamageValue, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, const struct FSBAttackStunSetting& StunSetting);
		void ApplyFixDamageByAttackID(int32_t AttackID, class AActor* DamagedActor, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, const struct FSBAttackStunSetting& StunSetting);
		void ApplyFixDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, const struct FSBAttackStunSetting& StunSetting);
		void ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, const struct FSBAttackStunSetting& StunSetting);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBattleCheatCommand : public UObject
	{
	public:
		void PrintDuplicateIDOfBattleStatusTable();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleContentsHUD
	 * Size -> 0x0020 (FullSize[0x02D0] - InheritedSize[0x02B0])
	 */
	class USBBattleContentsHUD : public USBUserWidget
	{
	public:
		class USBCharacterCardHUD*                                 CharacterCardHUD;                                        // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9496[0x18];                                  // 0x02B8(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetVisibleCharacterCard(bool isForce, bool InIsVisible);
		void SetVisibilityHUD(bool TrueIsVisible);
		void SetupCharacterCard();
		void SetCharacterCardShowHideByKeyPress();
		void OnUnbind();
		void OnTerminate();
		void OnMapLevelInfoInitialized();
		void OnInitialize();
		void OnBind();
		class UUserWidget* GetCurrentHUD();
		bool GetCharacterCardVisibility();
		void CloseCharacterCard();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleHUD
	 * Size -> 0x0018 (FullSize[0x0330] - InheritedSize[0x0318])
	 */
	class ASBBattleHUD : public AHUD
	{
	public:
		unsigned char                                              UnknownData_PLS7[0x10];                                  // 0x0318(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBStatusAlimentNotifyWidgetOwner*                   StatusAlimentNotifyWidgetOwner;                          // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ShowSimpleAlertByID(const class FName& TextId);
		void OnMasterDataAvailable();
		void OnMapLevelInfo();
		void OnGameSettingAfter();
		class USBTimerRespawnHUD* GetTimerRespawnHUD();
		class USBTextWindowBase* GetTextWindowSkit();
		class USBTextWindowBase* GetTextWindowDemo();
		class USBTextWindow* GetTextWindow();
		class USBTelopManager* GetTelopManager();
		class UUserWidget* GetNotifyMessage();
		class USBLayoutableHUD* GetLayoutableHUD();
		class UUserWidget* GetChatHUD();
		class USBBattleContentsHUD* GetBattleContentsHUD();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleImagineInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBattleImagineInterface : public UInterface
	{
	public:
		void SelfDeath();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleManager
	 * Size -> 0x0278 (FullSize[0x02A0] - InheritedSize[0x0028])
	 */
	class USBBattleManager : public UObject
	{
	public:
		class UClass*                                              m_DefaultDamageType;                                     // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBDamageType*                                       m_DefaultDamageTypeCache;                                // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         LevelCoefficientDamageModifyCurve;                       // 0x0038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              TestReplicateActor;                                      // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            m_StunLevelList;                                         // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		float                                                      m_StunResetTime;                                         // 0x0058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      StunDamageDecreaseSpeed;                                 // 0x005C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         BackHitStunPercentCurve;                                 // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      ElementGaugeResetTime;                                   // 0x0068(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZQPK[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         ElementResistanceDamageRateCurve;                        // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         ElementResistanceElementAccumulationRateCurve;           // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    OppositeElementStatusAilmentDamageAddRate;               // 0x0080(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    SameElementStatusAilmentDamageAddRate;                   // 0x0084(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<ESBAttribute, float>                                  PlayerElementBurstBonusTimeList;                         // 0x0088(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<ESBAttribute, float>                                  EnemyElementBurstBonusTimeList;                          // 0x00D8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FSBElementBurstBonusLevelSetting>            PlayerElementalBurstBonusLevelList;                      // 0x0128(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FSBElementBurstBonusLevelSetting>            EnemyElementalBurstBonusLevelList;                       // 0x0138(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         AttackAttributeTypeResistanceDamageRateCurve;            // 0x0148(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CenterExplosionGuardDistance;                            // 0x0150(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      KnockBackBaseDistance;                                   // 0x0154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<ESBHitKnockBackPower, float>                          KnockBackPowerList;                                      // 0x0158(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<ESBHitKnockBackTime, float>                           KnockBackTimeList;                                       // 0x01A8(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBKnockBackWeightClass>                     KnockBackWeightClassList;                                // 0x01F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      KnockBackDistanceFloatScale;                             // 0x0208(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      KnockBackTimeFloatScale;                                 // 0x020C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      KnockBackDistanceLieOnGroundScale;                       // 0x0210(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P5H8[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         m_KnockBackCurve;                                        // 0x0218(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBGuardKnockBackSetting>                    GuardKnockBackSettingList;                               // 0x0220(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBHitSlomoCurveSetting>                     HitSlomoSettingList;                                     // 0x0230(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBSplitDamageUESetting>                     SplitDamageUISettingList;                                // 0x0240(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<ESBPartyChainSettingType, struct FSBPartyChainSettingParam> PartyChainSettingMap;                                    // 0x0250(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		int32_t GetStunValueBP(ESBAttribute ElementType, int32_t StunLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleMenu
	 * Size -> 0x0058 (FullSize[0x02D0] - InheritedSize[0x0278])
	 */
	class USBBattleMenu : public UUserWidget
	{
	public:
		TArray<struct FSBLobbyEntry>                               LobbyList;                                               // 0x0278(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V2EJ[0x48];                                  // 0x0288(0x0048) MISSED OFFSET (PADDING)

	public:
		void OnJoinRoom();
		void OnFindRoomsCompleted(bool IsExists);
		void OnCreateRoom();
		bool JoinRoom(int32_t SessionIndex);
		bool FindRooms();
		bool CreateRoom(const class FName& DungeonId);
		bool CloseRoom();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleNpcAssetHolder
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBBattleNpcAssetHolder : public AActor
	{
	public:
		unsigned char                                              UnknownData_ASWN[0x18];                                  // 0x0228(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleParamInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBattleParamInterface : public UInterface
	{
	public:
		bool SetBattleArea(class ASBBattleArea* BattleArea);
		bool IsDeadHitPoint();
		bool IsApplyIdentificationFriendOrFoe();
		bool IsAliveHitPoint();
		class FName GetUniqueCharacterID();
		ESBEnemyRaceType GetRaceID();
		float GetMaxHitPoint();
		float GetHitPointRate();
		float GetCurrentHitPoint();
		class ASBBattleArea* GetBattleArea();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleSetFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBattleSetFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetBattleScoreInfoSwitcher(class UUserWidget* Switcher);
		class UUserWidget* GetBattleScoreInfoSwitcher();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleStatusComponent
	 * Size -> 0x0EC0 (FullSize[0x0F78] - InheritedSize[0x00B8])
	 */
	class USBBattleStatusComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_G5GC[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClientRecieveBattleStatusDelegete;                     // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClientSendEffectiveBattleStatusParamDelegete;          // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClientSendImportantBattleEffectiveDelegete;            // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCreateTriggerPartsDelegete;                            // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOverrideTriggerPartsDelegete;                          // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         StatusAilmentBuildResourceHandleList;                    // 0x0118(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UDataTable*>                                  BattleStatusBuildResourceLists;                          // 0x0128(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UDataTable*>                                  BattleStatusEffectBuildResourceTables;                   // 0x0138(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBPassiveHandle>                            PassiveHandles;                                          // 0x0148(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBDynamicTriggerData>                       DynamicTriggerDataList;                                  // 0x0158(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBEffectiveStatusAilment>                   EffectiveStatusList;                                     // 0x0168(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FSBEffectiveStatusParam                             StoreEquipEffectiveStatusParam;                          // 0x0178(0x02E8) Net, Protected, NativeAccessSpecifierProtected
		struct FSBEffectiveStatusParam                             StoreNoBillingEffectiveStatusParam;                      // 0x0460(0x02E8) Net, Protected, NativeAccessSpecifierProtected
		struct FSBEffectiveStatusParam                             EffectiveStatusParam;                                    // 0x0748(0x02E8) Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FSBEffectiveStatusParam                             EffectiveStatusParamDummy;                               // 0x0A30(0x02E8) Protected, NativeAccessSpecifierProtected
		struct FSBEffectiveImpotantStatusParam                     EffectiveImportantStatusParam;                           // 0x0D18(0x0034) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IBM0[0x22C];                                 // 0x0D4C(0x022C) MISSED OFFSET (PADDING)

	public:
		void Server_UpdateDynamicTriggerData(ESBAbilityDynamicTriggerType DynamicTriggerType);
		void Server_SendDeactiveStatusGroupByInteraction();
		void Server_DebugSetEnemyAbility(class ASBEnemyCharacter* pEnemy, int32_t InAbilityID, int32_t InTime);
		void OnRep_EffectiveStatusParam(const struct FSBEffectiveStatusParam& PrevParam);
		void OnRep_EffectiveStatusList();
		void OnRep_EffectiveImportantStatusParam(const struct FSBEffectiveImpotantStatusParam& PrevParam);
		void OnOverrideTriggerPartsDelegete__DelegateSignature();
		void OnCreateTriggerPartsDelegete__DelegateSignature();
		void OnClientSendImportantBattleEffectiveDelegete__DelegateSignature(const struct FSBPrevEffectiveImpotantStatusParam& PrevParam, const struct FSBEffectiveImpotantStatusParam& NewParam);
		void OnClientSendEffectiveBattleStatusParamDelegete__DelegateSignature(const struct FSBEffectiveStatusParam& StatusParam, bool bUpdateBaseStatus);
		void OnClientRecieveBattleStatusDelegete__DelegateSignature();
		void OnCharacterDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void MulticastExtendTimeNegativeEffectiveStatus();
		void Multicast_SendStunEvent();
		void Multicast_SendImportantBattleEffective(const struct FSBPrevEffectiveImpotantStatusParam& PrevParam, const struct FSBEffectiveImpotantStatusParam& NewParam);
		void Multicast_SendFreezeEvent();
		void Multicast_SendFlashStunEvent();
		void Multicast_SendExtendTimeEffectiveStatus(unsigned char EffectiveUniqueHandle, float NewRemainTime);
		void Multicast_SendDeactivateEffectiveStatus(unsigned char EffectiveUniqueHandle, ESBEffectiveStatusDeactiveReason DeactiveReason);
		void Multicast_SendDeactivateAbility(unsigned char abilityUniqueHandle);
		void Multicast_OnPerkInterlockMainPassiveDynamicConditionSatisfied(int32_t PerkInterlockMainPassiveSkillID);
		void Multicast_OnPerkInterlockMainPassiveDynamicConditionDissatisfied(int32_t PerkInterlockMainPassiveSkillID);
		void Multicast_NotifyEffectiveStatusToClient(TArray<struct FSBEffectiveStatusAilment> UpdateStatusArray);
		void Multicast_FailureBattleStatusByResist(ESBFailureUpdateBattleStatusOneReason Reason, ESBStatusAilmentIconType FailureIconType);
		bool IsRegisterEffectiveStatusList(const struct FDataTableRowHandle& NewStatus);
		bool IsEffectiveStatusGroup(ESBBattleEffectiveGroup Group);
		bool IsEffectiveStatusAliment(ESBBattleEffective Status);
		bool IsEffectiveStatusAilmentHandle(const struct FDataTableRowHandle& CheckStatus, class AActor* Invoker);
		bool IsEffectiveAbilityOnlyPlayerStatus(ESBAbilityOnlyPlayerStatus PlayerStatus);
		bool IsBattleEffectiveGroup(ESBBattleEffectiveGroup Group);
		bool IsBattleEffectiveFlag(ESBAbilityFlags Flag);
		TArray<struct FSBStatusAilmentIconConfig> GetGatherCurrentStatusAilmentIcons();
		void DebugServer_ActiveAbilityID(const struct FSBAbilityMasterID& AbilityID, int32_t Parts1Variable1, int32_t Parts1Variable2, int32_t Parts2Variable1, int32_t Parts2Variable2, int32_t Time, class AActor* Causer, class AActor* Receiver, ESBAbilityRequestSource RequestType, int32_t ItemId);
		void ClientSetDebugCacheBattleStatusResist(TArray<ESBBattleStatusResistType> NewTypeList, TArray<int32_t> NewValueList);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleStatusInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBattleStatusInterface : public UInterface
	{
	public:
		void OnClientSendImportantBattleEffective(const struct FSBPrevEffectiveImpotantStatusParam& PrevParam, const struct FSBEffectiveImpotantStatusParam& NewParam);
		void OnClientSendEffectiveBattleStatusParam(const struct FSBEffectiveStatusParam& StatusParam, bool bUpdateBaseStatus);
		void NotifyExtendTimeBattleStatus(const struct FDataTableRowHandle& Handle, class AActor* Invoker, class AActor* Spawner);
		void NotifyDeactiveBattleStatus(const struct FDataTableRowHandle& Handle, class AActor* Invoker, class AActor* Spawner, ESBEffectiveStatusDeactiveReason DeactiveReason);
		void NotifyActivateBattleStatus(const struct FDataTableRowHandle& Handle, class AActor* Invoker, class AActor* Spawner);
		class USBBattleStatusComponent* GetBattleStatusComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBattleStatusManager
	 * Size -> 0x0178 (FullSize[0x01A0] - InheritedSize[0x0028])
	 */
	class USBBattleStatusManager : public UObject
	{
	public:
		TArray<class UDataTable*>                                  RegisterBattleStatusTables;                              // 0x0028(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		TArray<class UDataTable*>                                  RegisterBattleStatusTablesRedident;                      // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UDataTable*                                          StatusCommonTable;                                       // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          StatusMapGimmickTable;                                   // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          BattleStatusEffectTable;                                 // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UDataTable*>                                  BattleStatusProjectileTables;                            // 0x0060(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UDataTable*                                          AbilityConditionTable;                                   // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          AbilityTable;                                            // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<ESBBattleEffectiveGroup, struct FSBAbilityGroupConfig> AbilityGroups;                                           // 0x0080(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TMap<ESBAbilityLimitType, class UClass*>                   AbilityLimitParamObjects;                                // 0x00D0(0x0050) Edit, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<float>                                              BattleStatusTimeExtendList;                              // 0x0120(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		float                                                      FearDistance;                                            // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QRSJ[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAccumulationResistSetting>                AccumulationResists;                                     // 0x0138(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TMap<ESBAbilityCalcSuccessRate, ESBAbilityControlBadCondition> ControlBadConditions;                                    // 0x0148(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class UCurveFloat*                                         AbilitySuccessCorrectionTable;                           // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FDataTableRowHandle SearchBattleStatusTableByIntegerID(int32_t ID);
		void RequestBattleItemEffectByName(class ACharacter* SBChara, const class FName& RowName);
		void RegisterBattleStatusTable(class UDataTable* Table);
		struct FDataTableRowHandle GetStatusCommonHandle(const class FName& RowName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBExportDataUtil
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBExportDataUtil : public UBlueprintFunctionLibrary
	{
	public:
		bool IsImportableVersion(int32_t MajorVersionIn, int32_t MinorVersionIn);
		void ImportCharaCreateJsonFromFile(const class FString& FullFilePath, class FString* CharaDataJsonOut, bool* IsSucceededOut);
		void ExportCharaCreateDataAsFile(const class FString& FullFilePath, const struct FSBCharaCreateParameter& SBCharaCreateParameter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMAkComponent
	 * Size -> 0x0000 (FullSize[0x0230] - InheritedSize[0x0230])
	 */
	class USBBGMAkComponent : public UAkGameObject
	{
	public:
		void OnCallBackBGM(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMAreaSoundComponent
	 * Size -> 0x0008 (FullSize[0x0490] - InheritedSize[0x0488])
	 */
	class USBBGMAreaSoundComponent : public USphereComponent
	{
	public:
		class UAkAudioEvent*                                       SwitchMapIDEvent;                                        // 0x0488(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMAreaCoverTriggerVolume
	 * Size -> 0x0030 (FullSize[0x0290] - InheritedSize[0x0260])
	 */
	class ASBBGMAreaCoverTriggerVolume : public ATriggerVolume
	{
	public:
		struct FSBBGMTriggerData                                   BGMTriggerData;                                          // 0x0260(0x0030) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMAreaCoverTriggerBox
	 * Size -> 0x0030 (FullSize[0x0260] - InheritedSize[0x0230])
	 */
	class ASBBGMAreaCoverTriggerBox : public ATriggerBox
	{
	public:
		struct FSBBGMTriggerData                                   BGMTriggerData;                                          // 0x0230(0x0030) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMAreaCoverTriggerSphere
	 * Size -> 0x0030 (FullSize[0x0260] - InheritedSize[0x0230])
	 */
	class ASBBGMAreaCoverTriggerSphere : public ATriggerSphere
	{
	public:
		struct FSBBGMTriggerData                                   BGMTriggerData;                                          // 0x0230(0x0030) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMAreaPassTriggerVolume
	 * Size -> 0x0030 (FullSize[0x0290] - InheritedSize[0x0260])
	 */
	class ASBBGMAreaPassTriggerVolume : public ATriggerVolume
	{
	public:
		struct FSBBGMTriggerData                                   BGMTriggerData;                                          // 0x0260(0x0030) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMAreaPassTriggerBox
	 * Size -> 0x0030 (FullSize[0x0260] - InheritedSize[0x0230])
	 */
	class ASBBGMAreaPassTriggerBox : public ATriggerBox
	{
	public:
		struct FSBBGMTriggerData                                   BGMTriggerData;                                          // 0x0230(0x0030) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMAreaPassTriggerSphere
	 * Size -> 0x0030 (FullSize[0x0260] - InheritedSize[0x0230])
	 */
	class ASBBGMAreaPassTriggerSphere : public ATriggerSphere
	{
	public:
		struct FSBBGMTriggerData                                   BGMTriggerData;                                          // 0x0230(0x0030) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBGMBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void StopUpdateInstanceAreaBGMController();
		void StopShopBGM();
		void StopFishingBGM();
		void StartWaveBattleOfInstanceAreaBGM();
		void SetOverrideBGMControllerMapType(const class FString& BGMMapId, ESBMapType InMapType);
		void SetBGMRTPC(const class FString& RTPCName, float RTPCValue);
		void SetBGMPriorityAreaID(int32_t Priority, const class FString& InAreaID);
		void SetBGMByLapOfTimeAttack(int32_t LapNum);
		void SetBGMAreaID(const class FString& InAreaID);
		void ResetBGMMapInfo(const class FString& BGMMapId, ESBMapType OverrideMapType);
		void PostBGM(class UAkAudioEvent* Event);
		void PlayUpdateInstanceAreaBGMController();
		void PlayShopBGM();
		void PlayOutGameBGM();
		void PlayFishingBGM();
		void PlayArenaBGM(ESBArenaBGMType ArenaBGMType);
		bool IsBGMEventAsset(const class FString& EventName);
		void EndWaveBattleOfInstanceAreaBGM();
		void ClearCurrentMapID();
		void ClearBGMAreaID();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBossBGMDataTable
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class USBBossBGMDataTable : public UDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBGMSwitchBossManager
	 * Size -> 0x0208 (FullSize[0x0430] - InheritedSize[0x0228])
	 */
	class ASBBGMSwitchBossManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_UDGO[0x208];                                 // 0x0228(0x0208) MISSED OFFSET (PADDING)

	public:
		void OnBossDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void Multicast_RequestBGM(int32_t BGMAssetIndex, bool IsBossEnd);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBhtSignalManager
	 * Size -> 0x0028 (FullSize[0x0250] - InheritedSize[0x0228])
	 */
	class ASBBhtSignalManager : public AActor
	{
	public:
		ESBBhtState                                                BhtSignalState;                                          // 0x0228(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1G1J[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRepBhtSignalStateDelegate;                             // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                ProfileDataId;                                           // 0x0240(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CoolDownTimeMin;                                         // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_171R[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetChallengeQuestStatus(bool bWorking, float CoolTime);
		void SetBhtSignalState(ESBBhtState NewState);
		void ResetBhtSignalStatus();
		void OnRepBhtSignalStateDelegate__DelegateSignature();
		void OnRep_BhtSignalState();
		ESBBhtState GetBhtSignalState();
		void DmpBhtSignalStatus();
		void BP_OnRep_BhtSignalState();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBindInputActionButtonBase
	 * Size -> 0x0038 (FullSize[0x02B0] - InheritedSize[0x0278])
	 */
	class USBBindInputActionButtonBase : public UUserWidget
	{
	public:
		class USBTextTableAsset*                                   TextTable;                                               // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TextId;                                                  // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                NameTextId;                                              // 0x0284(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SW5N[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBButtonBase*                                       Button;                                                  // 0x0290(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBRuntimeTextBlock*                                 Text;                                                    // 0x0298(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ActionName;                                              // 0x02A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bInputLock;                                              // 0x02A8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BTPC[0x7];                                   // 0x02A9(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetIsInputLock(bool bInInputLock);
		void SetInputAction(const class FName& InInputActionName, bool bInConsume);
		void OnUpdateOperationMode();
		void OnSetIsEnabled(bool bInIsEnabled);
		void OnExecInputAction();
		void OnChangePadSkinType(ESBPadKeySkinType PadKeySkinType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPropertyComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBPlayerPropertyComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlackListComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBBlackListComponent : public USBPlayerPropertyComponent
	{
	public:
		TArray<class USBChatMessage*>                              MessageCheckList;                                        // 0x00B8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCheckBlockStatus;                                      // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsBlackListed;                                         // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SDUO[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void Server_UpdateBlackListedInfos();
		void Server_RegisterBlockList(const class FString& TargetId);
		void Server_CheckBlockStatus(const class FString& TargetId);
		void Server_CheckBlockedMyCharacter(const class FString& AddedPlayerCharacterId);
		void RequestNotifyUnBlackListedPlayer(const class FString& CharacterId);
		void RequestNotifyBlackListedPlayer(const class FString& CharacterId);
		ESBIsRquestBlackListResult Request_IsBlackListed(const class FString& Target);
		void RegisterBlockList(const class FString& TargetId, class USBChatMessage* Message);
		void OnIsBlackListed__DelegateSignature(bool bIsBlackListed);
		void OnCheckBlockStatus__DelegateSignature(bool bCheckBlockStatus);
		void Client_UpdateBlackListedInfos(TArray<class FString> BlackListedInfos);
		void Client_RegisterBlockList(bool IsSuccessed, const class FString& TargetId, bool IsBlocked, bool IsPlatformBlocked, bool IsPSOnlyDiff);
		void Client_CheckBlockStatus(bool IsSuccessed, const class FString& TargetId, bool IsBlocked, bool IsPlatformBlocked);
		void Client_CheckBlockedMyCharacter(const class FString& AddedPlayerCharacterId, bool IsBlocked, bool IsPlatformBlocked);
		void CheckBlockStatus(const class FString& TargetId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void UnlockLoadingScreen(class UObject* WorldContextObject, const class FString& InName);
		void UnloadAllStreamLevels(class UObject* WorldContextObject);
		TArray<struct FLinearColor> TransformToMatrix(const struct FTransform& InTransform, bool Inverse, bool ByColumn);
		class ASBLevelSequenceActor* SpawnLevelSequence(class UObject* WorldContextObject, class UClass* LevelSequenceClass, class ULevelSequence* Sequence, bool bAutoPlay, bool bAutoDestroy);
		TArray<class FString> SortStringList(TArray<class FString> StringList);
		TArray<class FName> SortNameList(TArray<class FName> NameList);
		void SnapToGround(bool InAlign, bool InUseLineTrace, bool InUseBounds, bool InUsePivot, class USceneComponent* InDestination);
		void ShowMessageLogDialog(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FName& TextTableName, int32_t TextId, const class FText& Message);
		void ShowMessageLogCodeDialog(class UObject* WorldContextObject, int32_t RetCode, int32_t LocalErrCode);
		void ShowLoadingScreenFromType(class UObject* WorldContextObject, ELoadingType LoadingType, const class FName& GameContentId);
		void ShowLoadingScreen(class UObject* WorldContextObject, const class FName& GameContentId);
		void SetSkipTutorial(class UObject* WorldContextObject);
		void SetGameQuitFlag(class UObject* WorldContextObject);
		void SetFadeScreenColor(class UObject* WorldContextObject, float Red, float Green, float Blue);
		void SetDemoBattleEffectHidden(bool bHidden);
		void SBPlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, ESBCameraShakeControlType ControlType);
		void SBClientStopCameraShake(class APlayerController* PlayerController, class UClass* Shake, bool bImmediately);
		void SBClientStartCameraShake(class APlayerController* PlayerController, class UClass* Shake, float Scale, ECameraShakePlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot, ESBCameraShakeControlType ControlType);
		bool ReturnToRoom(class UObject* WorldContextObject);
		void RequestDemoHidden(class AActor* TargetActor, bool bIsHidden);
		void RemoveResidentTextures(class AActor* Actor);
		void PrintServerMsgToClient(class APawn* Player, const class FString& Msg, const struct FLinearColor& Col, float Timer, bool ToScreen);
		bool PreloadMapByLevelName(const class FName& InLevelName);
		bool PreloadMap(const struct FPrimaryAssetId& PrimaryAsset);
		void PlayDemoWait(class UObject* WorldContextObject, const class FName& Name, const struct FLatentActionInfo& LatentInfo);
		bool PlayDemo(class UObject* WorldContextObject, const class FName& Name);
		void OverrideGameTime(class UObject* WorldContextObject, bool Override, int32_t Hour, int32_t Minute);
		struct FRotator NormalizeRotator(const struct FRotator& Rotator);
		void ModifySceneComponentMobility(class USceneComponent* SceneComponent, EComponentMobility NewMobility);
		void ModifyLightComponentPerformance(class ULightComponent* LightComponent, float MaxDrawDistance, float MaxDistanceFadeRange);
		TMap<class FString, class FString> Make2StrMap(TArray<class FString> Key, TArray<class FString> Value);
		void LockLoadingScreen(class UObject* WorldContextObject, const class FString& InName);
		bool LoadCurrentMapSublevel(class UObject* WorldContextObject, int32_t* OutStreamLoadNum, TArray<class FName>* OutSublevelLevelNames, const struct FDateTime& InDateTimeOverride, class UObject* CBObj, const class FName& CBFunc);
		class USBCharaCreateData* LoadCharaCreateData(class USBCharaCreateComponent* CharaCreateComponent);
		bool IsWarpPointNameCheck(class UObject* WorldContextObject, const class FString& DestMapName);
		bool IsShowLoadingScreen(class UObject* WorldContextObject);
		bool IsServer(class UObject* WorldContextObject);
		bool IsScenarioMode(class UObject* WorldContextObject);
		bool IsSameWorld(class UObject* ObjectA, class UObject* ObjectB);
		bool IsRouteGuideEnableMode(class UObject* WorldContextObject);
		bool IsRequestDemoHidden(class AActor* TargetActor);
		bool IsPvPCurrentGameState(class UObject* WorldContextObject);
		bool IsPromotionMode();
		bool IsPlayInEditor();
		bool IsPlayGame(class UObject* WorldContextObject);
		bool IsMapLevelInfoInitialized(class UObject* WorldContextObject);
		bool IsFadeingScreen(class UObject* WorldContextObject);
		bool IsFadedOutScreen(class UObject* WorldContextObject);
		bool IsEventTermNoneLimmit(class UObject* WorldContextObject, const class FString& TermId);
		bool IsEventTermActive(class UObject* WorldContextObject, const class FString& TermId);
		bool IsEditor();
		bool IsDHCGameContentId(class UObject* WorldContextObject);
		bool IsDemoPlaying(class UObject* WorldContextObject);
		bool IsCurrentMapLevelEscapeConfirmation(class UObject* WorldContextObject);
		bool IsCurrentMapLevel(class UObject* WorldContextObject, ESBMapType MapType);
		bool IsCurrentGameContentId(class UObject* WorldContextObject, const class FString& InGameContentId);
		bool IsCostumeEquippableToEquipType_ForMulti(TArray<ESBCharaEquipType> InEquipTypes, TArray<struct FCharaEquipItemInfo> InCostumeEquipItemInfos, TArray<struct FCharaEquipItemCharaCreateInfo> InCostumeEquipItemCharaCreateInfos);
		bool IsCostumeEquippableToEquipType(ESBCharaEquipType InEquipType, const struct FCharaEquipItemInfo& InCostumeEquipItemInfo, const struct FCharaEquipItemCharaCreateInfo& InCostumeEquipItemCharaCreateInfo);
		bool IsCityOfMapName(const class FString& MapName);
		bool IsCityCurrentMapLevel(class UObject* WorldContextObject);
		bool IsBattleMode(class UObject* WorldContextObject);
		bool IsAvailableMapEventTerm(class UObject* WorldContextObject, const class FName& GameContentId);
		bool IsAllRegidentAssetLoaded();
		bool IsAllMasterDataAvailable();
		bool IsActiveBillingShop();
		TArray<int32_t> IntArraySort(TArray<int32_t> inArray, bool AscendingOrder);
		void HideSplashScreen();
		void HideLoadingScreen(class UObject* WorldContextObject);
		bool HasNgWordWithTarget(bool* IsValid, const class FString& CheckWords, ESBNgWordTarget NgWordTargetType);
		bool HasNgWord(bool* IsValid, const class FString& CheckWords);
		struct FVector GetWorldVectorFromScreenVector(const struct FVector2D& ScreenVector, const struct FTransform& WorldTransform, float Scale);
		class ASBWorldSettings* GetWorldSettings(class UObject* WorldContextObject);
		class USBWeaponManager* GetWeaponManager(bool* IsValid);
		void GetWarpPointLocationFromId(class UObject* WorldContextObject, const class FName& WarpPointId, struct FVector* Location);
		bool GetViewportSize(class UObject* WorldContextObject, struct FVector2D* ViewportSize);
		float GetVectorAngleWithAxis(const struct FVector& A, const struct FVector& B, const struct FVector& Axis);
		class USBUIManager* GetUIManager(bool* IsValid);
		class USBUIAssetManager* GetUIAssetManager(bool* IsValid);
		bool GetTokenParamIsUser(int32_t InTokenId);
		class USBSystemMessageManager* GetSystemMessageManager(bool* IsValid);
		bool GetStreamingLevelNames(class UObject* WorldContextObject, TArray<class FName>* levels);
		class USBSoundManager* GetSoundManager(bool* IsValid);
		class USBSkinMaterialManager* GetSkinMaterialManager();
		bool GetScreenLocation(class UObject* WorldContextObject, const struct FVector& WorldLocation, struct FVector2D* ScreenLocation, bool* IsInScreen);
		struct FRotator GetRotatorFromVectorDirection(const struct FVector& Normal);
		class FText GetRestrictText(ESBRestrictTextLength Length);
		bool GetRequestPlayDemo(struct FSBDemoData* OutputDemoData);
		int32_t GetRenderingShadowQuality();
		bool GetRelativeScreenLocation(class UObject* WorldContextObject, const struct FVector2D& ScreenLocation, struct FVector2D* RelativeScreenLocation);
		class FName GetRegionId(const class FString& InLevelName);
		class USBQuestManager* GetQuestManager(bool* IsValid);
		class FString GetProjectVersion(class UObject* WorldContextObject);
		class USBProjectileManager* GetProjectileManager(bool* IsValid);
		ESBPlayGameMode GetPlayGameMode(class UObject* WorldContextObject);
		class USBPlayerManager* GetPlayerManager();
		ESBPlatformId GetPlatformIdFromPlatformName(const class FString& PlatformName);
		class USBCharaPartsManager* GetPartsManager();
		int32_t GetPartsIndexIDFromPartName(const class FString& PartsName);
		class USBNpcManager* GetNpcManager(class UObject* WorldContextObject, bool* IsValid);
		struct FDateTime GetNowDateFromEventScheduler(class UObject* WorldContextObject);
		class USBNetworkDataCache* GetNetworkDataCache(class UObject* WorldContextObject, bool* IsValid);
		class USBMatchingManager* GetMatchingManager(class UObject* WorldContextObject, bool* IsValid);
		void GetMasterRewardData(TArray<class FName> INIdList, TArray<struct FSBMasterReward>* OutRewardList);
		class USBMasterDataManager* GetMasterDataManager(bool* IsValid);
		bool GetMapNameByGameContentId(const class FName& GameContentId, class FString* OutMapName);
		bool GetMapInfoByGameContentId(const class FName& GameContentId, struct FSBMapInfo* OutMapInfo);
		class USBMakeupManager* GetMakeupManager();
		class ASBLocationAnchorManager* GetLocationAnchorManager(class UObject* WorldContextObject, bool* IsValid);
		class FString GetLoadingScreenStatus(class UObject* WorldContextObject);
		bool GetLoadingScreenDebugEnable();
		class USBLibrarySaveManager* GetLibrarySaveManager(bool* IsValid);
		void GetLevelNameByActor(class AActor* Actor, class FName* LevelName);
		class UJingleManager* GetJingleManager(bool* IsValid);
		int32_t GetIntFromActorName(class AActor* Actor);
		class USBHttpQueryManager* GetHttpQueryManager(bool* IsValid);
		int32_t GetHelpMatchingModeId(class UObject* WorldContextObject);
		class USBGameSingleton* GetGameSingleton(bool* IsValid);
		class FString GetGameServerIPAddr(bool* IsValid);
		class FString GetGameModeStringByContentId(const class FName& GameContentId);
		bool GetGameModeInfoByContentId(const class FName& GameContentId, struct FSBGameModeInfo* OutGameModeInfo);
		int32_t GetFrameNumber();
		class APlayerController* GetFirstLocalPlayerController(class UObject* WorldContextObject);
		class USBEventTriggerDatabase* GetEventTriggerDatabase(bool* IsValid);
		class USBEnemyManager* GetEnemyManager(bool* IsValid);
		class USBEffectManager* GetEffectManager();
		bool GetEditorCurrentCameraLocationAndRotation(struct FVector* Location, struct FRotator* Rotation);
		class USBDroppingTextManager* GetDroppingTextManager(bool* IsValid);
		void GetDigitalSignageTexture(const class FName& InName, bool* bOutExist);
		class USBDemoManager* GetDemoManager(bool* IsValid);
		class UObject* GetDefaultObject(class UClass* C);
		class USBDebugFunction* GetDebugFunction(bool* IsValid);
		float GetDaytimeRate(const struct FDateTime& Time);
		ESBDayTime GetDayTime(const struct FDateTime& Time);
		class FString GetCurrentSessionUuid(class UObject* WorldContextObject);
		ESBPlatformId GetCurrentPlatformId();
		bool GetCurrentMapLevelInfo(class UObject* WorldContextObject, struct FSBMapLevelInfo* OutMapLevelInfo);
		bool GetCurrentMapInfo(class UObject* WorldContextObject, struct FSBMapInfo* OutMapInfo);
		bool GetCurrentGameModeInfo(class UObject* WorldContextObject, struct FSBGameModeInfo* OutGameModeInfo);
		class FString GetCurrentGameContentIdFromMapLevelInfo(class UObject* WorldContextObject);
		class FName GetCurrentGameContentId(class UObject* WorldContextObject);
		void GetCurrentDaytimeRate(class UObject* WorldContextObject, bool* bOutIsDaytime, float* OutDaytimeRate);
		ESBDayTime GetCurrentDayTime(class UObject* WorldContextObject);
		bool GetCostumePartsLocation(ESBCharaEquipType InType, ECharaPartsLocation* OutPartsLocation);
		int32_t GetConnectedPlayersNum(class UObject* WorldContextObject);
		class FString GetCommandLineOption(const class FString& InKey, bool* bOutExist);
		class USBCharaCreateColorManager* GetColorManager();
		class USBColoringShopManager* GetColoringShopManager();
		class AActor* GetClosestActor(class UObject* WorldContextObject, const struct FVector& InLocation, float InLimit, class UClass* InActorClass, float* Distance);
		class FString GetClientName(class UObject* WorldContextObject);
		bool GetCharaEquipNakedPartsName(ESBCharaEquipType Type, class FString* OutPartsName);
		bool GetCharaEquipItemCharaCreateInfo(const struct FCharaEquipItemInfo& ItemInfo, ESBCharaEquipType Type, struct FCharaEquipItemCharaCreateInfo* InCreateInfo);
		bool GetCharaCostumeCharaCreateInfo(const struct FCharaEquipItemInfo& ItemInfo, ESBCharaEquipType Type, struct FCharaEquipItemCharaCreateInfo* InCreateInfo);
		bool GetButtonActionNameInfoMap(TMap<int32_t, class FName>* OutButtonActionNameInfoMap);
		class USBCharaCreateBoneScaleManager* GetBoneScaleManager();
		class USBBattleStatusManager* GetBattleStatusManager(bool* IsValid);
		class USBBattleManager* GetBattleManager();
		bool GetAllLevelNames(class UObject* WorldContextObject, TArray<class FString>* levels);
		void GetAllComponentsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class UActorComponent*>* OutComponents);
		void GetAllComponentsOfClass(class UObject* WorldContextObject, class UClass* ComponentClass, TArray<class UActorComponent*>* OutComponents);
		class USBAdditionalColorManager* GetAdditionalColorManager();
		void FSBSetKawaiiPhysicsForcedWind(bool Sw);
		bool FindStampData(int32_t StampId, struct FSBStampData* Data);
		bool FindStampCategoryData(int32_t CategoryId, struct FSBStampCategoryData* Data);
		bool FindMasterInterruptQuestDestructibleObjectList(const class FName& InSpawnId, TArray<struct FSBInterruptQuestDestructibleObjectMasterData>* OutParamList);
		bool FindInterruptQuestTreasureSettingData(const class FName& InDataId, struct FSBInterruptQuestTreasureObjectParam* OutTreasureData);
		bool FileSaveStringArray(TArray<class FString> SaveTextB, const class FString& FileNameB);
		bool FileSaveString(const class FString& SaveTextB, const class FString& FileNameB);
		void FileOperation(const class FString& DstFolderName, const class FString& DstFileName, int32_t FileNo, bool Gender, bool Weapon, bool IsNumbering);
		bool FileLoadString(const class FString& FileNameA, class FString* SaveTextA);
		struct FSBDebugWaveEnemyParamSettingBase FileLoadAndReturnWaveSetting(const class FString& FileNameA);
		class FString FileLoadAndReturnString(const class FString& FileNameA);
		bool FileLoadAndReturnDebugMemo(const class FString& FileNameA, TArray<struct FSBDebugMemoSetting>* LoadDebugMemoSetting);
		void FadeOutScreenWait(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo, bool IsNoTransparencyInterpolation);
		void FadeOutScreen(class UObject* WorldContextObject, float Duration, bool IsNoTransparencyInterpolation);
		void FadeInScreen(class UObject* WorldContextObject, float Duration, bool IsNoTransparencyInterpolation);
		void ExecuteExportAsJSON(class UObject* WorldContextObject, TArray<class UObject*> InObjects, const class FString& InHeaderString, const class FString& InEndString);
		bool EncroachingBlockingGeometry(class UObject* WorldContextObject, class UClass* Class, const struct FTransform& UserTransform);
		void DeleteFolderOperation(const class FString& DeleteFolderName);
		void CustomScreenShot(const class FString& ViewSize, bool DumpBufferVisualizationTargets, bool MaskEnabled);
		void CheckXboxPrivacyTypePure(ESBPrivilegeType privilege, const class FString& CharacterId, const class FString& platformId, bool* IsUGC, bool* IsRestrict);
		void CheckXboxPrivacyType(ESBPrivilegeType privilege, const class FString& CharacterId, const class FString& platformId, bool* IsUGC, bool* IsRestrict);
		bool CanUseItemMapLevel(class UObject* WorldContextObject);
		bool CanBattleCurrentMapLevel(class UObject* WorldContextObject);
		float CalcRangeRatio(int32_t Now, int32_t Begin, int32_t End);
		bool CalcGameTimeDateFromUTC(const struct FDateTime& StartTimeUTC, const struct FDateTime& ServerTimeUTC, int32_t MinutesPerDay, int32_t* OutGameDays, int32_t* OutGameHour, int32_t* OutGameMin, int32_t* OutGameSec, int64_t* OutTicks);
		float CalcBlendAnimationTranslation(float TranslationA, float TranslationB, int32_t FrameA, int32_t FrameB, float BlendRate);
		float CalcBlendAnimationMoveSpeedBlendRate(float MoveSpeed, float TranslationA, float TranslationB, int32_t FrameA, int32_t FrameB);
		float CalcBlendAnimationMoveSpeed(float TranslationA, float TranslationB, int32_t FrameA, int32_t FrameB, float BlendRate);
		void AddResidentTextures(class AActor* Actor);
		void AddEditorNotification(const class FString& InMessage);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShowWebBrowserImpl
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBShowWebBrowserImpl : public UObject
	{
	public:
		class FString                                              CloseUrlResult;                                          // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnFinish(const class FString& InResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlueprintFunctionLibraryCS
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBlueprintFunctionLibraryCS : public UBlueprintFunctionLibrary
	{
	public:
		void XUIDToGamerTag(const class FString& xuid, const class FScriptDelegate& Delegate);
		void ToGamerTagDelegate__DelegateSignature(const class FString& gamerTag);
		void ShowProfileUI(const class FString& ID);
		void SetEnableTalkMode(class UObject* WorldContextObject, bool enable);
		void SCENpStopPremium();
		bool SCENpCheckPremium(class UObject* WorldContextObject);
		void PlayerSessionJoinErrorNotified();
		class USBShowWebBrowserImpl* OpenWebBrowserSync(class UObject* WorldContextObject, const class FString& OpenUrl, const class FString& CloseUrl, int32_t offsetX, int32_t offsetY, int32_t SizeX, int32_t SizeY, bool IsForceOpen);
		bool OpenWebBrowser(const class FString& OpenUrl, const class FString& CloseUrl, int32_t offsetX, int32_t offsetY, int32_t SizeX, int32_t SizeY, const class FScriptDelegate& OnClose, bool IsForceOpen);
		bool NeedPlayerSessionJoinErrorNotification();
		void LeavePlayerSession();
		bool IsValidSuccessLinkageURL(const class FString& InURL, class FString* LinkageToken);
		bool IsSCENpPremium();
		bool IsCSPlatform();
		bool IsChunkInstalled();
		bool HasPrivilegeCacheUGC();
		bool HasCommunicateRestrict();
		class FString GetUrl(const class FString& InURLName);
		class FString GetMyGamerTag();
		void CloseDelegate__DelegateSignature(const class FString& CloseUrl);
		float ChunkInstallTotalSizeGB();
		float ChunkInstalledSizeGB();
		void CheckXboxUserCompleteDelegate__DelegateSignature(const class FString& xuid, bool IsEnabled);
		void CheckXboxUserCommunication(const class FString& xuid, const class FScriptDelegate& Result);
		void CheckPrivilege(ESBUserPrivileges privilege, bool isShowUI, const class FScriptDelegate& Result);
		bool CheckPlatform(ESBPlatformId platformId);
		void CheckCompleteDelegate__DelegateSignature(bool IsEnabled, bool IsCheckFailed);
		void CheckAnonymousUserCompleteDelegate__DelegateSignature(bool isFriend, bool IsEnabled, bool IsCheckFailed);
		void CheckAnonymousUserCommunication(bool isFriend, const class FScriptDelegate& Result);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlurBox
	 * Size -> 0x0038 (FullSize[0x0170] - InheritedSize[0x0138])
	 */
	class USBBlurBox : public UContentWidget
	{
	public:
		bool                                                       bRetainRender;                                           // 0x0138(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UURX[0x3];                                   // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMargin                                             Padding;                                                 // 0x013C(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EHorizontalAlignment                                       HorizontalAlignment;                                     // 0x014C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVerticalAlignment                                         VerticalAlignment;                                       // 0x014D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bApplyAlphaToBlur;                                       // 0x014E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4YG8[0x1];                                   // 0x014F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlurStrength;                                            // 0x0150(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideAutoRadiusCalculation;                          // 0x0154(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BORE[0x3];                                   // 0x0155(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BlurRadius;                                              // 0x0158(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       RenderOnInvalidation;                                    // 0x015C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ContinueRendering;                                       // 0x015D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VGH6[0x12];                                  // 0x015E(0x0012) MISSED OFFSET (PADDING)

	public:
		void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);
		void SetRetainRendering(bool bInRetainRendering);
		void SetPadding(const struct FMargin& InPadding);
		void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
		void SetBlurStrength(float InStrength);
		void SetBlurRadius(int32_t InBlurRadius);
		void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);
		void RequestRender();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.BlurBoxSlot
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UBlurBoxSlot : public UPanelSlot
	{
	public:
		struct FMargin                                             Padding;                                                 // 0x0038(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		EHorizontalAlignment                                       HorizontalAlignment;                                     // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EVerticalAlignment                                         VerticalAlignment;                                       // 0x0049(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YI9G[0x16];                                  // 0x004A(0x0016) MISSED OFFSET (PADDING)

	public:
		void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);
		void SetPadding(const struct FMargin& InPadding);
		void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateBoneScaleData
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBCharaCreateBoneScaleData : public UDataAsset
	{
	public:
		TArray<struct FSBCharaCreateBoneScaleGroupData>            GroupList;                                               // 0x0030(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBoneScaleCacheData
	 * Size -> 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
	 */
	class USBBoneScaleCacheData : public UObject
	{
	public:
		unsigned char                                              UnknownData_71NP[0x80];                                  // 0x0028(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharaCreateBoneScaleData*                         BoneScaleData;                                           // 0x00A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X48E[0x40];                                  // 0x00B0(0x0040) MISSED OFFSET (PADDING)

	public:
		float GetCrtBoneScale(ECharaPartsCrtBone CrtBoneID);
		struct FVector GetBoneScale(ECharaCreateBoneScaleID BoneScaleID);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBossHPGauge
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBBossHPGauge : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_WQDS[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanelSlot*                                    HPSlot;                                                  // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           SlotSizeXY;                                              // 0x0288(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6TA9[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateHPGaugeSize(float InHPRate);
		void OnSetBossCharacter(class ASBEnemyCharacter* InBoss);
		void OnReset();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBossHPGaugeList
	 * Size -> 0x0058 (FullSize[0x02D0] - InheritedSize[0x0278])
	 */
	class USBBossHPGaugeList : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        CanvasPanel;                                             // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBossHPGauge*                                      BossNamePlate_1;                                         // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBossHPGauge*                                      BossNamePlate_2;                                         // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBossHPGauge*                                      BossNamePlate_3;                                         // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBossHPGauge*                                      BossNamePlate_4;                                         // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBossHPGauge*                                      BossNamePlate_5;                                         // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBossHPGauge*                                      BossNamePlate_6;                                         // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HX43[0x20];                                  // 0x02B0(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnInAnimationCall();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBotCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBotCheatCommand : public UObject
	{
	public:
		void SpawnBot();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBotPathFollowingComponent
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class USBBotPathFollowingComponent : public UPathFollowingComponent
	{
	public:
		unsigned char                                              UnknownData_QIR8[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBotProjectSettings
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBBotProjectSettings : public UObject
	{
	public:
		struct FSoftClassPath                                      BotControllerClass;                                      // 0x0028(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBoxSoundComponent
	 * Size -> 0x0040 (FullSize[0x04D0] - InheritedSize[0x0490])
	 */
	class USBBoxSoundComponent : public UBoxComponent
	{
	public:
		class UAkComponent*                                        AkComponent;                                             // 0x0490(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_95B1[0x38];                                  // 0x0498(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBreathComponent
	 * Size -> 0x00F8 (FullSize[0x01B0] - InheritedSize[0x00B8])
	 */
	class USBBreathComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_EDK0[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_DefaultSocketName;                                     // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_bAutoplayEnabled;                                      // 0x00D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBBreathType                                              m_AutoplayBreathType;                                    // 0x00D9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_74BY[0x2];                                   // 0x00DA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_AutoplayBreathIntervalMin;                             // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_AutoplayBreathIntervalMax;                             // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JVCN[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBBreathSetting                                    m_BreathSettingList[0x2];                                // 0x00E8(0x00A0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LHD5[0x18];                                  // 0x0188(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedAssets;                                            // 0x01A0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization

	public:
		void SetAutoplayEnabled(bool Enabled);
		void SetAutoplayBreathType(ESBBreathType BreathType);
		void RequestCreateBreath(ESBBreathType BreathType, bool bAttach, const class FName& AttachSocketName, const struct FVector& LocationOffset, const struct FRotator& RotationOffset, float ScaleOffset);
		bool IsAutoplayEnabled();
		struct FSBBreathSetting GetBreathSetting(ESBBreathType BreathType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAdaptiveWalking
	 * Size -> 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
	 */
	class USBBTAdaptiveWalking : public UAIFwBTDecoratorNode
	{
	public:
		struct FSBBTNodePropertyWalkingMode                        WalkingModeLow;                                          // 0x0038(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FSBBTNodePropertyWalkingMode                        WalkingModeHigh;                                         // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            MaxTimeUntilArrival;                                     // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAdjustRootMotionFocusTarget
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBBTAdjustRootMotionFocusTarget : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           DirectionVectorBlackboardKey;                            // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAIQuery_NavRaycast
	 * Size -> 0x0068 (FullSize[0x00A8] - InheritedSize[0x0040])
	 */
	class USBBTAIQuery_NavRaycast : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           AgentName;                                               // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           StartKey;                                                // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           EndKey;                                                  // 0x0080(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              FilterClass;                                             // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAIQuery_Trace
	 * Size -> 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
	 */
	class USBBTAIQuery_Trace : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           FromKey;                                                 // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           ToKey;                                                   // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Extent;                                                  // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAttackAction
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBBTAttackAction : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAttackOrder
	 * Size -> 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
	 */
	class USBBTAttackOrder : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           OrderTargetKey;                                          // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           AttackTargetKey;                                         // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            DurationTime;                                            // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTRunAutoPlayTask
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBBTRunAutoPlayTask : public UAIFwBTNode
	{
	public:
		class UClass*                                              TaskClass;                                               // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bService;                                                // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WH7S[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReceiveInitAutoPlayTask(class UAutoPlayTask* AutoPlayTask, const struct FAIFwBlackboard& Blackboard);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAutoPlay_Explore
	 * Size -> 0x0068 (FullSize[0x00B8] - InheritedSize[0x0050])
	 */
	class USBBTAutoPlay_Explore : public USBBTRunAutoPlayTask
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AcceptableRadius;                                        // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bAllowStrafe;                                            // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bAllowPartialPath;                                       // 0x00A0(0x0018) Edit, AdvancedDisplay, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAutoPlay_ExploreTo
	 * Size -> 0x0028 (FullSize[0x0078] - InheritedSize[0x0050])
	 */
	class USBBTAutoPlay_ExploreTo : public USBBTRunAutoPlayTask
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              FilterClass;                                             // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAutoPlay_FindPOI
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBBTAutoPlay_FindPOI : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAutoPlay_InputAction
	 * Size -> 0x0020 (FullSize[0x0070] - InheritedSize[0x0050])
	 */
	class USBBTAutoPlay_InputAction : public USBBTRunAutoPlayTask
	{
	public:
		ESBUIKeyConfigAction                                       Action;                                                  // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XXWG[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAIFwBTNodePropertyFloat                            DurationTime;                                            // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAutoPlay_LookAt
	 * Size -> 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
	 */
	class USBBTAutoPlay_LookAt : public USBBTRunAutoPlayTask
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AcceptableAngle;                                         // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAutoPlay_MoveTo
	 * Size -> 0x0070 (FullSize[0x00C0] - InheritedSize[0x0050])
	 */
	class USBBTAutoPlay_MoveTo : public USBBTRunAutoPlayTask
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AcceptableRadius;                                        // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              FilterClass;                                             // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bAllowStrafe;                                            // 0x0090(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bAllowPartialPath;                                       // 0x00A8(0x0018) Edit, AdvancedDisplay, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTAutoPlay_UsePOI
	 * Size -> 0x0020 (FullSize[0x0070] - InheritedSize[0x0050])
	 */
	class USBBTAutoPlay_UsePOI : public USBBTRunAutoPlayTask
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCanHitAttack
	 * Size -> 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
	 */
	class USBBTCanHitAttack : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           ActionName;                                              // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bDrawDebugInfo;                                          // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTChangeBattleMode
	 * Size -> 0x0030 (FullSize[0x0098] - InheritedSize[0x0068])
	 */
	class USBBTChangeBattleMode : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyBool                             bBattle;                                                 // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bInstantTransition;                                      // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckAnimTag
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBBTCheckAnimTag : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           AnimTag;                                                 // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckCollisionHitActor
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBBTCheckCollisionHitActor : public UAIFwBTNode
	{
	public:
		class FString                                              BlackboardKey;                                           // 0x0040(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckCurrentStance
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBBTCheckCurrentStance : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           StanceName;                                              // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckEffectiveStatusAilment
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBBTCheckEffectiveStatusAilment : public UAIFwBTNode
	{
	public:
		EAIFwBTBattleEffectiveType                                 BattleEffectiveType;                                     // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P2BD[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckFrontNavigation
	 * Size -> 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
	 */
	class USBBTCheckFrontNavigation : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            Length;                                                  // 0x0040(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             Acceptance;                                              // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             UseTrace;                                                // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Extent;                                                  // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckGameTime
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBBTCheckGameTime : public UAIFwBTNode
	{
	public:
		unsigned char                                              FromHour;                                                // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              FromMinute;                                              // 0x0041(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ToHour;                                                  // 0x0042(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              ToMinute;                                                // 0x0043(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K314[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckGameTimePeriod
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBBTCheckGameTimePeriod : public UAIFwBTNode
	{
	public:
		ESBDayTime                                                 TimePeriod;                                              // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BCTH[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckHeightDifference
	 * Size -> 0x0070 (FullSize[0x00B0] - InheritedSize[0x0040])
	 */
	class USBBTCheckHeightDifference : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Value;                                                   // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		ESBBTComparison                                            Comparison;                                              // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HKIM[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAIFwBTNodePropertyBool                             bUseNavAgentLocation;                                    // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bUseAbs;                                                 // 0x0098(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckHPRate
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBBTCheckHPRate : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Value;                                                   // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		ESBBTComparison                                            Comparison;                                              // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_43BC[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckNavigationRaycast
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBBTCheckNavigationRaycast : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCheckUnderFootRaycast
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBBTCheckUnderFootRaycast : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTComposite_Branch_Random
	 * Size -> 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
	 */
	class USBBTComposite_Branch_Random : public UBTCompositeNode
	{
	public:
		unsigned char                                              UnknownData_VWYH[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTComposite_Branch_Switch
	 * Size -> 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
	 */
	class USBBTComposite_Branch_Switch : public UBTCompositeNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTComposite_Branch_If
	 * Size -> 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
	 */
	class USBBTComposite_Branch_If : public UBTCompositeNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTConditionBlackboard_Actor
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBBTConditionBlackboard_Actor : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           Key;                                                     // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           Value;                                                   // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCopyBBValue
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBBTCopyBBValue : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           ActorKey;                                                // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTCorrectMoveSpeed
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBBTCorrectMoveSpeed : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            CorrectRate;                                             // 0x0038(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTDecorator_BranchTag
	 * Size -> 0x0038 (FullSize[0x00A0] - InheritedSize[0x0068])
	 */
	class USBBTDecorator_BranchTag : public UBTDecorator
	{
	public:
		bool                                                       m_bUseBBValue;                                           // 0x0068(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NBVK[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              m_bbkValue;                                              // 0x0070(0x0028) Edit, NativeAccessSpecifierPublic
		float                                                      m_fWeight;                                               // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JHVH[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTDecoratorBase
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class USBBTDecoratorBase : public UBTDecorator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTDecorator_CheckDistance
	 * Size -> 0x0068 (FullSize[0x00D0] - InheritedSize[0x0068])
	 */
	class USBBTDecorator_CheckDistance : public USBBTDecoratorBase
	{
	public:
		struct FBlackboardKeySelector                              m_bbkTargetLoc;                                          // 0x0068(0x0028) Edit, NativeAccessSpecifierPublic
		bool                                                       m_bUseBBKDistance;                                       // 0x0090(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TC4V[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              m_bbkDistance;                                           // 0x0098(0x0028) Edit, NativeAccessSpecifierPublic
		float                                                      m_fDistance;                                             // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_fMinDistance;                                          // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_bIgnoreZ;                                              // 0x00C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_US4E[0x7];                                   // 0x00C9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTDecorator_IsDead
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class USBBTDecorator_IsDead : public USBBTDecoratorBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTDecorator_IsBattle
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class USBBTDecorator_IsBattle : public USBBTDecoratorBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTDisableInput
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBBTDisableInput : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTDisableInteraction
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBBTDisableInteraction : public UAIFwBTDecoratorNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTDisableUpdateRateOptimizations
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBBTDisableUpdateRateOptimizations : public UAIFwBTDecoratorNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTEnemySubmargedExit
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBBTEnemySubmargedExit : public UAIFwBTDecoratorNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTEnemyTargetingUnderFoot
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBBTEnemyTargetingUnderFoot : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackBoradKey_UnderFootZMargin;                          // 0x0038(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTEvaluationDot
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class USBBTEvaluationDot : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            DotMin;                                                  // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            DotMax;                                                  // 0x0078(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTFleeFrom
	 * Size -> 0x0088 (FullSize[0x00F0] - InheritedSize[0x0068])
	 */
	class USBBTFleeFrom : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackBoradKey_TargetActorOrLocation;                     // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            FleeDistance;                                            // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bAllowNotEnoughPath;                                     // 0x00A0(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AcceptableMoveDistanceOfTarget;                          // 0x00B8(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           BlackBoradKey_NavQueryFilter;                            // 0x00D0(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTFlyingHeight
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBBTFlyingHeight : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            FlyingHeight;                                            // 0x0038(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTFollowingAnchor
	 * Size -> 0x0090 (FullSize[0x00C8] - InheritedSize[0x0038])
	 */
	class USBBTFollowingAnchor : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BaseLocationKey;                                         // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           BaseVelocityActorKey;                                    // 0x0058(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AnchorTime;                                              // 0x0078(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           AnchorKey;                                               // 0x0090(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             IgnoreZVelocity;                                         // 0x00B0(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTFollowingWarp
	 * Size -> 0x0040 (FullSize[0x00A8] - InheritedSize[0x0068])
	 */
	class USBBTFollowingWarp : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackBoradKey_TargetActorOrLocation;                     // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           BlackBoradKey_TargetRotation;                            // 0x0088(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTGiveOrders
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBBTGiveOrders : public UAIFwBTNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTIgnorePushOut
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBBTIgnorePushOut : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           Character;                                               // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTIsAiming
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBBTIsAiming : public UAIFwBTNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTIsBlendAction
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBBTIsBlendAction : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           ActionName;                                              // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTLookAt
	 * Size -> 0x0068 (FullSize[0x00A0] - InheritedSize[0x0038])
	 */
	class USBBTLookAt : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyBool                             bEnabled;                                                // 0x0038(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bUsingFocus;                                             // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyInt                              LookAtIndex;                                             // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTLookAt_UnderFootLocation
	 * Size -> 0x0020 (FullSize[0x00C0] - InheritedSize[0x00A0])
	 */
	class USBBTLookAt_UnderFootLocation : public USBBTLookAt
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackBoradKey_UnderFootZMargin;                          // 0x00A0(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTMakeNewOrder
	 * Size -> 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
	 */
	class USBBTMakeNewOrder : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           MemberKey;                                               // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bCanCancel;                                              // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           DebugName;                                               // 0x0078(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTMoveGoalVelocity
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBBTMoveGoalVelocity : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           GoalVelocityKey;                                         // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTMoveToAttackTag
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBBTMoveToAttackTag : public UAIFwBTDecoratorNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTMoveToStaticContext
	 * Size -> 0x00A8 (FullSize[0x00E8] - InheritedSize[0x0040])
	 */
	class USBBTMoveToStaticContext : public UAIFwBTNode
	{
	public:
		unsigned char                                              UnknownData_51F5[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0048(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AcceptableRadius;                                        // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class UClass*                                              FilterClass;                                             // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bAllowStrafe;                                            // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bAllowPartialPath;                                       // 0x00A0(0x0018) Edit, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bReachTestIncludesAgentRadius;                           // 0x00B8(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bReachTestIncludesGoalRadius;                            // 0x00D0(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTNPCFinishTalk
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBBTNPCFinishTalk : public UAIFwBTDecoratorNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTNPCTalkTurnTo
	 * Size -> 0x0060 (FullSize[0x00C8] - InheritedSize[0x0068])
	 */
	class USBBTNPCTalkTurnTo : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           Command;                                                 // 0x0088(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           FailedLocationKey;                                       // 0x00A8(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTNPCTurnTo
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class USBBTNPCTurnTo : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrderBase
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBBTOrderBase : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           MemberKey;                                               // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrder_AreaRestriction
	 * Size -> 0x0040 (FullSize[0x00A0] - InheritedSize[0x0060])
	 */
	class USBBTOrder_AreaRestriction : public USBBTOrderBase
	{
	public:
		ESBAIActionAreaType                                        Type;                                                    // 0x0060(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M4FA[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAIFwBTNodePropertyString                           OriginKey;                                               // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Range;                                                   // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrder_CopyBBToParam
	 * Size -> 0x0010 (FullSize[0x0070] - InheritedSize[0x0060])
	 */
	class USBBTOrder_CopyBBToParam : public USBBTOrderBase
	{
	public:
		TArray<class FString>                                      Parameters;                                              // 0x0060(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrder_TacticalSkill
	 * Size -> 0x0008 (FullSize[0x0068] - InheritedSize[0x0060])
	 */
	class USBBTOrder_TacticalSkill : public USBBTOrderBase
	{
	public:
		class UClass*                                              TacticalSkill;                                           // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrderCond_ActiveListener
	 * Size -> 0x0020 (FullSize[0x0080] - InheritedSize[0x0060])
	 */
	class USBBTOrderCond_ActiveListener : public USBBTOrderBase
	{
	public:
		struct FAIFwBTNodePropertyString                           ListenerKey;                                             // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrderCond_HPRate
	 * Size -> 0x0040 (FullSize[0x00A0] - InheritedSize[0x0060])
	 */
	class USBBTOrderCond_HPRate : public USBBTOrderBase
	{
	public:
		struct FAIFwBTNodePropertyString                           ActorKey;                                                // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            HPRate;                                                  // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		ESBAIOrderConditionComparison                              ComparisonType;                                          // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_46FE[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrderCond_OrderedAttack
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class USBBTOrderCond_OrderedAttack : public USBBTOrderBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrderCond_Time
	 * Size -> 0x0018 (FullSize[0x0078] - InheritedSize[0x0060])
	 */
	class USBBTOrderCond_Time : public USBBTOrderBase
	{
	public:
		struct FAIFwBTNodePropertyFloat                            Time;                                                    // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrderParam_Object
	 * Size -> 0x0040 (FullSize[0x00A0] - InheritedSize[0x0060])
	 */
	class USBBTOrderParam_Object : public USBBTOrderBase
	{
	public:
		struct FAIFwBTNodePropertyString                           Name;                                                    // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           ValueKey;                                                // 0x0080(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrderParam_ObjectArray
	 * Size -> 0x0040 (FullSize[0x00A0] - InheritedSize[0x0060])
	 */
	class USBBTOrderParam_ObjectArray : public USBBTOrderBase
	{
	public:
		struct FAIFwBTNodePropertyString                           Name;                                                    // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           ValueKey;                                                // 0x0080(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTOrderParam_String
	 * Size -> 0x0040 (FullSize[0x00A0] - InheritedSize[0x0060])
	 */
	class USBBTOrderParam_String : public USBBTOrderBase
	{
	public:
		struct FAIFwBTNodePropertyString                           Name;                                                    // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           Value;                                                   // 0x0080(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTPreventPlanning
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBBTPreventPlanning : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyBool                             bPrevention;                                             // 0x0038(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTRequestReplanningToCombatCoordinator
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBBTRequestReplanningToCombatCoordinator : public UAIFwBTNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTRequiresComboToEndAttackHit
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBBTRequiresComboToEndAttackHit : public UAIFwBTNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTRunaway
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class USBBTRunaway : public UAIFwBTRunAITask
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTSendAnimCommandWithAbility
	 * Size -> 0x0048 (FullSize[0x00B0] - InheritedSize[0x0068])
	 */
	class USBBTSendAnimCommandWithAbility : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyString                           Command;                                                 // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           SubCommand;                                              // 0x0088(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_16YY[0x8];                                   // 0x00A8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTSetEnemyTargetInfo
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBBTSetEnemyTargetInfo : public UAIFwBTNode
	{
	public:
		ESBEnemyTargetType                                         TargetType;                                              // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WMDP[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BlackboardKey;                                           // 0x0048(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTSortTargetInfo_CombineBit
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBBTSortTargetInfo_CombineBit : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTSquadOrder
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class USBBTSquadOrder : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           MemberKey;                                               // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		class USBAICommand*                                        Order;                                                   // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      Parameters;                                              // 0x0068(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTStoreActionArea
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBBTStoreActionArea : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           AreaOriginKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           AreaRadiusKey;                                           // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTStoreEstimatedLocation
	 * Size -> 0x0078 (FullSize[0x00B8] - InheritedSize[0x0040])
	 */
	class USBBTStoreEstimatedLocation : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           ActorKey;                                                // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Time;                                                    // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           ActionName;                                              // 0x0098(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTStoreLastKnownLocation
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBBTStoreLastKnownLocation : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           ActorKey;                                                // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTStoreRelativeLocation
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class USBBTStoreRelativeLocation : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           Key;                                                     // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Offset;                                                  // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Angle;                                                   // 0x0078(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTSuperFastMoveTo
	 * Size -> 0x0070 (FullSize[0x00D8] - InheritedSize[0x0068])
	 */
	class USBBTSuperFastMoveTo : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyString                           Command;                                                 // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           BlackBoradKey_TargetActorOrLocation;                     // 0x0088(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            OffsetDistance;                                          // 0x00A8(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AcceptableMoveDistanceOfTarget;                          // 0x00C0(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTTask_SendAnimCommand
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBBTTask_SendAnimCommand : public UBTTaskNode
	{
	public:
		class FName                                                Command;                                                 // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTTask_SetBattleState
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBBTTask_SetBattleState : public UBTTaskNode
	{
	public:
		bool                                                       bEnable;                                                 // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HG9W[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTTask_SetEnemyTargetInfo
	 * Size -> 0x0030 (FullSize[0x00A0] - InheritedSize[0x0070])
	 */
	class USBBTTask_SetEnemyTargetInfo : public UBTTaskNode
	{
	public:
		ESBEnemyTargetType                                         TargetType;                                              // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SI80[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlackboardKeySelector                              TargetKey;                                               // 0x0078(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTTask_SetProjectileTarget
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class USBBTTask_SetProjectileTarget : public UBTTaskNode
	{
	public:
		class FString                                              ProjectileTargetKey;                                     // 0x0070(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FBlackboardKeySelector                              ProjectileTargetKey_UE4;                                 // 0x0080(0x0028) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTTask_UpdateBattleState
	 * Size -> 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
	 */
	class USBBTTask_UpdateBattleState : public UBTTaskNode
	{
	public:
		TArray<struct FBlackboardKeySelector>                      PerceptedActorKeys;                                      // 0x0070(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTToggleSense
	 * Size -> 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
	 */
	class USBBTToggleSense : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           SenseTag;                                                // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bEnabled;                                                // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTTSRunMappedQuery
	 * Size -> 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
	 */
	class USBBTTSRunMappedQuery : public UAIFwBTRunPerceptionTree
	{
	public:
		struct FAIFwBTNodePropertyString                           Key;                                                     // 0x0088(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTTurnTo
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class USBBTTurnTo : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTWaitForAiming
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBBTWaitForAiming : public UAIFwBTNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTWaitForAnimation
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class USBBTWaitForAnimation : public UAIFwBTRunAITask
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTWaitForWarpTiming
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBBTWaitForWarpTiming : public UAIFwBTNode
	{
	public:
		unsigned char                                              UnknownData_VIZW[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTWalkingMode
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBBTWalkingMode : public UAIFwBTDecoratorNode
	{
	public:
		struct FSBBTNodePropertyWalkingMode                        WalkingMode;                                             // 0x0038(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTWalkingModeByMinSpeed
	 * Size -> 0x0030 (FullSize[0x0080] - InheritedSize[0x0050])
	 */
	class USBBTWalkingModeByMinSpeed : public USBBTWalkingMode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            MinSpeed;                                                // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bUseHighestModeIfFailed;                                 // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBTWarpMoveTo
	 * Size -> 0x0038 (FullSize[0x00A0] - InheritedSize[0x0068])
	 */
	class USBBTWarpMoveTo : public UAIFwBTRunAITask
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackBoradKey_TargetActorOrLocation;                     // 0x0068(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FSBBTNodePropertyWarpDirectionType                  WarpDirectionType;                                       // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBuddyConditionalVoiceManager
	 * Size -> 0x0138 (FullSize[0x0160] - InheritedSize[0x0028])
	 */
	class USBBuddyConditionalVoiceManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_FFDQ[0x138];                                 // 0x0028(0x0138) MISSED OFFSET (PADDING)

	public:
		void OnPlayEndConditionVoice();
		void NotifyCondition(const class FName& ConditionId, class ASBEnemyCharacter* InBuddyEnemy);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBuddyEnemyManager
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class USBBuddyEnemyManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_BWB0[0x58];                                  // 0x0028(0x0058) MISSED OFFSET (PADDING)

	public:
		void SetStopUpdateRevival(bool bInStop);
		void ReviveAllBuddies();
		bool IsStopUpdateRevival();
		class ASBEnemyCharacter* GetBuddy(const class FString& InEnemyId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBuddyFindMasterComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBBuddyFindMasterComponent : public UActorComponent
	{
	public:
		class ASBPlayerCharacter*                                  FollowingMaster;                                         // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WJDV[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChangedMasterDelegate;                                 // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		float GetFollowingMasterSheatheTime();
		class ASBPlayerCharacter* GetFollowingMaster();
		class ASBPlayerCharacter* FindMaster();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBuffGauge
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBBuffGauge : public UUserWidget
	{
	public:
		void PlayAnim(float InStartTime, float InAnimSpeed);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBuffIcon
	 * Size -> 0x0050 (FullSize[0x02C8] - InheritedSize[0x0278])
	 */
	class USBBuffIcon : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnEndDelegate;                                           // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBBuffGauge*                                        Gauge;                                                   // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsLargeIcon;                                             // 0x0290(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsGauge;                                                 // 0x0291(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AS23[0x2];                                   // 0x0292(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlinkTime;                                               // 0x0294(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CG1C[0x30];                                  // 0x0298(0x0030) MISSED OFFSET (PADDING)

	public:
		void StopAnim();
		bool Setup(const struct FSBStatusAilmentIconConfig& InConfig);
		void PlayAnim();
		bool OnSetup(ESBStatusAilmentIconType InType);
		void OnEndDelegate__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBuffListWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBBuffListWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnClientRecieveBattleStatusDelegete;                     // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class USBBattleStatusComponent*                            BattleStatusComponent;                                   // 0x0288(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsVisibleGauge;                                          // 0x0290(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1O90[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateList();
		void UnbindBattleStatusComponent();
		void SetupBattleStatusComponent(class USBBattleStatusComponent* InBattleStatusComponent);
		void Setup(TArray<struct FSBStatusAilmentIconConfig> InConfigList);
		void Reset();
		class USBBuffIcon* OnCreateIcon();
		void OnClientRecieveBattleStatusDelegete__DelegateSignature();
		class UPanelWidget* GetList();
		class USBBattleStatusComponent* GetBattleStatusComponent();
		int32_t GetActiveCountList();
		void BindEventClientRecieveBattleStatus();
		void BindBattleStatusComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBurstBonusGaugeWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBBurstBonusGaugeWidget : public UUserWidget
	{
	public:
		struct FVector2D                                           DefaultGaugeSize;                                        // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9G4S[0x18];                                  // 0x0280(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetGaugeSize(const struct FVector2D& InSize);
		void SetDefaultGaugeSize(const struct FVector2D& InDefaultGaugeSize);
		void OnUpdateTime();
		void OnUpdateLV();
		void OnSetup();
		float GetTimeRate();
		float GetTimeMax();
		float GetTime();
		int32_t GetLV();
		float GetGaugeSizeRate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBButtonBase
	 * Size -> 0x0020 (FullSize[0x0460] - InheritedSize[0x0440])
	 */
	class USBButtonBase : public UButton
	{
	public:
		unsigned char                                              UnknownData_IF5Y[0x8];                                   // 0x0440(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       PressedAkAudioEvent;                                     // 0x0448(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       HoveredAkAudioEvent;                                     // 0x0450(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  PressedSystemSEId;                                       // 0x0458(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  HoveredSystemSEId;                                       // 0x0459(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DAC5[0x6];                                   // 0x045A(0x0006) MISSED OFFSET (PADDING)

	public:
		bool PressedButtonFunction();
		void PreConstruct(bool IsDesignTime);
		void OnUnhoveredForSe();
		void OnPostSoundEvent_ButtonHovered();
		void OnPostSoundEvent_ButtonClicked();
		void OnClickedEvent();
		bool IsCovered();
		void ForceUnhover();
		void Construct();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBButtonClickedEventParam
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBButtonClickedEventParam : public UObject
	{
	public:
		class FString                                              GeneratedWidgetName;                                     // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBButtonTowerEdit
	 * Size -> 0x0008 (FullSize[0x0448] - InheritedSize[0x0440])
	 */
	class USBButtonTowerEdit : public UButton
	{
	public:
		int32_t                                                    FloorIdx;                                                // 0x0440(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EHP8[0x4];                                   // 0x0444(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetAutoPositionByIdx(float BaseX, float BaseY, float Width, float Height);
		void OnFloorButtonClicked();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCameraControlByPassWidget
	 * Size -> 0x0008 (FullSize[0x02B8] - InheritedSize[0x02B0])
	 */
	class USBCameraControlByPassWidget : public USBUserWidget
	{
	public:
		class ASBScriptActor*                                      ScriptActor;                                             // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCameraInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCameraInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCameraLeaveCollisionComponent
	 * Size -> 0x0008 (FullSize[0x0490] - InheritedSize[0x0488])
	 */
	class USBCameraLeaveCollisionComponent : public USphereComponent
	{
	public:
		unsigned char                                              UnknownData_2IYO[0x8];                                   // 0x0488(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCameraTransparentCapsuleComponent
	 * Size -> 0x0008 (FullSize[0x0490] - InheritedSize[0x0488])
	 */
	class USBCameraTransparentCapsuleComponent : public UCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_1PLB[0x8];                                   // 0x0488(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCameraTransparentBoxComponent
	 * Size -> 0x0000 (FullSize[0x0490] - InheritedSize[0x0490])
	 */
	class USBCameraTransparentBoxComponent : public UBoxComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCaptureStudioBaseActor
	 * Size -> 0x0030 (FullSize[0x0520] - InheritedSize[0x04F0])
	 */
	class ASBCaptureStudioBaseActor : public AASCharacterBase
	{
	public:
		unsigned char                                              UnknownData_JT20[0x18];                                  // 0x04F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedAssets;                                            // 0x0508(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class ASBEnemyCharacter*                                   ModelActor;                                              // 0x0518(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SpawnLibraryEnemy(const class FString& EnemyId, class UClass* EnemyClass, const struct FTransform& SpawnTransform);
		bool RequestLoadAsset_Imagine(const struct FSBCaptureStudioImagineData& InData);
		bool RequestLoadAsset(TArray<struct FSoftObjectPath> InAssets);
		void OnCompleteSpawn();
		void OnAssetLoadedInternal();
		void OnAssetLoaded(bool bInResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCaptureStudioCreationCharacter
	 * Size -> 0x0020 (FullSize[0x0540] - InheritedSize[0x0520])
	 */
	class ASBCaptureStudioCreationCharacter : public ASBCaptureStudioBaseActor
	{
	public:
		unsigned char                                              UnknownData_MACM[0x8];                                   // 0x0520(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharaCreateComponent*                             CharaCreateComponent;                                    // 0x0528(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCharaPartsFaceComponent*                          FaceComp;                                                // 0x0530(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VPWU[0x8];                                   // 0x0538(0x0008) MISSED OFFSET (PADDING)

	public:
		bool SetCharaCreateData(class USBCharaCreateData* InCharaCreateData);
		void OnCreateLoaded(bool bInResult);
		bool IsValidCharaCreateData();
		bool InitCharaCreateComponent();
		bool ApplyCharaCreateComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCarry
	 * Size -> 0x0040 (FullSize[0x05C0] - InheritedSize[0x0580])
	 */
	class ASBCarry : public AASCharacter
	{
	public:
		unsigned char                                              UnknownData_WHB9[0x18];                                  // 0x0580(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsCarryUp;                                               // 0x0598(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YJV9[0x7];                                   // 0x0599(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBPlayerCharacter*                                  CarryingPlayer;                                          // 0x05A0(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetCarryingPlayerDelegate;                             // 0x05A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1QD0[0x8];                                   // 0x05B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateServerTmpLocationAndRotation(const struct FVector& InLocation, const struct FRotator& InRotation);
		void SetIsCarryUp(bool Sw);
		void ServerUpdateCarryObjectLocationAndRotation(const struct FVector& InVector, const struct FRotator& InRotation);
		void RequestUpdateCarryObjectLocationAndRotation(const struct FVector& InVector, const struct FRotator& InRotation);
		void OnSetCarryingPlayer__DelegateSignature();
		void OnRep_CarryingPlayer();
		void GetServerTmpLocationAndRotation(struct FVector* OutLocation, struct FRotator* OutRotation);
		void ClientUpdateCarryObjectLocationAndRotation(const struct FVector& InVector, const struct FRotator& InRotation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCashExchangeShopComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBCashExchangeShopComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnGetProductListDelegate;                                // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPurchaseDelegate;                                      // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_Purchase(int32_t iProductID, int32_t Amount);
		void Request_Purchase(int32_t ProductId, int32_t Amount);
		void Request_GetProductList(class ASBPlayerController* InPlayerController);
		void OnPurchaseDelegate__DelegateSignature(bool Result);
		void OnGetProductListDelegate__DelegateSignature(bool Result);
		void Client_Purchase(bool bInWasSuccessful);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaBodyCapsuleComponent
	 * Size -> 0x0040 (FullSize[0x04F0] - InheritedSize[0x04B0])
	 */
	class USBCharaBodyCapsuleComponent : public UASCollisionCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_NIKO[0x40];                                  // 0x04B0(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaBodyCapsuleGroupComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBCharaBodyCapsuleGroupComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_7XJA[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBCharaBodyCapsuleComponent*>                m_CharaBodyCapsuleComponentList;                         // 0x00C8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateBoneScaleManager
	 * Size -> 0x02E0 (FullSize[0x0308] - InheritedSize[0x0028])
	 */
	class USBCharaCreateBoneScaleManager : public UObject
	{
	public:
		float                                                      HeadScale;                                               // 0x0028(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2VNN[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCharaCreateBoneScaleList                           OtherBoneScaleList;                                      // 0x0030(0x0068) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FCharaCreateBoneScaleList                           PlayerBoneScaleList;                                     // 0x0098(0x0068) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FCharaCreateBoneScaleList                           ExtraNpcBoneScaleList;                                   // 0x0100(0x0068) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FCharaCreateBoneScaleList                           MobBoneScaleList;                                        // 0x0168(0x0068) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FCharaCreateBoneScaleList                           MobR04BoneScaleList;                                     // 0x01D0(0x0068) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FCharaCreateBoneScaleList                           MobR05BoneScaleList;                                     // 0x0238(0x0068) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FCharaCreateBoneScaleList                           ShadowAvatorScaleList;                                   // 0x02A0(0x0068) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacter
	 * Size -> 0x0A70 (FullSize[0x0FF0] - InheritedSize[0x0580])
	 */
	class ASBCharacter : public AASCharacter
	{
	public:
		unsigned char                                              UnknownData_TBNC[0x130];                                 // 0x0580(0x0130) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnReplicatedPlayerState;                                 // 0x06B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LC19[0x50];                                  // 0x06C0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedAssets;                                            // 0x0710(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		TArray<class UObject*>                                     m_HoldingAssets;                                         // 0x0720(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_ZY8W[0x8];                                   // 0x0730(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBBattleArea*                                       CurrentBattleArea;                                       // 0x0738(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PL53[0x8];                                   // 0x0740(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CharacterName;                                           // 0x0748(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentHitPoint;                                         // 0x0758(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Weight;                                                  // 0x075C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AYVC[0x8];                                   // 0x0760(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ImpulsePow;                                              // 0x0768(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Stamina;                                                 // 0x076C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7LO2[0x30];                                  // 0x0770(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCollisionGroupInfo>                       CollisionGroupInfo;                                      // 0x07A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBCollisionGroupHitPointInfo>               CollisionGroupHitPointInfo;                              // 0x07B0(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PTL6[0x4];                                   // 0x07C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ResistAbsorbValue;                                       // 0x07C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPartsDamageAnimParamter*                          PartsDamageAnimParamter;                                 // 0x07C8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V0S7[0x48];                                  // 0x07D0(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 m_DamageReactionPattern;                                 // 0x0818(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBElementResistanceSetting>                 m_ElementResistanceList;                                 // 0x0828(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      ElementStatusEffectSpawnNumScale;                        // 0x0838(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ElementStatusEffectSizeScale;                            // 0x083C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U4L0[0x50];                                  // 0x0840(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBElementDamageCondition                           m_ElementDamageEarth;                                    // 0x0890(0x0050) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		struct FSBElementDamageCondition                           m_ElementDamageFire;                                     // 0x08E0(0x0050) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		struct FSBElementDamageCondition                           m_ElementDamageIce;                                      // 0x0930(0x0050) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		struct FSBElementDamageCondition                           m_ElementDamageThunder;                                  // 0x0980(0x0050) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		struct FSBElementDamageCondition                           m_ElementDamageLight;                                    // 0x09D0(0x0050) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		struct FSBElementDamageCondition                           m_ElementDamageDarkness;                                 // 0x0A20(0x0050) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		float                                                      FreezeAilmentMashingInput;                               // 0x0A70(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FreezeAilmentAttackMagnification;                        // 0x0A74(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_825D[0x10];                                  // 0x0A78(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_ElementDamageResetTimer;                               // 0x0A88(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6DIN[0x4];                                   // 0x0A8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentElementalBurstBonusTimer;                         // 0x0A90(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int8_t                                                     CurrentElementalBurstBonusLevel;                         // 0x0A94(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_50JO[0x3];                                   // 0x0A95(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentElementalBurstBonusGaugeRate;                     // 0x0A98(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1CLC[0xC];                                   // 0x0A9C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartElementalBurstDelegate;                           // 0x0AA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndElementalBurstDelegate;                             // 0x0AB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInterruptElementalBurstDelegate;                       // 0x0AC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1R2M[0x4];                                   // 0x0AD8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FlashTime;                                               // 0x0ADC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3XQI[0xC];                                   // 0x0AE0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bPushOutDisabled;                                      // 0x0AEC(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_ILJS[0x3];                                   // 0x0AED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      PushOutIgnoreActors;                                     // 0x0AF0(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_WLB7[0x70];                                  // 0x0B00(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAttackManageNumberInfo>                   m_AttackManageNumberList;                                // 0x0B70(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4CRX[0x10];                                  // 0x0B80(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCharacterDeadDelegete;                                 // 0x0B90(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterTakeDamage;                                   // 0x0BA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterTakeDamageWhenAttackHit;                      // 0x0BB0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O3H3[0x40];                                  // 0x0BC0(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBDamageInfo                                       LastDamageInfo;                                          // 0x0C00(0x0058) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TPGJ[0x78];                                  // 0x0C58(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBCounterDamageState                                      CounterDamageState;                                      // 0x0CD0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FEVH[0x3];                                   // 0x0CD1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCounterDamageRate                                CounterDamageRate;                                       // 0x0CD4(0x0018) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IZFL[0x34];                                  // 0x0CEC(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBInventoryWeapon>                          InventoryWeapons;                                        // 0x0D20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8H36[0x10];                                  // 0x0D30(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBSpawnWeaponLoadParam>                     CurrentSpawnWeapons;                                     // 0x0D40(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBEquipWeapon>                              EquipWeapons;                                            // 0x0D50(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		class FName                                                WeaponAttachPoint[0x8];                                  // 0x0D60(0x0040) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PXZ7[0x50];                                  // 0x0DA0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBWeaponVisibilityComponent*                        WeaponVisibilityComponent;                               // 0x0DF0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBPlayEffect                                       LastPlayEffect;                                          // 0x0DF8(0x0038) Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBSpecialHitEffect>                         m_SpecialHitEffectList;                                  // 0x0E30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M81J[0x20];                                  // 0x0E40(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsApplyIdentificationFriendOrFoe : 1;                   // 0x0E60(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0HTG[0x7];                                   // 0x0E61(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, struct FSBPlayingEffect>               PlayingEffectMap;                                        // 0x0E68(0x0050) Transient, NativeAccessSpecifierPublic, CPF_SkipSerialization
		unsigned char                                              UnknownData_OEPJ[0x58];                                  // 0x0EB8(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBProjectileSpawnComponent*                         SpawnComp;                                               // 0x0F10(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBattleStatusComponent*                            BattleStatusComp;                                        // 0x0F18(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileShareHitComponent*                      ProjectileShareHitComp;                                  // 0x0F20(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileSendNetDataComponent*                   SendNetDataComp;                                         // 0x0F28(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileStateManageComponent*                   StateManageComp;                                         // 0x0F30(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZF27[0x18];                                  // 0x0F38(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsGround : 1;                                           // 0x0F50(0x0001) BIT_FIELD Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A9XX[0x7];                                   // 0x0F51(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBMoveSpeedSetting>                         m_MoveSpeedSetting;                                      // 0x0F58(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class USBFootprintComponent*                               FootprintComp;                                           // 0x0F68(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		class USBAnimationControlComponent*                        AnimationControlComp;                                    // 0x0F70(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z7EX[0x8];                                   // 0x0F78(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBDemoParameterComponent*                           DemoParameterComp;                                       // 0x0F80(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAIFwFactionComponent*                               FactionComponent;                                        // 0x0F88(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBFactionInfluenceSourceComponent*                  FactionInfluenceComponent;                               // 0x0F90(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAISharedInfoComponent*                            AISharedInfoComponent;                                   // 0x0F98(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBMovementPredictComponent*                         MovePredictComponent;                                    // 0x0FA0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MIK3[0x8];                                   // 0x0FA8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBActorVisibilityComponent*                         ActorVisibilityComponent;                                // 0x0FB0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8NDY[0x28];                                  // 0x0FB8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    VillageCollisionCount;                                   // 0x0FE0(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bForceMipStreaming;                                      // 0x0FE4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OJHB[0x3];                                   // 0x0FE5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBDebugFunctionComponent*                           DebugFunctionComponent;                                  // 0x0FE8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void VerifyEquipWeapon();
		void UnequipWeapon(int32_t InventoryIndex);
		void StopWeaponAnimation(int32_t InventoryIndex);
		void StopKnockBack();
		void StatusAlimentNotify();
		void SpawnInventoryWeapons(TArray<struct FSBSpawnWeaponLoadParam> NewSpawnWeapons, TArray<struct FSBSpawnWeaponLoadParam> LastSpawnWeapons);
		void SetPushOutDisabled(bool bDisabled);
		void SetKnockBack(const struct FVector& Vec, float Distance, float Time);
		void SetForceMipStreaming(bool bEnable);
		void SetEquipWeapon(ESBWeaponAttach WeaponAttach, int32_t NewInventoryIndex, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale3D);
		void ServerUpdateAttackManageNumberListDiff();
		void ServerUpdateAttackManageNumberListAll();
		void ServerTakeStatusAilment(const struct FSBStatusAilmentHandle& StatusHandle, class AActor* InstigatorActor, class AActor* StatusDst, class AActor* Spawner, const struct FVector_NetQuantize& SpawnerLocation, ESBAbilityRequestSource RequestType);
		void ServerTakeDeactiveStatusGroup(ESBBattleEffectiveGroup StatusGroup, class AActor* StatusCauser);
		void ServerTakeDeactiveStatusAilment(const struct FSBStatusAilmentHandle& StatusHandle, class AActor* InstigatorActor, class AActor* Spawner, const struct FVector_NetQuantize& SpawnerLocation, bool bForceDelete);
		void ServerTakeDeactiveExceptStatusAliment(TArray<struct FDataTableRowHandle> StatusHandles, class AActor* InstigatorActor, class AActor* StatusDst, bool bPassive);
		void ServerTakeDeactiveBattleStatusID(const struct FSBStatusAilmentID& ID, class AActor* InstigatorActor, class AActor* StatusDst, class AActor* Spawner, const struct FVector_NetQuantize& SpawnerLocation, bool bForceDelete);
		void ServerTakeDamage(const struct FSBServerDamageEvent& DamageEventEncrypted, class AController* EventInstigator, class AActor* DamageCauser);
		void ServerStopPlayingEffectAsset(const class FString& Key);
		void ServerSpawnEffect(const class FName& SocketName);
		void ServerSetVelocity(const struct FVector& Vector);
		void ServerSetSuperArmorAnimationParam(bool bSuperArmor, int32_t DamageAdjust);
		void ServerSetPushOutDisabled(bool bDisabled);
		void ServerSetInvincibleMotion(bool bInvincible, ESBInvincibleAnimation InvincibleAnimationType);
		void ServerResetElementDamageAll();
		void ServerPlayInvincibleAnimationEffect(ESBInvincibleAnimation InvincibleAnimationType, class ASBCharacter* DamageCauserCharacter, int32_t AttackID);
		void ServerPlayEffectAsset(const struct FSBEffectAsset& Effect, const class FString& Key);
		void ServerNotifyTakeDeath();
		void ServerNotifyProjectileDestroy(const struct FSBProjectileIdentifyHandle& InIdentifyHandle);
		void ServerInitAnim();
		void ServerGiveStatusAilment(const struct FSBStatusAilmentHandle& StatusHandle, class AActor* StatusDst, class AActor* Spanwer, const struct FVector_NetQuantize& SpawnerLocation, ESBAbilityRequestSource RequestType);
		void ServerGiveDeactiveStatusGroup(ESBBattleEffectiveGroup StatusGroup, class AActor* StatusDst, class AActor* StatusCauser);
		void ServerGiveDeactiveExceptStatusAliment(TArray<struct FDataTableRowHandle> StatusHandles, class AActor* StatusDst, bool bPassive);
		void ServerGiveDeactiveBattleStatusIDDelegate(class ASBCharacter* Sender, const struct FSBStatusAilmentID& ID, class AActor* StatusDst, class AActor* Spawner, const struct FVector_NetQuantize& SpawnerLocation, bool bForceDelete);
		void ServerGiveDeactiveBattleStatusID(const struct FSBStatusAilmentID& ID, class AActor* StatusDst, class AActor* Spawner, const struct FVector_NetQuantize& SpawnerLocation, bool bForceDelete);
		void ServerGiveDamageDelegateHit(const struct FSBDamageEvent& DamageEventEncrypted, class AActor* DamageSrc, class AActor* DamageDst, int64_t UTCHitTime, uint64_t Handle);
		void ServerGiveDamage(const struct FSBDamageEvent& DamageEventEncrypted, class AActor* DamageDst);
		void ServerGiveBattleStatusIDDelegate(class ASBCharacter* Sender, const struct FSBStatusAilmentID& ID, class AActor* StatusDst, class AActor* Spanwer, const struct FVector_NetQuantize& SpawnerLocation);
		void ServerGiveBattleStatusID(const struct FSBStatusAilmentID& ID, class AActor* StatusDst, class AActor* Spanwer, const struct FVector_NetQuantize& SpawnerLocation, ESBAbilityRequestSource RequestType);
		void ServerDecAilmentTimerMashingInput();
		void ServerChangeDamageReactionPattern(const struct FDataTableRowHandle& Handle);
		void Server_SpawnInventoryWeapons(TArray<struct FSBSpawnWeaponLoadParam> NewSpawnWeapons, TArray<struct FSBSpawnWeaponLoadParam> LastSpawnWeapons);
		void Server_SheatheWeapon();
		void Server_SetEquipWeaponByEquipTypes(TArray<ESBWeaponEquipType> EquipTypes);
		void Server_SetEquipWeapon(ESBWeaponAttach WeaponAttach, int32_t NewInventoryIndex, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale3D);
		void ResetHitAttackFlag();
		void ResetElementDamageAll();
		void RequestServerGiveStatusAlimentByDelay(const struct FDataTableRowHandle& StatusHandle, class AActor* StatusDst, class AActor* StatusSpawner, float Remain);
		void RequestServerGiveStatusAliment(const struct FDataTableRowHandle& StatusHandle, class AActor* StatusDst, class AActor* StatusSpawner);
		void RequestServerGiveDeactiveStatusAlimentByDelay(const struct FDataTableRowHandle& StatusHandle, class AActor* StatusDst, class AActor* StatusSpawner, bool bForceDelete);
		void RequestServerGiveDeactiveStatusAliment(const struct FDataTableRowHandle& StatusHandle, class AActor* StatusDst, class AActor* StatusSpawner, bool bForceDelete);
		void RequestServerGiveDeactiveExceptStatusAliment(TArray<struct FDataTableRowHandle> StatusHandles, class AActor* StatusDst, bool bPassive);
		void RequestLoadAsset();
		void RequestDisableRootMotion(const class FName& RequestName);
		void Request_SheatheWeapon();
		void Request_SetEquipWeaponByEquipTypes(TArray<ESBWeaponEquipType> EquipTypes);
		void Request_SetEquipWeaponByEquipType(ESBWeaponEquipType EquipType);
		void Request_SetEquipWeapon(ESBWeaponAttach WeaponAttach, int32_t NewInventoryIndex, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale3D);
		void RegistStatusAlimentNotify(ESBStatusAilmentIconType StatusAliment, bool bImmune);
		void RegistSlashDisk(class USBAnimNotifyState_SlashDisk* NotifyState, class UParticleSystemComponent* Effect, const struct FRotator& EndRotation, const struct FVector& ScaleOffset, float SlashAngle, float SlashTime, const class FName& SocketName, const struct FVector& WeaponDirection, bool bSpawnSlashDiskParticle, float SlashDiskParticleDistCycle, class UParticleSystem* SlashDiskParticle);
		void RegistHitSlomoEffect(class UParticleSystemComponent* Effect);
		void ReceiveEndInitialLoad();
		void ReceiveEndAssetLoad();
		void ReceiveBeginAssetLoad();
		void PrintStringWithFrameNumber(const class FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
		void PrintString(const class FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
		void PlayWeaponAnimation(int32_t InventoryIndex, int32_t AnimationIndex, bool bLooping, float PlayRate);
		void OnStopDemo();
		void OnStartElementalBurstDelegate__DelegateSignature(ESBAttribute ElementType);
		void OnReplicatedPlayerState__DelegateSignature();
		void OnRep_LastPlayEffect();
		void OnRep_EquipWeapons();
		void OnRep_CurrentSpawnWeapons(TArray<struct FSBSpawnWeaponLoadParam> LastSpawnWeapons);
		void OnRep_CurrentHitPoint();
		void OnRep_CollisionGroupHitPointInfo();
		void OnPlayDemo();
		void OnInterruptElementalBurstDelegate__DelegateSignature(ESBAttribute ElementType);
		void OnEndElementalBurstDelegate__DelegateSignature(ESBAttribute ElementType);
		void OnClientSendImportantBattleEffective(const struct FSBPrevEffectiveImpotantStatusParam& PrevParam, const struct FSBEffectiveImpotantStatusParam& NewParam);
		void OnClientSendEffectiveBattleStatusParam(const struct FSBEffectiveStatusParam& StatusParam, bool bUpdateBaseStatus);
		void OnCharacterTakeDamageWhenAttackHit__DelegateSignature(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void OnCharacterTakeDamage__DelegateSignature(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void OnCharacterServerTakeDamageBeforeCalcDamageAttacker__DelegateSignature(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* Myself, bool bInvincible);
		void OnCharacterServerTakeDamageBeforeCalcDamage__DelegateSignature(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* Myself, bool bInvincible);
		void OnCharacterServerGiveDamageWhenBack__DelegateSignature(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void OnCharacterServerGiveDamage__DelegateSignature(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void OnCharacterDeadDelegete__DelegateSignature(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void MulticastUpdateAttackManageNumberListDiff(TArray<struct FSBAttackManageNumberInfo> DiffAttackManageNumberList);
		void MulticastUpdateAttackManageNumberListAll(TArray<struct FSBAttackManageNumberInfo> NewAttackManageNumberList);
		void MulticastTakeDamageWithGeneralParam(const struct FSBMulticastDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser, TArray<struct FSBMulticastDamageEventGeneralParam> GeneralParamList);
		void MulticastTakeDamage(const struct FSBMulticastDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		void MulticastStopPlayingEffectAsset(const class FString& Key);
		void MulticastSpawnEffect(const class FName& SocketName);
		void MulticastSetPushOutDisabled(bool bDisabled);
		void MulticastPlayInvincibleAnimationEffect(ESBInvincibleAnimation InvincibleAnimationType, class ASBCharacter* DamageCauserCharacter, int32_t AttackID);
		void MulticastPlayEffectAsset(const struct FSBEffectAsset& Effect, const class FString& Key);
		void MulticastNotifyStartElementBurst(ESBAttribute ElementType);
		void MulticastNotifyInterruptElementBurst(ESBAttribute ElementType);
		void MulticastNotifyEndElementBurst(ESBAttribute ElementType);
		void MulticastInitAnim();
		void MulticastDrainTakeDamage(const struct FSBMulticastDrainDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		void MulticastDotTakeDamage(const struct FSBMulticastDotDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		void MulticastChangeDamageReactionPattern(const struct FDataTableRowHandle& Handle);
		bool LoadAssetClass();
		bool LoadAsset();
		bool IsWithinDistanceToGround(float CheckDistance);
		bool IsWeaponLoading();
		bool IsVillageCollisionCount();
		bool IsPlayingWeaponAnimation(int32_t InventoryIndex);
		bool IsPlayDemo();
		bool IsMovingOnGround();
		bool IsMounting();
		bool IsMountAction();
		bool IsLoadedAllMipStreaming();
		bool IsLoadBattleAsset();
		bool IsInitialLoadCompleted();
		bool IsCollisionGroupBroken(const class FName& GroupName);
		bool IsBurstBonusNow();
		void IncrementVillageCollisionCount();
		bool HasAnimTagsAny(TArray<class FName> Tag);
		bool HasAnimTagsAll(TArray<class FName> Tag);
		float GetWeight();
		class USBWeaponVisibilityComponent* GetWeaponVisibilityComponent();
		TArray<class ASBWeapon*> GetWeaponsByWeaponType(ESBWeaponType WeaponType);
		TArray<class ASBWeapon*> GetWeaponsByEquipType(ESBWeaponEquipType WeaponEquipType);
		class ASBWeapon* GetWeaponByInventoryIndex(int32_t InventoryIndex);
		TArray<class FName> GetWeaponAttachPoint();
		int32_t GetVillageCollisionCount();
		float GetTotalElementDamageValue();
		struct FSBCharacterStatus GetStatus();
		float GetStamina();
		float GetSBCharacterMoveSpeedRate();
		float GetRemainElementBurstBonusTime();
		float GetReloadSpeedRate();
		float GetMoveSpeedRate();
		float GetMaxHitPointBase();
		struct FSBDamageInfo GetLastGuardInfo();
		struct FSBDamageInfo GetLastDamageInfo();
		float GetJumpVelocityRate();
		ESBInvincibleLevel GetInvincibleLevel();
		TArray<struct FSBInventoryWeapon> GetInventoryWeapons();
		int32_t GetInventoryWeaponNum();
		bool GetInventoryWeaponByInventoryIndex(int32_t InventoryIndex, struct FSBInventoryWeapon* OutInventoryWeapon);
		float GetInitialHitPoint();
		class USBGuardComponent* GetGuardComponent();
		TArray<struct FSBEquipWeapon> GetEquipWeapons();
		float GetElementResistanceBP(ESBAttribute ElementType);
		float GetElementDamageValue(ESBAttribute ElementType);
		struct FDataTableRowHandle GetDamageReactionPattern();
		float GetDamageDownTimer();
		TArray<class ASBWeapon*> GetCurrentWeaponsByEquipType(ESBWeaponEquipType WeaponEquipType);
		class ASBWeapon* GetCurrentWeaponByWeaponAttach(ESBWeaponAttach WeaponAttach);
		float GetCurrentStaminaRate();
		float GetCurrentStamina();
		int32_t GetCurrentElementBurstBonusLevel();
		float GetCurrentElementBurstBonusGaugeRate();
		struct FSBCollisionGroupInfo GetCollisionGroupInfoByGroupName(const class FName& GroupName);
		struct FSBCollisionGroupInfo GetCollisionGroupInfo(int32_t ID);
		int32_t GetCollisionGroupIdByGroupName(const class FName& GroupName);
		void FieldDead(ESBFieldDamageType FieldDamageType, class AActor* DamageCauser);
		void EndDisableRootMotion(const class FName& RequestName);
		void DecrementVillageCollisionCount();
		void DebugSetInventoryWeapon(bool IsSheathe, int32_t InventoryIndex, const struct FSBWeaponAttach& SetParam);
		void DebugServer_RequestSetPhysicsAccumDamage(class ASBCharacter* Character);
		void DebugLogInventoryWeapon();
		void DebugClient_SetPhysicsAccumDamage(float AccumDamage, class ASBCharacter* Character);
		void ClientSetVelocity(const struct FVector& Vector);
		void Client_SpawnInventoryWeapons(TArray<struct FSBSpawnWeaponLoadParam> NewSpawnWeapons, TArray<struct FSBSpawnWeaponLoadParam> LastSpawnWeapons);
		void Client_SetEquipWeaponByEquipTypes(TArray<ESBWeaponEquipType> EquipTypes);
		void Client_SetEquipWeapon(ESBWeaponAttach WeaponAttach, int32_t NewInventoryIndex, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale3D);
		void ClearVillageCollisionCount();
		void ClampCharacterParam();
		void ChangeDamageReactionPattern(const struct FDataTableRowHandle& Handle);
		void AddHitPoint(float AddValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCreationCharacter
	 * Size -> 0x0450 (FullSize[0x1440] - InheritedSize[0x0FF0])
	 */
	class ASBCreationCharacter : public ASBCharacter
	{
	public:
		unsigned char                                              UnknownData_6K7T[0x8];                                   // 0x0FF0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCreationCharacter;                                      // 0x0FF8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1KEJ[0x7];                                   // 0x0FF9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCharaCreateParameter                             CharaCreateParameter;                                    // 0x1000(0x03C0) Edit, BlueprintVisible, Net, Transient, RepNotify, NativeAccessSpecifierPublic
		class USBCharaCreateComponent*                             CharaCreateComponent;                                    // 0x13C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBCharaPartsFaceComponent*                          FaceComp;                                                // 0x13C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T3L9[0x8];                                   // 0x13D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBAestheShopComponent*                              AestheShopComp;                                          // 0x13D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBColoringShopComponent*                            ColoringShopComp;                                        // 0x13E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnConstructionCharacterDelegate;                         // 0x13E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUploadedCharaCreateDataDelegate;                       // 0x13F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDownloadedCharaCreateDataDelegate;                     // 0x1408(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TWQ5[0x20];                                  // 0x1418(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDoUpdateLookAt;                                         // 0x1438(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4VAA[0x7];                                   // 0x1439(0x0007) MISSED OFFSET (PADDING)

	public:
		void UploadCharaCreateParameter();
		void UploadCharaCreateDataEx(const class FString& InCharacterId, ESBCharacterGender InGender, ESBClassType InClassType, const class FString& InCharacterName);
		void UploadCharaCreateData(const class FString& InCharacterId, ESBCharacterGender InGender);
		void UpdateParts();
		void UpdateHeightLength();
		void UpdateEquipCostume(class ASBPlayerController* PC);
		bool UpdateCostumeParam(const class FString& UniqueId, const struct FCostumeData& InCostumeData);
		void UpdateCharacter();
		void SetStelth(bool bInStelth);
		void SetParts(ECharaPartsLocation PartsLocation, const class FName& PartsName);
		void SetNakedBody(bool bInNakedBodyFlag);
		void SetGender(ESBCharacterGender InGender);
		void SetCreationCharacterScalarParameterValue(const class FName& ParameterName, float Value);
		void SetCharaCreateParameter(const struct FSBCharaCreateParameter& NewParameter, bool InIgnoreCostumeParts, bool InIgnoreAccessoryParts);
		void SetAdditionalColor(ESBAdditionalColor Type);
		void ServerUpdateParts(const struct FSBCharaCreateParameter& InCharaCreateParameter);
		void ServerSetParts(ECharaPartsLocation PartsLocation, const class FName& PartsName);
		void ServerSetCharaCreateParameter(const struct FSBCharaCreateParameter& NewParameter);
		void ResetCrtBone();
		void RequestEmote(const class FName& EmoteName, class ASBCreationCharacter* TargetPlayer);
		void OnUploadCharaCreateData__DelegateSignature(bool bWasSuccessful, int32_t Reason);
		void OnRep_CharaCreateParameter(const struct FSBCharaCreateParameter& LastParameter);
		void OnDownloadedCharaCreateData__DelegateSignature(bool bWasSuccessful);
		void OnConstructionCharacer__DelegateSignature(bool bWasSuccessful, int32_t Reason);
		bool IsPartsForClass(ECharaPartsLocation PartsLocation, int32_t PartsId, ESBClassType ClassType);
		bool IsEmoteRequested();
		int32_t GetVoiceId();
		struct FSBCharaCreateParameter GetNakedCharaCreateParameter();
		ESBCharacterGender GetGender();
		class ASBCreationCharacter* GetEmoteTargetPlayer();
		float GetCustomWeaponScale();
		class FString GetCreationId();
		bool GetCostumeParam(const class FString& UniqueId, struct FCostumeData* OutCostumeData);
		class USBColoringShopComponent* GetColoringShopComponent();
		class USBAestheShopComponent* GetAestheShopComponent();
		void DownloadCharaCreateData(const class FString& InCharacterId);
		bool ConstructionCharacter(ESBCharacterGender InGender, ESBClassType InClassType, const class FString& InCharacterName, class USBAestheShopComponent* InAestheShopComponent);
		void ClientUpdateCharaCreateParameter(const struct FSBCharaCreateParameter& InParameter);
		void ClearEmoteRequest();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateCharacter
	 * Size -> 0x0070 (FullSize[0x14B0] - InheritedSize[0x1440])
	 */
	class ASBCharaCreateCharacter : public ASBCreationCharacter
	{
	public:
		float                                                      Height;                                                  // 0x1440(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                WeaponAttachPointCustom[0x8];                            // 0x1444(0x0040) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F044[0x14];                                  // 0x1484(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      InventoryList;                                           // 0x1498(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		bool                                                       IsViewerMode;                                            // 0x14A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SetMannequinParts;                                       // 0x14A9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsUseCharaSelect;                                        // 0x14AA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EO8X[0x5];                                   // 0x14AB(0x0005) MISSED OFFSET (PADDING)

	public:
		void ShowWeapon_Debug(bool bShow);
		void SetWeaponAttachSocketCustom(ESBWeaponAttach WeaponAttach, const class FName& SocketName);
		void SetSliderValue(int32_t Index, float Value);
		void SetCostumeSetName(const class FName& CostumeSetName);
		void ImportCharacter();
		class FName GetWeaponAttachSocketCustom(ESBWeaponAttach WeaponAttach);
		float GetSliderValue(int32_t Index);
		class FName GetSliderName(int32_t Index);
		float GetHeight();
		TArray<class USBCharaPartsComponent*> GetExtraCharaPartsComponentList();
		void ExportCharacter();
		void ChangeBoneDisplay();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateColorManager
	 * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
	 */
	class USBCharaCreateColorManager : public UObject
	{
	public:
		TArray<struct FSBCharaCreateColor>                         CostumeColorTable;                                       // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBCharaCreateColor>                         SkinColorTable;                                          // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBCharaCreateColor>                         HairColorTable;                                          // 0x0048(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FHairColorLUT>                               HairBaseColorLUT;                                        // 0x0058(0x0010) Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FHairColorLUT>                               HairShadowColorLUT;                                      // 0x0068(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBCharaCreateColor>                         EyeColorTable;                                           // 0x0078(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBCharaCreateColor>                         ScarColorTable;                                          // 0x0088(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    DefaultHairColorValue;                                   // 0x0098(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5U86[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNpcColorByRegion>                           NpcColorByRegion;                                        // 0x00A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FCharaPartsColorDataWeapon>                  WeaponColorTable;                                        // 0x00B0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBCostumeColorValiation>                    CostumeColorValiationArray;                              // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBCharaCreateTweakColorOffset>              TweakHairColorChannelArray;                              // 0x00D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		struct FNpcColorByRegion GetNpcColorByRegion(ECharaPartsRegion Region);
		int32_t GetColorTableNum(ESBCharaCreateColorTable TableType);
		TArray<struct FSBCharaCreateColor> GetColorTable(ESBCharaCreateColorTable TableType);
		int32_t GetColorIndexByName(ESBCharaCreateColorTable TableType, const class FName& ColorName);
		struct FLinearColor GetColorByIris(int32_t Hue, int32_t Saturation, int32_t Value);
		struct FColor GetColorByHue(ESBCharaCreateColorHue Hue, int32_t Value);
		struct FLinearColor GetColorByHSV(ESBCharaCreateColorHue Hue, int32_t Saturation, int32_t Value);
		struct FLinearColor GetBaseColorByName(ESBCharaCreateColorTable TableType, const class FName& ColorName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateDebugInfo
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBCharaCreateDebugInfo : public UObject
	{
	public:
		TArray<struct FSBCharaCreateDebugInfoPartsNameAndPartsData> CharaPartsDataInfoArray;                                 // 0x0028(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateViewerParameter
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBCharaCreateViewerParameter : public UObject
	{
	public:
		TArray<class UAnimMontage*>                                AnimMontageList;                                         // 0x0028(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y6OI[0x52];                                  // 0x0038(0x0052) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECharaPartsRegion                                          RegionTypeCache;                                         // 0x008A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ENpcJob                                                    JobTypeCache;                                            // 0x008B(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5HBB[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetPlayRate(float InPlayRate);
		void SetLoopAnimation(bool bLooping);
		void SetIsResetTransform(class ACharacter* Character, bool in_bResetTransform);
		void SetAnimResetTransform(const struct FTransform& Transform);
		bool GetLoopAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateData
	 * Size -> 0x03C0 (FullSize[0x03F0] - InheritedSize[0x0030])
	 */
	class USBCharaCreateData : public UDataAsset
	{
	public:
		struct FSBCharaCreateParameter                             Parameter;                                               // 0x0030(0x03C0) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateComponent
	 * Size -> 0x0618 (FullSize[0x06D0] - InheritedSize[0x00B8])
	 */
	class USBCharaCreateComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KUEW[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharaCreateData*                                  DefaultCharaCreateData;                                  // 0x00C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HLG8[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCharaCreateParameter                             CharaCreateParameterData;                                // 0x00D0(0x03C0) Edit, EditConst, NativeAccessSpecifierPublic
		TArray<TWeakObjectPtr<class UMeshComponent>>               CharaPartsComponentArray;                                // 0x0490(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FSBCharaCreatePartsSettings>                 PartsSettings;                                           // 0x04A0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected
		class UClass*                                              FaceAnimClass;                                           // 0x04B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              AccessoryAnimClass;                                      // 0x04B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNpcUseFacialMesh;                                       // 0x04C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMergeMesh;                                              // 0x04C1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedsMergeMeshCPUAccess;                                // 0x04C2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EFSBReplaceMaterialBaseType                                ReplaceMaterialBaseType;                                 // 0x04C3(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsLoadAllAssets;                                        // 0x04C4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsHoldAllAssets;                                        // 0x04C5(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceSyncLoad;                                          // 0x04C6(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bForceMiplevelsToBeResident : 1;                         // 0x04C7(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStreamableRenderAsset*>                      ResidentTextures;                                        // 0x04C8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FSBCharaCreateComponentPostPhysicsTickFunction      PostPhysicsTickFunction;                                 // 0x04D8(0x0030) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4V68[0x40];                                  // 0x0508(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USkeletalMesh*>                               m_CachedBodyMergeMeshList;                               // 0x0548(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		TArray<class USkeletalMesh*>                               m_CachedFaceMergeMeshList;                               // 0x0558(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_CC8W[0x10];                                  // 0x0568(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     m_HoldingCharaCreateAssetsWhenUpdating;                  // 0x0578(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		class FScriptMulticastDelegate                             OnCharaPartsLoadedDelegete;                              // 0x0588(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PRTK[0x8];                                   // 0x0598(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBBoneScaleCacheData*                               BoneScaleCacheData;                                      // 0x05A0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBFacialAnimationDataHolder*                        FacialAnimationDataHolder;                               // 0x05A8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBCharaCreateDataHolder*                            CharaCreateDataHolder;                                   // 0x05B0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0EYH[0xEC];                                  // 0x05B8(0x00EC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlushAlpha;                                              // 0x06A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PaleAlpha;                                               // 0x06A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5H5P[0xC];                                   // 0x06AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveLinearColor*                                   BlushBaseColor;                                          // 0x06B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveLinearColor*                                   BlushColor;                                              // 0x06C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PJVA[0x8];                                   // 0x06C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdatePartsName(ECharaPartsLocation PartsLocation);
		void UpdatePartsAttach(ECharaPartsLocation PartsLocation, ECharaPartsAccessoryLocation AttachLocation);
		void UpdateParts();
		void UpdateBoneScaleParameter();
		void ShowPartsGroup(ECharaPartsLocationGroup PartsLocationGroup, bool bInShow);
		void ShowParts(ECharaPartsLocation PartsLocation, bool bShow);
		bool ShouldMergeMesh();
		void SetVoiceId(int32_t InVoiceId);
		void SetTexture(ESBCustomTextureType CustomTextureType, int32_t TextureIndex);
		void SetSkinColor(const struct FSBCharaCreateColorHSV& ColorHSV);
		void SetRegionType(ECharaPartsRegion Region);
		void SetPartsName(ECharaPartsLocation PartsLocation, const class FName& PartsName, bool bUpdateParts);
		void SetPartsMaterialCostume(ECharaPartsLocation PartsLocation, int32_t InMaterialIndex);
		void SetPartsGroupNameByPartsName(ECharaPartsLocationGroup PartsLocationGroup, const class FName& PartsName);
		void SetPartsGroupName(ECharaPartsLocationGroup PartsLocationGroup, const class FName& PartsName);
		void SetPartsGroupMaterialCostume(ECharaPartsLocationGroup PartsLocationGroup, int32_t InMaterialIndex);
		void SetPartsGroupColorCostume(ECharaPartsLocationGroup PartsLocationGroup, int32_t InColorIndex, int32_t InColorSaturation, int32_t InColorValue);
		void SetPartsColorCostume(ECharaPartsLocation PartsLocation, int32_t InColorIndex, int32_t InColorSaturation, int32_t InColorValue);
		void SetPartsAtIndex(ECharaPartsLocation PartsLocation, int32_t Index);
		void SetOddEye(bool IsOddEye);
		void SetNakedView(bool bNaked);
		void SetMouthSpecular(bool bEnable);
		void SetMirror(ECharaPartsLocation PartsLocation, bool bMirror);
		void SetMakeupMoles(TArray<bool> InMoles);
		void SetMakeupMirror(EFSBCharaCreateMakeupIndex MakeupIndex, bool IsMirror);
		void SetMakeupColor(EFSBCharaCreateMakeupIndex MakeupIndex, const struct FSBCharaCreateColorHSV& HSV);
		void SetMakeup(EFSBCharaCreateMakeupIndex MakeupIndex, const struct FSBCharaCreateMakeup& MakeupData);
		void SetLipSyncType(ESBLipSyncType InLipSyncType);
		void SetJobType(int32_t JobType);
		void SetIrisMaterial(int32_t LeftID, int32_t RightID);
		void SetIrisColor(ESBIrisType IrisType, int32_t ColorIndex, ESBCharaCreateColorHue Hue, int32_t Saturation, int32_t Value);
		void SetHairMeshSwitch(int32_t MeshIndex, bool Value);
		void SetHairHat(bool bHairHat);
		void SetHairGradationType(int32_t GradationType);
		void SetHairGradationRange(float Range);
		void SetHairGradationHeight(float Height);
		void SetHairColor(int32_t ColorIndex, const struct FSBCharaCreateColorHSV& HSV);
		void SetFacialType(ESBFacialType InFacialType);
		void SetFaceType(int32_t FaceType);
		void SetEyelashColorValue(int32_t Value);
		void SetEyelashColorIndex(int32_t Value);
		void SetEyebrowColorValue(int32_t Value);
		void SetEyebrowColorIndex(int32_t Value);
		void SetEyebrowAngle(float Angle);
		void SetEyeAngle(float Angle);
		void SetDefaultCharaCreateData(class USBCharaCreateData* TempDefaultCharaCreateData);
		void SetCreationGender(ESBCharacterGender InGender);
		void SetCostumeItemID(ECharaPartsLocation PartsLocation, int32_t ItemId);
		void SetColorHSV(ECharaPartsLocation PartsLocation, const struct FSBCharaCreateColorHSV& HSV);
		void SetCharacterType(ECharaPartsCharacterType NewCharacterType);
		bool SetBoneScaleSliderValue(ESBBoneScaleSliderIndex SliderIndex, float Value);
		void SetBodyType(ECharaPartsBody BodyType);
		void SetBeardColorIndex(int32_t Value);
		void SBOnCharaPartsLoadedDelegete__DelegateSignature(bool Result);
		bool IsPartsShown(ECharaPartsLocation PartsLocation);
		bool IsPartsLoaded();
		bool IsDefaultCharaCreateParameterLoaded();
		bool IsAllCharaCreatePartsAssetLoaded(bool bIsInDirty);
		void ImportCharaCreateData(class USBCharaCreateData* SrcData, bool bUpdate);
		int32_t GetVoiceId();
		float GetUpperLength();
		void GetSkinColor(struct FSBCharaCreateColorHSV* OutColorHSV);
		ECharaPartsRegion GetRegionType();
		int32_t GetPartsNum(ECharaPartsLocation PartsLocation);
		class FName GetPartsName(ECharaPartsLocation PartsLocation);
		class UMeshComponent* GetPartsMeshComponent(ECharaPartsLocation PartsLocation);
		class UCharaPartsData* GetPartsData(ECharaPartsLocation PartsLocation);
		bool GetOddEye();
		TArray<bool> GetMoleFlagArray();
		TArray<class UMeshComponent*> GetMeshComponentArrayForBP(ECharaPartsLocationGroup GroupForFiltering);
		struct FSBCharaCreateMakeup GetMakeup(EFSBCharaCreateMakeupIndex MakeupIndex);
		float GetLowerLength();
		ENpcJob GetJobType();
		struct FSBCharaCreateColorHSV GetIrisColor(ESBIrisType IrisType, int32_t ColorIndex);
		float GetHeight();
		float GetHeelLength();
		float GetHairGradationRange();
		float GetHairGradationHeight();
		ESBFacialType GetFacialType();
		int32_t GetFaceType();
		ESBCharacterGender GetCreationGender();
		struct FSBCharaCreateColorHSV GetColorHSV(ECharaPartsLocation PartsLocation);
		ECharaPartsCharacterType GetCharacterType();
		class USBCharaCreateViewerParameter* GetCharaCreateViewerParameter();
		class FString GetCharaCreatePartsDebugMainInfo();
		class FString GetCharaCreatePartsDebugInfo(int32_t DebugInfoIndex);
		class USBCharaCreateDebugInfo* GetCharaCreateParameterDebugInfoData();
		class FString GetCharaCreateParameterDebugInfo();
		class FString GetCharaCreateDebugInfo(int32_t Index);
		class USBCharaCreateData* GetCharaCreateDataForDebug();
		float GetBoneScaleSliderValue(ESBBoneScaleSliderIndex SliderIndex);
		ECharaPartsBody GetBodyType();
		ESBFacialType GetBaseFacialType();
		void ExportCharaCreateDataEdit();
		void ExportCharaCreateDataAsEdit();
		float CalcHeelLength();
		void BlinkPartsGroup(ECharaPartsLocationGroup PartsLocationGroup);
		void BlinkParts(ECharaPartsLocation PartsLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateDataHolder
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBCharaCreateDataHolder : public USBAssetDataHolder
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateHUD
	 * Size -> 0x0000 (FullSize[0x0318] - InheritedSize[0x0318])
	 */
	class ASBCharaCreateHUD : public AHUD
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateScaleInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharaCreateScaleInterface : public UInterface
	{
	public:
		bool SetBoneScaleSliderValue(ESBBoneScaleSliderIndex SliderIndex, float Value);
		float GetBoneScaleSliderValue(ESBBoneScaleSliderIndex SliderIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharaCreateInterface : public USBCharaCreateScaleInterface
	{
	public:
		void SetPartsName(ECharaPartsLocation PartsLocation, const class FName& PartsName);
		void SetCreationGender(ESBCharacterGender InGender);
		void SetCharacterType(ECharaPartsCharacterType NewCharacterType);
		void SetBodyType(ECharaPartsBody BodyType);
		class UCharaPartsData* GetPartsData(ECharaPartsLocation PartsLocation);
		ESBCharacterGender GetCreationGender();
		ECharaPartsCharacterType GetCharacterType();
		class USBCharaCreateComponent* GetCharaCreateComponentForBP();
		ECharaPartsBody GetBodyType();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateViewerTools
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharaCreateViewerTools : public UBlueprintFunctionLibrary
	{
	public:
		void UpdateCharaCreateParameter(class USBCharaCreateComponent* CharaCreateComponent);
		void PlayAnimSequenceList(class USBCharaCreateViewerParameter* CharaCreateViewerParameter, int32_t Index);
		void OpenCharaCreateParamDialog(class UObject* Object, const class FText& Title, const class FText& ToolTip, const class FText& ToolButtonTip, float Width, float Height, bool bModal, bool bClose);
		TArray<class USBCharaCreateData*> GetEnpcChacaCreateDataArray();
		TArray<class FName> GetAnimSequenceList(class USBCharaCreateViewerParameter* CharaCreateViewerParameter);
		void DebugDrawClothCollisions(class USkeletalMeshComponent* SkelMesh);
		void BindEditorTools();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaCreateWidget
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class USBCharaCreateWidget : public USBUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnTickDoOnceDelegate;                                    // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6DDJ[0x8];                                   // 0x02C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnTickDoOnceDelegate__DelegateSignature();
		void OnFailedConnectServer(int32_t RetCode);
		bool ConnectToServer(class UObject* WorldContextObject, const class FString& CharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAdjustRootMotionComponent
	 * Size -> 0x0068 (FullSize[0x0120] - InheritedSize[0x00B8])
	 */
	class USBAdjustRootMotionComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_UFTS[0x68];                                  // 0x00B8(0x0068) MISSED OFFSET (PADDING)

	public:
		void MulticastReserveNewTask(unsigned char SetupInterfaceIndex, const struct FVector_NetQuantize100& TargetLocation, const struct FVector_NetQuantize100& TargetVector);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAdjustRootMotionSetupInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterAdjustRootMotionSetupInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingActor_AttackRange
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBCharacterAnimationSamplingActor_AttackRange : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingAsset
	 * Size -> 0x01E0 (FullSize[0x0208] - InheritedSize[0x0028])
	 */
	class USBCharacterAnimationSamplingAsset : public UObject
	{
	public:
		unsigned char                                              OwnerEnemy[0x28];                                        // 0x0028(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              OwnerCharacter[0x28];                                    // 0x0050(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FSBCharacterAnimationSamplingResult                 SampleData;                                              // 0x0078(0x0190) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingAttackTrigger
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBCharacterAnimationSamplingAttackTrigger : public AActor
	{
	public:
		void SetHitState(bool bHit);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingComponent
	 * Size -> 0x01B8 (FullSize[0x0270] - InheritedSize[0x00B8])
	 */
	class USBCharacterAnimationSamplingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ES83[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharacterAnimationSamplingAsset*                  AnimationSamplingAsset;                                  // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PP7E[0x198];                                 // 0x00D8(0x0198) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingBlueprintFunctionalLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterAnimationSamplingBlueprintFunctionalLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SampleTriggerEvent(const class FName& TaskName, class AActor* OwnerActor, class UObject* Instigator, class UObject* AnimNotify);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingTaskBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterAnimationSamplingTaskBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingTask_BatchEnemy
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterAnimationSamplingTask_BatchEnemy : public USBCharacterAnimationSamplingTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingTask_SimulateEnemyAction
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterAnimationSamplingTask_SimulateEnemyAction : public USBCharacterAnimationSamplingTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimationSamplingTask_SimulatePlayerAction
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterAnimationSamplingTask_SimulatePlayerAction : public USBCharacterAnimationSamplingTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimNotifyProjectileCommonInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterAnimNotifyProjectileCommonInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterAnimNotifyProjectileConfigInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterAnimNotifyProjectileConfigInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerControllerComponentBase
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBPlayerControllerComponentBase : public UActorComponent
	{
	public:
		class FString GetUserId();
		class ASBPlayerState* GetOwningPlayerState();
		class ASBPlayerController* GetOwningPlayerController();
		class ASBPlayerCharacter* GetOwningPlayerCharacter();
		class USBNetworkDataCache* GetNetworkDataCache();
		class FString GetCharacterId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterCampFireComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBCharacterCampFireComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnChangedDataDelegate;                                   // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6SN7[0x10];                                  // 0x00C8(0x0010) MISSED OFFSET (PADDING)

	public:
		void Server_AddActivatedCampFire(class AActor* InCauserActor, const class FString& LocationId);
		bool RequestAddActivated(class AActor* InCauserActor, const class FName& LocationId);
		void OnChangedDataDelegate__DelegateSignature();
		bool IsActivatedCampFire(const class FName& LocationId);
		void GetActivatedCampFires(TArray<class FName>* OutArray);
		void Client_OnAddActivatedCampFireComplete(TArray<class FName> InActivates, bool bInWasSuccessful);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterCardHUD
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBCharacterCardHUD : public UUserWidget
	{
	public:
		class USBCharacterCardList*                                CharacterCardList;                                       // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnIsNewMemberFoundInParty();
		void OnInitialize(TArray<class FString> InPartyMemberCharacterIds);
		void OnCloseCharacterCard(bool InResetMenuModeOnly);
		void OnCharacterCardShowHideKeyPressed();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterCardList
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBCharacterCardList : public UUserWidget
	{
	public:
		bool IsSingleParticipant();
		void GetPartyMemberCharacterIds(TArray<class FString>* OutCharacterIds);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterChanceTimeDownComponent
	 * Size -> 0x0180 (FullSize[0x0238] - InheritedSize[0x00B8])
	 */
	class USBCharacterChanceTimeDownComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FJN4[0x28];                                  // 0x00B8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseElementalBurstChanceTimeDown;                        // 0x00E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XCAF[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCharacterChanceTimeTableElementalBurst           ChanceTimeTableStartElementalBurst;                      // 0x00E8(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSBCharacterChanceTimeTableElementalBurst           ChanceTimeTableEndElementalBurst;                        // 0x0138(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSBCharacterChanceTimeTablePartsBreak               ChanceTimeTablePartsBreak;                               // 0x0188(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      GuardBreakChanceTime;                                    // 0x01D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AnimNotifyChanceTime;                                    // 0x01DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, float>                                   ChanceTimeOthersMap;                                     // 0x01E0(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EESO[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (PADDING)

	public:
		void BeginChanceTimeByStartElementalBurst(ESBAttribute Attribute);
		void BeginChanceTimeByOthersKeyName(const class FName& KeyName);
		void BeginChanceTimeByEndElementalBurst(ESBAttribute Attribute);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterChangeEmissiveColorComponent
	 * Size -> 0x00E0 (FullSize[0x0198] - InheritedSize[0x00B8])
	 */
	class USBCharacterChangeEmissiveColorComponent : public UActorComponent
	{
	public:
		TArray<class FName>                                        TargetTagNameList;                                       // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBMaterialColorInfo>                        ChangedMaterialColorList;                                // 0x00C8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBWeaponColorInfo>                          ChangedWeaponColorList;                                  // 0x00D8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CD8N[0xA0];                                  // 0x00E8(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLinearColor>                                EmissiveColorList;                                       // 0x0188(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void OnRep_ChangedWeaponColorList();
		void OnRep_ChangedMaterialColorList();
		bool IsMaterialEmissiveColorChanged(int32_t MaterialIndex);
		void ChangeWeaponEmissiveColor(int32_t NewColorIndex, int32_t WeaponIndex, TArray<int32_t> MaterialIndices);
		void ChangeMaterialEmissiveColor(int32_t NewColorIndex, TArray<int32_t> MaterialIndices, const class FName& TargetTagName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterChantBaseComponent
	 * Size -> 0x0170 (FullSize[0x0228] - InheritedSize[0x00B8])
	 */
	class USBCharacterChantBaseComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_DCSG[0x170];                                 // 0x00B8(0x0170) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterCheckSwimmingAreaInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterCheckSwimmingAreaInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterElementalBurstComparison
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterElementalBurstComparison : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterLoopCounterComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBCharacterLoopCounterComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_MMDB[0x2];                                   // 0x00B8(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint16_t                                                   CountLoopMax;                                            // 0x00BA(0x0002) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AS9A[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterData
	 * Size -> 0x0250 (FullSize[0x0278] - InheritedSize[0x0028])
	 */
	class USBCharacterData : public UObject
	{
	public:
		struct FSBCharacterMisc                                    Data;                                                    // 0x0028(0x01E0) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H624[0x18];                                  // 0x0208(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLevelUpDelegate;                                       // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSCRUpDelegate;                                         // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLearningSkillDelegate;                                 // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSubPaletteReleaseDelegate;                             // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZOAV[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnInitMapPinDelegate;                                    // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void OnSubPaletteReleaseDelegate__DelegateSignature();
		void OnSCRUpDelegate__DelegateSignature(int32_t InRank, int32_t InRankMax);
		void OnLoadMapPinInfosDelegate__DelegateSignature();
		void OnLevelUpDelegate__DelegateSignature(int32_t InPrevLevel, int32_t InCurLevel, const struct FSBExtraExpParse& InExtraExpParse);
		void OnLearningSkillDelegate__DelegateSignature(TArray<struct FCharaSkillMasteryInfo> NewSkill);
		TArray<class FString> GetTraverse();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterDataBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterDataBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool SkillCanLearned(class UObject* InWorldContextObject, int32_t SkillId, int32_t SkillLV);
		void SetSeasonPoint(class UObject* InWorldContextObject, int32_t InSp);
		void SetRoseOrbPaid(class UObject* InWorldContextObject, int32_t InPaid);
		void SetRoseOrbFree(class UObject* InWorldContextObject, int32_t InFree);
		bool SetPlayerPresetEquipListByIndex(class UObject* WorldContextObject, int32_t PresetListIndex, const struct FSBPlayerPresetEquipList& Param);
		bool SetPlayerPresetEquipList(class UObject* WorldContextObject, TArray<struct FSBPlayerPresetEquipList> Param);
		bool SetPlayerPresetEquipItemByIndex(class UObject* WorldContextObject, int32_t PresetListIndex, int32_t PresetItemIndex, const struct FSBPlayerPresetEquipItem& Param);
		bool SetPlayerPresetEquipItem(class UObject* WorldContextObject, int32_t PresetListIndex, TArray<struct FSBPlayerPresetEquipItem> Param);
		void SetExpiredTimeRoseOrbPaid(class UObject* InWorldContextObject, const struct FDateTime& InExpired);
		void SetExpiredTimeRoseOrbFree(class UObject* InWorldContextObject, const struct FDateTime& InExpired);
		void SetExpiredTimeBPPoint(class UObject* InWorldContextObject, const struct FDateTime& InExpired);
		void SetEquipItemInfo(class UObject* InWorldContextObject, ESBCharaEquipType InEquipType, const struct FCharaEquipItemInfo& InEquipItemInfo);
		void SetCommandMenuPlayerAvatarPoseId(class UObject* InWorldContextObject, int32_t InPoseId);
		void SetClassMaxDamage(class UObject* InWorldContextObject, int32_t InValue);
		void SetBPPoint(class UObject* InWorldContextObject, int32_t InBp);
		void RemoveStepList(class UObject* InWorldContextObject, const struct FSBCharacterStepListInfo& InStepListInfo);
		struct FOwnItemInfo MakeScoreOwnItemInfoData(class UObject* InWorldContextObject, int32_t ItemIndex, EItemType ItemType, const struct FSBWeaponItemData& WeaponData);
		bool IsTargetEnemyId(class UObject* InWorldContextObject, const class FString& InEnemyId, int32_t InEnemylevel);
		bool IsSubPaletteReleased(class UObject* InWorldContextObject, ESBClassType InClassType);
		bool IsRewardGet(class UObject* InWorldContextObject, TArray<struct FSBMasterReward> RewardList);
		bool IsPresetEquipExect(class UObject* WorldContextObject, ESBClassType ClassType, ESBPlayerPresetType Type, TArray<struct FSBPlayerPresetEquipItem> item, int32_t* rRetCode);
		bool IsPlayerPresetEquipItem(class UObject* WorldContextObject, const class FString& InUniqueId);
		bool IsMasterySkillOthersIncluded(class UObject* InWorldContextObject, int32_t SkillId);
		bool IsMasterySkill(class UObject* InWorldContextObject, int32_t SkillId);
		bool IsEquipTypeAreEquipped(class UObject* InWorldContextObject, ESBCharaEquipType EquipType);
		bool IsEquipmentItemByItemIndex(class UObject* InWorldContextObject, int32_t InItemIndex);
		bool IsEquipmentItem(class UObject* InWorldContextObject, const class FString& InUniqueId);
		bool IsEquipedArtsSkillId(class UObject* InWorldContextObject, int32_t InSkillId);
		bool isClassLevelLimit(class UObject* InWorldContextObject);
		bool IsClassLevelCounterStop(class UObject* InWorldContextObject);
		int32_t GetWeaponScore(class UObject* InWorldContextObject, int32_t WeaponID, bool bIsMax);
		int32_t GetTotalPowerBySelectStackBType(class UObject* InWorldContextObject, int32_t LevelSyncTarget, ESBStackBEnableType StackBEnableType);
		int32_t GetTotalPowerByOtherChara(class UObject* InWorldContextObject, class USBPartyMemberState* MemberState, TArray<struct FBattleMemberLevelSyncInfo> BattleMemberLevelSyncInfos, int32_t LevelSyncTarget, ESBStackBEnableType StackBEnableType);
		int32_t GetTotalPowerByCharaEquipInfo(class UObject* InWorldContextObject, const struct FCharaEquipInfo& EquipInfo, int32_t LevelSyncTarget, ESBClassType InClassType, ESBStackBEnableType StackBEnableType);
		int32_t GetTotalPower(class UObject* InWorldContextObject, int32_t LevelSyncTarget);
		TArray<struct FSBCharacterToken> GetTokenList(class UObject* InWorldContextObject);
		struct FSBCharacterToken GetTokenFromPlaceToConsume(class UObject* InWorldContextObject, ESBTokenPlaceToConsumeType InTokenPlaceToConsumeType);
		int32_t GetTokenAmount(class UObject* InWorldContextObject, int32_t InTokenId);
		struct FSBCharacterToken GetToken(class UObject* InWorldContextObject, int32_t InTokenId);
		int32_t GetTensionTag(class UObject* InWorldContextObject);
		int32_t GetSubPaletteReleaseLevel(class UObject* InWorldContextObject);
		class USBOwnItemListContainer* GetStorage(class UObject* InWorldContextObject, int32_t InStorageNumber, EItemType InItemType);
		struct FShortcutInfo GetShortcutInfo(class UObject* InWorldContextObject);
		int32_t GetRoseOrbPaid(class UObject* InWorldContextObject);
		int32_t GetRoseOrbFree(class UObject* InWorldContextObject);
		struct FSBCharacterQuestSetting GetQuestSetting(class UObject* InWorldContextObject);
		class FString GetProfileComment(class UObject* InWorldContextObject);
		bool GetPlayerPresetEquipNowEquipBattleSet(class UObject* WorldContextObject, TArray<struct FSBPlayerPresetEquipItem>* OutParam);
		bool GetPlayerPresetEquipListByIndex(class UObject* WorldContextObject, int32_t PresetListIndex, struct FSBPlayerPresetEquipList* OutParam);
		bool GetPlayerPresetEquipList(class UObject* WorldContextObject, TArray<struct FSBPlayerPresetEquipList>* OutParam, bool bEmptyBottom);
		bool GetPlayerPresetEquipItemByIndex(class UObject* WorldContextObject, int32_t PresetListIndex, int32_t PresetItemIndex, struct FSBPlayerPresetEquipItem* OutParam);
		bool GetPlayerPresetEquipItem(class UObject* WorldContextObject, int32_t PresetListIndex, TArray<struct FSBPlayerPresetEquipItem>* OutParam);
		int32_t GetOwnWeaponScore(class UObject* InWorldContextObject, const class FString& InUniqueId, bool bIsMax);
		int32_t GetOwnHyouiScore(class UObject* InWorldContextObject, const class FString& InUniqueId, bool bIsMax);
		int32_t GetOwnEImagineScore(class UObject* InWorldContextObject, const class FString& InUniqueId, bool bIsMax);
		class USBOwnItemListContainer* GetOrnamentStorage(class UObject* InWorldContextObject);
		bool GetOpenCommandMenuFlag(class UObject* InWorldContextObject);
		float GetNowLevelClassExtraExpRatio(class UObject* InWorldContextObject);
		int32_t GetNowLevelClassExtraExpMax(class UObject* InWorldContextObject);
		float GetNowLevelClassExpRatio(class UObject* InWorldContextObject);
		int32_t GetNowLevelClassExpPoint(class UObject* InWorldContextObject);
		int32_t GetNowLevelClassExpMax(class UObject* InWorldContextObject);
		struct FSBAdventurerRankMasterData GetNowAdventurerRankMasterData(class UObject* InWorldContextObject, bool* IsExists);
		float GetMountEnergyMax(class UObject* InWorldContextObject);
		float GetMountEnergy(class UObject* InWorldContextObject);
		int32_t GetMoney(class UObject* InWorldContextObject);
		int32_t GetMissionQuestRank(class UObject* InWorldContextObject);
		struct FMapPinListInfo GetMapPinListInfo(class UObject* InWorldContextObject);
		int32_t GetLevelLimitClassExpMax(class UObject* InWorldContextObject);
		int32_t GetLevelLimit(class UObject* InWorldContextObject);
		bool GetKeyValue(class UObject* InWorldContextObject, const class FName& InKeyName, class FString* OutValue);
		class USBOwnItemListContainer* GetItemBag(class UObject* InWorldContextObject);
		class USBOwnItemListContainer* GetInventory(class UObject* InWorldContextObject);
		int32_t GetHyouiScore(class UObject* InWorldContextObject, int32_t ImagineId, bool bIsMax);
		struct FDateTime GetExpiredTimeRoseOrbPaid(class UObject* InWorldContextObject);
		struct FDateTime GetExpiredTimeRoseOrbFree(class UObject* InWorldContextObject);
		struct FDateTime GetExpiredTimeBPPoint(class UObject* InWorldContextObject);
		int32_t GetExpertRankScore(class UObject* InWorldContextObject);
		class USBOwnItemListContainer* GetEquipmentBag(class UObject* InWorldContextObject);
		struct FCharaEquipItemInfo GetEquipItemInfoFromUniqueId(class UObject* InWorldContextObject, const class FString& InUniqueId);
		struct FCharaEquipItemInfo GetEquipItemInfo(class UObject* InWorldContextObject, ESBCharaEquipType EquipType);
		struct FCharaEquipInfo GetEquipInfo(class UObject* InWorldContextObject);
		struct FEquipedArtsListInfo GetEquipedArtsInfoList(class UObject* InWorldContextObject);
		int32_t GetEquipedArtsId(class UObject* InWorldContextObject, ESBPlayerArtsType InArtsType, int32_t InSlotId);
		void GetEquipedActiveArtsAbility(class UObject* InWorldContextObject, int32_t InSlotId, bool* OutIsActiveAbilityEquiped, ESBSkillAbilityType* OutEquipedActiveAbilityType, int32_t* OutEquipedActiveAbilitySkillId);
		int32_t GetEqipedArtsInfoIndex(class UObject* InWorldContextObject, ESBPlayerArtsType InArtsType, int32_t InSlotId);
		bool GetEqipedActiveAbility(class UObject* InWorldContextObject, int32_t* OutSkillId, int32_t InArtsId);
		TArray<class FString> GetEnemyIdListFromStepList(class UObject* InWorldContextObject);
		int32_t GetEImagineScore(class UObject* InWorldContextObject, int32_t ImagineId, bool bIsMax);
		int32_t GetCurrentSkilllevelOthersIncludedPlus(class UObject* InWorldContextObject, int32_t SkillId);
		int32_t GetCurrentSkillLevelOthersIncluded(class UObject* InWorldContextObject, int32_t SkillId);
		int32_t GetCurrentSkillLevel(class UObject* InWorldContextObject, int32_t SkillId);
		int32_t GetCounterStopClassLevel(class UObject* InWorldContextObject);
		int32_t GetCommandMenuPlayerAvatarPoseId(class UObject* InWorldContextObject);
		ESBClassType GetClassType(class UObject* InWorldContextObject);
		int32_t GetClassMaxDamage(class UObject* InWorldContextObject, ESBClassType InClassType);
		int32_t GetClassLevelFromClassType(class UObject* InWorldContextObject, ESBClassType InClassType);
		void GetClassLevelAddExpCalculation(class UObject* InWorldContextObject, int32_t AddExp, int32_t* AfterLevel, int32_t* AfterExp, int32_t* AfterMaxExp, bool* bExpOver);
		int32_t GetClassLevel(class UObject* InWorldContextObject);
		int32_t GetClassExtraExp(class UObject* InWorldContextObject);
		int32_t GetClassExp(class UObject* InWorldContextObject);
		TArray<int32_t> GetCheckableQuest(class UObject* InWorldContextObject, bool isCheckUpdate);
		class USBOwnItemListContainer* GetCharacterStorage(class UObject* InWorldContextObject);
		class FString GetCharacterName(class UObject* InWorldContextObject);
		class USBCharacterData* GetCharacterData(class UObject* InWorldContextObject);
		TArray<struct FSBSkillTreeHorizonBranchData> GetBranchingSkilHorizonlListData(class UObject* InWorldContextObject, int32_t SkillId, int32_t SkillLV, int32_t CheckDepthNum);
		int32_t GetBPPoint(class UObject* InWorldContextObject);
		int32_t GetBP(class UObject* InWorldContextObject);
		int32_t GetBlackListNum(class UObject* InWorldContextObject);
		class FString GetBestScore(class UObject* InWorldContextObject);
		int32_t GetBattleScoreByOwnItemInfo(class UObject* InWorldContextObject, const struct FOwnItemInfo& InOwnItemInfo, bool bIsMax);
		int32_t GetAdventurerRankLimit(class UObject* InWorldContextObject);
		int32_t GetAdventurerRank(class UObject* InWorldContextObject);
		int32_t GetAchievementId(class UObject* InWorldContextObject);
		class USBOwnItemListContainer* GetAccountStorage(class UObject* InWorldContextObject);
		int32_t FindQuestCheckList(class UObject* InWorldContextObject, int32_t InQuestIndex);
		ESBCharaEquipType FindEquipItemInfo(class UObject* InWorldContextObject, const class FString& InUniqueId);
		ESBCharaEquipType FindCharaEquipTypeFromEquipTypeJsonObjectName(class UObject* InWorldContextObject, const class FString& InEquipTypeJsonObjectName);
		bool ExistKeyValue(class UObject* InWorldContextObject, const class FName& InKeyName);
		void ExcludePlayerPresetEquipItemNotInEquipmentBag(class UObject* InWorldContextObject, TArray<struct FSBPlayerPresetEquipItem> InPresetEquipItems, TArray<struct FSBPlayerPresetEquipItem>* OutPresetEquipItems);
		void DumpQuestCheckList(class UObject* InWorldContextObject);
		void DebugAddClassExp(class UObject* InWorldContextObject, int32_t InValue);
		void CreatePresetEquipSetAllDataSlot(class UObject* WorldContextObject);
		void ClearStepList(class UObject* InWorldContextObject);
		void ClearPresetEquipSetAllDataSlot(class UObject* WorldContextObject);
		bool ClearPlayerPresetEquipData(class UObject* WorldContextObject, int32_t PresetListIndex);
		void CleanupQuestCheckList(class UObject* InWorldContextObject);
		bool CheckBlackList(class UObject* InWorldContextObject, const class FString& CharacterId);
		void AddStepList(class UObject* InWorldContextObject, const struct FSBCharacterStepListInfo& InStepListInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterMovementBaseComponent
	 * Size -> 0x00BC (FullSize[0x0BDC] - InheritedSize[0x0B20])
	 */
	class USBCharacterMovementBaseComponent : public UASCharacterMovementComponent
	{
	public:
		unsigned char                                              UnknownData_8IC2[0xBC];                                  // 0x0B20(0x00BC) Fix size for supers

	public:
		void RemoveSwimmingAreaActor(class ASBWaterMeshActor* tgt);
		float GetWaterflowVelocity(struct FVector* waterflowVelocity);
		float GetSwimmingWaterHeight();
		void GetSwimmingSurface(struct FHitResult* Surface);
		int32_t GetSwimmingAreaCount();
		class ASBOceanGrid* GetOceanGrid();
		float GetImmersionDepth();
		void AddSwimmingAreaActor(class ASBWaterMeshActor* tgt);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterMovementComponent
	 * Size -> 0x00E0 (FullSize[0x0CBC] - InheritedSize[0x0BDC])
	 */
	class USBCharacterMovementComponent : public USBCharacterMovementBaseComponent
	{
	public:
		float                                                      InitialMaxWalkSpeed;                                     // 0x0BDC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_INLF[0xC];                                   // 0x0BE0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CapsuleSweepRadius;                                      // 0x0BEC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_26WG[0x8];                                   // 0x0BF0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LastFallingVelocity;                                     // 0x0BF8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J3IL[0xB8];                                  // 0x0C04(0x00B8) Fix size for supers

	public:
		void StopFlying();
		void StartFlying();
		void RestoreMaxWalkSpeed();
		void RestoreGroundFriction();
		void RestoreGravityScale();
		void RestoreFallingLateralFriction();
		void ResetDisableOrientRotation(const class FName& Name);
		void OnBeginAdjustRootMotion(bool bAdjustWithZAxis);
		float GetInitialGravityScale();
		void DisableOrientRotation(const class FName& Name);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterPlayRateModifier
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBCharacterPlayRateModifier : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_HRCP[0x30];                                  // 0x00B8(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterPlayRateModifierInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterPlayRateModifierInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterProjectileRangedInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterProjectileRangedInterface : public UInterface
	{
	public:
		float GetRange();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterPushOutInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterPushOutInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterSelectWindow
	 * Size -> 0x0100 (FullSize[0x0378] - InheritedSize[0x0278])
	 */
	class USBCharacterSelectWindow : public UUserWidget
	{
	public:
		class FText                                                DisplayPlayerName;                                       // 0x0278(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected
		class FText                                                CurDisplayCharacterName;                                 // 0x0290(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected
		class FText                                                CurDisplayCharacterLocation;                             // 0x02A8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected
		int32_t                                                    CurCharacterTensionTag;                                  // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBClassType                                               CurCharacterClass;                                       // 0x02C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_312U[0x3];                                   // 0x02C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurEngram;                                               // 0x02C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurLevel;                                                // 0x02CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurAdventureRank;                                        // 0x02D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurCharacterSlotMax;                                     // 0x02D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurCharacterSlotAddMax;                                  // 0x02D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7S0D[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CurPermanentDeletedAt;                                   // 0x02E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NameChangeTicketCount;                                   // 0x02F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4O50[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           CurPermanentDeletedTime;                                 // 0x02F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBBanType                                                 CurBanType;                                              // 0x0300(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBLoginBanDurationType                                    CurLoginBanDurationType;                                 // 0x0301(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBBanBasisType                                            CurLoginCharacterBanBasisType;                           // 0x0302(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SY01[0x5];                                   // 0x0303(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCharacterNotification>                    CurCharacterNotifications;                               // 0x0308(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		struct FSBCharacterBanFinishedTimeInfos                    CurCharacterBanFinishedTimeInfos;                        // 0x0318(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_75BT[0x54];                                  // 0x0324(0x0054) MISSED OFFSET (PADDING)

	public:
		void UpdatePlayerInfo(class UObject* WorldContextObject);
		void SetLoginCharacterRejectedReturnDisconnectedParty(const class FString& CharacterId, bool RejectedReturnDisconnectedParty);
		void SetLoginCharacterRejectedReturnContent(const class FString& CharacterId, bool RejectedReturnContent);
		void SetCurrentCharacter(const class FString& CharacterId);
		void RequestRestoreCharacter(class UObject* WorldContextObject, const class FString& CharacterId);
		void RequestRefuseReJoinParty(class UObject* WorldContextObject, const class FString& CharacterId);
		void RequestGetCryptocurrency(class UObject* WorldContextObject);
		void RequestDeleteCharacter(class UObject* WorldContextObject, const class FString& CharacterId, bool bForceDelete);
		void RequestCharacterSlotPurchase(class UObject* WorldContextObject);
		void RequestCharacterRename(class UObject* WorldContextObject, const class FString& CharacterId, const class FString& NewName);
		void RequestBuySlot(class UObject* WorldContextObject);
		void OnUpdatePlayerInfo(bool bWasSuccessful, const class FString& DefaultCharacterId);
		void OnRestoreCharacter(int32_t RetCode);
		void OnRefuseReJoinParty(int32_t RetCode);
		void OnGetCryptocurrency(int32_t RetCode, const struct FSBCryptoCurrency& InCryptocurrency);
		void OnDeletedCharacter(int32_t RetCode, bool bForceDelete);
		void OnCharacterSlotPurchase(bool bWasSuccessful, int32_t RetCode);
		void OnCharacterRename(int32_t RetCode);
		void OnCharacterBuySlot(bool bWasSuccessful, int32_t RetCode);
		bool IsReadyToOpenCharacterSelectMap();
		bool IsLoginCharacterRejectedReturnDisconnectedParty(const class FString& CharacterId);
		bool IsLoginCharacterRejectedReturnContent(const class FString& CharacterId);
		bool IsEnablePartyRejoinTime();
		bool IsEnableContentRejoinTime();
		int32_t GetPurchaseAmount();
		struct FSBLastJoinedPartyInfoState GetLastJoinedPartyInfoState();
		struct FSBLastJoinedContentInfoState GetLastJoinedContentInfoState();
		float GetEnablePartyRejoinRemainingTime();
		float GetEnableContentRejoinRemainingTime();
		void CharacterNotificationsClean(class UObject* WorldContextObject, const class FString& CharacterId);
		void CharacterDataAdaptation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharactersLogComponent
	 * Size -> 0x0108 (FullSize[0x01C0] - InheritedSize[0x00B8])
	 */
	class USBCharactersLogComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCharactersLogLoadedDelegete;                           // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObtainedItemListLoadedDelegete;                        // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnemyKillCountListLoadedDelegete;                      // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CVC1[0xD8];                                  // 0x00E8(0x00D8) MISSED OFFSET (PADDING)

	public:
		void UnlockDefaultTutorialHelp(const struct FSBTutorialHelpData& InTutorialHelpData, const class FName& InTutorialHelpId);
		void SBOnObtainedItemListLoadedDelegete__DelegateSignature(bool Result);
		void SBOnEnemyKillCountListLoadedDelegete__DelegateSignature(bool Result);
		void SBOnCharactersLogLoadedDelegete__DelegateSignature(bool Result);
		bool Request_RegistTutorialHelp(const class FName& InTutorialHelpId);
		bool Request_RegistNPC(const class FString& InNpcId);
		bool LoadObtainedItemList();
		void LoadEnemyLogs(class ASBPlayerController* PlayerController, bool InIsStartSequence);
		bool LoadCharacterLogs();
		bool IsVisitedMap(const class FString& MapName);
		bool IsVisitedContent(const class FName& GameContentId);
		bool IsUnlockTutorialHelp(const class FName& InTutorialHelpId);
		bool IsObtainedImagine(const class FName& InEnemyId);
		bool IsLogInitialized();
		bool IsLibraryWeaponLogs(int32_t InWeaponID);
		bool IsLibraryItemLogs(int32_t InItemID);
		bool IsLibraryImagineLogs(int32_t InImagineId, ELibraryImagineType ImagineType);
		bool IsEnemyKilled(const class FName& InEnemyId);
		bool HasLoadedObtainedItemList();
		void GetObtainedItemList(TArray<struct FItemMasterData>* OutList);
		void GetItemLogs(TArray<int32_t>* OutList);
		void GetImagineList(TArray<struct FSBMasterImagine>* OutList);
		TArray<class FName> GetConditionClearTutorialHelpIdList();
		bool AddCharacterAction_Resurrection(int32_t Count);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterStatusInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterStatusInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterTimeDilationComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBCharacterTimeDilationComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_OF7Y[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterTimeDilationInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharacterTimeDilationInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharacterTrackingComponent
	 * Size -> 0x0028 (FullSize[0x00E0] - InheritedSize[0x00B8])
	 */
	class USBCharacterTrackingComponent : public UActorComponent
	{
	public:
		class FString                                              LayerName;                                               // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTrackingDistance;                                     // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Radius;                                                  // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Value;                                                   // 0x00D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OC43[0xC];                                   // 0x00D4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAttributeSlashDiskList
	 * Size -> 0x0160 (FullSize[0x0188] - InheritedSize[0x0028])
	 */
	class USBAttributeSlashDiskList : public UObject
	{
	public:
		TArray<struct FSBAttributeSlashDisk>                       SlashDiskList;                                           // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBEffectSetting                                    GlitterModeSlashDisk;                                    // 0x0038(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaMemoryManager
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBCharaMemoryManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_ED8Y[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              World;                                                   // 0x0058(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkeletalMeshComponent
	 * Size -> 0x0050 (FullSize[0x0F80] - InheritedSize[0x0F30])
	 */
	class USBSkeletalMeshComponent : public USkeletalMeshComponent
	{
	public:
		int32_t                                                    ResetDynamicsCount;                                      // 0x0F30(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ResetDynamicsCountScale;                                 // 0x0F34(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       m_bIsInitInvisibleOnCullingOpacity;                      // 0x0F38(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6N65[0x7];                                   // 0x0F39(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstanceList;                                    // 0x0F40(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInterface*>                          MaterialInstanceCacheList;                               // 0x0F50(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UTexture*>                                    OverrideNonStreamingTextures;                            // 0x0F60(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HU6L[0x10];                                  // 0x0F70(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetForceMipLevelsToBeResident(bool enable);
		void RevertForceMipLevelsToBeResident();
		void ResetDynamics(int32_t ResetCount, float DeltaTime, bool bRecreateClothing);
		bool IsLoadedAllMipTexture();
		bool IsEnableForceMipLevelsToBeResident();
		struct FVector GetComposedRefPosePosition(const class FName& InBoneName);
		float GetCharaMeshScaleRatio();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaPartsComponent
	 * Size -> 0x0010 (FullSize[0x0F90] - InheritedSize[0x0F80])
	 */
	class USBCharaPartsComponent : public USBSkeletalMeshComponent
	{
	public:
		class USBCharaPartsMaterial*                               CharaPartsMaterial;                                      // 0x0F80(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NJUA[0x2];                                   // 0x0F88(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPartsScreenShotFlag;                                    // 0x0F8A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VK3V[0x5];                                   // 0x0F8B(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaPartsBodyComponent
	 * Size -> 0x0000 (FullSize[0x0F90] - InheritedSize[0x0F90])
	 */
	class USBCharaPartsBodyComponent : public USBCharaPartsComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaPartsFaceComponent
	 * Size -> 0x0050 (FullSize[0x0FE0] - InheritedSize[0x0F90])
	 */
	class USBCharaPartsFaceComponent : public USBCharaPartsComponent
	{
	public:
		ESBFacialType                                              FacialType;                                              // 0x0F90(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBFacialType                                              OverrideFacialType;                                      // 0x0F91(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F297[0xA];                                   // 0x0F92(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEyeBlinkEnable;                                         // 0x0F9C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EIHR[0x3];                                   // 0x0F9D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EyeBlinkIntervalMin;                                     // 0x0FA0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EyeBlinkIntervalMax;                                     // 0x0FA4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EyeBlinkSpeed;                                           // 0x0FA8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EyeBlinkTwiceRate;                                       // 0x0FAC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    EyeBlinkFrameKey;                                        // 0x0FB0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X00E[0xD];                                   // 0x0FB4(0x000D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBLipSyncType                                             LipSyncType;                                             // 0x0FC1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6N3S[0x2];                                   // 0x0FC2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LipSyncSpeed;                                            // 0x0FC4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LipSyncRatio;                                            // 0x0FC8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1U7X[0x14];                                  // 0x0FCC(0x0014) MISSED OFFSET (PADDING)

	public:
		void SetOverrideFrame(int32_t InFrame);
		void SetLipSyncSpeed(float InSpeed);
		void SetLipSyncRatio(int32_t InRatio);
		void SetLipSyncAnim(bool bInLipSyncAnim);
		void SetFacialType(ESBFacialType InFacialType);
		void ReserveFacialType(ESBFacialType InFacialType, float ApplyDelay, float KeepTime);
		bool IsValidFacialType(ESBFacialType InFacialType);
		int32_t GetOverrideFrame();
		float GetLipSyncSpeed();
		int32_t GetLipSyncRatio();
		int32_t GetLipSyncFrame();
		ESBFacialType GetFacialType();
		int32_t GetEyeBlinkFrame();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaPartsManager
	 * Size -> 0x01A0 (FullSize[0x01C8] - InheritedSize[0x0028])
	 */
	class USBCharaPartsManager : public UObject
	{
	public:
		class UDataTable*                                          CharaPartsDB;                                            // 0x0028(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UDataTable*>                                  CharaPartsDBArray;                                       // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UDataTable*>                                  EnpcCharaPartsDBArray;                                   // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UDataTable*>                                  MobCharaPartsDBArray;                                    // 0x0050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UDataTable*>                                  EnemyCharaPartsDBArray;                                  // 0x0060(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UDataTable*>                                  ShadowAvatorCharaPartsDBArray;                           // 0x0070(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UObject*>                                     m_HoldingCharaCreateAssets;                              // 0x0080(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		TArray<class UObject*>                                     m_HoldingCharaCreateMaterialAssets;                      // 0x0090(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_SPVW[0x68];                                  // 0x00A0(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USkeletalMesh*>                               SkeletonMergingMesh;                                     // 0x0108(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		TArray<class USkeletalMesh*>                               MergingMesh;                                             // 0x0118(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_RFTI[0xA0];                                  // 0x0128(0x00A0) MISSED OFFSET (PADDING)

	public:
		int32_t GetPartsNum(ECharaPartsCharacterType CharacterType, ECharaPartsLocation PartsLocation);
		TArray<class FName> GetPartsNameListFromData(class USBCharaCreateData* CharaCreateData, ECharaPartsLocation PartsLocation);
		TArray<class FName> GetPartsNameListFromComponent(class USBCharaCreateComponent* CharaCreateComponent, ECharaPartsLocation PartsLocation);
		TArray<class FName> GetPartsNameListForNpc(TArray<class UDataTable*> InCharaPartsDBArray, ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType);
		TArray<class FName> GetPartsNameListForMob(TArray<class UDataTable*> InCharaPartsDBArray, ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType, ENpcJob JobType, ECharaPartsRegion Region);
		TArray<class FName> GetPartsNameListForAll(ECharaPartsCharacterType CharaPartsCharacterType, ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType, int32_t FaceType, ENpcJob JobType, ECharaPartsRegion Region);
		TArray<class FName> GetPartsNameList(TArray<class UDataTable*> InCharaPartsDBArray, ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType, int32_t FaceType);
		class FName GetPartsName(ECharaPartsCharacterType CharacterType, ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType, const class FName& PartsId);
		class FName GetPartsIDAtIndex(ECharaPartsCharacterType CharacterType, ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType, int32_t Index);
		class UCharaPartsData* GetPartsDataAtPartsID(ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType, const class FName& PartsId);
		class UCharaPartsData* GetPartsDataAtIndex(ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType, int32_t Index);
		class UCharaPartsData* GetPartsData(class UDataTable* CharaPartsDB, ECharaPartsLocation PartsLocation, ECharaPartsBody BodyType, const class FName& PartsId);
		TArray<class UDataTable*> GetDBArray(ECharaPartsCharacterType CharaPartsCharacterType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaPartsMaterial
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class USBCharaPartsMaterial : public UObject
	{
	public:
		unsigned char                                              UnknownData_WS26[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          MaterialInstanceOriginalList;                            // 0x0030(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstanceDefaultList;                             // 0x0040(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstanceCharacreateList;                         // 0x0050(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstanceCharacreateSkinList;                     // 0x0060(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstanceReplaceList;                             // 0x0070(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstanceCustomList;                              // 0x0080(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<EMaterialType>                                      MaterialTypeList;                                        // 0x0090(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<EMaterialLocation>                                  MaterialLocationList;                                    // 0x00A0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class FString>                                      OriginalMaterialNameList;                                // 0x00B0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    StaticMaterialInstanceList;                              // 0x00C0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaPartsReplaceMaterialInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCharaPartsReplaceMaterialInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStaticMeshComponent
	 * Size -> 0x0018 (FullSize[0x0510] - InheritedSize[0x04F8])
	 */
	class USBStaticMeshComponent : public UStaticMeshComponent
	{
	public:
		TArray<class UTexture*>                                    OverrideNonStreamingTextures;                            // 0x04F8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F1D3[0x8];                                   // 0x0508(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetForceMipLevelsToBeResident(bool enable);
		bool IsLoadedAllMipTexture();
		bool IsEnableForceMipLevelsToBeResident();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaPartsStaticComponent
	 * Size -> 0x0020 (FullSize[0x0530] - InheritedSize[0x0510])
	 */
	class USBCharaPartsStaticComponent : public USBStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_IUNR[0x1];                                   // 0x0510(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bRenderStaticLOD : 1;                                    // 0x0511(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PartsScreenShotFlag;                                     // 0x0512(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y60J[0x5];                                   // 0x0513(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharaPartsMaterial*                               CharaPartsMaterial;                                      // 0x0518(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OLV8[0x10];                                  // 0x0520(0x0010) MISSED OFFSET (PADDING)

	public:
		bool GetPartsScreenShotFlag();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCharaPartsTickComponent
	 * Size -> 0x0000 (FullSize[0x0F90] - InheritedSize[0x0F90])
	 */
	class USBCharaPartsTickComponent : public USBCharaPartsComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChatBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBChatBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class FString StringReplaceCommand(class UObject* WorldContextObject, const class FString& ChatMessage);
		void RequestEmoteFor(class UObject* WorldContextObject, const class FName& InEmotionId, class ASBPlayerCharacter* PlayerCharacter, class ASBPlayerState* OtherPlayerState);
		void RequestEmote(class UObject* WorldContextObject, const class FName& InEmotionId, class ASBPlayerCharacter* PlayerCharacter);
		void PushWeaponUsagePeriodEndLog(class UObject* WorldContextObject, int32_t InExpiredWeaponItemId, int32_t InReplacedWeaponItemId);
		void PushWeaponSkinUsagePeriodEndLog(class UObject* WorldContextObject, const class FString& InWeaponUniqueId);
		void PushMatchingTimeoutLog(class UObject* WorldContextObject);
		void PushLiquidMemoryEfficacyLog(class UObject* WorldContextObject, ESBLiquidMemoryEfficacyType InEfficacyType);
		void PushGetStampSystemLog(class UObject* WorldContextObject, int32_t StampId);
		void PushExpiredRoseOrbSystemLog(class UObject* WorldContextObject);
		void PushExpiredBPPSystemLog(class UObject* WorldContextObject);
		void PushEraseBarrierLog(class UObject* WorldContextObject);
		void PushEquipmentUsagePeriodEndLog(class UObject* WorldContextObject, int32_t InExpiredEquipmentItemId, EItemType InItemType);
		void PushEquipmentChangeLog(class UObject* WorldContextObject, const class FString& InEquipmentItemUniqueId);
		void PushEmotionLog(class UObject* WorldContextObject, const class FName& EmotionId, const class FString& SenderCharacterName);
		void PushEmotionForLog(class UObject* WorldContextObject, const class FName& EmotionId, class ASBCharacter* TargetCharacter);
		void PushContentsAFKWarning(class UObject* WorldContextObject, float Second);
		void PushContentsAFKKicked(class UObject* WorldContextObject);
		void PushBattleLogText(class UObject* WorldContextObject, const class FText& InMessage, ESBSystemLogDetailType DetailType, ESBChatLogOption Option);
		void PushBattleLog(class UObject* WorldContextObject, ESBBattleLogType BattleLogType, TArray<class FString> ParamNames, TArray<class FText> ParamValues);
		void PushAFKWarning(class UObject* WorldContextObject, float Second);
		void PushAchievementGainedLog(class UObject* WorldContextObject, int32_t InAchievementId);
		bool ParseEmotionMessageFromId(const class FText& InMessageText, const class FString& EmotionId, class FText* OutMessageText);
		class FString MakeStampMessage(const class FString& StampId);
		bool IsStampMessage(class UObject* WorldContextObject, const class FText& InMessage, int32_t* RetStampID, class FText* OutMessage);
		bool IsPlayerSameParty(class AActor* Owner, class AActor* Target);
		bool IsLocalUserMessage(class UObject* WorldContextObject, class USBChatMessage* Message);
		bool IsInThisParty(class ASBPlayerCharacter* Player, class USBPartyGameState* PartyGameState);
		bool IsInParty(class AActor* Owner);
		bool IsEmotionMessage(class UObject* WorldContextObject, const class FText& InMessage, class FString* RetEmotionId);
		class FString GetOpenChatModeKeyTextbyMouseAndKeyboard();
		class FString GetGameSessionId(class UObject* WorldContextObject);
		bool GetEmotionMessageInEmotionId(const class FString& InEmotionMessage, class FString* RetEmotionId);
		ESBChatLogType GetChatTypeChangeSuitableOne(class UObject* WorldContextObject, ESBChatLogType InType);
		class FString GetChatRoomID(class UObject* WorldContextObject, ESBChatLogType InType);
		class USBChatManager* GetChatManager(class UObject* WorldContextObject);
		struct FSBChatSpecialCommandInfo CheckSpecialCommand(const class FString& ChatMessage);
		bool CheckChatUnreadNotifyValid(class UObject* WorldContextObject, const struct FSBChatUIMessage& Mess, bool IsNoStackCheck);
		bool CanLocalUserChat(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChatLogWindow
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBChatLogWindow : public USBUserWidget
	{
	public:
		bool IsCreateChat(const struct FSBChatUIMessage& Mess, int32_t FilterType, int32_t DetailFilterType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChatManager
	 * Size -> 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
	 */
	class USBChatManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_PPGC[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBChatMessage*>                              MessageQueue;                                            // 0x0030(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0RGZ[0xA8];                                  // 0x0040(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChatSendErrorDelegete;                                 // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ONN0[0x40];                                  // 0x00F8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChangeCoolTimeEmotionDelegate;                         // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeCoolTimeStampDelegate;                           // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N5RT[0x30];                                  // 0x0158(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnReciveMessageToUnreadNotify;                           // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLogWindowTempVisibleDelegate;                          // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDirectChatSenderRemoveDelegate;                        // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetCoolTimeStamp();
		void SetCoolTimeEmotion();
		void SendTeamChat(const class FString& MsgBody);
		void SendPrivateChat(const class FString& UserId, const class FString& CharacterId, const class FString& MsgBody);
		void SendPartyChat(const class FString& MsgBody);
		void SendOpenChat(const class FString& MsgBody);
		void SendGuildChat(const class FString& MsgBody);
		void SendCloseAreaChat(const class FString& MsgBody);
		void OnReciveMessageToUnreadNotify__DelegateSignature(ESBChatLogWindowSlot Slot, const struct FSBChatUIMessage& UIMessage);
		void OnLogWindowTempVisibleDelegate__DelegateSignature();
		void OnDirectChatSenderRemoveDelegate__DelegateSignature(const class FString& CharacterId);
		void OnChatSendErrorDelegete__DelegateSignature(ESBChatSendErrorType ErrorType);
		void OnChangeCooltimeDelegate__DelegateSignature(bool IsCoolTime);
		bool IsCoolTimeCountStamp();
		bool IsCoolTimeCountEmotion();
		void CallReciveMessageToUnreadNotify(ESBChatLogWindowSlot Slot, const struct FSBChatUIMessage& UIMessage);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChatMemberState
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class USBChatMemberState : public UObject
	{
	public:
		unsigned char                                              UnknownData_0CG2[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FUniqueNetIdRepl                                    UniqueId;                                                // 0x0030(0x0028) Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ER30[0x28];                                  // 0x0058(0x0028) MISSED OFFSET (PADDING)

	public:
		bool IsLocalPlayer();
		class ASBPlayerState* GetPlayerState();
		class ASBPlayerCharacter* GetPlayerCharacter();
		class FText GetDisplayName();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChatMessage
	 * Size -> 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
	 */
	class USBChatMessage : public UObject
	{
	public:
		unsigned char                                              UnknownData_7NBT[0xE8];                                  // 0x0028(0x00E8) MISSED OFFSET (PADDING)

	public:
		void MakeMessageStruct(struct FSBChatRoomMessage* OutMessage);
		bool IsUnread();
		bool IsDead();
		bool IsCloseArea();
		bool IsChat();
		bool HasSender();
		struct FDateTime GetTimestamp();
		ESBSystemLogDetailType GetSystemLogDetailType();
		class FText GetSenderName();
		class USBChatMemberState* GetSenderMemberState();
		class FString GetSenderId();
		class FString GetSenderCharacterId();
		class USBChatMemberState* GetReceiverMemberState();
		class FString GetReceiverId();
		ESBChatLogType GetChatLogType();
		ESBChatLogOption GetChatLogOption();
		class FText GetBody();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.ChatSystem
	 * Size -> 0x0238 (FullSize[0x0260] - InheritedSize[0x0028])
	 */
	class UChatSystem : public UObject
	{
	public:
		unsigned char                                              UnknownData_IOXN[0x238];                                 // 0x0028(0x0238) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChatWindow
	 * Size -> 0x0028 (FullSize[0x02D8] - InheritedSize[0x02B0])
	 */
	class USBChatWindow : public USBUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnChatSendErrorDelegete;                                 // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_82E1[0x18];                                  // 0x02C0(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnPress_EndChat();
		void OnChatSendErrorDelegete__DelegateSignature();
		void OnChanged_ConnectionChatServer(bool IsLogin);
		void Native_EndChat();
		bool IsActive();
		void Deactive();
		void Active();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheatCheckPoint_TA
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBCheatCheckPoint_TA : public AActor
	{
	public:
		int32_t                                                    AttackID;                                                // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    IdentityID;                                              // 0x022C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinSeconds;                                              // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UXIR[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnOverlapBegin(class AActor* OtherActor, const struct FDateTime& LocalStartTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheatCommandBaseComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBCheatCommandBaseComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheatCommandPlayerComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBCheatCommandPlayerComponent : public USBCheatCommandBaseComponent
	{
	public:
		TArray<class AActor*>                                      TestReplicateActorList;                                  // 0x00B8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      FreeArrangeActorList;                                    // 0x00C8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       bDebugFollow;                                            // 0x00D8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7DX5[0x3];                                   // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             DebugFollowPoint;                                        // 0x00DC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void Server_SubClassExp(int32_t Value);
		void Server_SetClassLevel(int32_t Level);
		void Server_SetClassExp(int32_t Value);
		void Server_SetClassExExp(int32_t Value);
		void Server_AddClassExp(int32_t Value);
		void Client_SaveLevel(int32_t AddExp, const struct FSBExtraExpParse& ExtraExpParse);
		void Client_SaveExp(int32_t Exp);
		void CheatCommand_TestSpawnReplicateActor(int32_t SpawnNum, float Min, float Max);
		void CheatCommand_TestDestroyReplicateActor();
		void CheatCommand_SubClassExp(int32_t Value);
		void CheatCommand_SpawnFreeArrangeActor(int32_t ActorID);
		void CheatCommand_ShieldDamage(float DamageValue);
		void CheatCommand_SetClassLevel(int32_t Level);
		void CheatCommand_SetClassExp(int32_t Value);
		void CheatCommand_SetClassExExp(int32_t Value);
		void CheatCommand_ServerTriggerAbility(int32_t ID, int32_t Parts1Value1, int32_t Parts1Value2, int32_t Parts2Value1, int32_t Parts2Value2, int32_t Time, bool Passive, ESBAbilityRequestSource RequestType);
		void CheatCommand_ServerPrintBattleEffective();
		void CheatCommand_ServerGatherPlayerStateMachine();
		void CheatCommand_ServerGatherPlayerParameter();
		void CheatCommand_ServerGatherAroundPlayerParameter(float Radius);
		void CheatCommand_ServerForceSyncInitialParametersLoadCompleted();
		void CheatCommand_ServerForceSyncClientReady();
		void CheatCommand_SendMaterialParamAroundPlayer(const class FName& MaterialName, float Value, float Radius);
		void CheatCommand_SelfDamage(float DamageValue, const struct FSBAttackStunSetting& AttackStunSetting);
		void CheatCommand_PlayerRadiusDamage(float DamageValue, float Radius);
		void CheatCommand_GatherPlayerParameter();
		void CheatCommand_GatherAroundPlayerParameter(float Radius);
		void CheatCommand_DestroyFreeArrangeActor();
		void CheatCommand_ClientGatherPlayerStateMachine(const struct FSBDebugGatherStateMachineParam& ServerStateMachineParam);
		void CheatCommand_ClientGatherPlayerParameter(const struct FSBDebugGatherPlayerParam& DebugPlayerParam);
		void CheatCommand_ClientGatherAroundPlayerParameter(TArray<struct FSBDebugGatherAroundPlayerParam> DebugAroundPlayerParam);
		void CheatCommand_AddClassExp(int32_t Value);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheatCommandProjectileComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBCheatCommandProjectileComponent : public USBCheatCommandBaseComponent
	{
	public:
		void CheatCommand_WorldProjectileNum();
		void CheatCommand_TestProjectile(const class FName& SkillName, bool bFirst, int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheatCommandUtilityComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBCheatCommandUtilityComponent : public USBCheatCommandBaseComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCompleteAPICheck;                                      // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_UncheaterServerInit();
		void Server_UncheaterServerExit();
		void Server_SetAllClimbingPointActive(bool IsActive);
		void Server_Request_Debug_AddToken(class ASBPlayerController* InPlayerContorller, int32_t TokenID, int32_t Amount);
		void Server_PlayWorldCameraShake(class UClass* Shake, const struct FVector& Epicenter);
		void Server_CheckGetAPI(const class FString& URL);
		void Server_CheckAPI(const class FString& URL, const class FString& PostData);
		void Multicast_PlayWorldCameraShake(class UClass* Shake, const struct FVector& Epicenter);
		void Client_OnUncheaterServerInit(const class FString& InDescription);
		void Client_OnCompleted_Debug_AddToken(bool bWasSuccessful, int32_t SBRetCode, const struct FSBCharacterToken& Token);
		void Client_CheckAPI(bool bWasSuccessful, const class FString& Response);
		void CheatCommand_SetServerFrameRate(int32_t fps);
		void CheatCommand_ServerSendCommand(const class FString& Command);
		void CheatCommand_ServerDumpObjectProperty(const class FString& ClassName, const class FString& PropertyName);
		void CheatCommand_Server_RequestReloadMasters();
		void CheatCommand_ForceLogOutput();
		void CheatCommand_DisconnectCaller();
		void CheatCommand_ClientDumpObjectProperty(const class FString& Result, int32_t ResultLength);
		void CheatCommand_Client_CompleteServer_ReloadAllMasters();
		void CheatAPIChecked__DelegateSignature(bool bWasSuccessful, const class FString& Response);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheatManager
	 * Size -> 0x00A8 (FullSize[0x0130] - InheritedSize[0x0088])
	 */
	class USBCheatManager : public UCheatManager
	{
	public:
		class ASBDebugCameraController*                            OtherViewController;                                     // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CameraShakeData;                                         // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              PhotoModeControllerClass;                                // 0x0098(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBPhotoModeController*                              PhotoModeControllerRef;                                  // 0x00A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBotCheatCommand*                                  BotCommand;                                              // 0x00A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBEnemyCheatCommand*                                EnemyCommand;                                            // 0x00B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBMobCheatCommand*                                  MobCommand;                                              // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBPlayerCheatCommand*                               PlayerCommand;                                           // 0x00C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBDungeonCheatCommand*                              DungeonCommand;                                          // 0x00C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBStorageCheatCommand*                              StorageCommand;                                          // 0x00D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBMatchCheatCommand*                                MatchCommand;                                            // 0x00D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBEventCheatCommand*                                EventCommand;                                            // 0x00E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBUICheatCommand*                                   UICommand;                                               // 0x00E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBPartyCheatCommand*                                PartyCheatCommand;                                       // 0x00F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBPerformanceCheckCheatCommand*                     PerformanceCheckCommand;                                 // 0x00F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBBattleCheatCommand*                               BattleCheatCommand;                                      // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBUncheaterCheatCommand*                            UncheaterCommand;                                        // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBHttpQueryCheatCommand*                            HttpQueryCommand;                                        // 0x0110(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBQuestCheatCommand*                                QuestCommand;                                            // 0x0118(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBOnlineCheatCommand*                               OnlineCommand;                                           // 0x0120(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBDebugCheatCommand*                                DebugCommand;                                            // 0x0128(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void WorldProjectileNum();
		void WarpToTarget(float Distance, float Yaw);
		void UpdateFieldStatusAll();
		void UpdateCreationParts();
		void UpdateActorTransparent();
		void UnlockLiquidMemoryLevel(uint32_t InLiquidMemoryId, int32_t InLevel);
		void UnlockAllCraftRecepis();
		void UnlockAdventurerRankFlag();
		void UnloadMap();
		void TutHelpRequest(const class FName& TutorialHelpId);
		void TutHelpAllOpen();
		void TryClassChange(ESBClassType Class);
		void TriggerAssertionServer();
		void TriggerAssertion();
		void ToggleSlateCursorDebug();
		void TogglePhotoMode();
		void ToggleOtherView();
		void ToggleEnableAvatarRandomWait();
		void ToggleDebugCameraHUD();
		void TestSpawnReplicateActor(int32_t SpawnNum, float Min, float Max);
		void TestLaunchProjectile(const class FName& SkillName, bool bFirst, int32_t Index);
		void TestDestroyReplicateActor();
		void TeleportToLocation(float X, float Y, float Z);
		void TakeDamageDestructible(float Damage);
		void SwitchOceanCollision(bool Sw);
		void StopServerShutDownNotice();
		void StartTerrainCheck(float UnitSize);
		void StartInstanceBattle(const class FName& DungeonId);
		void StartAwsServerShutDownNotice();
		void StartAutoScalingServerShutDownNotice(int32_t InRemainMinutes);
		void SpawnFreeArrangeActor(int32_t ActorID);
		void SkipTheaterCheck();
		void ShowWeapon_LocallyPlayer();
		void ShowTerrainCheckResult();
		void ShowSimpleSystemMessage(const class FText& Message);
		void ShowRouteGuideDest();
		void ShowPlayerStateFields();
		void ShowPlayerControllerFields();
		void ShowPlayerCharacterFields();
		void ShowMapInfo();
		void ShowLocalCharacterList();
		void ShowLoadingScreen(const class FName& GameContentId);
		void ShowFallDeadVolume();
		void SetUserFlag(const class FString& FlagId, bool bValue);
		void SetUnauthorizedTextConcealment(bool InEnable);
		void SetUIVisibleSetting(ESBUIType InUIType, bool bInVisibility);
		void SetSlateDebugFlag(int32_t Value);
		void SetSkyDebug(bool Sw);
		void SetSkipTutorial(bool bSkip);
		void SetServerFrameRate(int32_t fps);
		void SetSchedulerVirtualDateStopType(const class FString& DateString);
		void SetSchedulerVirtualDateMoveType(const class FString& DateString);
		void SetRouteGuideDest(const class FName& DestinationId);
		void SetRotation(float InPitch, float InYaw, float InRoll);
		void SetPlayerGodMode(bool bActivate);
		void SetNetUpdateFrequency(float Value);
		void SetLocation(float X, float Y, float Z);
		void SetLoadingCollisionDisable(bool IsDisable);
		void SetForceShowOpenCmdMenuIcon(bool bShow);
		void SetFoliageReactionMax(int32_t Num);
		void SetEnableTextVersionDialog(bool InEnable);
		void SetDigitalSignageSetupTextureDelayWaitUseFlag(bool InUseFlag);
		void SetDemoBattleEffectHidden(bool bHidden);
		void SetCursorSpeedNormal(float InSpeed);
		void SetCursorSpeedLow(float InSpeed);
		void SetCurrentCulture(const class FString& culture);
		void SetContentsAFKAutoKickDisable(bool bIsIgnore);
		void SetContentLock(ESBContentLockType ContentLockType, bool bLock);
		void SetCommandMenuDebugAlpha(float Alpha);
		void SetCharacterWidth(float SliderValue);
		void SetCharacterHeight(float SliderValue);
		void SetCharacterBust(float SliderValue);
		void SetBattleStatusSelectTableName(const class FName& Name);
		void SetBattleStatusDeactive(bool B);
		void SetAllNpcHidden(bool bHidden);
		void SetAllMobNpcSpawnFadeInTime(float Time);
		void SetAllClimbingPointActive(bool IsActive);
		void SetAFKAutoKickDisable(bool bIsIgnore);
		void SetAdventurerRank(int32_t Value);
		void SetActorTransparentFlag_Debug();
		void SetActorHiddenInGame(const class FString& ClassName, bool bFlag);
		void ServerSendCommand(const class FString& Command);
		void ServerGatherEnemyParam();
		void Server_CheckRaidBattleGateStatus(const class FString& CharacterId, const class FString& TermId);
		void SchedulerVirtualDateStop();
		void SBShowNavigation(const class FString& InNavMesh);
		void RunNetworkError();
		void RunGarbageCollectionIfNeeded();
		void RouteGuideStart(bool Sw, bool DebugSw);
		void ReviveSelf();
		void ReturnToRoom();
		void RestartGame();
		void ResetExportLocationFile();
		void RequestLoadDebugTickableObject();
		void RequestLoadDebugProjectileList();
		void RequestGetRewardBoost();
		void RequestForceLogOutput();
		void RequestDisconnectCaller();
		void RequestAdventurerRankUp();
		void ReloadLocalTranslationText();
		void ReloadClimbingPoint();
		void ReloadAllMasters(bool bApplyServer);
		void ReleaseContentLock(const class FName& ContentType);
		void RankingRewardDebug();
		void PostEventScriptSEAsync(const class FString& EventName);
		void PlayWorldCameraShake(float X, float Y, float Z);
		void PlayLevelSequence(const class FString& AssetPath);
		void PlayInterruptQuestBGM(ESBInterruptQuestBGMType MissionType, ESBInterruptQuestBGMState MissionState);
		void PlayerShortPinDebug();
		void PlayDemo(const class FName& Name);
		void PlayBuddyConditionalVoice(class FName* InConditionId);
		void PartsBreakMulti(const class FName& PartsName1, const class FName& PartsName2, const class FName& PartsName3, const class FName& PartsName4, bool bSoon);
		void PartsBreak(const class FName& PartsName, bool bSoon);
		void OwnItemIndexRewritingAll(int32_t InStartIndex);
		void OwnItemIndexRewriting(int32_t InTargetNum, int32_t InRewritingIndex);
		void OutputDXPlayerContributionValue();
		void OutputCollisionParam(const class FString& SearchActorName, const class FString& SearchComponentName);
		void OutCheckDebugMode();
		void OutCheckDebugLogMode();
		void OpenLevelDesignEnemyParamSetting();
		void OpenExportLocationSaveDirectory();
		void OpenAdminUserPage();
		void OpenAdminPage();
		void OpenAdminMasterPage(const class FString& InMasterDataType);
		void OpenAdminCharacterPage();
		void OnUnlockLiquidMemoryLevel(int32_t RetCode);
		void OnAddLiquidMemory(int32_t RetCode);
		void OnAccumulateLiquidMemory(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos);
		void Note(const class FString& Note);
		void MasterWeaponIndexRewritingAll(int32_t InStartIndex);
		void MasterMountImagineIndexRewritingAll(int32_t InStartIndex);
		void MasterItemIndexRewritingAll(int32_t InStartIndex);
		void MasterImagineIndexRewritingAll(int32_t InStartIndex);
		void MasterCostumeIndexRewritingAll(int32_t InStartIndex);
		void LookAtToCamera(bool Flag);
		void LoadMap(const class FString& MapName);
		void LoadBattleRegident();
		void LeaveDungeon();
		void KillSelf();
		void KillAllPlayerAndEnemyInBattleArea();
		void KillAllEnemyInBattleArea();
		void KillAllEnemyAndPlayerInBattleArea();
		void KillAllEnemy();
		void KeyConfigSetup();
		void JumpToDungeonLastBoss();
		void JingleStackClear(bool IsDump);
		void JingleRequest(EJingleType Type);
		void JingleDump();
		void ItemDefaultOrderDebug();
		void ItemAppraisalResultDebug();
		bool IsTraverseDebug();
		bool IsTraverseAllClearDebug();
		bool IsRankingRewardDebug();
		bool IsPlayerShortPinDebug();
		bool IsOutCheckDebugMode();
		bool IsOutCheckDebugLogMode();
		bool IsItemDefaultOrderDebug();
		bool IsItemAppraisalResultDebug();
		bool IsDhcBattleDebugMode();
		bool IsBattleStatusDeactive();
		void InitFaceAnim(bool bForceReInit);
		void IncompleteDungeon(const class FName& DungeonId);
		void HideWeapon_LocallyPlayer();
		void HideLoadingScreen();
		void HideFallDeadVolume();
		void HasNgWord(const class FString& CheckText);
		void GetTransform();
		void GetLocation();
		void GetEventTermNextOffLabelDataTimeTest(const class FString& InTermId, const class FString& InDateString);
		int32_t GetConnectToServerFailureDebug();
		float GetCommandMenuDebugAlpha();
		class FName GetBattleStatusSelectTableName();
		void ForceReadMark();
		void ForceGarbageCollection();
		void ForceClearDungeon();
		void FlyingPlatform();
		void FadeOutScreen();
		void FadeInScreen();
		void ExportLocation();
		void EventExecutor_SetOutputLog(bool bValue);
		void EventExecutor_OutputInfo();
		void EventExecutor_ExecuteEvent(const class FName& EventName, const class FString& Param);
		void EnemyHitPointForceSync();
		void EndTutorialMap();
		void DxBattleCastleGateInfinityHP(bool SetFlag);
		void DumpUserFlag();
		void DumpTraverse();
		void DumpServerObjectProperty(const class FString& ClassName, const class FString& PropertyName);
		void DumpSBTextTableCash(const class FString& OutputFilePath);
		void DumpSBTextTable(const class FString& OutputFilePath);
		void DumpRandomNpcSpawnPointInfos();
		void DumpPrimitiveComponentWithCollision(const class FName& Name);
		void DumpOptionServerSendData();
		void DumpNpcListOnManager();
		void DumpNgWord();
		void DumpLoadingScreenStatus();
		void DumpHudLayoutData();
		void DumpGameSessionState();
		void DisplayTextId(ESBDisplayTextIdFlag InFlag1, ESBDisplayTextIdFlag InFlag2, ESBDisplayTextIdFlag InFlag3, ESBDisplayTextIdFlag InFlag4);
		void DigitalSignageMasterDataLogPut();
		void DigitalSignageDownLoadTextureRelease(const class FString& Name);
		void DhcBattleDebugMode();
		void DestroyFreeArrangeActor();
		void DelayCommand(float DelayTime, const class FString& Command);
		void DebugWeaponLog();
		void DebugTraverseAllClear();
		void DebugTraverse();
		void DebugPrintLogVFXSetting();
		void DebugPlayTide(bool Sw, float TimeSec);
		void DebugLogSoundLoadAsset();
		void DebugLogEffectSpawnCount();
		void DebugLogBGM();
		void DebugLogAkEventTrigger();
		void DebugLogActorVisibility(const class FString& ActorName);
		void DebugChangeLocalizeVoice(const class FString& Language);
		void DebugCameraDistanceLimit(float Limit);
		void DeactivateWarpPoint(const class FString& WarpPointId);
		void DeactivateDungeon(const class FString& DungeonId);
		void DB_SetHintDialogShowed(bool IsShowed);
		void DB_DumpHintDialogShowed();
		void ConnectToServerFailureDebug(int32_t InRetCode);
		void ConfigSeaverSaveDataClear();
		void CompleteDungeon(const class FName& DungeonId);
		void CheckRaidBattleGateStatus(const class FString& TermId);
		void CheckEventTermData(const class FString& TermId, int32_t Index, const class FString& DateString);
		void CheckDigitalSignageStatus(const class FString& Name);
		void CharaCreateDebugInfo();
		void ChangeEffectAttachedTest(const class FName& SocketName);
		void BugReport();
		void BeginTutorialMap(const class FString& CharacterId);
		void AdminExecuteCommand(const class FString& InputText);
		void AddToken(int32_t TokenID, int32_t Amount);
		void AddMoney(int32_t Value);
		void AddLocation(float X, float Y, float Z);
		void AddLiquidMemory(int32_t InLiquidMemoryId, bool bMaxAccumulatedFlag, int32_t InLevel);
		void AddLine2NotifyMessage(const class FText& InMainMessage, const class FText& InSubMessage);
		void AddLine1NotifyMessage(const class FText& InMessage);
		void AddLine1LNotifyMessage(const class FText& InMessage);
		void AddImagineRecepi(int32_t RecepiId, bool IsNoItem);
		void AddCraftRecepi(int32_t RecepiId, bool IsNoItem);
		void ActivateWarpPoint(const class FString& WarpPointId);
		void ActivateEnemySetHPLog();
		void ActivateDungeon(const class FString& DungeonId);
		void AccumulateLiquidMemory(uint32_t InConditionType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheckBoxBase
	 * Size -> 0x0028 (FullSize[0x07B0] - InheritedSize[0x0788])
	 */
	class USBCheckBoxBase : public UCheckBox
	{
	public:
		unsigned char                                              UnknownData_EQ96[0x8];                                   // 0x0788(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       CheckedAkAudioEvent;                                     // 0x0790(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       UncheckedAkAudioEvent;                                   // 0x0798(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       HoveredAkAudioEvent;                                     // 0x07A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  CheckedSystemSEId;                                       // 0x07A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  UncheckedSystemSEId;                                     // 0x07A9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  HoveredSystemSEId;                                       // 0x07AA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9SJC[0x5];                                   // 0x07AB(0x0005) MISSED OFFSET (PADDING)

	public:
		void OnPostSoundEvent_CheckBoxStateChanged(bool bIsChecked);
		void OnMouseLeave(const struct FPointerEvent& MouseEvent);
		void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheckInitialRepComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBCheckInitialRepComponent : public UActorComponent
	{
	public:
		bool                                                       bInitial : 1;                                            // 0x00B8(0x0001) BIT_FIELD Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2ZED[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheckSwimmingAreaBImagine
	 * Size -> 0x00C0 (FullSize[0x0178] - InheritedSize[0x00B8])
	 */
	class USBCheckSwimmingAreaBImagine : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_GITM[0xC0];                                  // 0x00B8(0x00C0) MISSED OFFSET (PADDING)

	public:
		void RemoveSwimmingAreaActor(class ASBWaterMeshActor* tgt);
		int32_t GetSwimmingAreaCount();
		void AddSwimmingAreaActor(class ASBWaterMeshActor* tgt);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheerfulItemBase
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBCheerfulItemBase : public AActor
	{
	public:
		unsigned char                                              UnknownData_TBPP[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnDeactivate();
		void OnAdditionalActivate();
		void OnActivate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheerfulItem_HandheldBase
	 * Size -> 0x0070 (FullSize[0x02A0] - InheritedSize[0x0230])
	 */
	class ASBCheerfulItem_HandheldBase : public ASBCheerfulItemBase
	{
	public:
		class USBSkeletalMeshComponent*                            Mesh;                                                    // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBParticleSystemComponent*                          ParticleSystem;                                          // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBParticleSystemComponent*                          ActivationEffectParticleSystem;                          // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBParticleSystemComponent*                          DeactivationEffectParticleSystem;                        // 0x0248(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_FadeOutTimeAtDestroySelf;                              // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowActivationTimingEffect;                             // 0x0254(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowDeactivationTimingEffect;                           // 0x0255(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TR88[0x2];                                   // 0x0256(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_DelayDestroySelfTime;                                  // 0x0258(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WRGA[0x44];                                  // 0x025C(0x0044) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheerfulItem_Firework
	 * Size -> 0x0000 (FullSize[0x02A0] - InheritedSize[0x02A0])
	 */
	class ASBCheerfulItem_Firework : public ASBCheerfulItem_HandheldBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheerfulItem_PartyPopper
	 * Size -> 0x0030 (FullSize[0x02D0] - InheritedSize[0x02A0])
	 */
	class ASBCheerfulItem_PartyPopper : public ASBCheerfulItem_HandheldBase
	{
	public:
		TArray<int32_t>                                            m_HiddenTargetCapAndStringMaterialIndexList;             // 0x02A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X3AE[0x20];                                  // 0x02B0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheerfulItem_GlowStick
	 * Size -> 0x0000 (FullSize[0x02A0] - InheritedSize[0x02A0])
	 */
	class ASBCheerfulItem_GlowStick : public ASBCheerfulItem_HandheldBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheerfulItem_Snowman
	 * Size -> 0x0000 (FullSize[0x02A0] - InheritedSize[0x02A0])
	 */
	class ASBCheerfulItem_Snowman : public ASBCheerfulItem_HandheldBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCheerfulItem_FlowerShower
	 * Size -> 0x0000 (FullSize[0x02A0] - InheritedSize[0x02A0])
	 */
	class ASBCheerfulItem_FlowerShower : public ASBCheerfulItem_HandheldBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChildWaterNavModifierVolumeComponent
	 * Size -> 0x0070 (FullSize[0x02B0] - InheritedSize[0x0240])
	 */
	class USBChildWaterNavModifierVolumeComponent : public UChildActorComponent
	{
	public:
		class UClass*                                              NavModifierArea;                                         // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, struct FNavMeshInWaterDepthSetting>      NavMeshDepthSettings;                                    // 0x0248(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      TargetActors;                                            // 0x0298(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XM7X[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetChildNavModifierVolumeClass(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChoiceDialog
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBChoiceDialog : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnSelectItem;                                            // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic

	public:
		void Show();
		void SetQuestion(const class FText& InText);
		void OnSelectItem__DelegateSignature(int32_t InSelectItemIndex);
		void AddItem(const class FText& InText);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShapeSoundBaseComponent
	 * Size -> 0x0020 (FullSize[0x0410] - InheritedSize[0x03F0])
	 */
	class USBShapeSoundBaseComponent : public UAkComponent
	{
	public:
		unsigned char                                              UnknownData_MCYC[0x14];                                  // 0x03F0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EnablebUpdateDistance;                                   // 0x0404(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       PlayEvent;                                               // 0x0408(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void StopShapeSound(class UAkAudioEvent* StopEvent);
		void ActiveShapeSound();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCircleSoundComponent
	 * Size -> 0x0020 (FullSize[0x0430] - InheritedSize[0x0410])
	 */
	class USBCircleSoundComponent : public USBShapeSoundBaseComponent
	{
	public:
		bool                                                       bIsEllipse;                                              // 0x0410(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G4BP[0x3];                                   // 0x0411(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Radius;                                                  // 0x0414(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Offset;                                                  // 0x0418(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           EllipseVector;                                           // 0x0424(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XFRV[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetEllipse(const struct FVector2D& InEllipseVector, const struct FVector& InOffset);
		void SetCircle(float InRadius, const struct FVector& InOffset);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameModeBase
	 * Size -> 0x0008 (FullSize[0x0318] - InheritedSize[0x0310])
	 */
	class ASBGameModeBase : public AGameMode
	{
	public:
		int32_t                                                    NumGmJumpers;                                            // 0x0310(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQ7F[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode
	 * Size -> 0x00E0 (FullSize[0x03F8] - InheritedSize[0x0318])
	 */
	class ASBGameMode : public ASBGameModeBase
	{
	public:
		unsigned char                                              UnknownData_XZ5V[0x10];                                  // 0x0318(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              GameModeShortName;                                       // 0x0328(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartPointRandomX;                                       // 0x0338(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartPointRandomY;                                       // 0x033C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRestartPlayer;                                         // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M2F4[0x4];                                   // 0x0350(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlayerDiedCountDown;                                     // 0x0354(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MinutesPerDay;                                           // 0x0358(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MinutesPerDaytime;                                       // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       EnableTimeProgression;                                   // 0x0360(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G36Z[0x3];                                   // 0x0361(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    GameTime_Hour;                                           // 0x0364(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GameTime_Minute;                                         // 0x0368(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPvP : 1;                                                // 0x036C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X9E7[0x3];                                   // 0x036D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBLocationType                                            LocationType;                                            // 0x0370(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBPartyChainSettingType                                   PartyChainSettingType;                                   // 0x0371(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableReplicationGraph;                                 // 0x0372(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7N2F[0x5];                                   // 0x0373(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ReplicationGraphClass;                                   // 0x0378(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LLUJ[0x78];                                  // 0x0380(0x0078) MISSED OFFSET (PADDING)

	public:
		void SeamlessTravelTimer(const class FString& TravelURL);
		void OnRestartPlayer__DelegateSignature(class ASBPlayerCharacter* PlayerCharacter);
		void OnBeginPlayerCharacter(class UObject* Sender, class UObject* Param);
		void NotifyPlayerTeleportedWithDelay(class ASBPlayerCharacter* Player);
		void InitGameModeInfoOnMasterDataAvailable();
		void DefaultTimer();
		void CharacterDelayJoin(class USBNetConnection* Connection);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCityGameMode
	 * Size -> 0x0000 (FullSize[0x03F8] - InheritedSize[0x03F8])
	 */
	class ASBCityGameMode : public ASBGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClassHUD
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBClassHUD : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_OJTG[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		bool Show();
		void SetVisibleSettingFlag(bool Flag);
		void SetVisibleFlag(bool Flag);
		void SetReserveFlag6(bool Flag);
		void SetReserveFlag5(bool Flag);
		void SetReserveFlag4(bool Flag);
		void SetReserveFlag3(bool Flag);
		void SetReserveFlag2(bool Flag);
		void SetReserveFlag1(bool Flag);
		void SetEditMode(bool InIsEdit);
		void PlayAnimReverseInOut();
		void PlayAnimForwardInOut();
		void OnUnbind();
		void OnTick();
		void OnTerminate();
		void OnSetEditMode(bool InIsEdit);
		void OnInitialize();
		void OnBind();
		bool IsVisibleSettingFlag();
		bool IsVisibleFlag();
		bool IsReserveFlag6();
		bool IsReserveFlag5();
		bool IsReserveFlag4();
		bool IsReserveFlag3();
		bool IsReserveFlag2();
		bool IsReserveFlag1();
		bool Hide();
		void ChangeVisibleSetting(bool InIsVisibleSetting);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClassHUDComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBClassHUDComponent : public UActorComponent
	{
	public:
		class USBClassHUD*                                         ClassHUD_;                                               // 0x00B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8FUI[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void VisibleUI(bool InIsVisible, bool InIsForce);
		void VisibleSetting(bool InIsVisible);
		void Update();
		void UnSheathe();
		void Sheathe();
		void SetShowAlwaysHUDFlag(bool Flag);
		void OnVisibleSettingChange(ESBUIType InUIType, bool bInVisibility, bool bInInstantly);
		void OnUpdateLayoutView();
		void OnUpdate();
		void OnUnbind();
		void OnSetup();
		void OnRemoveUI();
		void OnCreateUI();
		void OnBind();
		bool IsVisibleSettingFlag();
		bool IsShowAlwaysHUDFlag();
		bool IsMountingFlag();
		ESBUIType GetUIType();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClassHUDP019
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class USBClassHUDP019 : public USBClassHUD
	{
	public:
		unsigned char                                              UnknownData_28S0[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		void VisibleCartridge(int32_t CartridgeNum, bool PowerBulletActive, bool HealBulletActive);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBP020_CountIcon_PartsWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBP020_CountIcon_PartsWidget : public UUserWidget
	{
	public:
		void OnSetONOFF(bool bOn);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClassHUDP020
	 * Size -> 0x0018 (FullSize[0x0298] - InheritedSize[0x0280])
	 */
	class USBClassHUDP020 : public USBClassHUD
	{
	public:
		TArray<class USBP020_CountIcon_PartsWidget*>               IconList;                                                // 0x0280(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MarkNum;                                                 // 0x0290(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M730[0x4];                                   // 0x0294(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnChangeVisibleSetting(bool InIsVisibleSetting);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClassHUDP021
	 * Size -> 0x0040 (FullSize[0x02C0] - InheritedSize[0x0280])
	 */
	class USBClassHUDP021 : public USBClassHUD
	{
	public:
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CPNoise;                                                 // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         Noise;                                                   // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              Line;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        EffectFeverPos;                                          // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              EffectMax;                                               // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VUY5[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateGauge(class USBEventParamPerformerVoltageGauge* InParam);
		void StopAnimGainMax();
		void StopAnimGainLineEffect();
		void StopAnimEffectMax();
		void StopAnimEffectFever2();
		void StopAnimEffectFever1();
		void SetVisibleEffectMax(bool IsVisible);
		void SetVisibleEffectFeverPos(bool IsVisible);
		void PlayAnimReverseNoise();
		void PlayAnimGainMax();
		void PlayAnimGainLineEffect();
		void PlayAnimForwardNoise();
		void PlayAnimEffectMax();
		void PlayAnimEffectFever2();
		void PlayAnimEffectFever1();
		void PlayAnimBG(int32_t InBGIndex);
		void FinishedAnimGainLineEffect();
		void FinishedAnimEffectFever1();
		void FeverStart(class USBEventParamPerformerVoltageGauge* InParam);
		void FeverEnd(class USBEventParamPerformerVoltageGauge* InParam);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClassIcon
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBClassIcon : public UUserWidget
	{
	public:
		class UImage*                                              IconImage;                                               // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          NoDataTexture;                                           // 0x0280(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBClassType                                               ClassType;                                               // 0x0288(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G2I6[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateClassIcon();
		void SetClass(ESBClassType InType);
		void OnUpdateClassIcon();
		class UTexture2D* GetIconTexture();
		ESBClassType GetClass();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClimbingData
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBClimbingData : public UObject
	{
	public:
		TArray<struct FClimbingPoint>                              Points;                                                  // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic
		bool                                                       bIsUseNearWaterCamera;                                   // 0x0038(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7Y78[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClimbingPointsManagerComponent
	 * Size -> 0x0068 (FullSize[0x0270] - InheritedSize[0x0208])
	 */
	class USBClimbingPointsManagerComponent : public USceneComponent
	{
	public:
		TArray<struct FClimbingPoint>                              ClimbingPoints;                                          // 0x0208(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsUseNearWaterCamera;                                   // 0x0218(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZFSY[0x7];                                   // 0x0219(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBClimbingData*                                     ClimbingDataAsset;                                       // 0x0220(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FClimbingPoint>                              RepClimbingPoints;                                       // 0x0228(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6PCL[0x14];                                  // 0x0238(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CreatePointOffset;                                       // 0x024C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsDisableDisplay;                                       // 0x0250(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsDisplayWithinRange;                                   // 0x0251(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4CX5[0x2];                                   // 0x0252(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DisplayRange;                                            // 0x0254(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PointDisplaySize;                                        // 0x0258(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsDisplayPointsCoordinateSystems;                       // 0x025C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EY6Q[0x3];                                   // 0x025D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PointsCoordinateSize;                                    // 0x0260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsAutoSaveCreatedAsset;                                 // 0x0264(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EASA[0xB];                                   // 0x0265(0x000B) MISSED OFFSET (PADDING)

	public:
		void SetPointActiveByPointID_Server(int32_t PointID, bool IsActive);
		void SetPointActiveByPointID_Multicast(int32_t PointID, bool IsActive);
		void SetPointActiveByGroupID_Server(int32_t GroupId, bool IsActive);
		void SetPointActiveByGroupID_Multicast(int32_t GroupId, bool IsActive);
		void SetPointActiveByAll_Server(bool IsActive);
		void SetPointActiveByAll_Multicast(bool IsActive);
		void Request_SetPointActiveByPointID(int32_t PointID, bool IsActive);
		void Request_SetPointActiveByGroupID(int32_t GroupId, bool IsActive);
		void Request_SetPointActiveByAll(bool IsActive);
		void OnRep_ClimbingPoints();
		bool GetPointLocation(int32_t PointID, struct FVector* Location);
		bool GetLinkLocation(int32_t OriginPointID, TMap<int32_t, struct FVector>* OutLinkList, bool IsIgnoreInactive);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBClimbPoint
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBClimbPoint : public AActor
	{
	public:
		bool                                                       isVisibleUIIcon_;                                        // 0x0228(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F1VR[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Floor_;                                                  // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool IsVisibleUIIcon();
		int32_t GetFloor();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCollisionBoxComponent
	 * Size -> 0x0020 (FullSize[0x04D0] - InheritedSize[0x04B0])
	 */
	class USBCollisionBoxComponent : public UASCollisionBoxComponent
	{
	public:
		unsigned char                                              UnknownData_UBAY[0x20];                                  // 0x04B0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCollisionCapsuleComponent
	 * Size -> 0x0010 (FullSize[0x04C0] - InheritedSize[0x04B0])
	 */
	class USBCollisionCapsuleComponent : public UASCollisionCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_UB3K[0x10];                                  // 0x04B0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCollisionDisableManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBCollisionDisableManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_FKO9[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCollisionDisableVolume
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class ASBCollisionDisableVolume : public AVolume
	{
	public:
		class FName                                                GameContentId;                                           // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q5V1[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCollisionGroupComponent
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class USBCollisionGroupComponent : public UASCollisionGroupComponent
	{
	public:
		int32_t                                                    GroupId;                                                 // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5J6J[0xC];                                   // 0x0234(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCollisionInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCollisionInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCollisionSphereComponent
	 * Size -> 0x0010 (FullSize[0x04D0] - InheritedSize[0x04C0])
	 */
	class USBCollisionSphereComponent : public UASCollisionSphereComponent
	{
	public:
		unsigned char                                              UnknownData_69QZ[0x10];                                  // 0x04C0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBColoringShopComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBColoringShopComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnSaveCharaCostumeEquipInfosDelegate;                    // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_RequestSaveCharaCostumeEquipInfos(class ASBPlayerController* InPlayerController, TArray<ESBCharaEquipType> InEquipItemTypes, TArray<struct FCharaEquipItemInfo> InEquipItemInfos, TArray<struct FCharaEquipItemCharaCreateInfo> InEquipItemCharaCreateInfos);
		void Server_OnSaveCharaCostumeEquipInfos(bool bSuccessed, int32_t InRetCode, class USBNetworkDataCache* NetworkDataCache, TArray<ESBCharaEquipType> DirtyEquipTypes, TArray<struct FCharaEquipItemInfo> DirtyEquipItemInfos);
		void Request_SaveCharaCostumeEquipInfos(class ASBPlayerController* InPlayerController, TArray<ESBCharaEquipType> InEquipItemTypes, TArray<struct FCharaEquipItemInfo> InEquipItemInfos, TArray<struct FCharaEquipItemCharaCreateInfo> InEquipItemCharaCreateInfos);
		void OnSaveCharaCostumeEquipInfosDelegate__DelegateSignature(bool Result, int32_t RetCode);
		void GetDyeItemHoldAmounts(class USBOwnItemListContainer* InOwnItemListContainer, int32_t InDyeItemId, int32_t* OutNormalHoldAmount, int32_t* OutDistributionHoldAmount);
		bool GetDistributionItemIdFromNormalDyeItemId(int32_t InDyeItemId, int32_t* OutDistributionItemId);
		void Client_OnSaveCharaCostumeEquipInfos(bool bSuccessed, int32_t InRetCode, class USBNetworkDataCache* NetworkDataCache, TArray<ESBCharaEquipType> DirtyEquipTypes, TArray<struct FCharaEquipItemInfo> DirtyEquipItemInfos);
		bool CalculateConsumptionOfHoldDyeItemsRequiredForDyeing(class USBOwnItemListContainer* InOwnItemListContainer, int32_t InDyeItemId, int32_t InRequiredDyeItemNum, int32_t* OutHoldNormalDyeItemConsumeNum, int32_t* OutHoldDistributionDyeItemConsumeNum);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBColoringShopManager
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBColoringShopManager : public UObject
	{
	public:
		class UDataTable*                                          RequiredColoringItemForCostumeDB;                        // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadAI
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBSquadAI : public AActor
	{
	public:
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwHierarchyComponent*                             HierarchyComponent;                                      // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIMessageDispatchingComponent*                    MessageDispatchingComponent;                             // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class ASBSquadAI* NewSubSquad(class UClass* SquadClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCombatCoordinator
	 * Size -> 0x01F0 (FullSize[0x0430] - InheritedSize[0x0240])
	 */
	class ASBCombatCoordinator : public ASBSquadAI
	{
	public:
		unsigned char                                              UnknownData_631G[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBAIRoleDistributionComponent*                      RoleDistributionComponent;                               // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAICommanderComponent*                             CommanderComponent;                                      // 0x0258(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwHTNPlanningComponent*                           HTNPlanningComponent;                                    // 0x0260(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBUtilityBrainComponent*                            UtilityBrainComponent;                                   // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAITacticalComponent*                              TacticalComponent;                                       // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBUtilityOption*                                    CurrentLeaderStrategy;                                   // 0x0278(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WRZB[0x20];                                  // 0x0280(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class USBAICommand*>                   NamedCommand;                                            // 0x02A0(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1ETS[0x140];                                 // 0x02F0(0x0140) MISSED OFFSET (PADDING)

	public:
		void SetTarget(const class FName& TargetFaction, int32_t TargetClusterNo);
		bool IsInConvexHull(const struct FVector& TestLocation);
		bool IsInAttackerConvexHull(const struct FVector& TestLocation);
		TArray<class AActor*> GetTargetClusterMembers();
		float GetDistanceToConvexHull2D(const struct FVector& Point);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBComboBoxStringBase
	 * Size -> 0x0050 (FullSize[0x0EA8] - InheritedSize[0x0E58])
	 */
	class USBComboBoxStringBase : public UComboBoxString
	{
	public:
		class UAkAudioEvent*                                       OpeningAkAudioEvent;                                     // 0x0E58(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       CancelClosingAkAudioEvent;                               // 0x0E60(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       SelectionChangedAkAudioEvent;                            // 0x0E68(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       HoveredAkAudioEvent;                                     // 0x0E70(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  OpeningSystemSeId;                                       // 0x0E78(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  CancelClosingSystemSeId;                                 // 0x0E79(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  SelectionChangedSystemSeId;                              // 0x0E7A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESystemSE                                                  HoveredSystemSEId;                                       // 0x0E7B(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UFK3[0x2C];                                  // 0x0E7C(0x002C) MISSED OFFSET (PADDING)

	public:
		void UpdateDecideButton();
		void OnRowMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
		void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCommandButton
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBCommandButton : public USBUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnCommandButtonEndDelegate;                              // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void ShowCommandButton(TArray<class FText> CommandTexts);
		void OnEndCommandButton(int32_t SelectedButtonId);
		void OnCommandButtonEndDelegate__DelegateSignature(int32_t SelectedButtonId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCommandMenu
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBCommandMenu : public USBUserWidget
	{
	public:
		ESBCommandMenuType QuickAccess2CommandMenuType(ESBKeyConfigAction Action);
		void OnSubMenuTermReady();
		void OnRequestDirectChat();
		void OnAddBgGroupContents(class UUserWidget* InWidget);
		void CallTryTerm();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCommandMenuChildBase
	 * Size -> 0x0030 (FullSize[0x02A8] - InheritedSize[0x0278])
	 */
	class USBCommandMenuChildBase : public UUserWidget
	{
	public:
		class USBCommandMenu*                                      OwnerCommandMenu;                                        // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ParamName;                                               // 0x0280(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              OpenBookMark;                                            // 0x0288(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              NowBookMark;                                             // 0x0298(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetParamName(const class FName& InParamName);
		void SetOwnerCommandMenu(class USBCommandMenu* InOwnerCommandMenu);
		void SetOpenBookMark(const class FString& InBookMarkType);
		void SetNowBookMark(const class FString& InBookMarkType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCommandMenuInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCommandMenuInterface : public UInterface
	{
	public:
		void RequestUpdateLibraryNewIcon();
		void RequestTransitionMenuNew(ESBCommandMenuType MenuType, const class FString& BookmarkType, const class FName& InParamName);
		void OnIsCmnBackBtnVisible(bool bInIsVisible);
		void OnCloseOptionMenu();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCommonIconWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBCommonIconWidget : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        NewIconGrp;                                              // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ReadedNewEnable;                                         // 0x0280(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2VN2[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BadgeUniqueId;                                           // 0x0288(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateNewBadgeVisibleByReaded();
		void SetNewBadgeVisibleByReaded(bool bEnable, const class FString& UniqueId);
		void DeleteNewIconByReaded();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBComponentTickInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBComponentTickInterface : public UInterface
	{
	public:
		void TickComponentByActorEvent(float DeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBConditionFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBConditionFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsAllSatisfied(TArray<struct FSBConditionCheckParam> ConditionCheckParamList, class AActor* CauserActor, class AActor* TargetActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBConfigDataFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBConfigDataFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void UpdateWishlist(class UObject* WorldContextObject, const class FString& CharacterId, const struct FSBWishListData& Data);
		void UpdateVSync(class UObject* InWorldContextObject);
		void UpdateVGAMode();
		void UpdateSortRecentSort(class UObject* WorldContextObject, ESBSortFilterSaveType SaveType, ESBItemSortType SortType);
		void UnregisterBookMark(class UObject* WorldContextObject, const class FString& BookMark);
		void SetSoundVolumeEx(ESBSoundVolumeType SoundType, int32_t Volume, bool bIsMute, struct FSBConfigureSaveData_Sound* SoundSaveData);
		void SetSoundVolume(ESBSoundVolumeType SoundType, int32_t Volume, bool bIsMute);
		void SetShowedHintDialog(class UObject* InWorldContextObject, ESBHintShowTypes ShowType, bool bIsShowed);
		void SetResolutionScaleValue(float NewScaleValue);
		void SetEventShopStorageData(class UObject* WorldContextObject, const class FString& CharacterId, ESBEventShopStorage Data);
		void SetEnemyVisibleDistanceValue(int32_t DistanceValue);
		void SetAutoStampId(class UObject* InWorldContextObject, EAutoWordEventType InEventType, const class FString& InAutoStampData);
		void SetAutoStampData(class UObject* InWorldContextObject, EAutoWordEventType InEventType, const struct FAutoStampWordData& InWordData);
		void SetAutoeStampDisabled(class UObject* InWorldContextObject, bool IsDisabled);
		void ResetBookMark(class UObject* WorldContextObject);
		void RemoveWishlist(class UObject* WorldContextObject, const class FString& CharacterId, const struct FSBWishListData& Data);
		bool IsShowedHintDialog(class UObject* InWorldContextObject, ESBHintShowTypes ShowType);
		bool IsRegistShortcutByStamp(class UObject* InWorldContextObject, const class FString& InStamp);
		bool IsRegistShortcutByItem(class UObject* InWorldContextObject, int32_t InItemIndex);
		bool IsRegistShortcutByFixedPhrase(class UObject* InWorldContextObject, int32_t InFixedPhraseIndex);
		bool IsRegistShortcutByEmote(class UObject* InWorldContextObject, const class FString& InEmotion);
		bool IsRegistedWishlist(class UObject* WorldContextObject, const class FString& CharacterId, const struct FSBWishListData& Data);
		bool IsAutoStampDisabled(class UObject* InWorldContextObject);
		int32_t GetWishlistRegistedCount(class UObject* WorldContextObject, const class FString& CharacterId, ESBWishListType Type);
		struct FShortcutInfo GetShortcutItemInfo(class UObject* InWorldContextObject, int32_t SlotNo);
		class FString GetScreenshotSaveDirectory(class UObject* InWorldContextObject);
		ESBItemSortType GetRecentSortType(class UObject* WorldContextObject, ESBSortFilterSaveType SaveType);
		ESBEventShopStorage GetEventShopStorageData(class UObject* WorldContextObject);
		float GetEnemyVisibleDistanceScaleValue();
		int32_t GetConfigViewDistanceScaleMax();
		class USBConfigureSaveManager* GetConfigSaveManager(bool* IsValid);
		class FString GetBookMarkTypeNone();
		class FString GetBookMarkTypeKey(class UObject* WorldContextObject, const class FString& BookmarkType);
		ESBBookMarkerSlot GetBookMarkAction2BookMark(bool* bIsValid, ESBKeyConfigAction Action);
		class FString GetBookMark(class UObject* WorldContextObject, ESBBookMarkerSlot Slot);
		struct FAutoStampWordData GetAutoStampData(class UObject* InWorldContextObject, bool* IsValid, EAutoWordEventType InEventType);
		TArray<struct FSBWishListData> GetAllWishlistData(class UObject* WorldContextObject, const class FString& CharacterId);
		int32_t GetActivatedShortcutSlotMax();
		int32_t FrameRateEnum2Int(ESBFrameRateLimitType Type);
		bool FindBookMarkSlot_New(class UObject* WorldContextObject, const class FString& BookMark, ESBBookMarkerSlot* Slot);
		bool ApplyBookMark(class UObject* WorldContextObject, const struct FKey& Key, const class FString& BookMark, ESBBookMarkerSlot* Slot);
		void AddWishlist(class UObject* WorldContextObject, const class FString& CharacterId, const struct FSBWishListData& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBConfigureSave_General
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class USBConfigureSave_General : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBConfigureSaveData_General                        Data;                                                    // 0x0050(0x0080) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBConfigureSave_Sound
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBConfigureSave_Sound : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBConfigureSaveData_Sound                          Sound;                                                   // 0x0040(0x0020) SaveGame, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBConfigSave_SoundUser
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBConfigSave_SoundUser : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBConfigureSaveData_SoundUser                      Data;                                                    // 0x0040(0x0018) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBConfigureSave_Graphics
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class USBConfigureSave_Graphics : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBConfigureSaveData_Graphics                       graphics;                                                // 0x0040(0x002C) SaveGame, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bIsShowFPSCounter;                                       // 0x006C(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBFrameRateLimitType                                      FrameLimitType;                                          // 0x006D(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5WPI[0x2];                                   // 0x006E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FConfigSaveData_GraphicsUser                        userSetting;                                             // 0x0070(0x0018) SaveGame, NativeAccessSpecifierPublic
		struct FConfigSaveData_GraphicsBattleScoreWeaponEffect     BattleScoreWeaponEffect;                                 // 0x0088(0x0003) SaveGame, NoDestructor, NativeAccessSpecifierPublic
		ESBLowVGAMemory                                            LowVGAMemoryMode;                                        // 0x008B(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsVsync;                                                // 0x008C(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsUltimateSkillPerformance;                             // 0x008D(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsBattleImagineCutinPerformance;                        // 0x008E(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlphaBlend_PlayerImagine;                               // 0x008F(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PlayerVisibleVfxValue;                                   // 0x0090(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlphaBlend_PartyImagine;                                // 0x0094(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IN6L[0x3];                                   // 0x0095(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PartyVisibleVfxValue;                                    // 0x0098(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlphaBlend_OtherPCImagine;                              // 0x009C(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8H5O[0x3];                                   // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OtherPCVisibleVFXValue;                                  // 0x00A0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsThroughCameraNear;                                    // 0x00A4(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_COKH[0x3];                                   // 0x00A5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBConfigureSave_VFX
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class USBConfigureSave_VFX : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FConfigSaveData_VFX                                 Data;                                                    // 0x0050(0x0058) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortCutInfo
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBShortCutInfo : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBShortcutDatas                                    Data;                                                    // 0x0040(0x0020) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHUDLayoutData
	 * Size -> 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
	 */
	class USBHUDLayoutData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBHUDLayoutDatas                                   Data;                                                    // 0x0050(0x00F0) SaveGame, NativeAccessSpecifierPublic
		class FString                                              CustomSaveName;                                          // 0x0140(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBChatLogWindowStatusData
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USBChatLogWindowStatusData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBChatSaveDatas                                    datas;                                                   // 0x0050(0x0028) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHintShowStatus
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBHintShowStatus : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBHintShowStatusTable                              Status;                                                  // 0x0050(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoStampData
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBAutoStampData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBAutoStampSaveData                                Data;                                                    // 0x0050(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLayoutWindowSizeData
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBLayoutWindowSizeData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBHUDLayoutWindowSizeDatas                         Data;                                                    // 0x0050(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStampHistoryData
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBStampHistoryData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBStampHistoryDatas                                Data;                                                    // 0x0050(0x0010) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEmoteHistoryData
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBEmoteHistoryData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBEmoteHistoryDatas                                Data;                                                    // 0x0050(0x0010) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBKeyConfigData
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBKeyConfigData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBKeyConfigDatas                                   Data;                                                    // 0x0050(0x0010) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCameraZoomLevelData
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBCameraZoomLevelData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBCameraZoomLevelCharacterData                     Data;                                                    // 0x0050(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMachineCache
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBMachineCache : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBMachineCacheData                                 Data;                                                    // 0x0040(0x0010) SaveGame, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNewMarkSaveData
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBNewMarkSaveData : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBPlayerReadedData                                 Data;                                                    // 0x0040(0x0060) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSortTypes
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBPlayerSortTypes : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBPlayerSortSave                                   Data;                                                    // 0x0050(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerBookMarks
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBPlayerBookMarks : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBBookMarkSaveData                                 Data;                                                    // 0x0040(0x0060) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWishList
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBWishList : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, struct FSBWishListCharacterData>       Data;                                                    // 0x0050(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShopSetting
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USBShopSetting : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBShopSettingData                                  Data;                                                    // 0x0050(0x0018) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCommonSaveGame
	 * Size -> 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
	 */
	class USBCommonSaveGame : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBCommonSaveData                                   Data;                                                    // 0x0050(0x0068) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWholeMapSaveGame
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USBWholeMapSaveGame : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBWholeMapDatas                                    Data;                                                    // 0x0040(0x0038) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNotificationSaveGame
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USBNotificationSaveGame : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBNotificationData                                 Data;                                                    // 0x0050(0x0028) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModeSaveGame
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBPhotoModeSaveGame : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBPhotoModeSaveData                                Data;                                                    // 0x0050(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStampEmoteOrganizeGame
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBStampEmoteOrganizeGame : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBPlayerStampEmoteOrganizeData                     Data;                                                    // 0x0050(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBConfigureSaveManager
	 * Size -> 0x0BC8 (FullSize[0x0BF0] - InheritedSize[0x0028])
	 */
	class USBConfigureSaveManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnUpdateOperationMode;                                   // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateHudBeltVisible;                                  // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateWeaponVisibleType;                               // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateAutoTargetSightFocus;                            // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateAutoTargetEnable;                                // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangePadSkinType;                                     // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L9RT[0x18];                                  // 0x0088(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnUpdateChatSound;                                       // 0x00A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeShowFPS;                                         // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeNameplateParty;                                  // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeNameplateOther;                                  // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeShowAlwaysHUD;                                   // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeTeamTagVisibility;                               // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangePlayerImagineAlpha;                              // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangePlayerVisibleVFXValue;                           // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangePartyImagineAlpha;                               // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangePartyVisibleVFXValue;                            // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeOtherPCImagineAlpha;                             // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeOtherPCVisibleVFXValue;                          // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeBattleScoreWeaponEffectSelfs;                    // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeBattleScoreWeaponEffectOthers;                   // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeBattleScoreWeaponEffectToOthers;                 // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeVFXSetting;                                      // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeVFXCustomMode;                                   // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSavedShortcutInfo;                                     // 0x01B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHUDLayoutUpdated;                                      // 0x01C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateWishlist;                                        // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MBCM[0x108];                                 // 0x01E0(0x0108) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FConfigSaveData_GraphicsBattleScoreWeaponEffect     BattleScoreWeaponEffect;                                 // 0x02E8(0x0003) NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NUJC[0x1];                                   // 0x02EB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBFrameRateLimitType                                      eFrameRateLimitType;                                     // 0x02EC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_S3NB[0x3];                                   // 0x02ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FConfigSaveData_GraphicsUser                        UserGraphicsSetting;                                     // 0x02F0(0x0018) NativeAccessSpecifierPrivate
		ESBLowVGAMemory                                            eLowVGAMemoryMode;                                       // 0x0308(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsNowVGAMemoryInitialized;                              // 0x0309(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsVsync;                                                // 0x030A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsUltimateSkillPerformance;                             // 0x030B(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsBattleImagineCutinPerformance;                        // 0x030C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAlphaBlend_PlayerImagine;                               // 0x030D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4TVV[0x2];                                   // 0x030E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PlayerVisibleVfxValue;                                   // 0x0310(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAlphaBlend_PartyImagine;                                // 0x0314(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GJJ7[0x3];                                   // 0x0315(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PartyVisibleVfxValue;                                    // 0x0318(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAlphaBlend_OtherPCImagine;                              // 0x031C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GB5Y[0x3];                                   // 0x031D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OtherPCVisibleVFXValue;                                  // 0x0320(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VW7A[0x7DC];                                 // 0x0324(0x07DC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, bool>                                  CraftableFilterCraftMachine;                             // 0x0B00(0x0050) NativeAccessSpecifierPrivate
		TMap<class FString, bool>                                  CraftableFilterImaginCraft;                              // 0x0B50(0x0050) NativeAccessSpecifierPrivate
		TMap<class FString, bool>                                  UnequipableItemsSettingEventShop;                        // 0x0BA0(0x0050) NativeAccessSpecifierPrivate

	public:
		void UpdateWatchedTime();
		void SetWeaponVisibleType(ESBWeaponVisibleType eVisibleType);
		void SetVsync(bool InVsync);
		void SetVFXVisible(ESBBattleEffectVisibleCategory Category, ESBBattleEffectVisibleType Type, bool bVisible);
		void SetVFXCustomSetting(bool IsCustom);
		void SetUseCheckDialogActive(bool bActive);
		void SetUnequipableItemsSettingEventShop(const class FString& CharacterId, bool bIsChecked);
		void SetUltimateSkillPerformance(bool InPerformance);
		void SetThroughCameraNear(bool bIsThrough);
		void SetSSLogoPosition(ESBSSLogoPosition LogoPosition);
		void SetSoundConfigData(const struct FSBConfigureSaveData_Sound& ConfigData);
		void SetSortType(ESBSortFilterSaveType SaveType, ESBItemSortType SortType);
		void SetSilentInterruptDialog(bool bIsSilent);
		void SetShowScreenshotNotifications(bool bValue);
		void SetShowPartyNamePlate(const class FString& InUserId, bool bIsShow);
		void SetShowOtherNamePlate(const class FString& InUserId, bool bIsShow);
		void SetShowFPSCounter(bool bIsShow);
		void SetShortcutRingMode(ESBShortcutRingMode RingMode);
		void SetShortcutRingCloseMode(bool IsAutoClose);
		void SetShortcutRingAutoCommand(bool IsAutoExecute);
		void SetShortcutInfo(const struct FSBShortcutDatas& Info);
		void SetScreenshotSaveDirectory(const class FString& Path);
		void SetPSOnlyMode(bool bValue);
		void SetPlayNonActiveWindowSound(bool bIsPlay);
		void SetPlayerVisibleVFXValue(int32_t VfxValue);
		void SetPlayerVisibleLimitNum(const class FString& InUserId, ESBPlayerVisibleLimit LimitType);
		void SetPlayerImagineAlpha(bool bIsAlpha);
		void SetPartyVisibleVFXValue(int32_t VfxValue);
		void SetPartyImagineAlpha(bool bIsAlpha);
		void SetPadKeySkinType(ESBPadKeySkinType InSkinType);
		void SetPadDecideButonSwaped(bool bSwaped);
		void SetOtherPCVisibleVFXValue(int32_t VfxValue);
		void SetOtherPCImagineAlpha(bool bIsAlpha);
		void SetOperateModeGuideVisibility(ESBKeyGuideDisplayType bIsVisible);
		void SetOperateMode(ESBOperateMode OpedrateMode);
		void SetNotificationDataParam(const class FString& InPlayerId, const struct FSBNotificationDataParam& InParam);
		void SetMuteSoundGesture(bool bMute);
		void SetMuteSoundCostume(bool bMute);
		void SetMainSelectTab(int32_t TabId);
		void SetMailAutoDeleteFlag(bool Flag);
		void SetLowVGAMode(bool bIsLowMode);
		void SetLogDispTimeType(int32_t Type);
		void SetIsTeamTagVieible(const class FString& InUserId, bool bIsVisible);
		void SetIsSlientBaloon(bool IsSilent);
		void SetIsShowDemoCaption(bool bIsShow);
		void SetImagineCraftSaveStorage(const class FString& InCharacterId, bool bIsStorage);
		void SetHUDBeltVisible(bool IsViaible);
		void SetHideOthersPlayerAtFishing(bool bValue);
		void SetHideHudAtScreenshot(bool bValue);
		void SetGraphicsCondigData(const struct FSBConfigureSaveData_Graphics& ConfigData);
		int32_t SetGamepadUISpeed(int32_t Speed);
		void SetFrameRateLimit(ESBFrameRateLimitType Type);
		void SetEventShopStorage(ESBEventShopStorage Storage);
		void SetEnableUsedCheckDialog(ESBUseCheckDialogType Type, bool bEnable);
		void SetDontDisplayThePhotoModeQuitConfirmDialog(bool bValue);
		bool SetDirectMode(bool InDirectMode);
		void SetCraftMachineSaveStorage(const class FString& InCharacterId, bool bIsStorage);
		void SetCraftableFilterImagine(const class FString& CharacterId, bool bIsFilterd);
		void SetCraftableFilterCraftMachine(const class FString& CharacterId, bool IsFilterd);
		void SetChatSoundData(const struct FSBConfigureSaveData_ChatSound& ChatData);
		bool SetChatLogWindowSlotData(ESBChatLogWindowSlot Slot, const struct FSBChatLogWindowStatusSave& Data);
		bool SetChatLogTextSizeIndex(int32_t TextSize, int32_t Index);
		void SetCameraZoomLevelData(const class FString& CharacterId, const struct FSBCameraZoomLevelDatas& Data);
		void SetCameraShakeLevel(ESBCameraShakeLevel Level);
		void SetBattleScoreWeaponEffectToOthers(ESBBattleScoreWeaponEffectVisibleType Type);
		void SetBattleScoreWeaponEffectSelfs(ESBBattleScoreWeaponEffectVisibleType Type);
		void SetBattleScoreWeaponEffectOthers(ESBBattleScoreWeaponEffectVisibleType Type);
		void SetBattleImagineCutinPerformance(bool InPerformance);
		void SetAutoTargetSightFocus(bool bSightFocus);
		void SetAutoTargetEnable(bool bEnable);
		void SetAlwaysShowFieldHUD(const class FString& InUserId, bool bIsShow);
		void SendServerSaveData(class APlayerController* InRequester);
		void SendKPI(class APlayerController* InRequester, class ULocalPlayer* InLocalPlayer);
		ESBConfigSaveDataResult SaveWishList(const class FString& InPlayerId);
		void SaveStampHistoryIdsData(TArray<int32_t> IDs);
		ESBConfigSaveDataResult SaveStampHistoryData(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveStampEmoteOrganizeData(const class FString& InPlayerId);
		ESBConfigSaveDataResult SaveSoundUserData(const class FString& InPlayerId);
		ESBConfigSaveDataResult SaveSoundConfigData();
		ESBConfigSaveDataResult SaveSortTypes(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveShortcutInfo();
		ESBConfigSaveDataResult SaveShopSetting(const class FString& InPlayerId);
		ESBConfigSaveDataResult SavePhotoModeData(const class FString& InPlayerId);
		ESBConfigSaveDataResult SaveNotificationData(const class FString& InPlayerId);
		ESBConfigSaveDataResult SaveMacheneCache();
		ESBConfigSaveDataResult SaveKeyConfigData(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveHudLayoutWindowSize(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveHudLayout(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveHintStatus(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveGraphicsVFXSaveData(const class FString& InPlayerId);
		ESBConfigSaveDataResult SaveGraphicsConfigData();
		ESBConfigSaveDataResult SaveGeneralConfigData(const class FString& PlayerId);
		void SaveEmoteHistoryIdsData(TArray<int32_t> IDs);
		ESBConfigSaveDataResult SaveEmoteHistoryData(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveCustomHudLayout(const class FString& PlayerId, ESBCustomHudLayoutSlot SlotType, const class FString& CustomName);
		ESBConfigSaveDataResult SaveCommonSaveData(const class FString& InPlayerId);
		ESBConfigSaveDataResult SaveChatLogWindow(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveCameraZoomLevelData(const class FString& PlayerId);
		ESBConfigSaveDataResult SaveBookMark(const class FString& InPlayerId);
		ESBConfigSaveDataResult SaveAutoStamp(const class FString& PlayerId);
		void ResetUserSounds();
		void ReceiveServerSaveData(class APlayerController* InRequester);
		ESBConfigSaveDataResult LoadWishList(const class FString& InPlayerId);
		ESBConfigSaveDataResult LoadStampHistoryData(class UObject* WorldContextObject, const class FString& PlayerId);
		ESBConfigSaveDataResult LoadStampEmoteOrganizeData(const class FString& InPlayerId);
		ESBConfigSaveDataResult LoadSoundUserData(const class FString& InPlayerId);
		struct FSBConfigureSaveData_Sound LoadSoundConfigData(ESBConfigSaveDataResult* Result);
		ESBConfigSaveDataResult LoadSortTypes(const class FString& PlayerId);
		struct FSBShortcutDatas LoadShortcutInfo(ESBConfigSaveDataResult* Result);
		ESBConfigSaveDataResult LoadShopSetting(const class FString& InPlayerId);
		bool LoadPresetData(const class FString& InPresetString);
		ESBConfigSaveDataResult LoadPhotoModeData(const class FString& InPlayerId);
		ESBConfigSaveDataResult LoadNotificationData(const class FString& InPlayerId);
		ESBConfigSaveDataResult LoadMacheneCache();
		struct FSBKeyConfigDatas LoadKeyConfigData(ESBConfigSaveDataResult* Result, const class FString& PlayerId);
		ESBConfigSaveDataResult LoadHudLayoutWindowSize(const class FString& PlayerId);
		ESBConfigSaveDataResult LoadHudLayout(const class FString& PlayerId, ESBCustomHudLayoutSlot SlotType);
		ESBConfigSaveDataResult LoadHintStatus(const class FString& PlayerId);
		ESBConfigSaveDataResult LoadGraphicsVFXSaveData(const class FString& InPlayerId);
		struct FSBConfigureSaveData_Graphics LoadGraphicsConfigData(ESBConfigSaveDataResult* Result);
		struct FSBConfigureSaveData_General LoadGeneralConfigData(ESBConfigSaveDataResult* Result, const class FString& PlayerId);
		ESBConfigSaveDataResult LoadEmoteHistoryData(class UObject* WorldContextObject, const class FString& PlayerId);
		ESBConfigSaveDataResult LoadCommonSaveData(const class FString& InPlayerId);
		ESBConfigSaveDataResult LoadChatLogWindow(const class FString& PlayerId);
		struct FSBCameraZoomLevelCharacterData LoadCameraZoomLevelData(ESBConfigSaveDataResult* Result, const class FString& PlayerId);
		ESBConfigSaveDataResult LoadBookMark(const class FString& InPlayerId);
		ESBConfigSaveDataResult LoadAutoStamp(const class FString& PlayerId);
		bool IsVsync();
		bool IsUsedZOrder(int32_t ZOrder, ESBCustomHudLayoutSlot Slot);
		bool IsUseCheckDialogActive();
		bool IsUnequipableItemsSettingEventShop(const class FString& CharacterId);
		bool IsUltimateSkillPerformance();
		bool IsTodayWatched();
		bool IsThroughCameraNear();
		bool IsTeamTagVisible(const class FString& InUserId);
		bool IsSilentInterruptDialog();
		bool IsSilentBalloon();
		bool IsShowScreenshotNotifications();
		bool IsShowPartyNamePlate(const class FString& InUserId);
		bool IsShowOtherNamePlate(const class FString& InUserId);
		bool IsShowFPSCounter();
		bool IsShowDemoCaption();
		bool IsShortcutRingCloseMode();
		bool IsShortcutRingAutoCommand();
		bool IsServerSaveDataLoaded();
		bool IsPSOnlyMode();
		bool IsPlayerImagineAlpha();
		bool IsPartyImagineAlpha();
		bool IsPadDecideButtonSwaped();
		bool IsOtherPCImagineAlpha();
		ESBKeyGuideDisplayType IsOperateModeGuideVisibility();
		bool IsModifyHUDLayoutWindowSize();
		bool IsModifyHUDLayout();
		bool IsModifyGraphicsVFXSaveData();
		bool IsModifyGeneralConfigSave();
		bool IsLowVGAModeFirstInitialized();
		bool IsLowVGAMode();
		bool IsLoadedWishList();
		bool IsLoadedUserSoundConfig();
		bool IsLoadedStampHistoryData();
		bool IsLoadedSoundConfigData();
		bool IsLoadedSortTypes();
		bool IsLoadedShortcutInfo();
		bool IsLoadedShopSetting();
		bool IsLoadedNotificationData();
		bool IsLoadedMachineCache();
		bool IsLoadedKeyConfigData();
		bool IsLoadedHudLayoutWindowSizeData();
		bool IsLoadedHudLayoutData(ESBCustomHudLayoutSlot Slot);
		bool IsLoadedHintStatus();
		bool IsLoadedGraphicsVFXSaveData();
		bool IsLoadedGraphicsConfigData();
		bool IsLoadedGeneralConfigSave();
		bool IsLoadedEmoteHistoryData();
		bool IsLoadedCommonSaveData();
		bool IsLoadedChatLogWindowStatus();
		bool IsLoadedCameraZoomLevelData();
		bool IsLoadedBookMark();
		bool IsLoadedAutoStampData();
		bool IsKeyConfigMissmatchVersion();
		bool IsHUDBeltVisible();
		bool IsHideOthersPlayerAtFishing();
		bool IsHideHudAtScreenshot();
		bool IsEnableUsedCheckDialog(ESBUseCheckDialogType Type);
		bool IsDontDisplayThePhotoModeQuitConfirmDialog();
		bool IsDirectMode();
		bool IsCraftableFilterImagine(const class FString& CharacterId);
		bool IsCraftableFilterCraftMachine(const class FString& CharacterId);
		bool IsBattleImagineCutinPerformance();
		bool IsAlwaysShowFieldHUD(const class FString& InUserId);
		ESBWeaponVisibleType GetWeaponVisibleType();
		bool GetVFXVisible(ESBBattleEffectVisibleCategory Categoty, ESBBattleEffectVisibleType Type, bool bVerborse);
		bool GetVFXCustomSetting();
		TArray<int32_t> GetStampHistoryIdsData(bool* IsFound);
		struct FSBCharacterStampEmoteOrganizeData GetStampEmoteOrganizeData(const class FString& InPlayerId, const class FString& InCharacterId);
		ESBSSLogoPosition GetSSLogoPosition();
		struct FSBConfigureSaveData_Sound GetSoundConfigData(bool* bIsLoaded);
		ESBItemSortType GetSortType(ESBSortFilterSaveType SaveType);
		ESBShortcutRingMode GetShortcutRingMode();
		struct FSBShortcutDatas GetShortcutInfo(bool* bIsLoaded);
		class FString GetScreenshotSaveDirectory();
		bool GetPlayNonActiveWindowSound();
		int32_t GetPlayerVisibleVFXValue();
		ESBPlayerVisibleLimit GetPlayerVisibleTypeLimit(const class FString& InUserId);
		struct FSBPhotoModeSaveDataMain GetPhotoModeDataRef(const class FString& InPlayerId, const class FString& InCharacterId);
		int32_t GetPartyVisibleVFXValue();
		ESBPadKeySkinType GetPadSkinType();
		int32_t GetOtherPCVisibleVFXValue();
		ESBOperateMode GetOperateMode();
		bool GetNotificationDataParam(const class FString& InPlayerId, struct FSBNotificationDataParam* OutParam);
		bool GetMuteSoundGesture();
		bool GetMuteSoundCostume();
		int32_t GetMainSelectTab();
		bool GetMailAutoDeleteFlag();
		int32_t GetLogDispTimeType();
		bool GetImagineCraftSaveStorage(const class FString& InCharacterId);
		struct FSBConfigureSaveData_Graphics GetGraphicsConfigData(bool* bIsLoaded);
		int32_t GetGamepadUISpeed();
		ESBFrameRateLimitType GetFrameRateLimit();
		ESBEventShopStorage GetEventShopStorage();
		TArray<int32_t> GetEmoteHistoryIdsData();
		class FString GetCustomSaveName(const class FString& InPlayerId, ESBCustomHudLayoutSlot SlotType, ESBConfigSaveDataResult* Result);
		bool GetCraftMachineSaveStorage(const class FString& InCharacterId);
		struct FSBConfigureSaveData_ChatSound GetChatSoundData();
		struct FSBChatLogWindowStatusSave GetChatLogWindowSlotData(ESBChatLogWindowSlot Slot, bool* bIsSuccess);
		int32_t GetChatLogTextSizeIndex();
		int32_t GetChatLogTextSize();
		struct FSBCameraZoomLevelDatas GetCameraZoomLevelData(const class FString& CharacterId);
		ESBCameraShakeLevel GetCameraShakeLevel();
		ESBBattleScoreWeaponEffectVisibleType GetBattleScoreWeaponEffectToOthers();
		ESBBattleScoreWeaponEffectVisibleType GetBattleScoreWeaponEffectSelfs();
		ESBBattleScoreWeaponEffectVisibleType GetBattleScoreWeaponEffectOthers();
		bool GetAutoTargetSightFocus();
		bool GetAutoTargetEnable();
		struct FVector2D FindLayoutWindowSizeData(bool* IsFound, const class FString& Key);
		struct FVector2D FindLayoutPresetData(bool* IsFound, const class FString& Key, const class FString& LayoutString, struct FAnchors* Anchors, int32_t* ZOrder);
		struct FVector2D FindLayoutData(bool* IsFound, const class FString& Key, struct FAnchors* Anchors, int32_t* ZOrder, ESBCustomHudLayoutSlot Slot);
		void EndFirstLowVGAMode();
		void AddLayoutWindowSizeData(const class FString& Key, const struct FVector2D& Value);
		void AddLayoutData(const class FString& Key, const struct FVector2D& Value, const struct FAnchors& Anchors, int32_t ZOrder, ESBCustomHudLayoutSlot Slot);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBContentActionFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBContentActionFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsContentActionEnableMap(class UObject* InWorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillInfoClass
	 * Size -> 0x0288 (FullSize[0x02B0] - InheritedSize[0x0028])
	 */
	class USBSkillInfoClass : public UObject
	{
	public:
		unsigned char                                              UnknownData_L10S[0x4];                                   // 0x0028(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SkillName;                                               // 0x002C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7SYN[0x2C];                                  // 0x0034(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBStartSkillSetting                                NeedParam;                                               // 0x0060(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bImmediateStart;                                         // 0x00A0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bImmediateStartOnlyTrigger;                              // 0x00A1(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5E80[0x6];                                   // 0x00A2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ImmediateStartForbidTags;                                // 0x00A8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsDodge;                                                // 0x00B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsUkemi;                                                // 0x00B9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSpecial;                                              // 0x00BA(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KVPE[0x1];                                   // 0x00BB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SendHateWhenStartSkill;                                  // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBPlayerSkillInStatusAilmentPriorityTable          StatusAilmentPriorityTable;                              // 0x00C0(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              SkillStateMachine[0x28];                                 // 0x00D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              SkillAlternativeAnimationSet[0x28];                      // 0x00F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              OverrideAnimationSetForMainSM[0x28];                     // 0x0120(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AimBodyStateMachine[0x28];                               // 0x0148(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AimOffsetStateMachine[0x28];                             // 0x0170(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              OverrideAnimationSetForAimOffsetSM[0x28];                // 0x0198(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		EPlayerStateMachine                                        LeadStateMachine;                                        // 0x01C0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6S37[0x3];                                   // 0x01C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AimDistance;                                             // 0x01C4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCancelSameSkill;                                        // 0x01C8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLaunchSkillPreInput;                                    // 0x01C9(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2GDN[0x2];                                   // 0x01CA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LaunchSkillPreInputTime;                                 // 0x01CC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBLaunchSkillPreInputTimeConditionOverrideInfo> LaunchSkillPreInputTimeConditionOverrideInfo;            // 0x01D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bRepeatInput;                                            // 0x01E0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2C2C[0x3];                                   // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RecastTime;                                              // 0x01E4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBPlayerSkillRecastTimeModifyParam>         RecastTimeModifyList;                                    // 0x01E8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bRecastTimeModifyDuringRecast;                           // 0x01F8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B566[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayerSkillAvailableCountSetting>         AvailableCountSettingList;                               // 0x0200(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bRemoveTurnActorRequest;                                 // 0x0210(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IXXP[0x7];                                   // 0x0211(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckParam>                      RemoveTurnActorRequestConditionList;                     // 0x0218(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBPlayerSkillCastLaunchProjectile>          CastLaunchProjectileList;                                // 0x0228(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBPlayerSkillAdditionalInputLaunchProjectile> AdditionalInputLaunchProjectileList;                     // 0x0238(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         StatusAlimentHandleList;                                 // 0x0248(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            CastApplyStatusAlimentIndexList;                         // 0x0258(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBPlayerSkillStatusAilmentTimeModifyParam>  StatusAilmentEffectiveTimeModifyList;                    // 0x0268(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBPlayerSkillCastStatusAilment>             CastApplyStatusAilmentList;                              // 0x0278(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBPlayerSkillInActionEffectSetting>         InActionEffectSettingList;                               // 0x0288(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBSpecialHitEffect>                         SpecialHitEffectList;                                    // 0x0298(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bHideCastLog;                                            // 0x02A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5UUR[0x7];                                   // 0x02A9(0x0007) MISSED OFFSET (PADDING)

	public:
		class UASStateMachine* GetSkillStateMachine();
		class FString GetSkillNameString();
		class FName GetSkillName();
		int32_t GetSkillID();
		float GetRecastTimeDefault(class ASBPlayerCharacter* PlayerCharacter);
		float GetRecastTimeBySkillSetting(const struct FSBSkillSettingConditionCheckData& SkillSettingData);
		float GetRecastTime(class ASBPlayerCharacter* PlayerCharacter);
		class UASAnimationSet* GetOverideAnimSetForMainSM();
		class UASAnimationSet* GetOverideAnimSetForAimOffsetSM();
		EPlayerStateMachine GetLeadStateMachine();
		int32_t GetAvailableCount(class ASBPlayerCharacter* PlayerCharacter);
		class UASStateMachine* GetAimOffsetStateMachine();
		class UASStateMachine* GetAimBodyStateMachine();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBContentActionSkillInfo
	 * Size -> 0x0008 (FullSize[0x02B8] - InheritedSize[0x02B0])
	 */
	class USBContentActionSkillInfo : public USBSkillInfoClass
	{
	public:
		ESBPlayerContentActionType                                 ContentActionType;                                       // 0x02B0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VRM3[0x7];                                   // 0x02B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBreakSkillInfo
	 * Size -> 0x01B0 (FullSize[0x0468] - InheritedSize[0x02B8])
	 */
	class USBBreakSkillInfo : public USBContentActionSkillInfo
	{
	public:
		float                                                      ElementDamageScaleOnBreakActionSuccess;                  // 0x02B8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SSVN[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      SuccessEffect;                                           // 0x02C0(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbsoluteDefenseSkillInfo
	 * Size -> 0x0208 (FullSize[0x04C0] - InheritedSize[0x02B8])
	 */
	class USBAbsoluteDefenseSkillInfo : public USBContentActionSkillInfo
	{
	public:
		float                                                      MaxGaugeAmount;                                          // 0x02B8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RequiredGaugeAmount;                                     // 0x02BC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AddGaugeAmountOnHate;                                    // 0x02C0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AddGaugeIntervalOnHate;                                  // 0x02C4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AddGaugeAmountOnGiveDamagePercent;                       // 0x02C8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AddGaugeAmountOnHealPercent;                             // 0x02CC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AddGaugeAmountOnSucceededDodgeAttackHit;                 // 0x02D0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NKCB[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              AddGaugeAmountOnBreakActionSuccess;                      // 0x02D8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AddGaugeRangeOnBreakActionSuccess;                       // 0x02E8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JTBG[0x4];                                   // 0x02EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      SuccessEffect;                                           // 0x02F0(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBAttackID>                                 ReflectTargetAttackIDList;                               // 0x0498(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 ReflectionProjectileHandleOnAbsoluteDefenseSuccess;      // 0x04A8(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FSBAttackID                                         ProjectileReflectionProjectileAttackID;                  // 0x04B8(0x0004) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ElementDamageScaleOnProjectileReflected;                 // 0x04BC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBContentActionSkillWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBContentActionSkillWidget : public UUserWidget
	{
	public:
		bool                                                       IsContentActive;                                         // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESkillActionPosition                                       SkillPosition;                                           // 0x0279(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBUIKeyConfigAction                                       KeyUse;                                                  // 0x027A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5MTV[0x1];                                   // 0x027B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreGaugeValue;                                           // 0x027C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnStopActiveAnimation();
		void OnStartActiveAnimation();
		void OnSetVisibleWidget(bool IsVisible);
		void OnSetKeyGuideVisible(bool IsVisible);
		void OnInitWidget(bool IsActive);
		void OnIconDisableChange(bool IsDisable);
		void CheckActiveAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBContentActionSkillBreakWidget
	 * Size -> 0x0000 (FullSize[0x0280] - InheritedSize[0x0280])
	 */
	class USBContentActionSkillBreakWidget : public USBContentActionSkillWidget
	{
	public:
		void OnUpdateRecastGauge(float OutMaxRecastTime, float OutRecastTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBContentActionSkillAbsoluteDefenseWidget
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class USBContentActionSkillAbsoluteDefenseWidget : public USBContentActionSkillWidget
	{
	public:
		int32_t                                                    PreExecuteCount;                                         // 0x0280(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4A5E[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetSkillUsed();
		void OnUpdateActionGauge(float OutMaxActionValue, float OutNowActionValue);
		bool CanStartSkill();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBContentActionWidget
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBContentActionWidget : public USBUserWidget
	{
	public:
		TArray<class USBContentActionSkillWidget*>                 ContentWidgets;                                          // 0x02B0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		void SetWidget(class USBContentActionSkillWidget* ContentWidget);
		void SetVisibleContentWidgets(bool IsVisible);
		void InitContentWidgets(bool IsActive);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCoopActionConductor
	 * Size -> 0x0040 (FullSize[0x0268] - InheritedSize[0x0228])
	 */
	class ASBCoopActionConductor : public AActor
	{
	public:
		class FString                                              Command;                                                 // 0x0228(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      TargetEnemies;                                           // 0x0238(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    MaxMember;                                               // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RequisitionRadius;                                       // 0x024C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class ASBEnemyCharacter>>            Members;                                                 // 0x0250(0x0010) Net, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I2E1[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (PADDING)

	public:
		void ImportTargetActor(class ASBEnemyCharacter* EnemyCharacter);
		class AActor* GetTargetActor();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCoopActionConductor_Charge
	 * Size -> 0x0130 (FullSize[0x0398] - InheritedSize[0x0268])
	 */
	class ASBCoopActionConductor_Charge : public ASBCoopActionConductor
	{
	public:
		float                                                      GatherDuration;                                          // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartCheckGatherDelay;                                   // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GatherCorrectSpeedRate;                                  // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GatherStandbyRadius;                                     // 0x0274(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeDuration;                                          // 0x0278(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeCorrectSpeedRate;                                  // 0x027C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MarkDistance;                                            // 0x0280(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeStandbyRadius;                                     // 0x0284(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StuckThresholdSpeed;                                     // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartCheckStuckDelay;                                    // 0x028C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartingPointNumParam;                                   // 0x0290(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartingPointRandomRadius;                               // 0x0294(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RequisitionInterval;                                     // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RabbitAngle;                                             // 0x029C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LLHW[0xF8];                                  // 0x02A0(0x00F8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCoopActionConductor_DeathScythe_FinalAttack
	 * Size -> 0x0060 (FullSize[0x02C8] - InheritedSize[0x0268])
	 */
	class ASBCoopActionConductor_DeathScythe_FinalAttack : public ASBCoopActionConductor
	{
	public:
		float                                                      RequisitionInterval;                                     // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AnchorCenterID;                                          // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AnchorLocationID[0x3];                                   // 0x0270(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LoopDuration;                                            // 0x027C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LapTime;                                                 // 0x0280(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5CFS[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     ParticleSpiritBall;                                      // 0x0288(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseScaleSpiritBall;                                     // 0x0290(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeightSpiritBall;                                        // 0x0294(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3WVR[0x4];                                   // 0x0298(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDispSpiritBall;                                         // 0x029C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7BGM[0x13];                                  // 0x029D(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            ParticleCompnentSpiritBall;                              // 0x02B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V4F4[0x10];                                  // 0x02B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCoopActionConductor_Spell
	 * Size -> 0x0138 (FullSize[0x03A0] - InheritedSize[0x0268])
	 */
	class ASBCoopActionConductor_Spell : public ASBCoopActionConductor
	{
	public:
		float                                                      FirstTargetRange;                                        // 0x0268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetingRange;                                          // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LocationActorID;                                         // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VIQK[0x4];                                   // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            PowerRequiredMemberNum;                                  // 0x0278(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      RequisitionInterval;                                     // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PowerRadius;                                             // 0x028C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bChantOnTheSpot;                                         // 0x0290(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y3YI[0x3];                                   // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChantRadius;                                             // 0x0294(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChantStepSize;                                           // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChantDuration;                                           // 0x029C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpiritBallDisappearDuration;                             // 0x02A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CastDuration;                                            // 0x02A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     ParticleSpiritBall;                                      // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseScaleSpiritBall;                                     // 0x02B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinScaleSpiritBall;                                      // 0x02B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxScaleSpiritBall;                                      // 0x02B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LocationSpiritBall;                                      // 0x02BC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     ParticleMagicSupply;                                     // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseScaleMagicSupply;                                    // 0x02D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JXSJ[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAkAudioEvent*>                               PlaySoundList;                                           // 0x02D8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       StopSound;                                               // 0x02E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SpellPower;                                              // 0x02F0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASBEnemyCharacter>                    SpellCaster;                                             // 0x02F4(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDispSpiritBall;                                         // 0x02FC(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDispMagicSquare;                                        // 0x02FD(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDispMagicSupplies;                                      // 0x02FE(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I4ZM[0x29];                                  // 0x02FF(0x0029) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class ASBEnemyCharacter>>            Suppliers;                                               // 0x0328(0x0010) Net, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
		class UParticleSystemComponent*                            ParticleCompnentSpiritBall;                              // 0x0338(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TJMB[0x50];                                  // 0x0340(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            MagicSquareMID;                                          // 0x0390(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AYWG[0x8];                                   // 0x0398(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetChantRemainingTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCoopActionConductor_VolDragon_MeteorShower
	 * Size -> 0x0090 (FullSize[0x02F8] - InheritedSize[0x0268])
	 */
	class ASBCoopActionConductor_VolDragon_MeteorShower : public ASBCoopActionConductor
	{
	public:
		float                                                      RequisitionInterval;                                     // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AnchorCenterID;                                          // 0x026C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AnchorLocationID;                                        // 0x0270(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MeteorDuration;                                          // 0x0274(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              MeteorMultiMarker;                                       // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              MeteorMulti;                                             // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayMulti;                                              // 0x0288(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IntervalMulti;                                           // 0x028C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_098G[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MeteorRandomMarker;                                      // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              MeteorRandom;                                            // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayRandom;                                             // 0x02A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IntervalRandom;                                          // 0x02AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_97T9[0x8];                                   // 0x02B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MeteorAnchorMarker;                                      // 0x02B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              MeteorAnchor;                                            // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DelayAnchor;                                             // 0x02C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IntervalAnchor;                                          // 0x02CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVolDragon_MeteorAnchorInfo>                 MeteorAnchorInfos;                                       // 0x02D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N2GN[0x18];                                  // 0x02E0(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCountdownUI
	 * Size -> 0x0020 (FullSize[0x02D0] - InheritedSize[0x02B0])
	 */
	class USBCountdownUI : public USBUserWidget
	{
	public:
		unsigned char                                              UnknownData_KKEF[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      EndCountdownDynamicDelegate;                             // 0x02C0(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic

	public:
		void StartNoCountdown_ECountdownType(ECountdownType InCountdownType);
		void StartNoCountdown_BattleAreaMessage();
		void StartNoCountdown(const class FText& InMessage);
		void StartCountdown_ECountdownType(ECountdownType InCountdownType, int32_t InCountdownTime);
		void StartCountdown(const class FText& InMessage, int32_t InCountdownTime);
		void OnEndCountdownUI(ECountdownResult Result);
		void CountdownEndDynamicDelegate__DelegateSignature(ECountdownResult Result);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRuntimeTextBlock
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class USBRuntimeTextBlock : public UTextBlock
	{
	public:
		class USBTextTableAsset*                                   TextTable;                                               // 0x02F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TextId;                                                  // 0x0300(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                NameTextId;                                              // 0x0304(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TEEG[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetTextTable(class USBTextTableAsset* InTextTable);
		void SetTextId(int32_t InTextId);
		void SetNameTextId(const class FName& InTextId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCounterTextBlock
	 * Size -> 0x0020 (FullSize[0x0330] - InheritedSize[0x0310])
	 */
	class USBCounterTextBlock : public USBRuntimeTextBlock
	{
	public:
		unsigned char                                              UnknownData_JVYV[0xA];                                   // 0x0310(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseGrouping;                                            // 0x031A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LNNX[0x15];                                  // 0x031B(0x0015) MISSED OFFSET (PADDING)

	public:
		void SetCounter(int32_t InStartValue, int32_t InEndValue, float InMoveTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomMenuBase
	 * Size -> 0x0038 (FullSize[0x02E8] - InheritedSize[0x02B0])
	 */
	class USBCustomMenuBase : public USBUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnCloseDelegate;                                         // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UUserWidget*                                         Blocker;                                                 // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         Loading;                                                 // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCustomMenuPartTuneupAnim*                         TuneupAnim;                                              // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCustomMenuPartResult*                             Result;                                                  // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D1WO[0x8];                                   // 0x02E0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnbindESCKey();
		void UnbindAPI();
		void SetVisibleDecide(bool IsVisible);
		void SetEnableESCKey(bool IsFlag);
		void SetEnableDecide(bool IsEnabled);
		void Reset();
		void PlayAnimOut();
		void PlayAnimIn();
		void PlayAnimDetailIn();
		void OnSetVisibleDecide(bool IsVisible);
		void OnSetupResult();
		void OnSetEnableDecide(bool IsEnabled);
		void OnRequestAPI();
		void OnFinishedSuccess();
		void OnFailedAPI(int32_t ErrorCode);
		void OnClose__DelegateSignature(bool IsUsed);
		void OnClickedDecide();
		bool IsVisibleResult();
		bool IsEnableESCKey();
		EDialogResult GetContinuanceConfirmResult();
		void FinishedSuccess();
		void End();
		void ContinuanceConfirm(EDialogResult InResult);
		void CompleteAPI(bool IsSuccess, int32_t ErrorCode);
		void ClickedDecide();
		void ClickedBack();
		void BindESCKey();
		void BindAPI();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomMenuPartResult
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBCustomMenuPartResult : public USBUserWidget
	{
	public:
		void PlayAnimIn();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomMenuPartStatusWindow
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBCustomMenuPartStatusWindow : public USBUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomMenuPartTuneupAnim
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBCustomMenuPartTuneupAnim : public USBUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnComplete;                                              // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		void OnPlay();
		void OnComplete__DelegateSignature();
		void Complete();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_AddAnimTags
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USBCustomState_AddAnimTags : public UASState_BlueprintBase
	{
	public:
		TArray<class FName>                                        AnimTags;                                                // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_AddNextAnimStateCount
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBCustomState_AddNextAnimStateCount : public UASState_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_AdjustRootMotion
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCustomState_AdjustRootMotion : public UASState_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_BlueprintBase
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBCustomState_BlueprintBase : public UASState_BlueprintBase
	{
	public:
		bool                                                       bSkipEvalueteInServer;                                   // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_66ID[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_ChangeAnimSpeed
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBCustomState_ChangeAnimSpeed : public UASState_BlueprintBase
	{
	public:
		float                                                      StartTime;                                               // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndTime;                                                 // 0x003C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartPlayRate;                                           // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndPlayRate;                                             // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Ease_Exp;                                                // 0x0048(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartRootScale;                                          // 0x004C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndRootScale;                                            // 0x0050(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_60I5[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_DodgeAttack
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBCustomState_DodgeAttack : public UASState_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_EnemyActionWaitEnd
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBCustomState_EnemyActionWaitEnd : public UASState_Base
	{
	public:
		float                                                      PlayRatio;                                               // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4WJC[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_EnemyActivateModifier
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBCustomState_EnemyActivateModifier : public UASState_Base
	{
	public:
		TArray<class FName>                                        ModifierNames;                                           // 0x0028(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_EnemyBeginChant
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCustomState_EnemyBeginChant : public UASState_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_EnemyPlaySABEffect
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCustomState_EnemyPlaySABEffect : public UASState_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_EnemyQuickTurn
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBCustomState_EnemyQuickTurn : public UASState_Base
	{
	public:
		float                                                      BlendSpaceLimitAngle;                                    // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z6WD[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_EnemyQuickTurn2D
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBCustomState_EnemyQuickTurn2D : public UASState_Base
	{
	public:
		float                                                      TurnStopAngle;                                           // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlendSpaceMaxAngle;                                      // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChangeBlendSpaceSpeed;                                   // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2H49[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_Float
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCustomState_Float : public UASState_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_ImagineArtsCheckPress
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBCustomState_ImagineArtsCheckPress : public UASState_BlueprintBase
	{
	public:
		unsigned char                                              UnknownData_5W7S[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_IncrementPlaySkillSoundCount
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBCustomState_IncrementPlaySkillSoundCount : public UASState_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_LAN_ChargeMainAttackStart
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBCustomState_LAN_ChargeMainAttackStart : public UASState_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_LaunchAndDestroyProjectile
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBCustomState_LaunchAndDestroyProjectile : public UASState_BlueprintBase
	{
	public:
		TArray<struct FSBLaunchAndDestroyProjectileSetting>        LaunchAndDestroyProjectileSettingList;                   // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_US4Y[0x10];                                  // 0x0048(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_MoveToCachedLocation
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USBCustomState_MoveToCachedLocation : public UASState_BlueprintBase
	{
	public:
		float                                                      MoveSpeed;                                               // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockingCheckRadius;                                     // 0x003C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockingCheckDistance;                                   // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockingCheckTimeScale;                                  // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ER62[0xC];                                   // 0x0048(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsShowMoveDistance;                                      // 0x0054(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XCSN[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FrameRateMultiplierDebug;                                // 0x0058(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScatteringMultiplierDebug;                               // 0x005C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_PlayEffect
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USBCustomState_PlayEffect : public UASState_BlueprintBase
	{
	public:
		TArray<struct FSBEffectSetting>                            EffectList;                                              // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_PlayerDamageReaction
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBCustomState_PlayerDamageReaction : public UASState_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_PlayerForecastDetectEnemy
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBCustomState_PlayerForecastDetectEnemy : public UASState_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_PlayerSkillAction
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBCustomState_PlayerSkillAction : public UASState_BlueprintBase
	{
	public:
		ESkillActionPosition                                       SkillPosition;                                           // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPlayerStateMachine                                        StateMachineType;                                        // 0x0039(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3XU7[0x6];                                   // 0x003A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_PlayerTransform
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBCustomState_PlayerTransform : public UASState_BlueprintBase
	{
	public:
		ESBPlayerTransformCharacter                                TransformCharacter;                                      // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8EPM[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_ResetDynamics
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBCustomState_ResetDynamics : public UASState_Base
	{
	public:
		unsigned char                                              UnknownData_TGUC[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_ResetElapsedTimeAfterGuardSucceeded
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBCustomState_ResetElapsedTimeAfterGuardSucceeded : public UASState_BlueprintBase
	{
	public:
		bool                                                       bResetZero;                                              // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_25X6[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_SamplingDelayCommandTransition
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBCustomState_SamplingDelayCommandTransition : public UASState_Base
	{
	public:
		float                                                      Time;                                                    // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J9KY[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_SetAimBodyParam
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USBCustomState_SetAimBodyParam : public UASState_BlueprintBase
	{
	public:
		ESBAimDirection                                            AimDirection;                                            // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CTNE[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PitchRangeMin;                                           // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PitchRangeMax;                                           // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      YawRangeMin;                                             // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      YawRangeMax;                                             // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInterpolation;                                          // 0x004C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4ETS[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PitchSpeed;                                              // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      YawSpeed;                                                // 0x0054(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutoEndInterpolation;                                   // 0x0058(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TAF3[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_ShieldDashLoop
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USBCustomState_ShieldDashLoop : public UASState_BlueprintBase
	{
	public:
		float                                                      MotionMoveSpeed;                                         // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ShieldDashMoveSpeedScale;                                // 0x003C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RootMotionScaleAdjustLv3;                                // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJBK[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_TurnActorBase
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBCustomState_TurnActorBase : public UASState_BlueprintBase
	{
	public:
		ESBTurnPlayerActorType                                     TurnType;                                                // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ATYV[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   ClassBitmask;                                            // 0x003C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool ReceiveIsOnce();
		bool ReceiveIsFixFirstCalcDirection();
		int32_t ReceiveGetPriority();
		float ReceiveGetInterpSpeed();
		ESBTurnPlayerActorDirection ReceiveGetInterpDirection();
		float ReceiveGetFrontYawMin();
		float ReceiveGetFrontYawMax();
		float ReceiveGetBackYawMin();
		float ReceiveGetBackYawMax();
		bool ReceiveCanFinishInterp();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCustomState_WeaponHandIK
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBCustomState_WeaponHandIK : public UASState_Base
	{
	public:
		bool                                                       bRightHand;                                              // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SDUX[0xF];                                   // 0x0029(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDamageType
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class USBDamageType : public UASDamageType
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDamageUI
	 * Size -> 0x0038 (FullSize[0x02B0] - InheritedSize[0x0278])
	 */
	class USBDamageUI : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_8QOK[0x38];                                  // 0x0278(0x0038) MISSED OFFSET (PADDING)

	public:
		void SetNumber();
		void SetMiss();
		void SetDamageCorrectionIcon();
		void SetBorderAlignment();
		void PlayAnim();
		bool IsHeal();
		bool IsDamage();
		bool IsCriticalHit();
		struct FSBDamageUIRequestInfo GetRequestInfo();
		int32_t GetNumberDataIndex();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDamageUIInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDamageUIInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDateTimeTextBlock
	 * Size -> 0x0048 (FullSize[0x0358] - InheritedSize[0x0310])
	 */
	class USBDateTimeTextBlock : public USBRuntimeTextBlock
	{
	public:
		unsigned char                                              UnknownData_DC81[0x8];                                   // 0x0310(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBDateTimeTextTemplate                                    TemplateType;                                            // 0x0318(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBDateTimeTextRemainTimespanType                          RemainTimespanType;                                      // 0x0319(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBDateTimeFinishedTextTemplate                            FinishedTextTemplate;                                    // 0x031A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F8TZ[0x5];                                   // 0x031B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           DateTime;                                                // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTimespan                                           Timespan;                                                // 0x0328(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsTermDateTime;                                         // 0x0330(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X3AM[0x27];                                  // 0x0331(0x0027) MISSED OFFSET (PADDING)

	public:
		void SetTimespan(const struct FTimespan& Value);
		void SetTemplateType(ESBDateTimeTextTemplate Value);
		void SetRemainTimespanType(ESBDateTimeTextRemainTimespanType Value);
		void SetFinishedText(const class FText& Value);
		ESBDateTimeTextRemainTimeFlag SetDateTimeAndTemplateType(const struct FDateTime& InDateTime, ESBDateTimeTextTemplate InTemplateType);
		ESBDateTimeTextRemainTimeFlag SetDateTime(const struct FDateTime& Value);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDeadMarkerWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBDeadMarkerWidget : public UUserWidget
	{
	public:
		class UMaterialInstanceDynamic*                            Gauge1Mat;                                               // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMarkerVisibility;                                       // 0x0280(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1THM[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetAutoRespawnRemainTime(float RemainTime);
		void DeadMarkerVisibility(bool bVisibility);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugCameraController
	 * Size -> 0x0010 (FullSize[0x0688] - InheritedSize[0x0678])
	 */
	class ASBDebugCameraController : public ADebugCameraController
	{
	public:
		unsigned char                                              UnknownData_QGZX[0x8];                                   // 0x0678(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCameraManager*                                OriginalPlayerCameraManager;                             // 0x0680(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDebugCheatCommand : public UObject
	{
	public:
		void OpenLogFolder();
		void NotificationMenu();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugEnemyFieldLoggerComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBDebugEnemyFieldLoggerComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugFiler
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBDebugFiler : public UUserWidget
	{
	public:
		class FString SmartJoinPath(const class FString& Lhs, const class FString& rhs, const class FString& JoinStr);
		void FindFiles(TArray<class FString>* Files, const class FString& Directory, const class FString& Filter);
		void FindDirectories(TArray<class FString>* Directories, const class FString& Directory, const class FString& Filter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugFunction
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBDebugFunction : public UObject
	{
	public:
		unsigned char                                              UnknownData_VFQY[0x40];                                  // 0x0028(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          MenuTable;                                               // 0x0068(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDebugValueChanged;                                     // 0x0070(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UUserWidget*>                                 CreateDebugWidget;                                       // 0x0080(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void SetString(ESBDebugMenuType Type, const class FName& RowName, TArray<class FString> String);
		void SetSelectedOption(ESBDebugMenuType Type, const class FName& RowName, const class FString& SelectedOption);
		void SetScalabilityValue(const class FText& ParameterName, const class FText& Value);
		void SetInt32(ESBDebugMenuType Type, const class FName& RowName, int32_t Value);
		void SetFloat(ESBDebugMenuType Type, const class FName& RowName, float Value);
		void SetCommand(ESBDebugMenuType Type, const class FName& RowName, TArray<class FString> String);
		void SetBool(ESBDebugMenuType Type, const class FName& RowName, bool Value);
		ESBSaveGameReturn SaveDebugSettings();
		void Reset(bool SkipTopMenu);
		void OnDebugValueChanged__DelegateSignature(ESBDebugMenuType MenuType, const class FName& RowName);
		ESBSaveGameReturn LoadDebugSettings();
		void Initialize();
		TArray<class FString> GetString(ESBDebugMenuType Type, const class FName& RowName);
		class FString GetSelectedOption(ESBDebugMenuType Type, const class FName& RowName);
		class FText GetScalabilityValue(const class FText& ParameterName);
		int32_t GetInt32(ESBDebugMenuType Type, const class FName& RowName);
		float GetFloat(ESBDebugMenuType Type, const class FName& RowName);
		TArray<class FString> GetCommand(ESBDebugMenuType Type, const class FName& RowName);
		bool GetBoolByName(const class FName& TableRowName, const class FName& RowName);
		bool GetBool(ESBDebugMenuType Type, const class FName& RowName);
		bool FindRow(class UDataTable* DataTable, const class FName& RowName, struct FSBDebugParameter* OutData);
		void BenchmarkQualityLevels();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugFunctionComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBDebugFunctionComponent : public UActorComponent
	{
	public:
		void DrawDebugSphere_Server(const struct FVector& Center, float Radius, int32_t Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime, unsigned char DepthPriority, float Thickness);
		void DrawDebugSphere_Multicast(const struct FVector& Center, float Radius, int32_t Segments, const struct FColor& Color, bool bPersistentLines, float LifeTime, unsigned char DepthPriority, float Thickness);
		void DrawDebugLine_Server(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FColor& Color, bool bPersistentLines, float LifeTime, unsigned char DepthPriority, float Thickness);
		void DrawDebugLine_Multicast(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FColor& Color, bool bPersistentLines, float LifeTime, unsigned char DepthPriority, float Thickness);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugParamLevelDesign
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBDebugParamLevelDesign : public AActor
	{
	public:
		TArray<struct FSBDebugWaveEnemyParamSettingBase>           DebugWaveEnemyParamSettingCommmon;                       // 0x0228(0x0010) Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic
		int32_t                                                    WaveEnemyLv;                                             // 0x0238(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M26J[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetWaveEnemyLv(int32_t SetEnemyLv);
		int32_t GetWaveEnemyLv();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugScriptActorList
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBDebugScriptActorList : public UUserWidget
	{
	public:
		TArray<class FName> GetMainTriggers(class ASBNpcSpawnPoint* InPoint);
		void FindLevelSciptActors(TArray<class AActor*>* OutActors);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugSettingsSaveGame
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USBDebugSettingsSaveGame : public USaveGame
	{
	public:
		class FString                                              SaveSlotName;                                            // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   UserIndex;                                               // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G46N[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBDebugSettingByMenu>                       AllMenus;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
		struct FSBScalability                                      Scalability;                                             // 0x0050(0x0038) SaveGame, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugSpawnPointRender
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBDebugSpawnPointRender : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugSpawnPointRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBDebugSpawnPointRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_2HJE[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugTerrainCheck
	 * Size -> 0x0118 (FullSize[0x0340] - InheritedSize[0x0228])
	 */
	class ASBDebugTerrainCheck : public AActor
	{
	public:
		bool                                                       Checking;                                                // 0x0228(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Execute;                                                 // 0x0229(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ADP8[0x2];                                   // 0x022A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FallTime;                                                // 0x022C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZeroSpeedFallTime;                                       // 0x0230(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StandTime;                                               // 0x0234(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TraceCount;                                              // 0x0238(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartX;                                                  // 0x023C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartY;                                                  // 0x0240(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurX;                                                    // 0x0244(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurY;                                                    // 0x0248(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndX;                                                    // 0x024C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EndY;                                                    // 0x0250(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TopZ;                                                    // 0x0254(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BtmZ;                                                    // 0x0258(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UnitSize;                                                // 0x025C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YI60[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             tmpVec;                                                  // 0x0268(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GS6A[0xC];                                   // 0x0274(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          CurTrans;                                                // 0x0280(0x0030) BlueprintVisible, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class ANavMeshBoundsVolume*>                        NavMeshVolumes;                                          // 0x02B0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     TraceList;                                               // 0x02C0(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     ErrorPoint;                                              // 0x02D0(0x0010) BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASBPlayerCharacter>                   PlayerCharacter;                                         // 0x02E0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASBDebugTerrainCheckVolume*>                  TerrainCheckVolumes;                                     // 0x02E8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F4FE[0x48];                                  // 0x02F8(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugTerrainCheckSpawner
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBDebugTerrainCheckSpawner : public AActor
	{
	public:
		class UClass*                                              BPDebugTerrainCheck;                                     // 0x0228(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FE0I[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowResult(class UObject* WorldContextObject);
		void GetResult(class UObject* WorldContextObject, TArray<struct FTerrainErrorPt>* ErrorPts);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDebugTerrainCheckVolume
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBDebugTerrainCheckVolume : public AActor
	{
	public:
		class UBoxComponent*                                       BoxVolume;                                               // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDelegateHitAuthComponent
	 * Size -> 0x0078 (FullSize[0x0130] - InheritedSize[0x00B8])
	 */
	class USBDelegateHitAuthComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_WVOT[0x78];                                  // 0x00B8(0x0078) MISSED OFFSET (PADDING)

	public:
		void MulticastFailedOnAttackStopDebugLog(int32_t AttackID, class UAnimSequenceBase* Animation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDemoActorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDemoActorInterface : public UInterface
	{
	public:
		void GetUsedTextures(TArray<class UTexture*>* OutTextures);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDemoManager
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class USBDemoManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             DemoPlayPreStartDelegate;                                // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             DemoPlayStartDelegate;                                   // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             DemoPlayStartSequencerDelegate;                          // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             DemoPlayEndDelegate;                                     // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             DemoPlayEndSequencerDelegate;                            // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R8B3[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          DemoDB;                                                  // 0x0080(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D0U3[0x10];                                  // 0x0088(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULevelSequence*                                      LevelSequenceAsset;                                      // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              LevelSequenceClass;                                      // 0x00A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStreamableRenderAsset*>                      ResidentAssets;                                          // 0x00A8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_75TE[0x30];                                  // 0x00B8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     CharaCreateAssets;                                       // 0x00E8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void OnPlayEnd(class AActor* Actor, EEndPlayReason EndPlayReason);
		class FName GetPlayingDemoName();
		void DemoCapturePlayStart();
		void DemoCapturePlayEnd();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDemoParameterComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBDemoParameterComponent : public UActorComponent
	{
	public:
		struct FSBLimbIKUpdateParam                                LimbIKUpdateParamFootL;                                  // 0x00B8(0x0010) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FSBLimbIKUpdateParam                                LimbIKUpdateParamFootR;                                  // 0x00C8(0x0010) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FSBLimbIKUpdateParam                                LimbIKUpdateParamWristL;                                 // 0x00D8(0x0010) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FSBLimbIKUpdateParam                                LimbIKUpdateParamWristR;                                 // 0x00E8(0x0010) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bIsPlayDemo;                                             // 0x00F8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I2IW[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBDemoParameterComponent*                           CacheObject;                                             // 0x0100(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDemoPlayerCharacter
	 * Size -> 0x0000 (FullSize[0x1440] - InheritedSize[0x1440])
	 */
	class ASBDemoPlayerCharacter : public ASBCreationCharacter
	{
	public:
		void GetDemoAnimationSet();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBExplosionComponent
	 * Size -> 0x0048 (FullSize[0x0250] - InheritedSize[0x0208])
	 */
	class USBExplosionComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_CL6T[0x8];                                   // 0x0208(0x0008) Fix Super Size
		struct FSBExplosionParams                                  Params;                                                  // 0x0210(0x0038) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ExposionAudio;                                           // 0x0248(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void GetExplosionCollision(struct FProjectileDynamicCollision* ExtendCollision);
		void ExecExplosion(class AController* EventInstigator, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDestructible
	 * Size -> 0x0178 (FullSize[0x03B8] - InheritedSize[0x0240])
	 */
	class ASBDestructible : public ADestructibleActor
	{
	public:
		unsigned char                                              UnknownData_YHGN[0x70];                                  // 0x0240(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    HindranceComponent;                                      // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBCollisionGroupComponent*                          CollisionGroupComponent;                                 // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentHitPoint;                                         // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxHitPoint;                                             // 0x02CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBDestrcutibleDamageType                                  TakeDamageType;                                          // 0x02D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_71WP[0x7];                                   // 0x02D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBBattleArea*                                       CurrentBattleArea;                                       // 0x02D8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ProfileDataId;                                           // 0x02E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsViewDamageValue;                                       // 0x02E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JIE9[0x7];                                   // 0x02E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     DamageParticle;                                          // 0x02F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       DamageAudio;                                             // 0x02F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     DestructParticle;                                        // 0x0300(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       DestructAudio;                                           // 0x0308(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBDestrcutibleType                                        DestrcutibleType;                                        // 0x0310(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LG94[0x7];                                   // 0x0311(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDestructibleObjectDestructDelegete;                    // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bDestructed;                                             // 0x0328(0x0001) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsRespawn;                                              // 0x0329(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsRespawnDebugDraw;                                     // 0x032A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A775[0x1];                                   // 0x032B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RespawnIntervalTime;                                     // 0x032C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RespawnHindrance;                                        // 0x0330(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bContentHide;                                            // 0x0334(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GA1B[0x3];                                   // 0x0335(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSpawnAndDestructCounter                          SpawnAndDestructCounter;                                 // 0x0338(0x0008) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       IsDxBattleMode;                                          // 0x0340(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WUD3[0x3];                                   // 0x0341(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DxBarrierDamagedRate;                                    // 0x0344(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DxPlayerDamagedRate;                                     // 0x0348(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsDxBattleInfinityHP;                                    // 0x034C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EL3B[0x3];                                   // 0x034D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DestructCount;                                           // 0x0350(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBTreasureBoxRewardType                                   DropItemReward;                                          // 0x0354(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W1EN[0x3];                                   // 0x0355(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DropMinMoney;                                            // 0x0358(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DropMaxMoney;                                            // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDestructibleDropTreasure;                              // 0x0360(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDropItem;                                              // 0x0361(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UQ66[0x2E];                                  // 0x0362(0x002E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UBlueprint*>                                  AdditionalBPInstance;                                    // 0x0390(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RDCS[0x18];                                  // 0x03A0(0x0018) MISSED OFFSET (PADDING)

	public:
		void ServerTakeDamage(const struct FSBDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageSrc);
		void ResultTreasure(class AActor* InOtherActor, const struct FRotator& ViewRotation, int32_t TreasureId, ESBTreasureBoxRarity TreasureRarity, int32_t LotRate);
		void RespawnDestructible();
		void RespawnDebugDraw(bool Sw, float Timer, float Duration);
		void ResetInitialRespawnIntervalTime(float IntervalTime);
		void ResetInitialIsRespawn(bool IsRespawn);
		void ResetInitialHitPoint(float HP);
		void ReadyToRespawn();
		void PostGetTreasure(ESBTreasureBoxLotResult Result, TArray<struct FSBTreasureBoxLotResult> LotResults);
		void OnRep_SpawnAndDestructCounter();
		void OnDestructibleObjectDestructDelegete__DelegateSignature(class ASBDestructible* Myself);
		void MulticastDamageReaction(float CurrentHP, const struct FVector_NetQuantizeNormal& Direction, float Strength, class AActor* DamageCauser, const struct FSBMulticastDamageEvent& MulticastDamageEvent);
		bool IsSpawnAndDestructCounterByDestroyCheck();
		bool IsDebugDxGateInfinityHP();
		struct FVector GetTakeDamagePoint();
		class FName GetProfileDataId();
		void ExecRespawn();
		void ExecDestroy(const struct FVector_NetQuantizeNormal& Direction, float Strength, class AActor* DamageCauser);
		void DropTreasureSetupClient();
		ESBTreasureBoxRewardType DropTreasureSetup(int32_t LotRate, int32_t MoneyLotRate, int32_t BuffRotRate, bool IsUseRandomSeed, bool* IsDropItem);
		void Destruct(const struct FVector& Direction, float Strength, class AActor* DamageCauser);
		void Damaged(float CurrentHP, const struct FHitResult& HitInfo, const struct FVector& Direction, float Strength, class AActor* DamageCauser);
		bool CheckRespawnable();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDhcBattleComponent
	 * Size -> 0x0048 (FullSize[0x0100] - InheritedSize[0x00B8])
	 */
	class USBDhcBattleComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnLoadDhcBattleHighScoreInfoDelegate;                    // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveDhcBattleHighScoreInfoDelegate;                    // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BS3W[0x28];                                  // 0x00D8(0x0028) MISSED OFFSET (PADDING)

	public:
		void SetCurrentDhcMesurer(class AActor* DhcMesurer);
		void Server_SaveHighScoreInfo(const class FString& InWeaponUniqueId, class AActor* DHCMeasurer);
		void RequestSaveHighScoreInfo(const class FString& InWeaponUniqueId, class AActor* DHCMeasurer);
		bool RequestLoadHighScoreInfo();
		void OnSaveDhcBattleHighScoreInfoDelegate__DelegateSignature(int32_t InRetCode, bool InResult);
		void OnLoadDhcBattleHighScoreInfoDelegate__DelegateSignature(int32_t InRetCode, const struct FSBDhcBattleInfo& InAttackCheckerInfo);
		void MakeWeaponItemDataFromDhcBattleEquipWeaponInfo(const struct FSBDhcBattlePlayerEquipWeaponInfo& InEquipWeaponInfo, struct FSBWeaponItemData* OutWeaponItemData);
		class AActor* GetCurrentDhcMesurer();
		void Client_SaveHighScoreInfo(int32_t InRetCode, bool InResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDhcMeasurer
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBDhcMeasurer : public AActor
	{
	public:
		void ResetTargetPlayerStatus(class ASBPlayerCharacter* Player);
		void ResetTargetEnemyStatus(class ASBEnemyCharacter* Enemy);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDialog
	 * Size -> 0x0040 (FullSize[0x02F0] - InheritedSize[0x02B0])
	 */
	class USBDialog : public USBUserWidget
	{
	public:
		class FString                                              MessageBody;                                             // 0x02B0(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3XFO[0x18];                                  // 0x02C0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      EndDynamicDelegate;                                      // 0x02D8(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		EDialogResult                                              OkOperation;                                             // 0x02E8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDialogResult                                              CancelOperation;                                         // 0x02E9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CheckBoxStatus;                                          // 0x02EA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_21HW[0x5];                                   // 0x02EB(0x0005) MISSED OFFSET (PADDING)

	public:
		void StartYesNoDialog(const class FText& Message, EDialogPositionType Type, bool bEnableBgBlur);
		void StartMessageDialog(const class FText& Message, EDialogPositionType Type, bool bEnableBgBlur);
		void ShowWarning(bool bVisible);
		void SetYesButtonClickSe(class UAkAudioEvent* AkEvent, const class FString& EventName);
		void SetDefaultOperation(EDialogResult InOkOperation, EDialogResult InCancelOperation);
		void SetCheckBoxMessage(bool bVisible, const class FText& Message);
		void OnStartDialog();
		void OnEndDialog(EDialogResult Result);
		void DialogEndDynamicDelegate__DelegateSignature(EDialogResult Result);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDigitalSignageBase
	 * Size -> 0x0048 (FullSize[0x0270] - InheritedSize[0x0228])
	 */
	class ASBDigitalSignageBase : public AActor
	{
	public:
		class FString                                              GroupId;                                                 // 0x0228(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDigitalSignageTextrueParam>                 TextureParamList;                                        // 0x0238(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       bDataSetting;                                            // 0x0248(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LA5J[0x7];                                   // 0x0249(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDigitalSignageTextureDownLoadCompleteDelegete;         // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class FString>                                      DownLoadTexturePathList;                                 // 0x0260(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic

	public:
		void SetupTexture();
		void OnDigitalSignageTextureDownLoadCompleteDelegete__DelegateSignature(const class FString& InFilePath);
		bool IsParameterSetting();
		int32_t GetVTileNum(int32_t TextureCnt);
		int32_t GetUTileNum(int32_t TextureCnt);
		class FString GetUploadImagePath(const class FName& ID);
		TArray<struct FDigitalSignageTextrueParam> GetTextureParamList();
		int32_t GetTextureMaxCount();
		int32_t GetTextureCnt();
		int32_t GetStatusBit();
		void GetNetworkDataPath(class FString* OutPath);
		class FString GetGroupId();
		struct FDateTime GetCheckDateTime();
		void DownLoadTextureRelease();
		void DownLoadTextureComplete(const class FString& InFilePath);
		void CreateTextureParamList();
		void ClearTextureParamList();
		void AddDownLoadTexture(const class FString& InFilePath);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDPICustomScalingRule
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDPICustomScalingRule : public UDPICustomScalingRule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDragonAlbusComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBDragonAlbusComponent : public USBEnemySpecializerComponent
	{
	public:
		bool                                                       bIsHornGuard;                                            // 0x00B8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KNFF[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HornGuardTime;                                           // 0x00BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool IsHornGuard();
		void ActivateHornGuard(class UClass* AssetClass, ESBWeaponAttach WeaponAttach, const struct FTransform& Transform, int32_t GuardTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDropObjectManager
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBDropObjectManager : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDroppingTextBase
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class USBDroppingTextBase : public USBUserWidget
	{
	public:
		class FText                                                DisplayMessage;                                          // 0x02B0(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		void Start();
		void SetMessageTextInItemName(const class FText& ItemName, int32_t Amount, ESBDroppingTextOption Option);
		void SetMessageTextInItem(EItemType ItemType, int32_t ItemId, int32_t Amount, ESBDroppingTextOption Option, bool bUnidentified, bool bIsBonusAdd);
		void SetMessageTextInFree(const class FText& InText, ESBDroppingTextOption Option);
		void SetMessageText(const class FText& InText);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDroppingTextManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBDroppingTextManager : public UObject
	{
	public:
		class UClass*                                              CreateDroppingTextureUI;                                 // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CreateDroppingTextRareUI;                                // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ShowDroppingTextItemName(class UObject* WorldContextObject, const class FText& ItemName, int32_t Amount, ESBDroppingTextOption Option);
		void ShowDroppingTextItemArray(class UObject* WorldContextObject, TArray<struct FSBDiffItemInfo> Items);
		void ShowDroppingTextItem(class UObject* WorldContextObject, EItemType ItemType, int32_t ItemId, int32_t Amount, ESBDroppingTextOption Option, bool bUnidentified, bool bIsBonusAdd, bool bRare);
		void ShowDroppingText(class UObject* WorldContextObject, const class FText& Message, ESBDroppingTextOption Option);
		class USBDroppingTextBase* CreateDroppingUI(class UObject* WorldContextObject, bool bRare);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDsStateWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBDsStateWidget : public UUserWidget
	{
	public:
		bool                                                       bIsLayoutableHUD;                                        // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_42KH[0xF];                                   // 0x0279(0x000F) MISSED OFFSET (PADDING)

	public:
		void OnShow();
		void OnSetCount(int32_t Count);
		void OnHide();
		void OnChangeEffect(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDummyDataUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDummyDataUtility : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonBattleinfoHUDWidget
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class USBDungeonBattleinfoHUDWidget : public UUserWidget
	{
	public:
		bool                                                       bIsRootVisible;                                          // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsBossArea;                                             // 0x0279(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q2E8[0x2];                                   // 0x027A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PlayerMaxNum;                                            // 0x027C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PlayerInAreaNum;                                         // 0x0280(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q1U6[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel*                                        WaitBossBattleCanvas;                                    // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox*                                      PlayerHorizontalBox1;                                    // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox*                                      PlayerHorizontalBox2;                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDungeonBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		int32_t TeleportDungeonBattleNpcToLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation);
		int32_t TeleportAllPlayersToTarget(class UObject* WorldContextObject, const class FName& ActorTag, bool bWithNpc, bool bWithFade, float FadeTime);
		bool StartTowerChallenge(class UObject* WorldContextObject, const class FName& ChallengeID);
		bool StartMission(class UObject* WorldContextObject, const class FName& MissionId);
		void SetPlayerCurrentLocationToReturnLocation(class UObject* WorldContextObject);
		void SetEditorGameContentId(const class FName& GameContentId, const class FString& GameModeName);
		void SetClearTowerChallengeNoCounter(class UObject* WorldContextObject);
		void RetireDungeonGame(class UObject* WorldContextObject, class APlayerController* PlayerController);
		int32_t ResetCoolTimeAllPlayers(class UObject* WorldContextObject, const class FString& ModeStr);
		int32_t RecoverHpAllPlayers(class UObject* WorldContextObject);
		void PrintServerString(class UObject* WorldContextObject, const class FString& Msg, const struct FLinearColor& Col, float Timer, bool ToScreen);
		void NotifyLevelBuddyVoiceCondition(class UObject* WorldContextObject, ESBLevelBuddyVoiceCondition Condition);
		bool IsWaitingDungeonStart(class UObject* WorldContextObject);
		bool IsStartImmediately(class UObject* WorldContextObject);
		bool IsScenarioDungeon(class UObject* WorldContextObject);
		bool IsInMission(class UObject* WorldContextObject);
		bool IsGameModeSurvival(const class FName& GameContentId);
		bool IsGameModeSksBattle(const class FName& GameContentId);
		bool IsGameModeRankUpExam(const class FName& GameContentId);
		bool IsGameModeRaidBattle(const class FName& GameContentId);
		bool IsGameModePublicDungeon(const class FName& GameContentId);
		bool IsGameModeOfflineDemo(const class FName& GameContentId);
		bool IsGameModeKwmBattle(const class FName& GameContentId);
		bool IsGameModeInstanceArea(const class FName& GameContentId);
		bool IsGameModeField(const class FName& GameContentId);
		bool IsGameModeDxBattle(const class FName& GameContentId);
		bool IsGameModeDungeonTimeAttack(const class FName& GameContentId);
		bool IsGameModeDungeonScoreAttack(const class FName& GameContentId);
		bool IsGameModeDungeonScenario(const class FName& GameContentId);
		bool IsGameModeDungeonNormal(const class FName& GameContentId);
		bool IsGameModeDungeon(class UObject* WorldContextObject, const class FName& GameContentId);
		bool IsGameModeCity(const class FName& GameContentId);
		bool IsGameModeBattleArenaEx(const class FName& GameContentId);
		bool IsGameModeBattleArena(const class FName& GameContentId);
		bool IsFromBattleMode(class UObject* WorldContextObject);
		bool IsEnumGameMode(ESBMapInfoGameModeType ModeType, const class FName& GameContentId);
		bool IsDungeonResultMenuStarted(class UObject* WorldContextObject);
		bool IsDungeonPlaying(class UObject* WorldContextObject);
		bool IsDungeonMap(class UObject* WorldContextObject, const class FName& GameContentId);
		bool IsDungeonGameStarted(class UObject* WorldContextObject);
		bool IsDungeonEnd(class UObject* WorldContextObject);
		bool IsDungeonBossEnemy(class UObject* WorldContextObject, const class FString& InEnemyId);
		bool IsCurrentGameModeSksType(class UObject* WorldContextObject);
		bool IsCurrentGameModeDropsTreasureBox(class UObject* WorldContextObject);
		bool IsAvailableContent(class UObject* WorldContextObject, const class FName& GameContentId);
		bool InDungeonGame(class UObject* WorldContextObject);
		void IncrementTowerChallengeFreecCounter(class UObject* WorldContextObject);
		void GetSortedPlayerState(class UObject* WorldContextObject, TArray<class APlayerState*>* PlayerStates);
		bool GetResultOverLimit(class UObject* WorldContextObject, struct FSBOverLimit* OutOverLimit);
		bool GetResultLetter(class UObject* WorldContextObject, struct FSBLetter* OutLetter);
		int32_t GetMissionCount(class UObject* WorldContextObject);
		int32_t GetMissionClearCount(class UObject* WorldContextObject);
		ESBDungeonMatchMenuRegisterType GetMatchMenuRegisterType(const class FName& GameContentId);
		bool GetMapParameterSync(const class FName& GameContentId, struct FSBMapParameterSync* OutParameterSyncInfo);
		bool GetGameModeInfo(const class FName& GameContentId, struct FSBGameModeInfo* GameModeInfo);
		class UClass* GetGameModeClassByName(const class FString& GameModeName);
		void GetGameContentIdListByGameMode(const class FString& GameMode, TArray<class FName>* ContentIdList);
		void GetEnemyListWithoutBuddy(class UObject* WorldContextObject, TArray<class ASBEnemyCharacter*>* EnemyList);
		class FString GetEditorGameModeNameByContentId(const class FName& GameContentId);
		bool GetDungeonStartLocation(class ASBPlayerStart* PlayerStart, int32_t DngId, struct FVector* Location, float* Yaw, bool* narrow);
		bool GetDungeonRewardInfo(TArray<struct FSBMasterReward> RewardArray, struct FSBDungeonRewardInfo* RewardInfo);
		bool GetDungeonRewardArray(const class FName& GameContentId, TArray<struct FSBMasterReward>* RewardArray, int32_t ClassId, int32_t EvaluationId);
		ESBDungeonEvaluation GetDungeonRankedRewardArray(const class FName& GameContentId, TArray<struct FSBMasterReward>* RewardArray, int32_t ClassId, int32_t ResultValue);
		bool GetDungeonMapInfo(const class FName& GameContentId, struct FSBMapInfo* MapInfo);
		class FString GetDungeonGameMode(class UObject* WorldContextObject);
		bool GetDungeonCurrentStepInfo(class UObject* WorldContextObject, int32_t* MaxStep, int32_t* CurStep);
		int32_t GetDungeonBattleNpcList(class UObject* WorldContextObject, TArray<class ASBEnemyCharacter*>* BattleNpcList);
		bool GetCurrentSessionDungeonId(class UObject* WorldContextObject, class FName* DungeonId);
		ESBBattleRule GetBattleRule(class UObject* WorldContextObject);
		int32_t ForceResurrectAllPlayers(class UObject* WorldContextObject, float HpPercentage);
		bool FindGameContentIdByMapName(const class FString& MapName, class FName* GameContentId);
		void ClearDungeonCurrentStep(class UObject* WorldContextObject);
		bool CanUseTakaraTicket(const class FName& GameContentId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonCameraDemo
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBDungeonCameraDemo : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnEndDungeonCameraDemo;                                  // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T8F4[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetDungeonDemoCameraStatus(ESBDungeonCameraDemoStatus DemoStatus);
		void RequestDemoStart();
		void OnEndDungeonCameraDemo__DelegateSignature();
		ESBDungeonCameraDemoStatus GetDungeonDemoCameraStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonCheatCommand
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class USBDungeonCheatCommand : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnDebugEmoteGimmickEventDispatcher;                      // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDebugSnowStormEventDispatcher;                         // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SnowStormOut(int32_t No, bool EffectOn);
		void SnowStormIn(int32_t No);
		void ShowGameContentId();
		void ShowDungeonProcessLog(bool Sw);
		void SetTowerNextFloor(int32_t InFloor);
		void SetScoreAttackNowScore(int32_t InScore);
		void SetScoreAttackComboLimitTime(float InTimeSec);
		void SetMinutesPerDay(int32_t InMinutesPerDay);
		void SetDungeonRemainTime(int32_t InMinute, int32_t InSecond);
		void SetDunegonInstanceLifeTime(int32_t TimeSec);
		void Server_RaidBattleDebugLogPirnt(const class FString& InPlayerName, bool IsLogPut);
		void RetryDungeon(int32_t Mode);
		void RetireDungeon();
		void ResetEmoteGimmick(int32_t ControlNo, const class FString& TagName);
		void ResetBhtSignalStatus();
		void RaidBattleMasterDataLogPut();
		void RaidBattleDebugLogPirntReset();
		void RaidBattleDebugLogPirnt(bool IsLogPut);
		void OutputRaidPlayerContributionValue();
		void OutputDungeonScoreDebug();
		void OutputBhtSignalStatus();
		void OnShiningCryInfo(bool Sw, int32_t No);
		void OnEmoteInfoDisp(bool SWITCH, const class FString& Debug01_TagID, const struct FDateTime& Debug02_NowTime, const struct FDateTime& Debug03_GatherPointTime, int32_t Debug04_GatherPointNum, const class FString& Debug05_GatherPointTagID, TArray<class FString> Debug06_RespawmInfo_TagID, TArray<struct FDateTime> Debug06_RespawmInfo_DateTime);
		void OnDebugSnowStormEventDispatcher__DelegateSignature(int32_t In_Out, int32_t SnowStormNo, bool EffectOn);
		void OnDebugEmoteGimmickEventDispatcher__DelegateSignature(int32_t ControlNo, const class FString& TagName);
		void LevelBuddyVoice(ESBLevelBuddyVoiceCondition Condition);
		void KillDungeonTaggedEnemy();
		bool IsEmoteGimmickShiningCry_Debug();
		int32_t IsEmoteGimmickControlCryNo_Debug();
		void ForceDetectCheating(int32_t PlayerId);
		void EraseStaticMeshCollision(const class FName& LevelName);
		void EnableNFTArea(bool IsEnable);
		void DebugUnloadStreamLevel(const class FName& LevenName);
		void DebugLoadStreamLevel(const class FName& LevenName);
		void ClearTowerChallenge();
		void ClearTimeAttack(float InTime);
		void ClearScoreAttack(int32_t InScore);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonClearCheck
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBDungeonClearCheck : public AActor
	{
	public:
		bool LookTAPoint(class ASBPlayerCharacter* PlayerCharacter);
		void HandleWithCause(class ASBPlayerCharacter* PlayerCharacter, bool BlockClearDungeon, const class FString& Cause, float DelayTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonClearConditionWatcher
	 * Size -> 0x0090 (FullSize[0x0298] - InheritedSize[0x0208])
	 */
	class USBDungeonClearConditionWatcher : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_KJNN[0x8];                                   // 0x0208(0x0008) Fix Super Size
		unsigned char                                              UnknownData_2GBK[0x8];                                   // 0x0210(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurStep;                                                 // 0x0218(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BCY7[0x14];                                  // 0x021C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDungeonClearConditionProgressInfo                  ProgressInfo;                                            // 0x0230(0x0010) Net, Transient, RepNotify, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3OGS[0x10];                                  // 0x0240(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCompleted;                                              // 0x0250(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PYHR[0x7];                                   // 0x0251(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClearConditionChangeDelegate;                          // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearConditionUpdateProgressDelegate;                  // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearConditionChangeStepDelegate;                      // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearConditionCompleteDelegate;                        // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void ServerForceComplete();
		void ServerClearCurrentStep();
		void ServerClearCondition(int32_t InStep, int32_t InConditionId);
		void OnRep_UpdateProgress();
		void OnRep_CurStep();
		void OnRep_Completed();
		void OnClearConditionUpdateProgressDelegate__DelegateSignature(const struct FDungeonClearConditionProgressItemInfo& InProgressItem, int32_t InStepNum, int32_t InProgressIndex);
		void OnClearConditionCompleteDelegate__DelegateSignature(const class FName& InDungeonName);
		void OnClearConditionChangeStepDelegate__DelegateSignature(int32_t InCurStep);
		void OnClearConditionChangeDelegate__DelegateSignature();
		bool IsConditionInitialized();
		bool IsCompleted();
		bool IsClearConditionExist();
		void ForceComplete();
		void ClearCurrentStep();
		void ClearCondition(int32_t InStep, int32_t InConditionId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonClearConditionWatcher2
	 * Size -> 0x00D8 (FullSize[0x0370] - InheritedSize[0x0298])
	 */
	class USBDungeonClearConditionWatcher2 : public USBDungeonClearConditionWatcher
	{
	public:
		TArray<struct FSBDungeonProcessCondition>                  DugeonProcessConditoins;                                 // 0x0298(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UR7M[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      EventScriptList;                                         // 0x02B0(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TMap<class FName, struct FSBDungeonProcessCondition>       ProcessConditionMap;                                     // 0x02C0(0x0050) NativeAccessSpecifierPublic
		TArray<class FName>                                        ProcessClearQueue;                                       // 0x0310(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    ProcessClearQueueId;                                     // 0x0320(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GV1Z[0x4];                                   // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDataTable*>                                  DefineTableList;                                         // 0x0328(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CSI5[0x38];                                  // 0x0338(0x0038) MISSED OFFSET (PADDING)

	public:
		TArray<class FName> UpdateProcessCondition(ESBDungeonClearCondition ClearType, const class FString& ClearParameter);
		void SetupProcessConditionTable(class UDataTable* ProcessTable);
		void SetupProcessCondition(TArray<struct FSBDungeonProcess> Processes);
		void NotifyPlayerInteraction(class ASBInteractionSwBase* InteractionSw);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonEntryCloseVolume
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ASBDungeonEntryCloseVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonNotifier
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDungeonNotifier : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonRecordList
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBDungeonRecordList : public UObject
	{
	public:
		unsigned char                                              UnknownData_NGVP[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void GetDungeonRecord(const class FName& InDungeonId, struct FSBDungeonRecord* OutRecord);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonStandbyArea
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBDungeonStandbyArea : public AActor
	{
	public:
		bool                                                       bAvailable;                                              // 0x0228(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B4GA[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PlayerNum;                                               // 0x022C(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              WaitClearConditionScript;                                // 0x0230(0x0010) BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool OverlapSomeone();
		bool OverlapAll();
		void OnRep_Available();
		void OnClearConditionScriptEndOnePlayer(int32_t EndScrpitId, const class FString& EndScrpitName);
		void OnClearConditionScriptEndAllPlayers(int32_t EndScrpitId, const class FString& EndScrpitName);
		void OnClearConditionScriptEndAll();
		void OnClearConditionScriptEnd();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDungeonWall
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBDungeonWall : public AActor
	{
	public:
		unsigned char                                              UnknownData_VQ3A[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnWall();
		void OnSublevelInitialLoaded();
		void NotifySublevelInitialLoaded();
		void EraseWall();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDxBattleBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBDxBattleBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsDxBattle(class UObject* WorldContextObject);
		int32_t GetDxBattleContributionClass(TArray<struct FSBDxBattleGameScore> ScoreList);
		int32_t GetDxBattleContribution(TArray<struct FSBDxBattleGameScore> ScoreList);
		int32_t GetDxBattleAwardValue(TArray<struct FSBDxBattleGameScore> ScoreList, ESBDxBattleAwardFlag Award);
		int32_t GetDxBattleAwardIndex(ESBDxBattleAwardFlag Award);
		ESBDxBattleAwardFlag GetDxBattleAwardFlag(int32_t Index);
		bool DrawDxPlayerInfo(class UObject* WorldContextObject, class ASBPlayerCharacter* Character, float InSeconds, TArray<struct FSBDxBattleGameScore> PlayerScoreList, int32_t EnemyGateDestructNum, int32_t EnemyBufferDestructNum);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDxBattleEnemyGateComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBDxBattleEnemyGateComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCallSpawnEnemyDelegate;                                // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTickComponentDelegate;                                 // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZC7Y[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CallSpawnEnemyDelayTime;                                 // 0x00E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D52B[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (PADDING)

	public:
		void SBOnTickComponentDelegate__DelegateSignature();
		void SBOnCallSpawnEnemyDelegate__DelegateSignature();
		float GetSpawnTimerRemaininig();
		void EnableTickComponent();
		void CallSpawnEnemy();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDxBattleEnemyGateSpawnerComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBDxBattleEnemyGateSpawnerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_8ELE[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (PADDING)

	public:
		bool SpawnEnemyByEncounterVolume(int32_t MaxEnemyCount);
		void ReleaseEncounterVolume();
		void OnActorSpawned(class AActor* Actor);
		void OnActorDestroyed(class AActor* Actor);
		int32_t GetSpawnedEnemyNum();
		int32_t GetSpawnedEnemyGateAttackerNum();
		void EscapeAllEnemies();
		void EntryEncounterVolume(class ASBEncounterVolume* InEncounterVolume);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDxBattleGameInstance
	 * Size -> 0x0200 (FullSize[0x0428] - InheritedSize[0x0228])
	 */
	class ASBDxBattleGameInstance : public AActor
	{
	public:
		unsigned char                                              UnknownData_FOLS[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBDxBattleGameStatus                                      m_Status;                                                // 0x0230(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESBDxBattleGameResult                                      m_Result;                                                // 0x0231(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MRL2[0x2];                                   // 0x0232(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_CurStep;                                               // 0x0234(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASBGameMode_DxBattle*                                m_pParentGameMode;                                       // 0x0238(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7F86[0x168];                                 // 0x0240(0x0168) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBDxBattleGameScore>                        DebugPlayerScoreList;                                    // 0x03A8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X9GH[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class ASBDestructible*, struct FPlayerScore>          ScoreMap;                                                // 0x03C0(0x0050) NativeAccessSpecifierPrivate
		class ASBPlayerCharacter*                                  BackInMonitoer;                                          // 0x0410(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnShowTearOffLogDelegate;                                // 0x0418(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetResult(ESBDxBattleGameResult InResult);
		void SetMapMasterData(const struct FSBMapInfo& InMaster);
		void SetDefenseMasterData(const struct FSBDxBattleMasterData& InMaster);
		void ServerDebugDrawViewContributionValue(class ASBPlayerCharacter* Character, float InSeconds);
		void Server_SetScore(ESBDxBattleScore ScoreType, class ASBPlayerCharacter* pPlayer, float InPoint);
		void Server_LeavePlayer(class ASBPlayerCharacter* InLeaveMember);
		void Server_JoinPlayer(class ASBPlayerCharacter* InJoinMember);
		void Server_AddWholeScore(ESBDxBattleWholeScore ScoreType, uint32_t InPoint);
		void Server_AddScore(ESBDxBattleScore ScoreType, class ASBPlayerCharacter* pPlayer, float InPoint);
		void RequestDebugDrawViewContributionValue(class ASBPlayerCharacter* Character, float InSeconds);
		void OnShowTearOffLogDelegate__DelegateSignature(class ASBPlayerCharacter* PlayerCharacter);
		void OnRep_CurStep();
		void OnAssetLoaded();
		void NotifyDestructibletEnemyBuffer(class ASBDestructible* InDestructObject, class ASBPlayerCharacter* InAttacker);
		void NotifyDestructibleEnemyGate(class ASBDestructible* InDestructObject, class ASBPlayerCharacter* InAttacker);
		class ASBPlayerCharacter* GetHighScorePlayer(class ASBDestructible* InDestructObject, class ASBPlayerCharacter* PlayerCharacter);
		bool GetDebugViewContributionValue();
		float GetAwardPointRatio(class UObject* WorldContextObject);
		void DebugDrawViewContributionValue(class ASBPlayerCharacter* Character, float InSeconds, TArray<struct FSBDxBattleGameScore>* InViewPlayerScoreList);
		void ClientDebugDrawViewContributionValue(class ASBPlayerCharacter* Character, float InSeconds);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDxBattleHUD
	 * Size -> 0x00D8 (FullSize[0x0350] - InheritedSize[0x0278])
	 */
	class USBDxBattleHUD : public UUserWidget
	{
	public:
		class UImage*                                              m_WallAnimWidget;                                        // 0x0278(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MGF3[0x28];                                  // 0x0280(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartGameDelegate;                                     // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       m_IsStartGame;                                           // 0x02B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KCXC[0x3];                                   // 0x02B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_WallHP;                                                // 0x02BC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_CurSeqElapsedTime;                                     // 0x02C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      m_SeqTimeLimit;                                          // 0x02C4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZCW3[0x40];                                  // 0x02C8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_DefenseTargetMaxHP;                                    // 0x0308(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    m_DefenceTragetHP;                                       // 0x030C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock*                                          m_TimerTextBlockMinutes;                                 // 0x0310(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTextBlock*                                          m_TimerTextBlockSeconds;                                 // 0x0318(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTextBlock*                                          m_TimerTextBlockMilliSecond;                             // 0x0320(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTextBlock*                                          m_TextBlockWallHP;                                       // 0x0328(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTextBlock*                                          m_TextBlockEnemyCount;                                   // 0x0330(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTextBlock*                                          m_TextBlockEnemyGateCount;                               // 0x0338(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTextBlock*                                          m_TextBlockEnemyKyokaSoutiCount;                         // 0x0340(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASBGameState_Dungeon*                                m_GameState;                                             // 0x0348(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void WallAnimation(const struct FLinearColor& Color, class UImage* Image, int32_t sec);
		void UpdateTargetHP(int32_t DefenceTragetHP);
		void UpdateParamsTick(int32_t InfiniteEnemyNum, int32_t GateEnemyNum, int32_t CurrentGateNum, int32_t DestroyedGateNum, int32_t CurrentSupplierNum, int32_t LotCountDown);
		void UpdateParams(int32_t DxBattleSeqId, float SeqTimeLimit, float LotSpan, int32_t QualityGateNum, int32_t InfiniteEnemyMax, int32_t GateEnemyMax, int32_t CurrentGateMax, int32_t CurrentSupplierMax, int32_t CurSequenceType, int32_t DefenseTargetMaxHP);
		void UpdateCurrectEnergy(int32_t Val);
		void StopGame();
		void StartGame();
		void SetTimerTextBlock(class UTextBlock* TimerTextBlockMinutes, class UTextBlock* TimerTextBlockSeconds, class UTextBlock* TimerTextBlockMilliSecond);
		void SetTextBlocks(class UTextBlock* TextBlockWallHP, class UTextBlock* TextBlockEnemyCount, class UTextBlock* TextBlockEnemyGateCount, class UTextBlock* TextBlockEnemyKyokaSoutiCount);
		void OnStartGameDelegate__DelegateSignature();
		float GetTimerCount();
		void AttackedWall();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDxBattleManager
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBDxBattleManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_0NAZ[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnMasterDataAvailable();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEditableText
	 * Size -> 0x0000 (FullSize[0x04D8] - InheritedSize[0x04D8])
	 */
	class USBEditableText : public UEditableText
	{
	public:
		void OnPrepareScreenshot(class UObject* Sender, class UObject* Param);
		void OnFinishScreenshot(class UObject* Sender, class UObject* Param);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEditableTextBox
	 * Size -> 0x0000 (FullSize[0x0AC0] - InheritedSize[0x0AC0])
	 */
	class USBEditableTextBox : public UEditableTextBox
	{
	public:
		void OnPrepareScreenshot(class UObject* Sender, class UObject* Param);
		void OnFinishScreenshot(class UObject* Sender, class UObject* Param);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMultiLineEditableText
	 * Size -> 0x0000 (FullSize[0x04E8] - InheritedSize[0x04E8])
	 */
	class USBMultiLineEditableText : public UMultiLineEditableText
	{
	public:
		void OnPrepareScreenshot(class UObject* Sender, class UObject* Param);
		void OnFinishScreenshot(class UObject* Sender, class UObject* Param);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMultiLineEditableTextBox
	 * Size -> 0x0000 (FullSize[0x0D50] - InheritedSize[0x0D50])
	 */
	class USBMultiLineEditableTextBox : public UMultiLineEditableTextBox
	{
	public:
		void OnPrepareScreenshot(class UObject* Sender, class UObject* Param);
		void OnFinishScreenshot(class UObject* Sender, class UObject* Param);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEDTransition_EnemyAttackGuarded
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEDTransition_EnemyAttackGuarded : public UASTransitionEventDriven_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEDTransition_EnemyAttackHit
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEDTransition_EnemyAttackHit : public UASTransitionEventDriven_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEDTransition_EnemyCommand
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBEDTransition_EnemyCommand : public UASTransitionEventDriven_Command
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEffectControlInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEffectControlInterface : public UInterface
	{
	public:
		void RouteNotifyUpdateAttackCollisionScale(const struct FVector& Scale);
		void RouteNotifyPrepareDestroy(bool bForce);
		void ReceiveNotifyUpdateAttackCollisionScale(const struct FVector& Scale);
		void ReceiveNotifyPrepareDestroy(bool bForce);
		class USBEffectValueComponent* GetEffectValueComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEffectManager
	 * Size -> 0x61A8 (FullSize[0x61D0] - InheritedSize[0x0028])
	 */
	class USBEffectManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_C6XD[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBDamageHitEffectSetting                           DamageHitSettings_Slash;                                 // 0x0048(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBDamageHitEffectSetting                           DamageHitSettings_Blow;                                  // 0x0588(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBDamageHitEffectSetting                           DamageHitSettings_Thrust;                                // 0x0AC8(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBDamageHitEffectSetting                           DamageHitSettings_Claw;                                  // 0x1008(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBDamageHitEffectSetting                           DamageHitSettings_Fang;                                  // 0x1548(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBDamageHitEffectSetting                           DamageHitSettings_Guitar;                                // 0x1A88(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBElementHitEffectSetting                          ElementEffectSetting_Earth;                              // 0x1FC8(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBElementHitEffectSetting                          ElementEffectSetting_Fire;                               // 0x2508(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBElementHitEffectSetting                          ElementEffectSetting_Ice;                                // 0x2A48(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBElementHitEffectSetting                          ElementEffectSetting_Thunder;                            // 0x2F88(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBElementHitEffectSetting                          ElementEffectSetting_Light;                              // 0x34C8(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBElementHitEffectSetting                          ElementEffectSetting_Darkness;                           // 0x3A08(0x0540) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    ElementHitGlitterMode;                                   // 0x3F48(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    GeneralEffectiveHit;                                     // 0x4098(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    SuperArmorHit;                                           // 0x41E8(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    BackAttackrHit;                                          // 0x4338(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    ElementSpread;                                           // 0x4488(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    ProjectileInWater;                                       // 0x45D8(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		float                                                      WeaponRollThreshold;                                     // 0x4728(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4U1S[0x4];                                   // 0x472C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBHitCameraShakeSetting>                    HitCameraShakeList;                                      // 0x4730(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    RollDodgeSuccessEffect;                                  // 0x4740(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    StepDodgeSuccessEffect;                                  // 0x4890(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    DodgeAttackAfterDodgeSucceeded;                          // 0x49E0(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         DodgeSuccessMaterialCurve;                               // 0x4B30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBEffectSetting                                    Resurrection;                                            // 0x4B38(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    ResurrectionComp;                                        // 0x4C88(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    BuffAuraATKEffect;                                       // 0x4DD8(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    BuffAuraDEFEffect;                                       // 0x4F28(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    EnemySpawnEffect;                                        // 0x5078(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    AerialAttackBonusEffect;                                 // 0x51C8(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    m_ClassLevelUpEffect;                                    // 0x5318(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    m_AdventurerRankUpEffect;                                // 0x5468(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<ESBWeaponType, struct FSBBattleScoreWeaponEffectSetting> BattleScoreWeaponEffectMap;                              // 0x55B8(0x0050) Edit, EditFixedSize, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UClass*                                              AttributeSlashDiskList;                                  // 0x5608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     SlashDiskParticle_None;                                  // 0x5610(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     SlashDiskParticle_Earth;                                 // 0x5618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     SlashDiskParticle_Fire;                                  // 0x5620(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     SlashDiskParticle_Ice;                                   // 0x5628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     SlashDiskParticle_Thunder;                               // 0x5630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     SlashDiskParticle_Light;                                 // 0x5638(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     SlashDiskParticle_Darkness;                              // 0x5640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     SlashDiskParticle_GlitterMode;                           // 0x5648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      SlashDiskSpeedRateMin;                                   // 0x5650(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z7DM[0x4];                                   // 0x5654(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectSetting                                    SpecialGaugeFull;                                        // 0x5658(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    ImagineGaugeFull;                                        // 0x57A8(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBPlayerWarpEffect                                 m_WarpInEffect;                                          // 0x58F8(0x00A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBPlayerWarpEffect                                 m_RespawnInEffect;                                       // 0x59A0(0x00A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBPlayerWarpEffect                                 m_EngramCannonGetOffEffect;                              // 0x5A48(0x00A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBPlayerWarpEffect                                 m_WarpOutEffect;                                         // 0x5AF0(0x00A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBPlayerWarpEffect                                 m_DeathOutEffect;                                        // 0x5B98(0x00A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBPlayerWarpEffect                                 m_FallDeathOutEffect;                                    // 0x5C40(0x00A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBPlayerWarpEffect                                 m_EngramCannonGetOnEffect;                               // 0x5CE8(0x00A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    m_WarpShowEffect;                                        // 0x5D90(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		float                                                      m_WarpShowEffectDeactivateDelayTime;                     // 0x5EE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_45U5[0x4];                                   // 0x5EE4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerWarpEffect                                 m_BattleNPCWarpInEffect;                                 // 0x5EE8(0x00A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FSBEffectSetting>                            DashEffectList;                                          // 0x5F90(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         m_FootprintDecalOpaictyCurve;                            // 0x5FA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MeshLODOffsetBoundSize;                                  // 0x5FA8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2B01[0x8];                                   // 0x5FAC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_PlayerFootprintParticleLOD;                            // 0x5FB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_NPCFootprintParticleLOD;                               // 0x5FB8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_EnemyFootprintParticleLOD;                             // 0x5FBC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    m_DefaultFootprintParticleLOD;                           // 0x5FC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F2F9[0x70];                                  // 0x5FC4(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CullDistanceDefault;                                     // 0x6034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CullDistanceProjectile;                                  // 0x6038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GQDM[0x3C];                                  // 0x603C(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_ShaderParamChangeTime;                                 // 0x6078(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M7TN[0x4];                                   // 0x607C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectSetting                                    DebugAxisEffect;                                         // 0x6080(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		class UParticleSystemComponent* SpawnSlashDisk(class USBAnimNotifyState_SlashDisk* NotifyState, class ACharacter* OwnerCharacter, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, class UClass* InAttributeSlashDiskList);
		void SetVFXSetting(ESBBattleEffectVisibleCategory Category, ESBBattleEffectVisibleType Type, bool bVisible);
		void SetVFXCustomMode(bool bCustom);
		void SetFootprintTestOverrideMaterial(EPhysicalSurface SurfaceType);
		void SetEffectAlphaValue_PlayerSelf(int32_t AlphaValue);
		void SetEffectAlphaValue_PlayerParty(int32_t AlphaValue);
		void SetEffectAlphaValue_PlayerOther(int32_t AlphaValue);
		void SetBattleScoreWeaponEffectVisibleType_Self(ESBBattleScoreWeaponEffectVisibleType VisibleType);
		void SetBattleScoreWeaponEffectVisibleType_Other(ESBBattleScoreWeaponEffectVisibleType VisibleType);
		void SetBattleImagineTransparent_PlayerSelf(bool bIsTransparent);
		void SetBattleImagineTransparent_PlayerParty(bool bIsTransparent);
		void SetBattleImagineTransparent_PlayerOther(bool bIsTransparent);
		void ClearFootprintTestOverrideMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEffectManagerFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEffectManagerFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void UpdateEffectVisibility();
		class UNiagaraComponent* SpawnNiagaraAttached(const struct FSBSpawnNiagaraAttachedParam& SpawnNiagaraParam);
		class UNiagaraComponent* SpawnNiagaraAtLocation(const struct FSBSpawnNiagaraAtLocationParam& SpawnNiagaraParam);
		class UParticleSystemComponent* SpawnFootprintEffectAtLocation(const struct FSBSpawnEmitterAtLocationParam& SpawnEmitterParam, class USBSurfaceFootprintSetting* SurfaceFootprintSetting, EPhysicalSurface SurfaceType);
		class UParticleSystemComponent* SpawnEmitterAttached_Simple(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, ESBEffectVisibleType VisibleType);
		class UParticleSystemComponent* SpawnEmitterAttached(const struct FSBSpawnEmitterAttachedParam& SpawnEmitterParam);
		class UParticleSystemComponent* SpawnEmitterAtLocation_Simple(class UParticleSystem* EmitterTemplate, class AActor* SourceActor, const struct FVector& Location, ESBEffectVisibleType VisibleType);
		class UParticleSystemComponent* SpawnEmitterAtLocation(const struct FSBSpawnEmitterAtLocationParam& SpawnEmitterParam);
		class UDecalComponent* SpawnDecalAttached_Simple(class UMaterialInterface* DecalMaterial, class USceneComponent* AttachToComponent, ESBEffectVisibleType VisibleType);
		class UDecalComponent* SpawnDecalAttached(const struct FSBSpawnDecalAttachedParam& SpawnDecalParam);
		class UDecalComponent* SpawnDecalAtLocation_Simple(class UMaterialInterface* DecalMaterial, class AActor* SourceActor, const struct FVector& Location, ESBEffectVisibleType VisibleType);
		class UDecalComponent* SpawnDecalAtLocation(const struct FSBSpawnDecalAtLocationParam& SpawnDecalParam);
		void AddSpawnNiagaraList(class UNiagaraComponent* Niagara, class AActor* SourceActor, ESBEffectVisibleType VisibleType, bool bVisibleByHiddenSourceActor, ESBEffectType EffectType);
		void AddSpawnEmitterList(class UParticleSystemComponent* ParticleSystem, class AActor* SourceActor, ESBEffectVisibleType VisibleType, bool bVisibleByHiddenSourceActor, ESBEffectType EffectType);
		void AddSpawnDecalList(class UDecalComponent* Decal, class AActor* SourceActor, ESBEffectVisibleType VisibleType, bool bVisibleByHiddenSourceActor, ESBEffectType EffectType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEffectActorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEffectActorInterface : public UInterface
	{
	public:
		bool IsDisableHidden_AttachOwnerTransparent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEffectValueComponent
	 * Size -> 0x0070 (FullSize[0x0128] - InheritedSize[0x00B8])
	 */
	class USBEffectValueComponent : public UActorComponent
	{
	public:
		struct FSBNotifyEffectValue                                NotifyConfig;                                            // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      InitialValue;                                            // 0x00BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             AttackCollisionScale;                                    // 0x00C0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             AttackCollision;                                         // 0x00CC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             AttackCollisionOffset;                                   // 0x00D8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ODM0[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AActor>>                       SpawnEffectActor;                                        // 0x00E8(0x0010) ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               SpawnOwner;                                              // 0x00F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               SpawnRootOwner;                                          // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CollisionStartTime;                                      // 0x0108(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BeamBeginLocation;                                       // 0x010C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BeamEndLocation;                                         // 0x0118(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBEffectVisibleType                                       EffectVisibleType;                                       // 0x0124(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZH7O[0x3];                                   // 0x0125(0x0003) MISSED OFFSET (PADDING)

	public:
		class AActor* GetRootEffectOwner();
		class AActor* GetProjectileEffectOwner();
		float GetInitialLifeTime();
		ESBEffectVisibleType GetEffectVisibleTypeOnValueComp();
		float GetCollisionStartTime();
		struct FVector GetBeamEndLocation();
		struct FVector GetBeamBeginLocation();
		struct FVector GetAttackCollisionScale();
		struct FVector GetAttackCollisionOffset();
		float GetAttackCollisionFloat();
		struct FVector GetAttackCollision();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEGaugeWidget
	 * Size -> 0x00D0 (FullSize[0x0348] - InheritedSize[0x0278])
	 */
	class USBEGaugeWidget : public UUserWidget
	{
	public:
		class UImage*                                              Current;                                                 // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              GrayOut;                                                 // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              Icon;                                                    // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<ESBAttribute, class UTexture2D*>                      GaugeImage;                                              // 0x0290(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		TMap<ESBAttribute, class UTexture2D*>                      IconImage;                                               // 0x02E0(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           DefaultGaugeSize;                                        // 0x0330(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DWO3[0x10];                                  // 0x0338(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetDefaultGaugeSize(const struct FVector2D& InDefaultGaugeSize);
		void OnUpdate();
		void OnPlayAnimNormal();
		void OnPlayAnimBlink();
		float GetTime();
		float GetGaugeRate(float Value);
		float GetGaugeLVRate(int32_t Level);
		float GetCurrentGaugeRate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBElementDamageInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBElementDamageInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBElementGaugeWidget
	 * Size -> 0x0030 (FullSize[0x02A8] - InheritedSize[0x0278])
	 */
	class USBElementGaugeWidget : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     SWGauge;                                                 // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEGaugeWidget*                                     EGauge;                                                  // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBurstBonusGaugeWidget*                            BurstBonusGauge;                                         // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           DefaultGaugeSize;                                        // 0x0290(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DNWU[0x10];                                  // 0x0298(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetupElementalGauge();
		void SetupBurstBonusGauge();
		void Setup(class ASBCharacter* InCharacter);
		void Reset();
		void OnUnbind(class ASBCharacter* InCharacter);
		void OnBind(class ASBCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBElementTypeInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBElementTypeInterface : public UInterface
	{
	public:
		void SetElementType(ESBAttribute ElementType);
		ESBAttribute GetElementType();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterTypeBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBEncounterTypeBase : public UObject
	{
	public:
		class ASBEncounterVolume*                                  OwnerVolume;                                             // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterType_Event
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBEncounterType_Event : public USBEncounterTypeBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterType_Infinite
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBEncounterType_Infinite : public USBEncounterTypeBase
	{
	public:
		bool                                                       bBeginPlayToStart : 1;                                   // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KO19[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StartSpawnDelay;                                         // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableSpawnMax : 1;                                     // 0x0038(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GBPG[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpawnMax;                                                // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBSpawnFailedProcessType                                  FailedProcessType;                                       // 0x0040(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U9FG[0x17];                                  // 0x0041(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        StartTimerHandle;                                        // 0x0058(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        RequestTimerHandle;                                      // 0x0060(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetSpawnMax(bool Sw, int32_t MaxNum);
		void OnStopSpawn();
		void OnStartSpawn();
		void OnRequestSpawn(class ASBEncounterVolume* EncounterVolume);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterType_NFTArea
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBEncounterType_NFTArea : public USBEncounterTypeBase
	{
	public:
		unsigned char                                              UnknownData_7A16[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFinishEnemyWaveDelegate;                               // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void OnWaveFinished();
		void OnStopSpawn();
		bool OnStartSpawn();
		void OnFinishEnemyWaveDelegate__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterType_Pacing
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBEncounterType_Pacing : public USBEncounterTypeBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterType_Spawnable
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class USBEncounterType_Spawnable : public USBEncounterTypeBase
	{
	public:
		bool                                                       UnknownData_RB7S : 1;                                    // 0x0030(0x0001) BIT_FIELD (PADDING)
		bool                                                       bEnableSpawnMax : 1;                                     // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HXIT[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpawnMax;                                                // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MWDC[0x10];                                  // 0x0038(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnSpawn();
		void OnCooldownFinished(class ASBEncounterVolume* EncounterVolume);
		bool IsSpawnable();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterType_Trigger
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBEncounterType_Trigger : public USBEncounterTypeBase
	{
	public:
		bool                                                       bTriggerOnce : 1;                                        // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EMKA[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterVolume
	 * Size -> 0x0098 (FullSize[0x02F8] - InheritedSize[0x0260])
	 */
	class ASBEncounterVolume : public AVolume
	{
	public:
		TArray<class ASBSpawnArea*>                                SpawnAreas;                                              // 0x0260(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected
		struct FAIFwParameterizedBTRequest                         SpawnQuery;                                              // 0x0270(0x0018) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		class USBSpawnSourceComponent*                             SpawnSourceComponent;                                    // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEncounterTypeBase*                                EncounterType;                                           // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpawnEvenIfRemaining;                                   // 0x0298(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JJSG[0x3];                                   // 0x0299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CooldownTime;                                            // 0x029C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      SpawnedActors;                                           // 0x02A0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J9GE[0x8];                                   // 0x02B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        CooldownFinishTimerHandle;                               // 0x02B8(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        RequestSpawnTimerHandle;                                 // 0x02C0(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnCooldownDelegate;                                      // 0x02C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActorSpawnedDelegate;                                  // 0x02D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActorDestroyedDelegate;                                // 0x02E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void StopSpawn();
		void SBOnDestroyedSpawnedDelegate__DelegateSignature(class AActor* Actor);
		void SBOnActorSpawnedDelegate__DelegateSignature(class AActor* Actor);
		void RequestSpawn();
		void RequestActivate();
		void OnCooldownDelegate__DelegateSignature(class ASBEncounterVolume* EncounterVolume);
		void OnActorDestroyed(class AActor* Actor);
		void DeleteSpawnedEnemies();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterVolumePreviewComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBEncounterVolumePreviewComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_ZDD1[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncounterVolumeRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBEncounterVolumeRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_TVO7[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEncryptor
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEncryptor : public UBlueprintFunctionLibrary
	{
	public:
		class FString EncryptNew(const class FString& InputString, const class FString& Key);
		class FString Encrypt(const class FString& InputString, const class FString& Key);
		class FString DecryptNew(const class FString& InputString, const class FString& Key);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyAbilitySystemComponent
	 * Size -> 0x0050 (FullSize[0x1360] - InheritedSize[0x1310])
	 */
	class USBEnemyAbilitySystemComponent : public UAbilitySystemComponent
	{
	public:
		unsigned char                                              UnknownData_LFU8[0x30];                                  // 0x1310(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AttackAbilityClass;                                      // 0x1340(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              MovementAbilityClass;                                    // 0x1348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              AttackCancelAbilityClass;                                // 0x1350(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QSTV[0x8];                                   // 0x1358(0x0008) MISSED OFFSET (PADDING)

	public:
		void DrawDebugMessages();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyActionParamComponent
	 * Size -> 0x01D0 (FullSize[0x0288] - InheritedSize[0x00B8])
	 */
	class USBEnemyActionParamComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_58BQ[0x80];                                  // 0x00B8(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              BlendActionSettings[0x50];                               // 0x0138(0x0050) UNKNOWN PROPERTY: MapProperty
		class UDataTable*                                          ActionTableNormalMode;                                   // 0x0188(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          ActionTableBattleMode;                                   // 0x0190(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          ActionTableExtra;                                        // 0x0198(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X3CI[0xD0];                                  // 0x01A0(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEnemyChantEffectMotionStoredAddress>      ChantEffectMotionStoredAddressArray;                     // 0x0270(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FName                                                ActionStateMachineKeyName;                               // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetRecastTime(const class FName& ActionName, float RecastTime);
		bool IsCommandRecasting(const class FName& ActionName);
		void InitializeToBattle();
		float GetActionRecastTime(const class FName& ActionName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyAnimationSamplingLevelScriptActor
	 * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
	 */
	class ASBEnemyAnimationSamplingLevelScriptActor : public ASBAnimationSamplingLevelScriptActor
	{
	public:
		void InitializeSpawnedEnemyForEditor(class ASBEnemyCharacter* SpawnedEnemy);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyAnimUpdateRateSignificanceManagerComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBEnemyAnimUpdateRateSignificanceManagerComponent : public UActorComponent
	{
	public:
		float                                                      CameraYawAngleThreshold;                                 // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AnimUpdateDistanceThreshold;                             // 0x00BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyAssetLoadComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBEnemyAssetLoadComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_GSIR[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      LoadEnemyIds;                                            // 0x00D8(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyAttributeAdditionalSettingComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBEnemyAttributeAdditionalSettingComponent : public UActorComponent
	{
	public:
		TArray<struct FSBHitDirectionResistanceCorrection>         HitDirectionResistanceCorrection;                        // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBCollisionGroupResistanceCorrection>       CollisionGroupResistanceCorrection;                      // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5GHZ[0x10];                                  // 0x00D8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyAvatarComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBEnemyAvatarComponent : public UActorComponent
	{
	public:
		class USBEnemyAvatarComponent*                             Master;                                                  // 0x00B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USBEnemyAvatarComponent*>                     Avatars;                                                 // 0x00C0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBadZoneAvoidanceComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBEnemyBadZoneAvoidanceComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_XJQO[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBadZoneAvoidance;                                    // 0x00C8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D86C[0x7];                                   // 0x00C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBBadZoneAvoidanceAngle>                    BadZoneAvoidanceAngleArray;                              // 0x00D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      BadZoneRotationRate;                                     // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowBZADebug;                                           // 0x00E4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BRL0[0x3];                                   // 0x00E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BZAArrowSize;                                            // 0x00E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BZAAreaLength;                                           // 0x00EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UArrowComponent*                                     BZAMovementArrow;                                        // 0x00F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UArrowComponent*                                     BZACharacterArrow;                                       // 0x00F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UArrowComponent*                                     BZAControllRotaionArrow;                                 // 0x0100(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBattleConditionComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBEnemyBattleConditionComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_26SW[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ToNormalMode;                                            // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ToBattleMode;                                            // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N7AR[0x18];                                  // 0x00E8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsBattleMode;                                           // 0x0100(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsInstantBattleTransition;                              // 0x0101(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bResetBattleSequenceToNormal;                            // 0x0102(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IAM3[0x5];                                   // 0x0103(0x0005) MISSED OFFSET (PADDING)

	public:
		void SetBattleMode(bool bInValue, bool bInstantTransition);
		void MulticastInitializeToNormal();
		void MulticastInitializeToBattle();
		void ModeChangeSignature__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBattleNormalBossComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBEnemyBattleNormalBossComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnBattleStartDelegate;                                   // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleEndDelegate;                                     // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                BossAreaTag;                                             // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLastBossArea;                                           // 0x00E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KX15[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetCleared(bool Sw);
		void SetBossAreaTag(const class FName& AreaTag);
		void OnBossBattleStartDelegate__DelegateSignature();
		void OnBossBattleEndDelegate__DelegateSignature();
		bool IsStandby();
		bool IsLastBossArea();
		bool IsCleared();
		bool IsBattle();
		class FName GetBossAreaTag();
		bool CheckMoveToBossAreaBattle();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBattlePartTransition
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USBEnemyBattlePartTransition : public UObject
	{
	public:
		bool                                                       bNeedsToIdle : 1;                                        // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bEnableTotalActionCount : 1;                             // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AY9N[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TotalActionNum;                                          // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0EE6[0x58];                                  // 0x0030(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBattlePartComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBEnemyBattlePartComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_UU64[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InitPart;                                                // 0x00C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H3ZA[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEnemyBattlePart>                          BattleParts;                                             // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class FName>                                        IgnoreActionNames;                                       // 0x00D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FELR[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBEnemyBattlePartTransition*                        Transition;                                              // 0x00F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBDFObjectProjectileInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBBDFObjectProjectileInterface : public UInterface
	{
	public:
		void Detach();
		void Destroy();
		void Attach(const class FString& SocketName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBDFObjectComponent
	 * Size -> 0x0028 (FullSize[0x00E0] - InheritedSize[0x00B8])
	 */
	class USBEnemyBDFObjectComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUpdateStateDelegate;                                   // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bDeployed;                                               // 0x00C8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5JCC[0x7];                                   // 0x00C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBEnemyBDFObjectManagerComponent*                   BDFObjectManagerCompoennt;                               // 0x00D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      InitialHitPoint;                                         // 0x00D8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxHitPoint;                                             // 0x00DC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetStatusParameter(float NewInitialHitPoint, float NewMaxHitPoint);
		void SetDeployed(bool bNewDeployed);
		void OnUpdateStateDelegate__DelegateSignature();
		void OnRep_Deployed();
		bool IsTargetableEnabled();
		bool IsDamageCollisionEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBDFObjectManagerComponent
	 * Size -> 0x0178 (FullSize[0x0230] - InheritedSize[0x00B8])
	 */
	class USBEnemyBDFObjectManagerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPartsBreakInfoUpdateDelegate;                          // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<ESBBDFObjectType, struct FSBBDFObjectCommonTypeInfo>  CommonTypeInfo;                                          // 0x00C8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBDFObjectParts>                           BDFObjectPartsList;                                      // 0x0118(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FSBBDFObjectDeployInfo                              DeployInfo;                                              // 0x0128(0x0030) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBBDFObjectExtraPartsInfo                          ExtraPartsInfo;                                          // 0x0158(0x0030) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    NumRedBlackParts;                                        // 0x0188(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IIMA[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBBDFObjectPartsHealEffectInfo                     PartsHealEffectInfo;                                     // 0x0190(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FString                                              BDFObjectEnemyID;                                        // 0x01E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0566[0x18];                                  // 0x01F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBProjectileSelectHandle                           ProjectileSelfDamage;                                    // 0x0208(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GH8S[0x8];                                   // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBBDFObjectManagerState                                   State;                                                   // 0x0228(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4FZR[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (PADDING)

	public:
		void ToNormal();
		void ToMeleeStance();
		void SpawnPartsHealEffect();
		void RegisterBDFObjectProjectile(class AActor* Projectile);
		void OnRep_State();
		void OnRep_BDFObjectPartsList();
		void OnPartsBreakInfoUpdateDelegate__DelegateSignature(const class FName& CollisionGroupName, class UParticleSystem* PSTemplate);
		void OnInhaledBDFObjectIntoSphere();
		void OnDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		bool IsAllPartsBroken();
		ESBBDFObjectType GetPartsTypeByIndex(int32_t Index);
		TArray<struct FSBBDFObjectParts> GetBDFObjectPartsList();
		void FeedBackDamage();
		void EndDeployBDFObject();
		void EndCollectBDFObject();
		void DrawRedBlackPartsLottery();
		void BeginDeployBDFObject();
		void BeginCollectBDFObject();
		void ActivateExtraParts();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBlendSpaceInputComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBEnemyBlendSpaceInputComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_3I4D[0x28];                                  // 0x00B8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       UnknownData_EC2L : 1;                                    // 0x00E0(0x0001) BIT_FIELD (PADDING)
		bool                                                       bIsEnableTurnInput : 1;                                  // 0x00E0(0x0001) BIT_FIELD Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MCYH[0x3];                                   // 0x00E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeltaTurn;                                               // 0x00E4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VKP8[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (PADDING)

	public:
		bool IsEnableTurnInput();
		bool IsEnableMovementInput();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBPFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEnemyBPFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void WaitForAnimationTag(class UObject* WorldContextObject, class ASBEnemyCharacter* EnemyCharacter, const class FString& AnimTag, bool bIsEqual, const struct FLatentActionInfo& LatentInfo);
		class ASBEnemyCharacter* SpawnEnemyWithEnemyID(class UObject* WorldContextObject, const class FString& EnemyId, int32_t Level, const class FName& Specifier, const struct FVector& Location, const struct FRotator& Rotation);
		void SpawnEnemyWithEncounterVolume(class UObject* WorldContextObject, class ASBEncounterVolume* EncounterVolume);
		void RunAITask(class UAITask* Task);
		bool OverridePartyIdForPriorityTarget(class AController* Controller);
		void NotifyPhaseProgression(class ASBEnemyCharacter* Enemy, int32_t PhaseNum);
		class UAITask* NewAITask(class AAIController* OwnerAI, class UClass* TaskClass, unsigned char InPriority);
		bool IsUnmovable(class ASBCharacter* Character);
		int32_t GetEnemysWithTag(class UObject* WorldContextObject, const class FName& Tag, TArray<class ASBEnemyCharacter*>* EnemyList);
		float GetAttackMaxRange(class ASBEnemyCharacter* Enemy, const class FName& Command);
		class FString ComplementEnemyId(const class FString& InEnemyId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyBuddyRevivalComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBEnemyBuddyRevivalComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JOB1[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ResurrectionAttackID;                                    // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuddyRevivalWaitTime;                                    // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRevivalable;                                            // 0x00D0(0x0001) Edit, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B4QC[0x17];                                  // 0x00D1(0x0017) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyChantComponent
	 * Size -> 0x00A0 (FullSize[0x02C8] - InheritedSize[0x0228])
	 */
	class USBEnemyChantComponent : public USBCharacterChantBaseComponent
	{
	public:
		unsigned char                                              UnknownData_8GDO[0x30];                                  // 0x0228(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class USBEnemyChantMarkerManagerComponent>  pMarkerManagerComponent;                                 // 0x0258(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AE5T[0x68];                                  // 0x0260(0x0068) MISSED OFFSET (PADDING)

	public:
		void BeginChant();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyChantEffectInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEnemyChantEffectInterface : public UInterface
	{
	public:
		void UpdateChantRate(float ChantRate);
		void OnEndChant();
		void OnAbortChant();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyMarkerManagerComponent
	 * Size -> 0x0090 (FullSize[0x0148] - InheritedSize[0x00B8])
	 */
	class USBEnemyMarkerManagerComponent : public UActorComponent
	{
	public:
		TArray<struct FSBEnemyChantMarkerStruct>                   m_MarkerList;                                            // 0x00B8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBEnemyChantMarkerStruct>                   m_ParabolaMarkerList;                                    // 0x00C8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBMarkerTargetInfo>                         TargetInfos;                                             // 0x00D8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2I7U[0x60];                                  // 0x00E8(0x0060) MISSED OFFSET (PADDING)

	public:
		void PostSpawnChantProjectileRPC_32bit(uint32_t SerializedData);
		void PostSpawnChantProjectileRPC_16bit(uint16_t SerializedData);
		void PostSpawnChantProjectileRPC(uint64_t HandleUniqueID, unsigned char NotifyID, bool bIsChantAction);
		void OnRep_TargetInfos();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyChantMarkerManagerComponent
	 * Size -> 0x0070 (FullSize[0x01B8] - InheritedSize[0x0148])
	 */
	class USBEnemyChantMarkerManagerComponent : public USBEnemyMarkerManagerComponent
	{
	public:
		TArray<struct FSBEnemyChantMarkerStruct>                   m_ChantMarkerList;                                       // 0x0148(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RWD3[0x60];                                  // 0x0158(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyCreationCharacter
	 * Size -> 0x0020 (FullSize[0x1010] - InheritedSize[0x0FF0])
	 */
	class ASBEnemyCreationCharacter : public ASBCharacter
	{
	public:
		unsigned char                                              UnknownData_TT2P[0x8];                                   // 0x0FF0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharaPartsFaceComponent*                          FaceComp;                                                // 0x0FF8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBCharaCreateComponent*                             CharaCreateComponent;                                    // 0x1000(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BKGY[0x8];                                   // 0x1008(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyCharacter
	 * Size -> 0x07B0 (FullSize[0x17C0] - InheritedSize[0x1010])
	 */
	class ASBEnemyCharacter : public ASBEnemyCreationCharacter
	{
	public:
		unsigned char                                              UnknownData_7GSE[0x178];                                 // 0x1010(0x0178) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBEnemyMetaInfo*                                    MetaInfo;                                                // 0x1188(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZGTH[0x4];                                   // 0x1190(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxStaminaEasyCBT;                                       // 0x1194(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxStaminaNormalCBT;                                     // 0x1198(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxStaminaHardCBT;                                       // 0x119C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StaminaRecoverySpeedEasyCBT;                             // 0x11A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StaminaRecoverySpeedNormalCBT;                           // 0x11A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StaminaRecoverySpeedHardCBT;                             // 0x11A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7TL6[0x1];                                   // 0x11AC(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsInvincibleMode;                                       // 0x11AD(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAutoHealMode;                                         // 0x11AE(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E9DE[0x1];                                   // 0x11AF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBEnemyDeathEffectComponent*                        DeathEffectComp;                                         // 0x11B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ReceiveDeadFast;                                         // 0x11B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BOZR[0x7];                                   // 0x11B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFadeOutDeath;                                          // 0x11C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBEnemyTideComponent*                               TideComp;                                                // 0x11D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyExitEffectComponent*                         ExitEffectComp;                                          // 0x11D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PZVD[0x4];                                   // 0x11E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WeightBias;                                              // 0x11E4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5ULV[0x4];                                   // 0x11E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                EnemyContentId;                                          // 0x11EC(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DungeonPlayerNum;                                        // 0x11F4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_93YN[0x41];                                  // 0x11F8(0x0041) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCumulateEnemy;                                          // 0x1239(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3IYR[0x6];                                   // 0x123A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnEnemyTakeAnyDamage;                                    // 0x1240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FString                                              EnemyId;                                                 // 0x1250(0x0010) Edit, BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EnemyAppearanceId;                                       // 0x1260(0x0010) BlueprintVisible, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          EnemyActionParamTable;                                   // 0x1270(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBEnemyBadZoneAvoidanceComponent*                   BadZoneAvoidanceComp;                                    // 0x1278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyPhaseComponent*                              PhaseComp;                                               // 0x1280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyModifierComponent*                           ModifierComp;                                            // 0x1288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyActionParamComponent*                        ActionParamComp;                                         // 0x1290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyBattleConditionComponent*                    BattleConditionComp;                                     // 0x1298(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyBlendSpaceInputComponent*                    BlendSpaceInputComp;                                     // 0x12A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyPartsManagerComponent*                       PartsManagerComp;                                        // 0x12A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyTargetingComponent*                          TargetingComp;                                           // 0x12B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAdjustRootMotionComponent*                        AdjustRootMotionComp;                                    // 0x12B8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyStanceComponent*                             StanceComp;                                              // 0x12C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemySummonComponent*                             SummonComponent;                                         // 0x12C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyChantMarkerManagerComponent*                 MarkerManagerComp;                                       // 0x12D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemySenseChangerComponent*                       SenseChangerComp;                                        // 0x12D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyDropComponent*                               EnemyDropComp;                                           // 0x12E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBDelegateHitAuthComponent*                         DelegateHitAuthComp;                                     // 0x12E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCharacterAnimationSamplingComponent*              AnimationSamplingComp;                                   // 0x12F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBStateInitializerComponent*                        StateInitializerComponent;                               // 0x12F8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyCollisionHitComponent*                       CollisionHitComp;                                        // 0x1300(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCharacterChanceTimeDownComponent*                 ChanceTimeDownComp;                                      // 0x1308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyDxBattleComponent*                           EnemyDxBattleComp;                                       // 0x1310(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAbilitySystemComponent*                             AbilitySystemComp;                                       // 0x1318(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyConditionalVoiceComponent*                   ConditionalVoiceComp;                                    // 0x1320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBExecDelegateWithConditionComponent*               ExecDelegateWithConditionComp;                           // 0x1328(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyBuddyRevivalComponent*                       BuddyRevivalComp;                                        // 0x1330(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyStateMachineReplayComponent*                 StateMachineReplayComp;                                  // 0x1338(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCharacterLoopCounterComponent*                    ActionUniqueCounterComp;                                 // 0x1340(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemySpecializerComponent*                        EnemySpecializerComponent;                               // 0x1348(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BUS1[0x60];                                  // 0x1350(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharacterAnimationSamplingAsset*                  AnimationSamplingAsset;                                  // 0x13B0(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseLocalTestParameter;                                  // 0x13B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5KNU[0x7];                                   // 0x13B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    EnemyLevel;                                              // 0x13C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZS9Q[0x1D];                                  // 0x13C4(0x001D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       PtAlt;                                                   // 0x13E1(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9AYK[0x6];                                   // 0x13E2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 PtAltEffectDefaultRow;                                   // 0x13E8(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UDataTable*                                          PtAltEffectDataTable;                                    // 0x13F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JCWB[0x28];                                  // 0x1400(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsBoss;                                                  // 0x1428(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q65P[0x3];                                   // 0x1429(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ElementDamageBias;                                       // 0x142C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ResistRate;                                              // 0x1430(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ResistDot;                                               // 0x1434(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                DungeonAttribute;                                        // 0x1438(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBBattleStatusResistanceSetting>            BattleStatusResistanceList;                              // 0x1440(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AAI7[0x4];                                   // 0x1450(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCanBeParalyzed;                                         // 0x1454(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeedsToShowElementalBurstEffects;                       // 0x1455(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H7LP[0x2];                                   // 0x1456(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAddActorTagByEnemySet;                                 // 0x1458(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                ActorTagByEnemySet;                                      // 0x1468(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    EnemyLibActiveTime;                                      // 0x1470(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsNonActive;                                            // 0x1474(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QQTP[0x3];                                   // 0x1475(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HitpointToBlockDamage;                                   // 0x1478(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GDNY[0x54];                                  // 0x147C(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTacticalSkillInfo>                          TacticalSkillInfos;                                      // 0x14D0(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    TacticalSkillDebugMode;                                  // 0x14E0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TempAimBSY;                                              // 0x14E4(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TempAimBSX;                                              // 0x14E8(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SpawnLocation;                                           // 0x14EC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            SpawnRotation;                                           // 0x14F8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FName                                                SpawnEffectSocketName;                                   // 0x1504(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             SpawnEffectAttachOffset;                                 // 0x150C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             SpawnEffectScale;                                        // 0x1518(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpawnEffectEnabled;                                     // 0x1524(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsCalcEffectScaleByBoundingBox;                         // 0x1525(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2A0G[0x2];                                   // 0x1526(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BattleStatusEffectScale;                                 // 0x1528(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FQN2[0x4];                                   // 0x152C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     OrderedAttackParticle;                                   // 0x1530(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                OrderedAttackParticleSocketName;                         // 0x1538(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            OrderedAttackParticleCompnent;                           // 0x1540(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bOrderedAttackParticlePlay;                              // 0x1548(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bEnableMountOverlap;                                     // 0x1549(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EU98[0xAA];                                  // 0x154A(0x00AA) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsDebugMode;                                            // 0x15F4(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OBT8[0x3];                                   // 0x15F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              StateMachine[0x28];                                      // 0x15F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnimationSet[0x28];                                      // 0x1620(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UpperBodyStateMachine[0x28];                             // 0x1648(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_UH22[0x18];                                  // 0x1670(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RepActionIndex;                                          // 0x1688(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SF0H[0x4];                                   // 0x168C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              TargetActorCache;                                        // 0x1690(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCustomFlagInfo>                             CustomFlagInfos;                                         // 0x1698(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4URG[0x4];                                   // 0x16A8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   CustomFlags;                                             // 0x16AC(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsSummonEnemy;                                          // 0x16B0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OSRB[0x7];                                   // 0x16B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              OrderedTarget;                                           // 0x16B8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnBuddyDelegate;                                         // 0x16C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class APawn*                                               BuddyCharacter;                                          // 0x16D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBuddy;                                                  // 0x16D8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDisableBuddyHPGauge;                                    // 0x16D9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZZA0[0x6];                                   // 0x16DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               MasterPawn;                                              // 0x16E0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBElementDamageSetting                             DefaultAttackElement;                                    // 0x16E8(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TTL0[0x10];                                  // 0x16F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDodging;                                                // 0x1708(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBPerceiveLevel                                           DefaultDodgeLevel;                                       // 0x1709(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bJumping;                                                // 0x170A(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideCameraTransparentCheckDistance;                 // 0x170B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBCameraShieldingTransparentParam                  CameraShieldingTransparentParam;                         // 0x170C(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XSU9[0xC];                                   // 0x1714(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ImagineAIControllerClass;                                // 0x1720(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MZ1B[0x10];                                  // 0x1728(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              InitializeAnchor1;                                       // 0x1738(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              IFPAnchor1;                                              // 0x1740(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              ActivateAnchor1;                                         // 0x1748(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UFZZ[0x20];                                  // 0x1750(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEnemyWarpEffectInfo>                      WarpEffectInfoList;                                      // 0x1770(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H0CH[0x8];                                   // 0x1780(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<unsigned char>                                      ProcessingAnimNotifyOnServer;                            // 0x1788(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TRT8[0x10];                                  // 0x1798(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAnimNotfyBroadcastDelegate;                            // 0x17A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WBZE[0x4];                                   // 0x17B8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceDivingMaxTime;                                      // 0x17BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateTacticalSkillInfo(const class FString& Command, bool bIsActivated);
		void UpdateMaterialEmissiveColor(bool bResult);
		void UpdateChangedMaterial(bool bResult);
		bool TraceTarget(const struct FVector& TargetLocation);
		void StartAppearingBlindnessTimer();
		void SetLightingChannelsForCapture();
		void SetInvincibleMode(bool InValue);
		void SetEnemyLevel(int32_t Level);
		void SetEnemyID(const class FString& ID);
		void SetEnemyControlDummyTargetEnable(bool InIsEnable);
		void SetCustomFlag(const class FString& FlagName, bool bEnabled);
		void SetAutoHealMode(bool InValue);
		void SelfDeath();
		void RPC_SyncCurrentHitPointOnClientByServer(float HP);
		void RPC_SetHitpointToBlockDamate(float Value);
		void RPC_ExecStartDeathEffect();
		void ResetAllCustomFlags();
		void RecvExecCustomFlag(const class FString& FlagName);
		void RecvExecCustomActionStateEnd(const class FString& ActionName);
		void RecvExecCustomActionStateBegin(const class FString& ActionName);
		void RecvExecCustomAction(const class FString& ActionName);
		void ReceiveStartDeathEffect();
		void ReceiveSelfDeath();
		void ReceiveDead();
		void PlayWarpEffect(const struct FVector& From, const struct FVector& To, int32_t NewWarpEffectIndex);
		void PartsBreak(const class FName& PartsName, bool bSoon);
		void OnRep_TacticalSkillDebugMode();
		void OnRep_PtAlt();
		void OnRep_EnemyLevel();
		void OnRep_EnemyId();
		void OnRep_EnemyContentId();
		void OnRep_DungeonPlayerNum();
		void OnRep_DungeonAttribute();
		void OnRep_CustomFlags();
		void OnRep_bIsDebugMode();
		void OnRep_bBuddy();
		void OnRep_ActorTagByEnemySet();
		void OnEnemyMasterDataAvailable();
		void OnBuddyDelegate__DelegateSignature();
		void OnAnimNotifyBroadcastDelegate__DelegateSignature(class ASBEnemyCharacter* Enemy, const class FName& BroadcastString);
		void OnAddActorTagByEnemySet__DelegateSignature(const class FName& ActorTag);
		void NotifyTerminateAsImagine();
		void NotifyPostSpawnProjectile(uint32_t AnimNotifyID);
		void NotifyBossBurstToAllPlayer(ESBAttribute Attribute);
		void MulticastVanishDeath(float WaitTime);
		void MulticastTriggerAnimNotifyByNotifyRuleOnServer(uint16_t AnimSequenceIndex, uint16_t AnimNotifyIndex);
		void MulticastSelfDeath();
		void MulticastOnSpawned(bool bSpawnWithEffect);
		void MulticastNotifyBossBurst();
		void MulticastFadeOutDeath();
		void MulticastExit();
		void MulticastEndExit();
		void MulticastDebugErrorTextOnServer(const class FString& ErrorText, bool ShowErrorText);
		void MulticastDead(bool bInNoPlayerAround);
		void MultiCastChangeVisibility(bool bVisible, ESBActorHiddenType HiddenType);
		bool IsUnableActionCondition();
		bool IsTargetActor(class AActor* Actor);
		bool IsSummonEnemy();
		bool IsSubmargedExit();
		bool IsSABReaction();
		bool IsRunOutOfStamina();
		bool IsPtAlt();
		bool IsNonActive();
		bool IsNamedEnemy();
		bool IsInvincibleMode();
		bool IsInstantBattleTransition();
		bool IsCustomFlagEnabled(const class FString& FlagName);
		bool IsCumulateEnemy();
		bool IsBuddy();
		bool IsBossEnemy();
		bool IsBattle();
		bool IsAutoHealMode();
		void GoAway();
		void GiveStatusAliment(const struct FDataTableRowHandle& StatusHandle);
		void GiveDeactiveStatusAliment(const struct FDataTableRowHandle& StatusHandle);
		class UDataTable* GetVoiceDataTable();
		class UAkComponent* GetVoiceComponent();
		TArray<struct FTacticalSkillInfo> GetTacticalSkillInfos();
		int32_t GetTacticalSkillDebugMode();
		class UASStateMachine* GetStateMachine();
		bool GetIsJustSpawned();
		float GetForceDivingMaxTime();
		int32_t GetEnemyLevel();
		class FString GetEnemyId();
		class FString GetEnemyAppearanceId();
		class UDataTable* GetConditionVoiceDataTable();
		float GetChaseEndRange();
		class UASAnimationSet* GetAnimationSet();
		class UASStateMachine* GetAimStateMachine();
		void ForceDivingDebug();
		void ForceCurrentHitPointReplicated();
		void FadeOutDead();
		void EnemyTakeAnyDamageSignature__DelegateSignature(class ASBEnemyCharacter* DamagedActor, float Damage, const struct FSBDamageEvent& DamageEvent, class AController* InstigatedBy, class AActor* DamageCauser);
		void EnemyFadeOutDeath__DelegateSignature();
		void DebugMulticastHitPointForceSync(float InCurrentHitPoint, float InMaxHitPoint);
		void Dead(bool bInNoPlayerAround);
		void ChangeVisibility(bool bVisible, ESBActorHiddenType HiddenType);
		void CancelGuardBreak();
		void BeginElementBurst(ESBAttribute Attribute);
		void AdjustCurrentStamina(float AddValue, bool bApplyStatusValue);
		void AddActorTagByEnemySet(const class FName& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyCharacterActionViewer
	 * Size -> 0x0020 (FullSize[0x0248] - InheritedSize[0x0228])
	 */
	class ASBEnemyCharacterActionViewer : public AActor
	{
	public:
		unsigned char                                              UnknownData_FBNF[0x20];                                  // 0x0228(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyCharacterAnimInstance
	 * Size -> 0x0078 (FullSize[0x1050] - InheritedSize[0x0FD8])
	 */
	class USBEnemyCharacterAnimInstance : public USBCharacterAnimInstance
	{
	public:
		unsigned char                                              UnknownData_ETBT[0x8];                                   // 0x0FD8(0x0008) Fix Super Size
		unsigned char                                              AnimationSetEnemy[0x28];                                 // 0x0FE0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      Speed;                                                   // 0x1008(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Right;                                                   // 0x100C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             HipVector;                                               // 0x1010(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                HipBone;                                                 // 0x101C(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AimBodyBlendRate;                                        // 0x1024(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnemyTempCounter;                                        // 0x1028(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                PrevSnapshotName;                                        // 0x102C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6FAP[0x1C];                                  // 0x1034(0x001C) MISSED OFFSET (PADDING)

	public:
		class UASStateMachine* GetStateMachine();
		class UASAnimationSet* GetAnimationSet();
		class UASStateMachine* GetAimStateMachine();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyCharacterMovementComponent
	 * Size -> 0x0104 (FullSize[0x0DC0] - InheritedSize[0x0CBC])
	 */
	class USBEnemyCharacterMovementComponent : public USBCharacterMovementComponent
	{
	public:
		float                                                      MaxRunSpeed;                                             // 0x0CBC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDashSpeed;                                            // 0x0CC0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanStrafe;                                              // 0x0CC4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DMN2[0x3];                                   // 0x0CC5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                NormalTurnCommand;                                       // 0x0CC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                BattleTurnCommand;                                       // 0x0CD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z9J2[0x38];                                  // 0x0CD8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StuckThresholdTime;                                      // 0x0D10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1KX3[0x4];                                   // 0x0D14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FallingStackWarpTimerThreshold;                          // 0x0D18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FallingStuckWarpVelocityThreshold;                       // 0x0D1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BP8C[0x90];                                  // 0x0D20(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBEnemyBadZoneAvoidanceComponent*                   BadZoneAvoidanceComp;                                    // 0x0DB0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsStrafing;                                             // 0x0DB8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPerfromingRootMotion;                                 // 0x0DB9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2DRA[0x6];                                   // 0x0DBA(0x0006) MISSED OFFSET (PADDING)

	public:
		void StopRootMotionVelocityRotation();
		void StartRootMotionVelocityRotation(float PitchRate, float MaxPitch);
		void RequestUseControllerRotation(float NewRotationRate, float YawOffset, bool bLimitRotation, const struct FRotator& MinRotation, const struct FRotator& MaxRotation, bool bNoAffectRootMotionVelocity);
		void RequestOrientRotationToMovement();
		bool IsStuck();
		bool IsInTidalArea();
		void DebugDrawPath(TArray<struct FVector> PathPoints, float LifeTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyCheatCommand
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBEnemyCheatCommand : public UObject
	{
	public:
		unsigned char                                              UnknownData_EKDS[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		void SwitchEnemyTacticalSkillDebugMode(int32_t Mode);
		void SwitchEnemyTacticalSkillActivation(const class FString& Command, bool bEnable);
		void SpawnEnemy(const class FString& EnemyId, int32_t Level, const class FName& Specifier);
		void SpawnBuddy(const class FString& EnemyId, int32_t Level);
		void ShowSpawnPointInHabitat(const class FString& HabitatName);
		void ShowSpawnedEnemyNum();
		void ShowEnemyStateMachineTree(const class FName& KeyName);
		void ShowEnemyStateMachineLog();
		void SetTargetEnemyAbility(int32_t InAbilityID, int32_t InTime);
		void SetIMapLayerValueRange(const class FString& LayerName, float MinValue, float MaxValue);
		void SetEnemyRefreshBones(bool bEnable);
		void SetEnemyFieldSpawnRangeFromPlayer(float InRange);
		void SetEnemyFieldSpawnElavationHeightFromPlayer(float InHeight);
		void SetEnemyFieldSpawnElavationAngleFromPlayer(float InAngle);
		void SetEnemyAnimTickPoseAndBone(bool bEnable);
		void SetEnemyAnimationTick(bool bEnable);
		void SetEnemyAlwaysRefreshBones(bool bEnable);
		void ReviveAllBuddies();
		void PlayEnemyAnimation4(const class FString& AnimationFilterName1, const class FString& AnimationFilterName2, const class FString& AnimationFilterName3, const class FString& AnimationFilterName4, bool IsLoop, float PlaySpeed, const class FString& AnimationSearchPath);
		void PlayEnemyAnimation3(const class FString& AnimationFilterName1, const class FString& AnimationFilterName2, const class FString& AnimationFilterName3, bool IsLoop, float PlaySpeed, const class FString& AnimationSearchPath);
		void PlayEnemyAnimation2(const class FString& AnimationFilterName1, const class FString& AnimationFilterName2, bool IsLoop, float PlaySpeed, const class FString& AnimationSearchPath);
		void PlayEnemyAnimation(const class FString& AnimationFilterName1, bool IsLoop, float PlaySpeed, const class FString& AnimationSearchPath);
		void PauseEnemyBehavior();
		void OverrideEnemyDropRatio(ESBEnemyDropItemType DropItemType, float DropRatio);
		void OverrideEnemyBlackBoardVector(const class FString& Key, float X, float Y, float Z);
		void OverrideEnemyBlackBoardString(const class FString& Key, const class FString& NewValue);
		void OverrideEnemyBlackBoardFloat(const class FString& Key, float NewValue);
		void OverrideEnemyBlackBoardBool(const class FString& Key, bool NewValue);
		void KillAllBuddies();
		void HideSpawnPointInHabitat();
		void GiveAllEnemyParalyze();
		class ASBEnemyCharacter* GetPlayerTargetingEnemy();
		void ForceShieldBreak();
		void ForceSetLocationAndMovementModeFallingEnemy(float X, float Y, float Z);
		void ForceChangeFieldEnemyToSubmargedExit();
		void ForceActivateSpawnAction(const class FString& InSpawnActionCommand);
		void EnemySendCommand(const class FName& Command1, const class FName& Command2, const class FName& Command3, const class FName& Command4);
		void EnemyPhaseProgress(int8_t AddPhaseProgress);
		void EnemyInitAnim();
		void EnableEnemyActionViewer(const class FString& EnemyId);
		void DumpEnemyStateMachineLog();
		void DisableEnemyActionViewer();
		void CheckServerLocationAnchor();
		void BDFObjectSpawnSelfDamageProjectile(float Rate);
		void ActivateAction(const class FString& ActivateActionCommand);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyCollisionHitComponent
	 * Size -> 0x0068 (FullSize[0x0120] - InheritedSize[0x00B8])
	 */
	class USBEnemyCollisionHitComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JG33[0x68];                                  // 0x00B8(0x0068) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyConditionalVoiceComponent
	 * Size -> 0x0028 (FullSize[0x00E0] - InheritedSize[0x00B8])
	 */
	class USBEnemyConditionalVoiceComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_WU3N[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBBossWeakConditionCheck                           BossWeakConditionCheck;                                  // 0x00D0(0x000C) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2EVW[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlKeyAction
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBPawnControlKeyAction : public UObject
	{
	public:
		class APawn*                                               Pawn;                                                    // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FR8B[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		class APawn* GetPawn();
		class APlayerController* GetController();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyControlKeyAction_AnimCommand
	 * Size -> 0x0078 (FullSize[0x00B0] - InheritedSize[0x0038])
	 */
	class USBEnemyControlKeyAction_AnimCommand : public USBPawnControlKeyAction
	{
	public:
		struct FSBEnemyCommandSelector                             PressCommand;                                            // 0x0038(0x0018) Deprecated, Protected, NativeAccessSpecifierProtected
		class FString                                              PressCommandString;                                      // 0x0050(0x0010) ZeroConstructor, Deprecated, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBEnemyCommandSelector                             ReleaseCommand;                                          // 0x0060(0x0018) Deprecated, Protected, NativeAccessSpecifierProtected
		class FString                                              ReleaseCommandString;                                    // 0x0078(0x0010) ZeroConstructor, Deprecated, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        PressCommandArray;                                       // 0x0088(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        ReleaseCommandArray;                                     // 0x0098(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bProjectile;                                             // 0x00A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SLYC[0x7];                                   // 0x00A9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyControlKeyAction_ActionCancelAbility
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBEnemyControlKeyAction_ActionCancelAbility : public USBPawnControlKeyAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyControlKeyAction_MoveUp
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBEnemyControlKeyAction_MoveUp : public USBPawnControlKeyAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyControlKeyAction_MoveDown
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBEnemyControlKeyAction_MoveDown : public USBEnemyControlKeyAction_MoveUp
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyControlKeyAction_Strafe
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBEnemyControlKeyAction_Strafe : public USBPawnControlKeyAction
	{
	public:
		unsigned char                                              UnknownData_KG4A[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlSettings
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBPawnControlSettings : public UObject
	{
	public:
		class UClass*                                              ParentClass;                                             // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBPawnControlKeyMapping>                    KeyMappings;                                             // 0x0030(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBPawnControlAxisMapping>                   AxisMappings;                                            // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyControlSettings
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBEnemyControlSettings : public USBPawnControlSettings
	{
	public:
		void SetDamageBlock(float Rate);
		void ChangeControlledEnemy(const class FString& EnemyId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyDeathEffectBase
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBEnemyDeathEffectBase : public UObject
	{
	public:
		bool                                                       bIsEnd;                                                  // 0x0028(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VOTB[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AttributeMaterialParamName;                              // 0x002C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                PreviousAttributeMaterialParamName;                      // 0x0034(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttributeMaterialStartValue;                             // 0x003C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttributeMaterialEndValue;                               // 0x0040(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PreviousAttributeMaterialStartValue;                     // 0x0044(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bActivateAttributeDeathEffect;                           // 0x0048(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7OZJ[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeadCurveValue;                                          // 0x004C(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveTickVanish(float DeltaTime, class ASBEnemyCharacter* OwnerEnemyCharacter);
		void ReceiveTickFadeOut(float DeltaTime, class ASBEnemyCharacter* OwnerEnemyCharacter);
		void ReceiveTick(float DeltaTime, class ASBEnemyCharacter* OwnerEnemyCharacter);
		void ReceiveMaterialUpdated(EDeathEffectType DeathEffectType, class ASBEnemyCharacter* OwnerEnemyCharacter);
		void ReceiveBeginVanish(float WaitTime, class ASBEnemyCharacter* OwnerEnemyCharacter);
		void ReceiveBeginFadeOut(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void ReceiveBegin(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void PlayEffectActor(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void PlayEffect(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void PlayAkEvent(class ASBEnemyCharacter* OwnerEnemyCharacter);
		bool IsDemoPlayingOnClient(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void End();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyDeathEffectComponent
	 * Size -> 0x0110 (FullSize[0x01C8] - InheritedSize[0x00B8])
	 */
	class USBEnemyDeathEffectComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_WVMX[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         FadeInCurve;                                             // 0x00C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<ESBAttribute, struct FSBDeathEffectParams>            DeathEffects;                                            // 0x00D0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<ESBAttribute, class FName>                            DeathMaterialParams;                                     // 0x0120(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              DeathEffectBase;                                         // 0x0170(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsStartWithDeath;                                       // 0x0178(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDeactivateParticleEffects;                              // 0x0179(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2HFO[0x2];                                   // 0x017A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EffectDeactivateThreshold;                               // 0x017C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F04Y[0x8];                                   // 0x0180(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsRunning;                                              // 0x0188(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F0AN[0x7];                                   // 0x0189(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class UMaterialInstanceDynamic>>     DynamicMaterials;                                        // 0x0190(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IGQC[0x8];                                   // 0x01A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDeathEffectType                                           DeathEffectType;                                         // 0x01A8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HNV8[0x7];                                   // 0x01A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBEnemyDeathEffectBase*                             Effect;                                                  // 0x01B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              SpawnedEffectActor;                                      // 0x01B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAttribute                                               DeathElementType;                                        // 0x01C0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAttribute                                               HighestLevelAttributeOnDeath;                            // 0x01C1(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y14C[0x6];                                   // 0x01C2(0x0006) MISSED OFFSET (PADDING)

	public:
		bool StartVanish(float WaitTime);
		bool StartFadeOutEffect();
		bool StartDeathEffect();
		void SetIsStartWithDeath(bool bStartWithDeath);
		void SetDeathEffectClass(class UClass* DeathEffectClass);
		void PlayRespawnEffect_Multicast(const struct FVector& TargetLocation);
		void PlayEffectActor();
		void PlayEffect();
		void PlayAkEvent();
		bool IsStartWithDeath();
		bool IsEffectDeactivate();
		EDeathEffectType GetDeathEffectType();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyDebugActionPlayerComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBEnemyDebugActionPlayerComponent : public UActorComponent
	{
	public:
		bool IsOverrideAttackableArea();
		bool IsBrokenAction();
		class FString GetUpperAngle();
		class FString GetRightAngle();
		class FString GetMinRange();
		class FString GetMaxRange();
		class FString GetLowerAngle();
		class FString GetLeftAngle();
		class FString GetActionName();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyDebugLogStoreComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBEnemyDebugLogStoreComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyDropComponent
	 * Size -> 0x0100 (FullSize[0x01B8] - InheritedSize[0x00B8])
	 */
	class USBEnemyDropComponent : public UActorComponent
	{
	public:
		float                                                      ExpBonus;                                                // 0x00B8(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBEnemyExpBonusScale                               ExpBonusScale[0x4];                                      // 0x00BC(0x0020) Deprecated, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_51PY[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DropTreasureClass;                                       // 0x00E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_216B[0xD0];                                  // 0x00E8(0x00D0) MISSED OFFSET (PADDING)

	public:
		void MulticastDebugLog(ESBEnemyDropLogType logType, class ASBPlayerController* pPlayerController, class ASBPlayerCharacter* pPlayerCharacter, uint16_t Value1, uint16_t Value2);
		void MulticastDebugHudPrint(const class FString& STR, class ASBPlayerCharacter* pPlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyDxBattleComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBEnemyDxBattleComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnServerChangeFocusPlayerDelegete;                       // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GY0J[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          DxBattleTable;                                           // 0x00D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E3SV[0x18];                                  // 0x00D8(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnServerChangeFocusPlayerDelegete__DelegateSignature();
		void OnEnemyTakeDamage(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		bool IsFocusPlayer();
		ESBEnemyWalkingMode GetGateWalkingMode();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyDxBattleNetCullingDamageComponent
	 * Size -> 0x0028 (FullSize[0x00E0] - InheritedSize[0x00B8])
	 */
	class USBEnemyDxBattleNetCullingDamageComponent : public UActorComponent
	{
	public:
		float                                                      EnemyDamageInterval;                                     // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BossEnemyDamage;                                         // 0x00BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpecialEnemyDamage;                                      // 0x00C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OtherEnemyDamage;                                        // 0x00C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    BossEnemyCount;                                          // 0x00C8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    SpecialEnemyCount;                                       // 0x00CC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    OtherEnemyCount;                                         // 0x00D0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    PlayerCount;                                             // 0x00D4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2W8H[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void IncrementSpecialEnemyCount();
		void IncrementPlayerCount();
		void IncrementOtherEnemyCount();
		void IncrementBossEnemyCount();
		void DecrementSpecialEnemyCount();
		void DecrementPlayerCount();
		void DecrementOtherEnemyCount();
		void DecrementBossEnemyCount();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyEmotionComponent
	 * Size -> 0x0010 (FullSize[0x0140] - InheritedSize[0x0130])
	 */
	class USBEnemyEmotionComponent : public USBAIEmotionComponent
	{
	public:
		unsigned char                                              UnknownData_1BFR[0x10];                                  // 0x0130(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyExChantComponent
	 * Size -> 0x01D0 (FullSize[0x0288] - InheritedSize[0x00B8])
	 */
	class USBEnemyExChantComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_VUBD[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBEnemyCharacter*                                   OwnerEnemyCharacter;                                     // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBEnemyActionParamComponent*                        ActionParamComp;                                         // 0x00D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBEnemyBattleConditionComponent*                    BattleConditionComp;                                     // 0x00D8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6W94[0x1A8];                                 // 0x00E0(0x01A8) MISSED OFFSET (PADDING)

	public:
		void BeginChant();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyExitEffectBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBEnemyExitEffectBase : public UObject
	{
	public:
		bool                                                       bIsEnd;                                                  // 0x0028(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8QZL[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExitCurveValue;                                          // 0x002C(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveTick(float DeltaTime, class ASBEnemyCharacter* OwnerEnemyCharacter);
		void ReceiveMaterialUpdated(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void ReceiveBegin(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void PlayEffectActor(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void PlayEffect(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void PlayAkEvent(class ASBEnemyCharacter* OwnerEnemyCharacter);
		bool IsEnd();
		bool IsDemoPlayingOnClient(class ASBEnemyCharacter* OwnerEnemyCharacter);
		void End();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyExitEffectComponent
	 * Size -> 0x0078 (FullSize[0x0130] - InheritedSize[0x00B8])
	 */
	class USBEnemyExitEffectComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_IC3W[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBExitEffectParams                                 ExitEffect;                                              // 0x00C8(0x0048) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              ExitEffectBase;                                          // 0x0110(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDeactivateParticleEffects;                              // 0x0118(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsRunning;                                              // 0x0119(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FDQF[0x6];                                   // 0x011A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBEnemyExitEffectBase*                              Effect;                                                  // 0x0120(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              SpawnedEffectActor;                                      // 0x0128(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetExitEffectClass(class UClass* ExitEffectClass);
		void PlayEffectActor();
		void PlayEffect();
		void PlayAkEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyFanShapeRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBEnemyFanShapeRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_V8CZ[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyFieldSpawner
	 * Size -> 0x00C0 (FullSize[0x02E8] - InheritedSize[0x0228])
	 */
	class ASBEnemyFieldSpawner : public AActor
	{
	public:
		class USBEnemySpawnSystemComponent*                        SpawnSystemComponent;                                    // 0x0228(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEnemyFieldSpawnTideComponent*                     FieldSpawnTideComponent;                                 // 0x0230(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0238(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAIFwParameterizedBTRequest                         FindSpawnPointQuery;                                     // 0x0240(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HI3L[0x90];                                  // 0x0258(0x0090) MISSED OFFSET (PADDING)

	public:
		bool IsCompletedGenerateEnemySpawnPoints();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyFieldSpawnTideComponent
	 * Size -> 0x0058 (FullSize[0x0110] - InheritedSize[0x00B8])
	 */
	class USBEnemyFieldSpawnTideComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ONYT[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartTideDelegate;                                     // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTickTideDelegate;                                      // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFinishTideDelegate;                                    // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X6X8[0x18];                                  // 0x00F8(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnTickTideDelegate__DelegateSignature(class USBEnemyFieldSpawnTideComponent* FieldSpawnTideComp, float TideHeight);
		void OnStartTideDelegate__DelegateSignature(class USBEnemyFieldSpawnTideComponent* FieldSpawnTideComp);
		void OnStartTide();
		void OnFinishTideDelegate__DelegateSignature(class USBEnemyFieldSpawnTideComponent* FieldSpawnTideComp);
		void OnFinishTide();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGuardComponent
	 * Size -> 0x0390 (FullSize[0x0448] - InheritedSize[0x00B8])
	 */
	class USBGuardComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_OGZL[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DurabilityHPScale;                                       // 0x00C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQ8O[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckIntParam>                   GuardShieldDamageModifyList;                             // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      ShieldDurability;                                        // 0x00D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TNO6[0x1];                                   // 0x00DC(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsGuardActive;                                          // 0x00DD(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HSWE[0x2];                                   // 0x00DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GuardDamageRate;                                         // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBDefenceGuardConfig                               DefenceConfig;                                           // 0x00E4(0x000C) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DY61[0x1A];                                  // 0x00F0(0x001A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsTakeStunDamageForceGuardBreak;                        // 0x010A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6UR1[0x1];                                   // 0x010B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceGuardBreakStunDamage;                               // 0x010C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNotCutDamageWhenGuardBreak;                             // 0x0110(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHideShieldWhenGuardBreak;                               // 0x0111(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SJHD[0x6];                                   // 0x0112(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBGuardEffectSetting>                       m_GuardEffectSettingList;                                // 0x0118(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSBPlayingEffect                                    m_PlayingGuardEffectList[0x4];                           // 0x0128(0x0320) Transient, Protected, NativeAccessSpecifierProtected

	public:
		void ServerAddShieldDurabilityByRate(float AddDurabilityRate);
		void ServerAddShieldDurability(float AddDurability);
		void Server_SetGuardPointActive(bool InIsGuardPointActive);
		void OnRep_ShieldDurability(float OldDurability);
		void MulticastBeginGuardBreak();
		bool IsGuardBreak();
		bool IsGuard();
		float GetShieldDurability();
		class ASBWeapon* GetShield();
		float GetMaxShieldDurability();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyGuardComponent
	 * Size -> 0x0070 (FullSize[0x04B8] - InheritedSize[0x0448])
	 */
	class USBEnemyGuardComponent : public USBGuardComponent
	{
	public:
		unsigned char                                              UnknownData_R5IN[0x18];                                  // 0x0448(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsInifinityShieldDurability;                            // 0x0460(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInitializeCreatedShield;                                // 0x0461(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBarrierGuard;                                           // 0x0462(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4YEV[0x1];                                   // 0x0463(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxBarrierLifeTime;                                      // 0x0464(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5TVN[0x4];                                   // 0x0468(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxBarrierRecoveryInterval;                              // 0x046C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YAK7[0x8];                                   // 0x0470(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      AICustoms;                                               // 0x0478(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FSBElementResistanceCorrectionSetting>       GuardAttributeRegistanceCorrectSettings;                 // 0x0488(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bCanPerceiveAttackGuard;                                 // 0x0498(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBPerceiveLevel                                           PerceiveLevel;                                           // 0x0499(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H4YQ[0xE];                                   // 0x049A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            PSComponent;                                             // 0x04A8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ORD0[0x8];                                   // 0x04B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartBarrier();
		void RequestServerDestroyCreatedShield();
		void RequestServerCreateShield(class UClass* AssetClass, ESBWeaponAttach WeaponAttach, const struct FTransform& Transform);
		void MulticastSetBarrier(bool bIsBarrierGuardActive, bool bPlayEndEffect);
		void MulticastDestroyCreatedShield();
		void MulticastCreateShield(class UClass* AssetClass, ESBWeaponAttach WeaponAttach, const struct FTransform& Transform);
		void MulticastAddShieldDurability(float AddDurability);
		class ASBWeapon* GetCreatedShield();
		bool CanBarrier();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyHabitat
	 * Size -> 0x0068 (FullSize[0x02C8] - InheritedSize[0x0260])
	 */
	class ASBEnemyHabitat : public AVolume
	{
	public:
		TArray<struct FSBEnemyHabitatSettings>                     Enemies;                                                 // 0x0260(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      Density;                                                 // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RespawnTime;                                             // 0x0274(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInTideArea;                                             // 0x0278(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_79EH[0x17];                                  // 0x0279(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBEnemyMetaInfo*>                            SpawnedEnemies;                                          // 0x0290(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MPEJ[0x10];                                  // 0x02A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     DebugSpawnLocations;                                     // 0x02B0(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       bDebugShowSpawnLocation;                                 // 0x02C0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OQ9G[0x7];                                   // 0x02C1(0x0007) MISSED OFFSET (PADDING)

	public:
		void RemoveMetaInfo(class AActor* Actor);
		void OnRep_DebugShowSpawnLocations();
		void LoadEnemyAssets();
		int32_t GetSpawnedEnemyCount();
		int32_t GetMaxEnemyCount();
		void GenerateSpawnPoints(TArray<struct FSBEnemySpawnHabitat>* OutSpawnHabitats);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyHabitatRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBEnemyHabitatRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_CRZ2[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyIntensiveAttackCheckerComponent
	 * Size -> 0x0088 (FullSize[0x0140] - InheritedSize[0x00B8])
	 */
	class USBEnemyIntensiveAttackCheckerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnBeginIntensiveAttackedDelegate;                        // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndIntensiveAttackedDelegate;                          // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bActivateOnServer;                                       // 0x00D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bActivateOnClient;                                       // 0x00D9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RTIE[0x2];                                   // 0x00DA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InfoKeepTime;                                            // 0x00DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistanceToStore;                                      // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ThresholdAttackedActorNum;                               // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_378H[0x58];                                  // 0x00E8(0x0058) MISSED OFFSET (PADDING)

	public:
		void RegisterDamageInfo(class ASBEnemyCharacter* DamagedActor, float Damage, const struct FSBDamageEvent& DamageEvent, class AController* InstigatedBy, class AActor* DamageCauser);
		bool IsIntensiveAttacked();
		void EndIntensiveAttackedDelegate__DelegateSignature();
		void ClearAttackedActorInfo(uint32_t TargetUniqueID);
		void BeginIntensiveAttackedDelegate__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyManager
	 * Size -> 0x01B0 (FullSize[0x01D8] - InheritedSize[0x0028])
	 */
	class USBEnemyManager : public UObject
	{
	public:
		class UDataTable*                                          EstimatePlayerRoleDataTable;                             // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathLogDistance;                                        // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZRNL[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceConstant*                           TransparentMaterial;                                     // 0x0038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M7CP[0x198];                                 // 0x0040(0x0198) MISSED OFFSET (PADDING)

	public:
		void OnMasterDataAvailableDelegate__DelegateSignature();
		void OnMasterDataAvailable();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyMaterialManagerComponent
	 * Size -> 0x0198 (FullSize[0x0250] - InheritedSize[0x00B8])
	 */
	class USBEnemyMaterialManagerComponent : public UActorComponent
	{
	public:
		TArray<struct FSBEnemyChangeableMaterialInfo>              ChangeableMaterialInfoList;                              // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEnemyChangedMaterialInfo>                 ChangedMaterialInfoList;                                 // 0x00C8(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8K6Z[0x50];                                  // 0x00D8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBMaterialVisibilityInfo>                   MaterialVisibilityList;                                  // 0x0128(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q5G4[0x50];                                  // 0x0138(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBMaterialParamInfo>                        MaterialScalarParamList;                                 // 0x0188(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7PAI[0x50];                                  // 0x0198(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBMaterialVectorParamInfo>                  MaterialVectorParamList;                                 // 0x01E8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HPIK[0x58];                                  // 0x01F8(0x0058) MISSED OFFSET (PADDING)

	public:
		void SwitchMaterialVisibility(TArray<int32_t> TargetMaterials, bool bChangeToVisible);
		void OnRep_MaterialVisibilityList();
		void OnRep_MaterialVectorParamList();
		void OnRep_MaterialScalarParamList();
		void OnRep_ChangedMaterialInfoList();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyMetaInfo
	 * Size -> 0x0020 (FullSize[0x0248] - InheritedSize[0x0228])
	 */
	class ASBEnemyMetaInfo : public AActor
	{
	public:
		class USBInfluenceSourceComponent*                         DensitySourceComp;                                       // 0x0228(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBInfluenceSourceComponent*                         RestrictionSourceComp;                                   // 0x0230(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBEnemyCharacter*                                   OwnerEnemy;                                              // 0x0238(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8RJP[0x8];                                   // 0x0240(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnOwnerDestroyed(class AActor* DestroyedActor);
		void OnOwnerDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyModifierComponent
	 * Size -> 0x00B8 (FullSize[0x0170] - InheritedSize[0x00B8])
	 */
	class USBEnemyModifierComponent : public UActorComponent
	{
	public:
		class USBEnemyModifierTemplate_BlueprintBase*              Sentinels;                                               // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, struct FSBEnemyModifierRegisteredConfigInfo> ModifierMap;                                             // 0x00C0(0x0050) Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TPMC[0x50];                                  // 0x0110(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int8_t>                                             ActiveModifierIds;                                       // 0x0160(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void MulticastDeactivateModifier(int8_t ModifierId);
		void MulticastActivateModifier(int8_t ModifierId);
		void DeactivateModifier(const class FName& ModifierName);
		void ActivateModifier(const class FName& ModifierName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyModifierTemplate_BlueprintBase
	 * Size -> 0x01B0 (FullSize[0x01D8] - InheritedSize[0x0028])
	 */
	class USBEnemyModifierTemplate_BlueprintBase : public UObject
	{
	public:
		bool                                                       bEnableNeedTurn : 1;                                     // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableNeedStrafe : 1;                                   // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableVisibility : 1;                                   // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableOffTarget : 1;                                    // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableOffPushOut : 1;                                   // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableWalkSpeed : 1;                                    // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableRunSpeed : 1;                                     // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableDashSpeed : 1;                                    // 0x0028(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableRotationRate : 1;                                 // 0x0029(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableMovabilityType : 1;                               // 0x0029(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableSetRecastTime : 1;                                // 0x0029(0x0001) BIT_FIELD Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAddStatusAilment : 1;                             // 0x0029(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableRemoveStatusAilment : 1;                          // 0x0029(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAttributeRegistanceCorrection : 1;                // 0x0029(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAddAICustom : 1;                                  // 0x0029(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableRemoveAICustom : 1;                               // 0x0029(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableActivatedTemporaryAICustom : 1;                   // 0x002A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAIMessage : 1;                                    // 0x002A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableBehaviorTree : 1;                                 // 0x002A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableUtilityOptionWhenBegin : 1;                       // 0x002A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableUtilityOptionWhenEnd : 1;                         // 0x002A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableNoActionInhibitionStatus : 1;                     // 0x002A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableAbsoluteResistance : 1;                           // 0x002A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedTurn : 1;                                           // 0x002A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNeedStrafe : 1;                                         // 0x002B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bVisibility : 1;                                         // 0x002B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOffTarget : 1;                                          // 0x002B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOffPushOut : 1;                                         // 0x002B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WalkSpeed;                                               // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RunSpeed;                                                // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DashSpeed;                                               // 0x0034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationRate;                                            // 0x0038(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EMovabilityType                                            MovabilityType;                                          // 0x0044(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TTRO[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, float>                                   RecastTimeParams;                                        // 0x0048(0x0050) Deprecated, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         AddStatusAilments;                                       // 0x0098(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         RemoveStatusAilments;                                    // 0x00A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBCollisionGroupResistanceCorrection>       AttributeRegistanceCorrections;                          // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AddAICustoms;                                            // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      RemoveAICustoms;                                         // 0x00D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      ActivatedTemporaryAICustoms;                             // 0x00E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<class FName>                                        AIMessages;                                              // 0x00F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UBehaviorTree*                                       BehaviorTree;                                            // 0x0108(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USBUtilityOption*>                            UtilityOptionsWhenBegin;                                 // 0x0110(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class USBUtilityOption*>                            UtilityOptionsWhenEnd;                                   // 0x0120(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bNoActionInhibitionStatus : 1;                           // 0x0130(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAbsoluteResistance : 1;                                 // 0x0130(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2RHD[0xA7];                                  // 0x0131(0x00A7) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyMotionViewer
	 * Size -> 0x0050 (FullSize[0x02D8] - InheritedSize[0x0288])
	 */
	class ASBEnemyMotionViewer : public APawn
	{
	public:
		class FName                                                AnimationSearchPath;                                     // 0x0288(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UBOU[0x20];                                  // 0x0290(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBCharacter*                                        PlayCharacterInstance;                                   // 0x02B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HQSQ[0x20];                                  // 0x02B8(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetPlaySpeed(float in_playspeed);
		void SetPlayCharacterInstance(class ASBCharacter* in_PlayCharacterInstance);
		void SetLoopAnimation(bool in_bLoop);
		void SetIsResetTransform(bool in_bResetTransform);
		void PlayAnimSequenceList(TArray<class FString> playanimnamelist);
		class ASBCharacter* GetPlayCharacterInstance();
		TArray<class FName> GetAnimSequenceList(const class FString& FilterCharaID, const class FString& FilterString);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyPartsManagerComponent
	 * Size -> 0x01B0 (FullSize[0x0268] - InheritedSize[0x00B8])
	 */
	class USBEnemyPartsManagerComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPartsBrokenMulticastDelegate;                          // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PJWN[0x28];                                  // 0x00C8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEnemyPartsBreakInfo>                      PartsBreakInfo;                                          // 0x00F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBEnemyCompoundPartsBreakInfo>              CompoundPartsBreakInfos;                                 // 0x0100(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UIB3[0x50];                                  // 0x0110(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FSBEnemyPartsCollisionStates>     DamageCollisionStates;                                   // 0x0160(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FSBEnemyPartsCollisionStates>     PartsCollisionStates;                                    // 0x01B0(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UActorComponent*>                             CachedPartsCollision;                                    // 0x0200(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FSBEnemyPartsTargetableState>     TargetableStates;                                        // 0x0210(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       bSendAnimCommandOnPartsBreak;                            // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MK85[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetPartsStep(const class FName& TargetCollsionGroupName, int32_t InputStep, bool bSetHpStepMax, bool bAppearEffect);
		void SetPartsHP(const class FName& TargetCollsionGroupName, float InputHpRate);
		void SetBrokenEffect(const class FName& TargetCollisionGroupName, int32_t stepIndex, int32_t effectIndex, class UParticleSystem* Effect);
		void ResetAllPartsBreakCount();
		void PartsBrokenMulticastDelegate__DelegateSignature(const class FName& BrokenCollisionGroupName, int32_t StepId);
		void NetmulticastPartsRepair(int32_t TargetCollsionGroupId, int32_t NewStep, int32_t PreviousStep);
		void NetmulticastPartsBroken(int32_t BrokenCollsionGroupId, int32_t NewStep, int32_t PreviousStep, bool bAppearEffect);
		bool IsDelayBrokenParts(const class FName& TargetCollsionGroupName);
		void FullHealAllParts();
		int32_t CountBrokenParts();
		void AddPartsHP(const class FName& TargetCollsionGroupName, float AddHpRate);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyPathFollowingComponent
	 * Size -> 0x0028 (FullSize[0x0290] - InheritedSize[0x0268])
	 */
	class USBEnemyPathFollowingComponent : public UPathFollowingComponent
	{
	public:
		unsigned char                                              UnknownData_RAMQ[0x18];                                  // 0x0268(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              GoalVelocityActor;                                       // 0x0280(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EB5L[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnMovementModeChanged(class ACharacter* Character, EMovementMode PreviousMovementMode, unsigned char PreviousCustomMode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyPerformanceLogger
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBEnemyPerformanceLogger : public UObject
	{
	public:
		unsigned char                                              UnknownData_J3WO[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnablePerformanceOutput;                                // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TEWA[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PerformanceOutputInterval;                               // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DataTransferOutputInterval;                              // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K3YU[0x14];                                  // 0x0044(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyPhase_Base
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBEnemyPhase_Base : public UObject
	{
	public:
		bool                                                       bCheckIdle;                                              // 0x0028(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckMinionsDead;                                       // 0x0029(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckNoBurstBonus;                                      // 0x002A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0C97[0x1];                                   // 0x002B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HitPointRate;                                            // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSkippablePhase;                                         // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N1LC[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PhaseControlIndex;                                       // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YP85[0x10];                                  // 0x0038(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ActivateModifierNames;                                   // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void SetPhaseChangeExpression(const struct FSBEnemyPhaseChangeRuleExpression& Expression);
		struct FSBEnemyPhaseChangeRuleExpression PhaseChangeRule_SelectValue(ESBEnemyPhaseChangeRuleType Type);
		struct FSBEnemyPhaseChangeRuleExpression PhaseChangeRule_OperatorOr(TArray<struct FSBEnemyPhaseChangeRuleExpression> Expressions);
		struct FSBEnemyPhaseChangeRuleExpression PhaseChangeRule_OperatorAnd(TArray<struct FSBEnemyPhaseChangeRuleExpression> Expressions);
		bool CompareHitPointRate(class ASBEnemyCharacter* OwnerEnemyCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyPhase_BlueprintBase
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class USBEnemyPhase_BlueprintBase : public USBEnemyPhase_Base
	{
	public:
		void ReceiveTick(float DeltaTime, class ASBEnemyCharacter* OwnerEnemyCharacter, class USBEnemyPhaseComponent* OwnerComp);
		void ReceiveInitialize();
		bool ReceiveCheckPhaseChangeRule(class ASBEnemyCharacter* OwnerEnemyCharacter, class USBEnemyPhaseComponent* OwnerComp);
		void ReceiveBegin(class ASBEnemyCharacter* OwnerEnemyCharacter, class USBEnemyPhaseComponent* OwnerComp);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyPhaseComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBEnemyPhaseComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_301C[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      PhaseRegister;                                           // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		int8_t                                                     CurrentPhaseIndex;                                       // 0x00D8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LYGK[0x1F];                                  // 0x00D9(0x001F) MISSED OFFSET (PADDING)

	public:
		void SetPhaseControlIndex(int32_t Index);
		void OnRep_BeginTask();
		bool IsFinalPhase();
		bool IsChanged(class UClass* PhaseClass);
		int32_t GetCurrentPhase();
		void AddMinion(class ASBCharacter* Minion);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyProjectSettings
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBEnemyProjectSettings : public UObject
	{
	public:
		struct FSoftObjectPath                                     EnemyWaveTreeName;                                       // 0x0028(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySABComponent
	 * Size -> 0x0290 (FullSize[0x0348] - InheritedSize[0x00B8])
	 */
	class USBEnemySABComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_RZ7I[0xE0];                                  // 0x00B8(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FurtherAttackTimeLimit;                                  // 0x0198(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1QN8[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      BreakEffectSetting;                                      // 0x01A0(0x01A8) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySceneComponent
	 * Size -> 0x0008 (FullSize[0x0490] - InheritedSize[0x0488])
	 */
	class USBEnemySceneComponent : public UCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_8DPZ[0x8];                                   // 0x0488(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySenseChanger
	 * Size -> 0x0058 (FullSize[0x02B8] - InheritedSize[0x0260])
	 */
	class ASBEnemySenseChanger : public AVolume
	{
	public:
		ESenseChangerType                                          SenseChangerType;                                        // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAffectAllEnemys;                                        // 0x0261(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OXT3[0x6];                                   // 0x0262(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      TargetEnemyIDs;                                          // 0x0268(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HHZI[0x28];                                  // 0x0278(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSenseDebugDrawData                               DebugDrawData;                                           // 0x02A0(0x0014) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4WGH[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (PADDING)

	public:
		void Activate(bool bActivate);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySenseChangerComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBEnemySenseChangerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_DU3I[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySenserSetting
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class USBEnemySenserSetting : public UDataAsset
	{
	public:
		struct FSBSenserData                                       DefaultSensers;                                          // 0x0030(0x0010) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<ESBLocationType, struct FSBSenserData>                SenserOnLocation;                                        // 0x0040(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySetAsset
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBEnemySetAsset : public UObject
	{
	public:
		TArray<struct FSBEnemySetData>                             EnemySets;                                               // 0x0028(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySkeletalMeshComponent
	 * Size -> 0x0010 (FullSize[0x0FA0] - InheritedSize[0x0F90])
	 */
	class USBEnemySkeletalMeshComponent : public USBCharaPartsBodyComponent
	{
	public:
		float                                                      SubspeciesScaleRate;                                     // 0x0F90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableServerRefreshBones;                              // 0x0F94(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JOZR[0xB];                                   // 0x0F95(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySpawner
	 * Size -> 0x00C8 (FullSize[0x02F0] - InheritedSize[0x0228])
	 */
	class ASBEnemySpawner : public AActor
	{
	public:
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwHierarchyComponent*                             HierarchyComponent;                                      // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwSmartObjectUserComponent*                       SmartObjectUserComponent;                                // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              FieldSpawnerClass;                                       // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBEnemyFieldSpawner*                                FieldSpawner;                                            // 0x0248(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBActorManager*                                     ActorManager;                                            // 0x0250(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FQN2[0x98];                                  // 0x0258(0x0098) MISSED OFFSET (PADDING)

	public:
		void OnEnemyDestroyed(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySpawnSystemComponent
	 * Size -> 0x0088 (FullSize[0x0140] - InheritedSize[0x00B8])
	 */
	class USBEnemySpawnSystemComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ZOU6[0x28];                                  // 0x00B8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      SpawnedActors;                                           // 0x00E0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class ASBEnemySpawner*                                     Spawner;                                                 // 0x00F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y9XS[0x48];                                  // 0x00F8(0x0048) MISSED OFFSET (PADDING)

	public:
		void NotifyActorDestroyed(class AActor* Actor);
		int32_t GetSpawnedActorsNum();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyStanceComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBEnemyStanceComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_0PUB[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrentStance;                                           // 0x00C0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H13M[0x10];                                  // 0x00C4(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                InitStanceName;                                          // 0x00D4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CLL0[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEnemyStanceSetting>                       StanceSettings;                                          // 0x00E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		class FName GetCurrentStanceName();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyStateMachineReplayComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBEnemyStateMachineReplayComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FQR4[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              LastChangedStateCounter;                                 // 0x00C8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8J1W[0x7];                                   // 0x00C9(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_StateChange();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyStateManagerComponent
	 * Size -> 0x0078 (FullSize[0x0130] - InheritedSize[0x00B8])
	 */
	class USBEnemyStateManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_G3IH[0x78];                                  // 0x00B8(0x0078) MISSED OFFSET (PADDING)

	public:
		bool IsReadyForAction();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySummonComponent
	 * Size -> 0x0020 (FullSize[0x0160] - InheritedSize[0x0140])
	 */
	class USBEnemySummonComponent : public USBEnemySpawnSystemComponent
	{
	public:
		TArray<struct FSBEnemySummonInfo>                          SummonList;                                              // 0x0140(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bSummonImagine;                                          // 0x0150(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAvatar;                                                 // 0x0151(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3O7Q[0x6];                                   // 0x0152(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBSquadMemberComponent*                             SquadMemberComponent;                                    // 0x0158(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool ReserveNextSummonSlot(int32_t SummonNum);
		void OnCharacterDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTriggerVolume
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ASBTriggerVolume : public ATriggerVolume
	{
	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySupplierSpawnVolume
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class ASBEnemySupplierSpawnVolume : public ASBTriggerVolume
	{
	public:
		TArray<class ASBEnemySupplierSpot*>                        EnemySupplierAssetLists;                                 // 0x0260(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySupplierSpot
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBEnemySupplierSpot : public AActor
	{
	public:
		unsigned char                                              UnknownData_9LB8[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		void ServerActorWakeup();
		void RequestActorWakeup();
		void OverlapEndByPlayer();
		void ActorWakeup();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemySwitchWeaponAttachmentComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBEnemySwitchWeaponAttachmentComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_5630[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            NotifyTargetWeaponIndex;                                 // 0x00C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void SetUnsheatheAttach(int32_t WeaponIndex);
		void SetSheatheAttach(int32_t WeaponIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyTakeDamageCounterComponent
	 * Size -> 0x00B0 (FullSize[0x0168] - InheritedSize[0x00B8])
	 */
	class USBEnemyTakeDamageCounterComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_6M9X[0x60];                                  // 0x00B8(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, int32_t>                                 LinkAttackIDToNameMap;                                   // 0x0118(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		void OnExecuteEventRegisterDelegate__DelegateSignature(int32_t AttackID, int32_t Count);
		void AddNewEvent(const class FScriptDelegate& Delegate, const class FName& AttackIDName, int32_t TriggerCount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyTakeDamageEffectComponent
	 * Size -> 0x0060 (FullSize[0x0118] - InheritedSize[0x00B8])
	 */
	class USBEnemyTakeDamageEffectComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_0C60[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, int32_t>                                 LinkAttackIDToNameMap;                                   // 0x00C8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		void AddNewEvent(const class FName& AttackIDName, class UParticleSystem* Particle, int32_t LimitCount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyTargetingComponent
	 * Size -> 0x0080 (FullSize[0x0138] - InheritedSize[0x00B8])
	 */
	class USBEnemyTargetingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_NPWP[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEnemyMultiTargetInfo                             ProjectileMultiTargetInfo;                               // 0x00D8(0x0010) Net, Transient, Protected, NativeAccessSpecifierProtected
		struct FSBEnemyMultiTargetInfo                             AdjustRootMotionMultiTargetInfo;                         // 0x00E8(0x0010) Net, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_376N[0x10];                                  // 0x00F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsTargetingUnderFoot;                                   // 0x0108(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SBBC[0x2F];                                  // 0x0109(0x002F) MISSED OFFSET (PADDING)

	public:
		void SetUseCachedTarget(bool Flag);
		void SetTargetInfoAsVector(const struct FVector& TargetLocation, ESBEnemyTargetType Type, int32_t Index);
		void SetTargetInfoAsActor(class AActor* TargetActor, ESBEnemyTargetType Type, int32_t Index);
		void SetMultiTargetInfo(TArray<struct FSBEnemyTargetInfo> MultiTargetInfo, ESBEnemyTargetType Type);
		bool IsValidTargetLocation(ESBEnemyTargetType Type, int32_t Index);
		bool IsValidIndex(ESBEnemyTargetType Type, int32_t Index);
		bool GetTargetLocationByIndex(struct FVector* OutTargetLocation, ESBEnemyTargetType Type, int32_t Index);
		class AActor* GetTargetActorByIndex(ESBEnemyTargetType Type, int32_t Index);
		TArray<struct FSBEnemyTargetInfo> GetMultiTargetInfo(ESBEnemyTargetType Type);
		void ClearTargetInfo(ESBEnemyTargetType Type);
		void AddTargetInfoAsVector(const struct FVector& TargetLocation, ESBEnemyTargetType Type);
		void AddTargetInfoAsActor(class AActor* TargetActor, ESBEnemyTargetType Type);
		void AddTargetInfo(const struct FSBEnemyTargetInfo& MultiTargetInfo, ESBEnemyTargetType Type);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyTideComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBEnemyTideComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_DVOM[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDisableSubmargedExit;                                   // 0x00C8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7TLY[0x2];                                   // 0x00C9(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSubmargedExit;                                          // 0x00CB(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YPPK[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnTickTide(class USBEnemyFieldSpawnTideComponent* InFieldSpawnTideComp, float TideHeight);
		void OnStartTide(class USBEnemyFieldSpawnTideComponent* InFieldSpawnTideComp);
		void OnRep_SetSubmargedExit();
		void OnFinishTide(class USBEnemyFieldSpawnTideComponent* InFieldSpawnTideComp);
		bool IsSubmargedExit();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyUROManagerComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBEnemyUROManagerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_O69X[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AnimTagName;                                             // 0x00C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<float>                                              OverrideBaseVisibleDistanceFactorThresholds;             // 0x00D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9HIO[0x18];                                  // 0x00E0(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyWaveSettingsAsset
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBEnemyWaveSettingsAsset : public UObject
	{
	public:
		TArray<struct FSBEnemyWaveData>                            EnemyWaves;                                              // 0x0028(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyWaveSpawner
	 * Size -> 0x0128 (FullSize[0x0350] - InheritedSize[0x0228])
	 */
	class ASBEnemyWaveSpawner : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnWaveStarted;                                           // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAssetLoadBegan;                                        // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAssetLoadCompleted;                                    // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class FString, class UDataTable*>                     WaveTables;                                              // 0x0258(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TMap<class FName, class ASBSpawnArea*>                     SpawnAreas;                                              // 0x02A8(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		class USBEnemySpawnSystemComponent*                        SpawnSystemComponent;                                    // 0x02F8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0300(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAIFwParameterizedBTRequest                         SpawnTree;                                               // 0x0308(0x0018) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RO1N[0x30];                                  // 0x0320(0x0030) MISSED OFFSET (PADDING)

	public:
		void StartWave();
		void SetWaveSettings(const class FString& WaveName);
		void RequestAssetLoad();
		void OnWaveStartedSignature__DelegateSignature(int32_t WaveNo);
		void OnAssetLoadCompletedSignature__DelegateSignature();
		void OnAssetLoadBeganSignature__DelegateSignature();
		bool IsAssetLoading();
		bool IsAssetLoaded();
		int32_t GetTotalWaveCount();
		int32_t GetTotalEnemyCount();
		int32_t GetCurrentWaveNo();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldGimmickProjectileSpawnerBase
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBFieldGimmickProjectileSpawnerBase : public AActor
	{
	public:
		class USkeletalMeshComponent*                              SpawnerMesh;                                             // 0x0228(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void RegisterSpawnerMesh(class USkeletalMeshComponent* InSpawnerMesh);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEngramCannon
	 * Size -> 0x0068 (FullSize[0x0298] - InheritedSize[0x0230])
	 */
	class ASBEngramCannon : public ASBFieldGimmickProjectileSpawnerBase
	{
	public:
		unsigned char                                              UnknownData_RPWC[0x18];                                  // 0x0230(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBEngramCannonStatus                                      EngramCannonStatus;                                      // 0x0248(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBEngramCannonAttributeBullet                             EngramCannonAttribute;                                   // 0x0249(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDebugInitStatus;                                       // 0x024A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QF1L[0x1];                                   // 0x024B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            PlayerInputRotation;                                     // 0x024C(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            PlayerInputRotationBase;                                 // 0x0258(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsChargeGaugeUseItem;                                    // 0x0264(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S2UG[0x3];                                   // 0x0265(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InitChargeGauge;                                         // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeGauge;                                             // 0x026C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeGaugeRate;                                         // 0x0270(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeCoolTime;                                          // 0x0274(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChargeGaugeTime;                                         // 0x0278(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DQII[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        ChargeGaugeTimerHandle;                                  // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            NowCannonRotation;                                       // 0x0288(0x000C) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z9MR[0x4];                                   // 0x0294(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetProjectleMesh(class USkeletalMeshComponent* InBaseMesh);
		void SetPlayerInputRotation(const struct FRotator& InRotation, bool isNotify);
		void ServerUpdateCannonRotation(const struct FRotator& InRotation);
		void ServerStatusChange(ESBEngramCannonStatus InChangeStatus);
		void ServerAddChargeGauge(float AddGauge);
		void RequestUpdateCannonRotation(const struct FRotator& InRotation);
		void RequestStatusChange(ESBEngramCannonStatus ToChangeStatus);
		void RequestAddChargeGauge(float AddGauge);
		void OnEngramCannonStatus(ESBEngramCannonStatus NotifyEngramCannonStatus);
		void OnEngramCannonShotting(class AActor* OtherActor);
		void OnEngramCannonRiddingPlayerInput(const struct FRotator& InputRotation);
		void OnEngramCannonPlayerExit(bool bSuccessed, ESBEngramCannonStatus InEngramCannonStatus);
		void OnEngramCannonMoveStop();
		void OnEngramCannonMove();
		void InitPlayerInputRotation(const struct FRotator& InRotation);
		struct FRotator GetPlayerInputRotation();
		struct FRotator GetNowCannonRotation();
		float GetChargeGarge();
		void ClientUpdateCannonRotation(const struct FRotator& InRotation);
		void ClientStatusChange(ESBEngramCannonStatus InChangeStatus);
		void ClientEventNotifyStatus();
		void ClearChargeGauge(float SetCoolTime);
		void ChargeGargeTimerStart(float SetTimeRate);
		float ChargeGargeTimerRate();
		struct FRotator AddPlayerInputRotation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBErrorProc
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBErrorProc : public UObject
	{
	public:
		unsigned char                                              UnknownData_PKSN[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBDialog*                                           MessageDialog;                                           // 0x0030(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_INSW[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnMessageFinished(EDialogResult InResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEventCheatCommand : public UObject
	{
	public:
		void StartScriptByTrigger(const class FName& InTrigger, bool bIsForce);
		void SearchUserFlagFromAllScriptAssets();
		void ScriptExecutor();
		void PutLogCharacterProfileData(const class FName& InNpcProfileID);
		void PlayTheater(const class FName& InDemoId);
		void OpenOffDemoLevel(const class FName& ContentId, const class FString& GameModeId);
		void LevelScriptList();
		void ForceNaviMaskExit();
		void ExecScriptFile(const class FString& InFilePath);
		void ExecScriptCommand(const class FString& InCode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventExecutor
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class USBEventExecutor : public UObject
	{
	public:
		TMap<class FName, struct FSBEventExecutorItems>            EventReceiverListMap;                                    // 0x0028(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              SuspendEventNameSet[0x50];                               // 0x0078(0x0050) UNKNOWN PROPERTY: SetProperty
		TArray<struct FSBEventExecutorSuspendedEventItem>          SuspendedEventItemList;                                  // 0x00C8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void RemoveReceiverAll(class UObject* Receiver, bool bStrict);
		void RemoveReceiver(const class FName& EventName, class UObject* Receiver, bool bStrict);
		void RemoveInvalidReceiver();
		void ExecuteEventStringParam(const class FName& EventName, class UObject* Sender, const class FString& Param, ESBEventExecutorOption Option);
		void ExecuteEventIntParam(const class FName& EventName, class UObject* Sender, int32_t Param, ESBEventExecutorOption Option);
		void ExecuteEventBoolParam(const class FName& EventName, class UObject* Sender, bool bParam, ESBEventExecutorOption Option);
		void ExecuteEvent(const class FName& EventName, class UObject* Sender, class UObject* Param, ESBEventExecutorOption Option);
		void AddReceiver(const class FName& EventName, class UObject* Receiver, const class FScriptDelegate& Delegate);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBoolParam
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBBoolParam : public UObject
	{
	public:
		bool                                                       bValue;                                                  // 0x0028(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_81FF[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		class USBBoolParam* SetValue(bool bInValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBIntParam
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBIntParam : public UObject
	{
	public:
		int32_t                                                    Value;                                                   // 0x0028(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SEMT[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		class USBIntParam* SetValue(int32_t InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStringParam
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBStringParam : public UObject
	{
	public:
		class FString                                              Value;                                                   // 0x0028(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class USBStringParam* SetValue(const class FString& InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventPoint
	 * Size -> 0x0030 (FullSize[0x0258] - InheritedSize[0x0228])
	 */
	class ASBEventPoint : public AActor
	{
	public:
		class FName                                                QuestID;                                                 // 0x0228(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                Label;                                                   // 0x0230(0x0018) Edit, NativeAccessSpecifierPublic
		class UShapeComponent*                                     SensorComponent;                                         // 0x0248(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UShapeComponent*                                     CachedSensorComponent;                                   // 0x0250(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		int32_t StartScript(const struct FSBScriptActorCreateDesc& InCreateDesc);
		void QueryStartScript();
		void HandleSensorComponentBeginOverlapEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventPointSingle
	 * Size -> 0x00A0 (FullSize[0x02F8] - InheritedSize[0x0258])
	 */
	class ASBEventPointSingle : public ASBEventPoint
	{
	public:
		struct FSBScriptActorCreateDesc                            CreateDesc;                                              // 0x0258(0x00A0) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventPointDefault
	 * Size -> 0x0010 (FullSize[0x0268] - InheritedSize[0x0258])
	 */
	class ASBEventPointDefault : public ASBEventPoint
	{
	public:
		TArray<class FName>                                        Events;                                                  // 0x0258(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventPointOffline
	 * Size -> 0x0008 (FullSize[0x0270] - InheritedSize[0x0268])
	 */
	class ASBEventPointOffline : public ASBEventPointDefault
	{
	public:
		unsigned char                                              UnknownData_KCKM[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventSceneBPFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEventSceneBPFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class USBShowYesNoDialog2Impl* ShowYesNoDialog2(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FName& TextTableName, const struct FSBTextTableHash& TextId, const class FText& Message, class UUserWidget* InParentWidget, EUIZOrder InZOrder, EDialogPositionType PosType, EDialogResult OkOperation, EDialogResult CancelOperation, bool bEnableBgBlur);
		class USBDialog* ShowYesNoDialog(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FName& TextTableName, const struct FSBTextTableHash& TextId, const class FText& Message, const class FScriptDelegate& EndDelegate, class UUserWidget* InParentWidget, EUIZOrder InZOrder, EDialogPositionType PosType, EDialogResult OkOperation, EDialogResult CancelOperation, bool bEnableBgBlur);
		void ShowMessageDialog(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FName& TextTableName, const struct FSBTextTableHash& TextId, const class FText& Message, class UUserWidget* InParentWidget, EUIZOrder InZOrder, EDialogPositionType PosType, EDialogResult OkOperation, EDialogResult CancelOperation, bool bEnableBgBlur);
		class FString GetSpeakerName(class UObject* WorldContextObject, const class FName& InSpeakerId);
		struct FSBCharacterProfileLocationData FindCharacterProfileLocationData(const class FName& InName, bool* bOutExist);
		struct FSBCharacterProfileData FindCharacterProfileData(const class FName& InName, bool* bOutExist);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShowYesNoDialog2Impl
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBShowYesNoDialog2Impl : public UObject
	{
	public:
		class USBDialog*                                           CreatedDialog;                                           // 0x0028(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EYesNoDialogResult                                         Result;                                                  // 0x0030(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I39D[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnWorldCleanup(class UWorld* World, bool bSessionEnded, bool bCleanupResources);
		void OnFinish(EYesNoDialogResult InResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventScheduledActor
	 * Size -> 0x0020 (FullSize[0x0248] - InheritedSize[0x0228])
	 */
	class ASBEventScheduledActor : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnEventTermStart;                                        // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEventTermEnd;                                          // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SBOnEventTermsDelegate__DelegateSignature();
		void NotifyEventTermStart(const class FString& TermId);
		void NotifyEventTermEnd(const class FString& TermId);
		bool CheckInTerm(const class FString& InTermId);
		bool BindCheckerByEventTermId(const class FString& TermId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventScheduler
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USBEventScheduler : public UObject
	{
	public:
		unsigned char                                              UnknownData_RPN9[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEventTermsChecker>                        EventTermsList;                                          // 0x0050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A3EC[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnMasterDataAvailable();
		bool IsEventTermNoneLimmitBP(const class FString& TermId);
		bool IsDebugSchedulerDateTimeDraw();
		bool GetStartTime(struct FDateTime* OutStartTime, const class FString& TermId);
		struct FDateTime GetNowDate();
		bool GetMasterDataBP(struct FSBEventTermsMasterData* OutMaster, const class FString& TermId);
		bool GetEventTermNextOffLabelDataTimeToNowTime(const class FString& InTermId, struct FDateTime* OutEndTime);
		bool GetEventTermNextOffLabelDataTime(const class FString& TermId, struct FDateTime* OutEndTime, const struct FDateTime& InDateTime);
		bool GetEndTime(struct FDateTime* OutEndTime, const class FString& TermId);
		bool GetCheckerBP(struct FSBEventTermsChecker* OutChecker, const class FString& TermId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventShopComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBEventShopComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnGetExchangeHistoryDelegate;                            // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnExchangeItemRemakeDelegate;                            // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void UpdateTacticalAbilityMasteryInfo(TArray<struct FSBSkillParam> SkillParamList);
		void SortProductList(EShopType ShopType, int32_t SortId, TArray<struct FSBEventShopProduct> InProductList, TArray<struct FSBEventShopProduct>* OutProductList);
		void Server_OnExchangeItemRemake(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems, TArray<struct FSBCharacterToken> InTokenList, TArray<struct FSBCharacterToken> InAddTokenList);
		void Server_GetExchangeHistory();
		void Server_ExchangeItemRemake(int32_t InShopId, TArray<struct FSBEventShopPurchaseItemInfo> InPurchaseList, bool IsBag);
		void Request_GetExchangeHistory();
		void Request_ExchangeItemRemake(int32_t InShopId, TArray<struct FSBEventShopPurchaseItemInfo> InPurchaseList, bool IsBag);
		void OnGetExchangeHistoryDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FSBEventShopExchangeHistory> History);
		void OnExchangeItemRemakeDelegate__DelegateSignature(bool Result, int32_t RetCode);
		void Client_GetExchangeHistory(bool bInWasSuccessful, int32_t InRetCode, TArray<struct FSBEventShopExchangeHistory> InHistory);
		void Client_ExchangeItemRemake(bool bInWasSuccessful, int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems, TArray<struct FSBCharacterToken> InTokenList, TArray<struct FSBCharacterToken> InAddTokenList, TArray<struct FDecorationData> InAddAdvCardCustomParts, bool InOpenCommandMenuFlag, int32_t InRemainMoney);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventTermSoundTriggerVolume
	 * Size -> 0x0058 (FullSize[0x02B8] - InheritedSize[0x0260])
	 */
	class ASBEventTermSoundTriggerVolume : public ATriggerVolume
	{
	public:
		bool                                                       IsActive;                                                // 0x0260(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7PL6[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSoundEventTermData                               SoundEventTermData;                                      // 0x0268(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventTermSoundTriggerBox
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class ASBEventTermSoundTriggerBox : public ATriggerBox
	{
	public:
		bool                                                       IsActive;                                                // 0x0230(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UMWT[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSoundEventTermData                               SoundEventTermData;                                      // 0x0238(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventTermSoundTriggerSphere
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class ASBEventTermSoundTriggerSphere : public ATriggerSphere
	{
	public:
		bool                                                       IsActive;                                                // 0x0230(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DS4V[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSoundEventTermData                               SoundEventTermData;                                      // 0x0238(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventTriggerDatabase
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBEventTriggerDatabase : public UObject
	{
	public:
		TArray<class UDataTable*>                                  EventTriggers;                                           // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		struct FSBEventTrigger BP_Find(const class FName& InScriptId, bool* bOutExist);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventTriggerDebugMenu
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBEventTriggerDebugMenu : public UUserWidget
	{
	public:
		void SetScenarioFlag(const class FName& InFlagName, bool bInValue);
		void SetQuestStep(const class FName& InQuestLongName, const class FName& InStepId);
		void SetQuestStatus(const class FName& InQuestLongName, EQuestStatus InStatus);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBExchangeItemComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBExchangeItemComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnExchangeItemDelegate;                                  // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_OnExchangeItem(int32_t InRetCode, int32_t InRetBravePoint, TArray<struct FSBExchangeItemLogInfo> InRetExchangeLogs, TArray<struct FOwnItemInfo> InRetItems);
		void Server_ExchangeItem(const class FString& InExchangeShopId, TArray<struct FExchangeShopExchangingItemInfo> InExchangingItems);
		void Request_ExchangeItem(const class FString& InExchangeShopId, TArray<struct FExchangeShopExchangingItemInfo> InExchangingItems);
		void OnExchangeItemDelegate__DelegateSignature(bool Result);
		void Client_ExchangeItem(int32_t InRetCode, int32_t InRetBravePoint, TArray<struct FSBExchangeItemLogInfo> InRetExchangeLogs, TArray<struct FOwnItemInfo> InRetItems);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBExchangeItemLogList
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBExchangeItemLogList : public UObject
	{
	public:
		TArray<struct FSBExchangeItemLogInfo>                      ExchangeLogs;                                            // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void UpdateLog(int32_t InLogId, const struct FSBExchangeItemLogInfo& InLog);
		struct FSBExchangeItemLogInfo GetLogByLogId(int32_t InLogId, bool* bOutExist);
		int32_t FindLog(const class FString& InShopId, int32_t InProductId, int32_t InItemID);
		int32_t AddLog(const struct FSBExchangeItemLogInfo& InLog);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBExecDelegateWithConditionComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBExecDelegateWithConditionComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_VLK2[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBExitPortal
	 * Size -> 0x0010 (FullSize[0x0298] - InheritedSize[0x0288])
	 */
	class ASBExitPortal : public APawn
	{
	public:
		class FScriptMulticastDelegate                             OnExitDecided;                                           // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void OnExitDecided__DelegateSignature();
		void CallOnExitDecided();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBExtraFootHold
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBExtraFootHold : public AActor
	{
	public:
		bool IsPlayerAerialAttacking(class ASBPlayerCharacter* TmpLocalPlayer);
		void DebugFlyinStatusChange();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcCharacter
	 * Size -> 0x01E8 (FullSize[0x0910] - InheritedSize[0x0728])
	 */
	class ASBNpcCharacter : public ASBMobCharacter
	{
	public:
		unsigned char                                              UnknownData_RD2F[0x8];                                   // 0x0728(0x0008) Fix Super Size
		unsigned char                                              UnknownData_PUUY[0x140];                                 // 0x0730(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Job;                                                     // 0x0870(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MCHN[0x4];                                   // 0x0874(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsEnableStagger : 1;                                    // 0x0878(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_68V1[0x3];                                   // 0x0879(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bRandomCharacter;                                        // 0x087C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ABU1[0x3];                                   // 0x087D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharaCreateComponent*                             CharaCreateComponent;                                    // 0x0880(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBNpcAppearanceType                                RandomAppearanceType;                                    // 0x0888(0x0003) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0HPC[0x5];                                   // 0x088B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharaPartsFaceComponent*                          FaceComp;                                                // 0x0890(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UASAnimationSet*                                     AnimationSet;                                            // 0x0898(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBDemoParameterComponent*                           DemoParameterComp;                                       // 0x08A0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          F100WaitParamTable;                                      // 0x08A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          F200WaitParamTable;                                      // 0x08B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          F300WaitParamTable;                                      // 0x08B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          F400WaitParamTable;                                      // 0x08C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          F500WaitParamTable;                                      // 0x08C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          M100WaitParamTable;                                      // 0x08D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          M200WaitParamTable;                                      // 0x08D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          M300WaitParamTable;                                      // 0x08E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          M400WaitParamTable;                                      // 0x08E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          M500WaitParamTable;                                      // 0x08F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCameraTransparentCapsuleComponent*                CameraTransparentComponent;                              // 0x08F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         FadeInCurve;                                             // 0x0900(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EBTS[0x8];                                   // 0x0908(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetStaggerState(class AActor* HitActor);
		void SetShadowMeshCastShadow(bool bSw);
		void SetNpcState(ENpcState State);
		void SetDemoAnimationSet(class UASAnimationSet* NewAnimationSet);
		void SetCharaCreateData(class USBCharaCreateData* InCharaCreateData);
		void SetAnimationSet(class UASAnimationSet* InAnimationSet);
		bool IsEnableStagger();
		ENpcState GetNpcState();
		void GetDemoAnimationSet();
		void AddSubTrigger(const class FName& InId);
		void AddMainTrigger(const class FName& InId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBExtraNpcCharacter
	 * Size -> 0x0010 (FullSize[0x0920] - InheritedSize[0x0910])
	 */
	class ASBExtraNpcCharacter : public ASBNpcCharacter
	{
	public:
		unsigned char                                              UnknownData_V41L[0x10];                                  // 0x0910(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFacialAnimationDataHolder
	 * Size -> 0x01C8 (FullSize[0x0210] - InheritedSize[0x0048])
	 */
	class USBFacialAnimationDataHolder : public USBAssetDataHolder
	{
	public:
		unsigned char                                              UnknownData_5B88[0x140];                                 // 0x0048(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataAsset*                                          AnimationSet;                                            // 0x0188(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPoseAsset*                                          PoseAssetEye;                                            // 0x0190(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPoseAsset*                                          PoseAssetBrow;                                           // 0x0198(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPoseAsset*                                          PoseAssetMouth;                                          // 0x01A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPoseAsset*                                          PoseAssetAdj;                                            // 0x01A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPoseAsset*                                          PoseAssetEyelid;                                         // 0x01B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPoseAsset*                                          PoseAssetDfm;                                            // 0x01B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         TiltPanBlendSpace;                                       // 0x01C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TuriE;                                                   // 0x01C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TareE;                                                   // 0x01CC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TuriB;                                                   // 0x01D0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TareB;                                                   // 0x01D4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsValidFacialPoseAssetDfm;                              // 0x01D8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8MUS[0x3];                                   // 0x01D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            EyeLRotate;                                              // 0x01DC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            EyeRRotate;                                              // 0x01E8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            EyebrowLRotate;                                          // 0x01F4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            EyebrowRRotate;                                          // 0x0200(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T4LL[0x4];                                   // 0x020C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFacialAnimInstance
	 * Size -> 0x01D0 (FullSize[0x0638] - InheritedSize[0x0468])
	 */
	class USBFacialAnimInstance : public UASAnimInstance
	{
	public:
		class UAnimSequenceBase*                                   FacialAnimation;                                         // 0x0468(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LipSyncTime;                                             // 0x0470(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EyeBlinkTime;                                            // 0x0474(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBFacialAnimationDataHolder*                        FacialAnimationDataHolder;                               // 0x0478(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UBlendSpace1D*>                               BS_EyeMoveUD;                                            // 0x0480(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UBlendSpace1D*>                               BS_EyeMoveLR;                                            // 0x0490(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      EyeMoveLookAtLimitUD;                                    // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EyeMoveLookAtLimitLR;                                    // 0x04A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableCCVBlendSpace;                                    // 0x04A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LT84[0x7];                                   // 0x04A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPoseAsset*                                          PoseAssetMouth;                                          // 0x04B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPoseAsset*                                          PoseAssetBrow;                                           // 0x04B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPoseAsset*                                          PoseAssetEye;                                            // 0x04C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPoseAsset*                                          PoseAssetAdj;                                            // 0x04C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPoseAsset*                                          PoseAssetEyelid;                                         // 0x04D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBlendSpace1D*                                       BlendSpaceEyeMoveUD;                                     // 0x04D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBlendSpace1D*                                       BlendSpaceEyeMoveLR;                                     // 0x04E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EyeMoveUD;                                               // 0x04E8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EyeMoveLR;                                               // 0x04EC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EyeMoveUDCustomOffset;                                   // 0x04F0(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EyeMoveLRCustomOffset;                                   // 0x04F4(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EyeAnimChange;                                           // 0x04F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TiltModifyFaceUD;                                        // 0x04FC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TiltModifyFaceLR;                                        // 0x0500(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PSCP[0x4];                                   // 0x0504(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  DeformFaceCurveDataUD;                                   // 0x0508(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  DeformFaceCurveDataLR;                                   // 0x0590(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UBlendSpace1D*>                               CCVBlendSpaceArray;                                      // 0x0618(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UAnimSequence*>                               CCVAnimSequenceArray;                                    // 0x0628(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateFacialAnimation(class UASAnimationSet* AnimationSet);
		void UpdateCCVBlendSpace(bool bInitialize, bool bDestroy);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldStatusFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFieldStatusFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsDisplayAndQuestProceedingByFieldStatus(class UObject* InWorldContextObject, const struct FSBFieldStatusSetting& InSetting);
		EFieldStatus EvaluateFieldStatus(class UObject* InWorldContextObject, const struct FSBFieldStatusSetting& InSetting);
		bool CheckFieldStatusCondition(class UObject* InWorldContextObject, const struct FSBFieldStatusConditionSetting& InConditionSetting);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFacilityIconStatusFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFacilityIconStatusFunctionLibrary : public USBFieldStatusFunctionLibrary
	{
	public:
		EFacilityIconStatus EvaluateFacilityIconStatus(class UObject* InWorldContextObject, const struct FSBFacilityIconStatusSetting& InSetting);
		bool CheckFacilityIconStatusCondition(class UObject* InWorldContextObject, const struct FSBFacilityIconStatusConditionSetting& InConditionSetting);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFactionCoordinator
	 * Size -> 0x0078 (FullSize[0x02B8] - InheritedSize[0x0240])
	 */
	class ASBFactionCoordinator : public ASBSquadAI
	{
	public:
		class UClass*                                              RelaxedCoordinatorClass;                                 // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASBSquadAI*                                          RelaxedCoordinator;                                      // 0x0248(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              CombatCoordinatorClass;                                  // 0x0250(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSBCombatCoordinatorGroup>                   CombatCoordinatorGroups;                                 // 0x0258(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BAFV[0x50];                                  // 0x0268(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInfluenceSourceComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBInfluenceSourceComponent : public UActorComponent
	{
	public:
		class FString                                              LayerName;                                               // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpdateInterval;                                          // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Radius;                                                  // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Value;                                                   // 0x00D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBInfluencePropagationType                                PropagationType;                                         // 0x00D4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_51MG[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFactionInfluenceSourceComponent
	 * Size -> 0x0010 (FullSize[0x00E8] - InheritedSize[0x00D8])
	 */
	class USBFactionInfluenceSourceComponent : public USBInfluenceSourceComponent
	{
	public:
		float                                                      InfluenceArea;                                           // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VTSO[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAIFwFactionComponent*                               FactionComponent;                                        // 0x00E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnCharacterTakeDamage(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void OnCharacterDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFallingRock
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBFallingRock : public AActor
	{
	public:
		unsigned char                                              UnknownData_DA7E[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartFallingRock(const struct FVector& StartLocation);
		void ServerFallingRockStart(const struct FVector& StartLocation);
		void RequestFallingRockStart(const struct FVector& InRotation);
		void OnStartFallingRock(const struct FVector& StartLocation);
		void OnFallingRockStart(const struct FVector& StartLocation);
		void MulticastFallingRockStart(const struct FVector& StartLocation);
		void ClientFallingRockStart(const struct FVector& StartLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFang_ExpreditonLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFang_ExpreditonLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetExpreditonIconPosition(class UUserWidget* Widget, const struct FVector2D& Position);
		void NeedExpeditionUseCheckDialog(class UObject* InWorldContextObject, TArray<class FString> UniqueIds, bool* NeedDialog);
		void NeedCheckExpeditionUpdateSingle(struct FSBFang_expeditionPlayData* ExpeditionData, bool* NeedUpdate);
		void NeedCheckExpeditionUpdate(struct FSBFang_expeditionData* ExpeditionData, bool* NeedUpdate);
		void GetExpreditonRewardData(class ASBPlayerController* InPlayerController, struct FSBMailRewardData* RewardData);
		void GetExpreditonPlayingStatus(class ASBPlayerController* PlayerController, const class FString& ID, int32_t Category, TArray<int32_t>* PlayIconList, bool* IsNewMark, bool* IsTimeIcon);
		void GetExpreditonFangTypeCount(class UObject* InWorldContextObject, TArray<class FString> UniqueIds, int32_t* OutCount);
		void GetExpreditonFangStorage(class UObject* InWorldContextObject, class USBTemporallyStorage** Storage);
		void GetExpreditonAreaList(class ASBPlayerController* InPlayerController, struct FSBFang_expeditionData* ExpeditionData);
		void GetExpeditionUsableTokenIdList(TArray<int32_t>* TokenIds);
		void GetExpeditionTimeIndex(class ASBPlayerController* PlayerController, const class FString& AreaId, const class FString& TimeId, int32_t* Index);
		int32_t GetExpeditionPlaySlotFreeCount(class ASBPlayerController* PlayerController);
		void GetExpeditionMiddleCategoryToField(const class FString& SubCategory, class FString* Field);
		void GetExpeditionFieldStatus(const class FString& FieldId, struct FSBFang_expeditionData* ExpeditionData, TArray<struct FSBFang_expeditionAreaData>* AreaDataList, TArray<struct FSBFang_expeditionPlayData>* PlayDataList);
		void GetExpeditionFieldIconData(struct FSBFang_expeditionData* ExpeditionData, TArray<struct FSBFang_expeditionIconData>* OutData);
		void GetExpeditionDetailRewardData(class UObject* InWorldContextObject, class ASBPlayerController* PlayerController, struct FSBFang_expeditionPlayData* PlayData, TArray<struct FSBFang_expeditionRandomRewardData>* RewardData);
		void GetExpeditionDetailFixedRewardData(class ASBPlayerController* PlayerController, struct FSBFang_expeditionPlayData* PlayData, TArray<struct FSBMasterReward>* RewardDatas);
		void FindExpeditionAreaDataIndex(struct FSBFang_expeditionData* ExpeditionData, const class FString& ID, int32_t* FindIndex);
		void CheckExpreditonUsed(class UObject* InWorldContextObject, const class FString& UniqueId, bool* IsUsed);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldActorBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFieldActorBase : public UInterface
	{
	public:
		void ReceiveMapAction(class AActor* ActionActor);
		void MapAction(class AActor* ActionActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldActorPoint
	 * Size -> 0x0030 (FullSize[0x0258] - InheritedSize[0x0228])
	 */
	class ASBFieldActorPoint : public AActor
	{
	public:
		unsigned char                                              UnknownData_EAEH[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     RootComp;                                                // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBGroundComponent*                                  GroundComp;                                              // 0x0238(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CD2Y[0x18];                                  // 0x0240(0x0018) MISSED OFFSET (PADDING)

	public:
		bool IsEnable();
		bool IsDiscovery();
		bool IsActive();
		int32_t GetAreaID();
		void EnableSearchPoint();
		void DisableSearchPoint();
		void DeactiveSearchPoint();
		void ActiveSearchPoint();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldActorConditionPoint
	 * Size -> 0x00F0 (FullSize[0x0348] - InheritedSize[0x0258])
	 */
	class ASBFieldActorConditionPoint : public ASBFieldActorPoint
	{
	public:
		unsigned char                                              UnknownData_XVQZ[0x68];                                  // 0x0258(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bConditionPointEnable;                                   // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDebugDraw;                                              // 0x02C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0EG0[0x6];                                   // 0x02C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBConditionPointProjectileParams                   Params;                                                  // 0x02C8(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ExposionAudio;                                           // 0x02F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            ParticleComp;                                            // 0x02F8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    HindranceComponent;                                      // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBBattleStatusComponent*                            BattleStatusComponent;                                   // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBCollisionGroupComponent*                          CollisionGroupComponent;                                 // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBBattleArea*                                       CurrentBattleArea;                                       // 0x0328(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B7J7[0x18];                                  // 0x0330(0x0018) MISSED OFFSET (PADDING)

	public:
		struct FVector GetTakeDamagePoint();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldActorFreeBuffPoint
	 * Size -> 0x00A8 (FullSize[0x0300] - InheritedSize[0x0258])
	 */
	class ASBFieldActorFreeBuffPoint : public ASBFieldActorPoint
	{
	public:
		unsigned char                                              UnknownData_8JC5[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0260(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0VDQ[0x38];                                  // 0x0268(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          InitTransform;                                           // 0x02A0(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class ASBMobCharacter*                                     TargetNpc;                                               // 0x02D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DZ7D[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnUpdateInfoDelegate;                                    // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SNT6[0x10];                                  // 0x02F0(0x0010) MISSED OFFSET (PADDING)

	public:
		bool UpdateNpcActivation();
		void PostInteracFreeBufftPoint(ESBFreeBuffPointLotResult Result, TArray<ESBFreeBuffPointType> BuffTypes);
		void OverlapBeginFreeBuffPoint(class AActor* InOtherActor, const struct FRotator& ViewRotation, class UDataTable* DataTable);
		void OnUpdateInfoDelegate__DelegateSignature();
		bool IsSpawned();
		bool IsNpcBuffPoint();
		void InteractFreeBuffPoint(class AActor* InOtherActor, const struct FRotator& ViewRotation);
		class FName GetNpcProfileDataId();
		bool GetIsActivate();
		ESBFreeBuffPointView GetBuffPointView();
		void BuffActivate(TArray<ESBFreeBuffPointType> BuffTypes);
		void Appear();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFreeBuffSpot
	 * Size -> 0x0038 (FullSize[0x0260] - InheritedSize[0x0228])
	 */
	class ASBFreeBuffSpot : public ATargetPoint
	{
	public:
		class USBInteractionTargetAuthorComponent*                 InteractionTargetAuthorComponent;                        // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              TargetClass;                                             // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FreeBuffPointId;                                         // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KXPS[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              FreeBuffPointTag;                                        // 0x0240(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBFreeBuffPointType                                       FreeBuffPointType;                                       // 0x0250(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBFreeBuffPointView                                       FreeBuffPointView;                                       // 0x0251(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BT92[0x2];                                   // 0x0252(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                NpcSpawnerTag;                                           // 0x0254(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_INNW[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool IsValidFreeBuffPoint();
		bool IsNpcBuffPoint();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldActorGatherPoint
	 * Size -> 0x0088 (FullSize[0x02E0] - InheritedSize[0x0258])
	 */
	class ASBFieldActorGatherPoint : public ASBFieldActorPoint
	{
	public:
		unsigned char                                              UnknownData_29LE[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LSOM[0x32];                                  // 0x0268(0x0032) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBTreasureBoxRarity                                       GatherRarity;                                            // 0x029A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_38CM[0x5];                                   // 0x029B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          InitTransform;                                           // 0x02A0(0x0030) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IDAN[0x10];                                  // 0x02D0(0x0010) MISSED OFFSET (PADDING)

	public:
		void Suicide();
		void PostInteractPoint(ESBGatherPointLotResult Result, TArray<struct FGatherPointLotResult> LotResults);
		void OnResult(ESBGatherPointLotResult Result, const class FString& GetObjectId, TArray<struct FGatherPointLotResult> LotResults);
		void MotionEnd();
		void InteractPoint(class AActor* InOtherActor, const struct FRotator& ViewRotation);
		ESBGatherPointType GetType();
		EPhysicalSurface GetGatherSoundSurface();
		EGatherHeight GetGatherPosition();
		void Disappear();
		void ClearInteractIcon();
		void Appear(bool NotSpawnEffect);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGatherPointSpot
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ASBGatherPointSpot : public ATargetPoint
	{
	public:
		class USBInteractionTargetAuthorComponent*                 InteractionTargetAuthorComponent;                        // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              TargetClass;                                             // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    GatherPointId;                                           // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8VHX[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              GatherPointTag;                                          // 0x0240(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EGatherHeight                                              GatherPosition;                                          // 0x0250(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPhysicalSurface                                           GatherSoundSurface;                                      // 0x0251(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBTreasureBoxRarity                                       GatherRarity;                                            // 0x0252(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3HVJ[0x1];                                   // 0x0253(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsSpawnRandom;                                           // 0x0254(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R0RU[0x23];                                  // 0x0255(0x0023) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       CollisionComponent;                                      // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldActorTreasureBox
	 * Size -> 0x0080 (FullSize[0x02D8] - InheritedSize[0x0258])
	 */
	class ASBFieldActorTreasureBox : public ASBFieldActorPoint
	{
	public:
		unsigned char                                              UnknownData_TIH4[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0260(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GNTL[0x27];                                  // 0x0268(0x0027) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBTreasureBoxRarity                                       Rarity;                                                  // 0x028F(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BSYL[0x18];                                  // 0x0290(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              TreasureSpawner;                                         // 0x02A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              TreasureSpawnerCharacterId;                              // 0x02B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GL7F[0x10];                                  // 0x02C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutoOpenStartTime;                                       // 0x02D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TOZZ[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (PADDING)

	public:
		void PreOpenBox(class AActor* InOtherActor, const struct FRotator& ViewRotation);
		void PostOpenBox(ESBTreasureBoxLotResult Result, TArray<struct FSBTreasureBoxLotResult> LotResults, const class FName& TextId);
		void PostGetDropTreasure(ESBTreasureBoxLotResult Result, TArray<struct FSBTreasureBoxLotResult> LotResults);
		void PostBuffActivate(class AActor* InOtherActor);
		void InteractDeactivate();
		class FString GetTreasureSpawnerCharacterId();
		class FString GetTag();
		ESBTreasureBoxRewardType GetDropTreasureBoxRewardType();
		void DropTreasure(class AActor* InOtherActor, int32_t MinMoney, int32_t MaxMoney, ESBTreasureBoxRewardType InDropTreasureReward);
		void Disappear();
		void Appear(bool IsDropPlaySE);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTreasureSpot
	 * Size -> 0x0090 (FullSize[0x02B8] - InheritedSize[0x0228])
	 */
	class ASBTreasureSpot : public ATargetPoint
	{
	public:
		class USBInteractionTargetAuthorComponent*                 InteractionTargetAuthorComponent;                        // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              TargetClass;                                             // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              DestructibleObjectDropTargetClass;                       // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TreasureBoxId;                                           // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TreasureBoxHardId;                                       // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TreasureBoxSceId;                                        // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CalcTreasureBoxId;                                       // 0x024C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              TreasureBoxTag;                                          // 0x0250(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTimeLimited;                                            // 0x0260(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NQOW[0x3];                                   // 0x0261(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EffectiveTime;                                           // 0x0264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBTreasureBoxRarity                                       Rarity;                                                  // 0x0268(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RJ9S[0x17];                                  // 0x0269(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsSpawnRandom;                                           // 0x0280(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A18D[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              RandomTreasureBoxLocationX;                              // 0x0288(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<float>                                              RandomTreasureBoxLocationY;                              // 0x0298(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ADTM[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       CollisionComponent;                                      // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void RequestSendLogTreasureBoxPop(const class FString& InTag, int32_t InTreasureId, ESBTreasureBoxRarity InRarity, int32_t InDrawType);
		void MulticastSendLogTreasureBoxPop(const class FString& InTag, int32_t InTreasureId, ESBTreasureBoxRarity InRarity, int32_t InDrawType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldActorUtilityComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBFieldActorUtilityComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_7HQA[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBActorVisibilityComponent*                         ActorVisibilityComponent;                                // 0x00C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool SetActorVisibility();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldActorWarpPoint
	 * Size -> 0x0060 (FullSize[0x02B8] - InheritedSize[0x0258])
	 */
	class ASBFieldActorWarpPoint : public ASBFieldActorPoint
	{
	public:
		unsigned char                                              UnknownData_PY4Q[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             RestartAjustLocation;                                    // 0x0260(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            ArrivalAtRotation;                                       // 0x026C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            ArrivalAtCameraRotation;                                 // 0x0278(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bIsAvailableForSearchStartPoint;                         // 0x0284(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8TO5[0x3];                                   // 0x0285(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBWarpPointInfo>                            WarpPointList;                                           // 0x0288(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FName                                                WarpPointId;                                             // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WarpApperRandomDistanceX;                                // 0x02A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WarpApperRandomDistanceY;                                // 0x02A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystemComponent*                            ParticleComp;                                            // 0x02A8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x02B0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetupWarp();
		void ReceiveActivate(class ASBPlayerState* Player, bool bIsNewActivattion);
		void OnFinishedWarpPointActivated();
		bool IsWarpActivattion();
		int32_t GetWarpPointInfoNum();
		TArray<struct FSBWarpPointInfo> GetWarpPointInfoList();
		struct FSBWarpPointInfo GetWarpPointInfo(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFieldBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void GetWorldAllStaticMeshes(class UObject* WorldContextObject, TArray<class UStaticMesh*>* Meshes);
		class UStaticMesh* GetStaticMeshByPath(const class FName& Path);
		void GetSharedCollections(const class FName& CollectionName, TArray<class FName>* OutPaths);
		class FString GetRootDir();
		class FString GetProjectSavedDir();
		class FString GetProjectDir();
		bool CheckWindPower(class UActorComponent* Cmp1, class UStaticMesh* Mesh);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldObjectManager
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBFieldObjectManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnUpdateDelegate;                                        // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FSU8[0x18];                                  // 0x0038(0x0018) MISSED OFFSET (PADDING)

	public:
		void RequestUpdateAll(class UObject* WorldContextObject);
		void OnUpdateDelegate__DelegateSignature();
		class FString GetFieldStatusComponentInfo(class UObject* WorldContextObject);
		class USBFieldStatusComponent* GetFieldStatusComponent(class AActor* Owner, bool* Flag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldSplineActor
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBFieldSplineActor : public AActor
	{
	public:
		class USceneComponent*                                     SceneRoot;                                               // 0x0228(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    Spline;                                                  // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class USplineComponent* GetSplineComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldStatusComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBFieldStatusComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_UC2R[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       Fixed;                                                   // 0x00C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFieldStatus                                               Status;                                                  // 0x00C1(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_67CC[0x6];                                   // 0x00C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBActorVisibilityComponent*                         ActorVisibilityComponent;                                // 0x00C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FDataTableRowHandle                                 StatusSettingHandle;                                     // 0x00D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RZIJ[0x8];                                   // 0x00E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFieldStatusChanged;                                    // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		bool SetStatus(EFieldStatus Val, bool Force);
		void SetActorInteraction(bool Sw);
		void OnRep_FieldStatus();
		EFieldStatus GetStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFieldTravelTrigger
	 * Size -> 0x0068 (FullSize[0x0298] - InheritedSize[0x0230])
	 */
	class ASBFieldTravelTrigger : public ATriggerBase
	{
	public:
		class UBoxComponent*                                       PreloadCollisionComponent;                               // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                TravelFieldId;                                           // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              TravelFieldMapName;                                      // 0x0240(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SpawnPortal;                                             // 0x0250(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSpawnEffect;                                           // 0x0260(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       KeepLocation;                                            // 0x0261(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsCityEntrance;                                          // 0x0262(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JWZB[0x5];                                   // 0x0263(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATargetPoint*                                        DemoTargetPoint;                                         // 0x0268(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBFieldSplineActor*                                 ReturnPointSpline;                                       // 0x0270(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 EventTrigger;                                            // 0x0278(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_50LF[0x10];                                  // 0x0288(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnPreloadCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnMatchmakingConfirmed(class USBMatchingGameState* MO, bool bConfirmed);
		void OnCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void MulticastFieldTravel(class ASBPlayerCharacter* PlayerCharacter);
		void FieldTravel_Impl(class ASBPlayerCharacter* PlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFishingFish
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBFishingFish : public AActor
	{
	public:
		class UBoxComponent*                                       BoundsComponent;                                         // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBSkeletalMeshComponent*                            SkeletalMeshComponent;                                   // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInteractionSwBase
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBInteractionSwBase : public AActor
	{
	public:
		void OnInteractionSw(class AActor* OtherActor, const struct FRotator& Rotator);
		void NotifyPlayerInteraction(class ASBPlayerCharacter* Player);
		void InteractionMulticast(class AActor* OtherActor, const struct FRotator& Rotator);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFishingGame
	 * Size -> 0x1480 (FullSize[0x16A8] - InheritedSize[0x0228])
	 */
	class ASBFishingGame : public ASBInteractionSwBase
	{
	public:
		class USceneComponent*                                     SceneRoot;                                               // 0x0228(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          FishDataTable;                                           // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 FishLotFlexDataHandle;                                   // 0x0240(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 ItemLotDataHandle;                                       // 0x0250(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                FishId;                                                  // 0x0260(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FishScale;                                               // 0x0268(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FishMaxStamina;                                          // 0x026C(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FishSpeed;                                               // 0x0270(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BreakTimeMin;                                            // 0x0274(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BreakTimeMax;                                            // 0x0278(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TiredTimeMin;                                            // 0x027C(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TiredTimeMax;                                            // 0x0280(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WiggleStrength;                                          // 0x0284(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WiggleSpeed;                                             // 0x0288(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WiggleSpeedTired;                                        // 0x028C(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TiredRate;                                               // 0x0290(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BigFishLimitLength;                                      // 0x0294(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TmpFishLength;                                           // 0x0298(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6A27[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class ASBPlayerCharacter*, struct FSBFishGameInfoPerPlayer> FishInfoPerPlayer;                                       // 0x02A0(0x0050) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		ESBFishRarityClassId                                       FishResultRarityClassId;                                 // 0x02F0(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBFishScaleClassId                                        FishResultScaleClassId;                                  // 0x02F1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       FishResultIsHugeItem;                                    // 0x02F2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ODEW[0x1];                                   // 0x02F3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FishResultItemId;                                        // 0x02F4(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FishResultItemAmount;                                    // 0x02F8(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WJJA[0x139C];                                // 0x02FC(0x139C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       EditDebugLotFlex;                                        // 0x1698(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q6HH[0x7];                                   // 0x1699(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBInteractionMoveComponent*                         InteractionMoveComponent;                                // 0x16A0(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization

	public:
		void UploadFishingResult(class ASBPlayerCharacter* InPlayerCharacter, const class FName& InFishId, int32_t InItemID, float InLength, int32_t InItemAmount);
		float UpdateFishStamina(bool IsSamePosition, bool IsReelLine, ESBFishMoveState InFishMoveState, float InCurrentStamina, float InMaxStamina);
		void UpdateFishingPointVisibility(bool Sw);
		void UpdateDebugFishingParam();
		void SetTmpFishingFishInfo(class ASBPlayerCharacter* InPlayerCharacter, const class FName& InFishId, int32_t InItemID, float InLength);
		void SetFishingLineVisibility(bool bIsVisible);
		void SetFishingLineBaseLocation(const struct FVector& BaseLocation);
		void ServerSetFishDebugParam(class ASBPlayerCharacter* Player, const struct FSBFishDebugParam& FishDebugParam);
		void ServerChangeState(class ASBPlayerCharacter* Player, ESBFishingGameState NewState, const class FString& InOption);
		void PushLog(const class FString& LogText);
		void OnUploadFishingResultCompleted(class ASBPlayerCharacter* InPlayerCharacter, bool Success, const class FName& InFishId, int32_t InItemID, float InFishLength, int32_t InItemAmount);
		float LotFishScaleRarityWithRareItemRate(const class FName& FishId, int32_t RarityItemId, float RareItemRate, int32_t MaxRetry, float ave, float dev);
		float LotFishScaleRarity(float ave, float dev);
		class FName LotFishIdFlex();
		bool IsFishingPointCapacityFullTest();
		bool IsFadeEnable();
		bool IsDebugNoLineBreak();
		bool IsDebugHookNoTimeout();
		bool IsDebugFishStaminaLow();
		bool IsDebugFishStaminaInfinite();
		class USBPlayerFishingComponent* GetPlayerFishingComponent(class AActor* Actor);
		float GetMaxFishScleTest(float* OverMaxRate, float MaxScale, int32_t tryNum, float ave, float dev);
		class USBInteractionMoveComponent* GetInteractionMoveComponent();
		int32_t GetFishRarityItem(TArray<struct FSBFishRarityItem> ItemArray, float Rarity);
		bool GetFishingResultItemId(const class FName& InFishId, float InRarity, int32_t* OutItemId, float* OutLength, int32_t* OutAmount);
		class ASBFishingGame* GetFishingGame(class AActor* Actor);
		bool GetFishingFishScaleParam(const class FName& InFishId, float InRarity, float* OutScale, float* OutStamina, float* OutSpeed, float* OutLength);
		bool GetFishingFishName(const class FName& InFishId, float InRarity, class FString* OutFishName, class FString* OutFishDesc);
		bool GetFishingFishLength(const class FName& InFishId, float InRarity, float* OutLength);
		void FishingBattleFishTick();
		void ClientStartFishing(int32_t InPositionId);
		void ClientNoVacantEnd();
		void ClientNotifyPlayerReady(class ASBPlayerCharacter* PlayerCharacter);
		void ClientInitFish(const class FName& InFishId, float InRarity);
		void ClentShowResult(bool Success, const class FName& ResultFishId, int32_t ResultItemId, float ResultFishLength, int32_t ResultItemAmount, bool NewFish, bool NewRecord, int32_t RetCode);
		float CalcMinimumTimeForFishFight(float InMaxStamina);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmMenu
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBFmMenu : public UUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmCellData
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBFmCellData : public UObject
	{
	public:
		struct FSBFmCellInfo                                       Info;                                                    // 0x0028(0x0020) BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bSelected;                                               // 0x0048(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B3I4[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetSelect(bool bValue);
		bool IsPlanted();
		bool IsOpen();
		bool IsItemUsed();
		class FText GetUsedItemName();
		struct FIntPoint GetPoint();
		class FText GetOpenTypeText();
		struct FSBMasterFmUseItem GetMasterUsedItem();
		struct FSBMasterFmSeed GetMasterSeed();
		float GetGrowthProgress();
		bool CanUseItem(const struct FSBMasterFmUseItem& MasterUseItem);
		bool CanPlant();
		bool CanHarvest();
		bool CanGrant();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmFieldData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBFmFieldData : public UObject
	{
	public:
		TArray<class USBFmCellData*>                               CellDataList;                                            // 0x0028(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void SelectCellByUseSeed(class USBFmCellData* SelectedCell, class USBFmSeedData* SelectedSeed, int32_t Direction);
		bool CanAnyHarvest();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmSeedData
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBFmSeedData : public UObject
	{
	public:
		int32_t                                                    ID;                                                      // 0x0028(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MP9U[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		struct FSBMasterFmSeed GetMasterSeed();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmPossessiveSeedData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBFmPossessiveSeedData : public UObject
	{
	public:
		TArray<class USBFmSeedData*>                               SeedDataList;                                            // 0x0028(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmUseItemData
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBFmUseItemData : public UObject
	{
	public:
		int32_t                                                    ID;                                                      // 0x0028(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9VRW[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		struct FSBMasterFmUseItem GetMasterUseItem();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmPossessiveUseItemData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBFmPossessiveUseItemData : public UObject
	{
	public:
		TArray<class USBFmUseItemData*>                            ItemDataList;                                            // 0x0028(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmSendPresentItemData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBFmSendPresentItemData : public UObject
	{
	public:
		struct FSBFmSendPresentItemInfo                            Info;                                                    // 0x0028(0x000C) BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3IY3[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		int32_t GetItemId();
		int32_t GetIndex();
		int32_t GetAmount();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmPresentFriendData
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBFmPresentFriendData : public UObject
	{
	public:
		struct FSBFmPresentFriendInfo                              Info;                                                    // 0x0028(0x0018) BlueprintVisible, NativeAccessSpecifierPublic

	public:
		int32_t GetRemainingPresentCount();
		int32_t GetPlayerId();
		TArray<struct FSBFmSendPresentItemInfo> GetItemInfoList();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmMenuTypesUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFmMenuTypesUtility : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmTypesUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFmTypesUtility : public UBlueprintFunctionLibrary
	{
	public:
		class FText FmAttributeToText(ESBFmAttribute Type);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFocusTargetWidget
	 * Size -> 0x00A8 (FullSize[0x0320] - InheritedSize[0x0278])
	 */
	class USBFocusTargetWidget : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     ModeSwitch;                                              // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBorder*                                             NormalModeGrp;                                           // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox*                                      HBLevel;                                                 // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TextLevel;                                               // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextLevelNum;                                            // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TextName;                                                // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        HPCurSize;                                               // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        HPPrevSize;                                              // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              HPPrev;                                                  // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBuffListWidget*                                   BuffList;                                                // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBElementGaugeWidget*                               ElementGauge;                                            // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBP020_MarkEnemy*                                   P020Mark;                                                // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          P020DataTable;                                           // 0x02D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FLinearColor>                                TextColorList;                                           // 0x02E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class AActor*                                              TargetActor;                                             // 0x02F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              AttackFocusActor;                                        // 0x02F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBattleStatusComponent*                            BattleStatusComponent;                                   // 0x0300(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5I4C[0x18];                                  // 0x0308(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetVisibleGrp(bool IsVisible);
		void SetEditMode(bool IsEditMode);
		void SetAttackFocusActor(class AActor* InActor);
		void OnUnbindFadeOutDeath(class ASBEnemyCharacter* InEnemyCharacter);
		void OnStopAnimOut();
		void OnStopAnimIn();
		void OnPlayAnimOut();
		void OnPlayAnimIn();
		void OnBindFadeOutDeath(class ASBEnemyCharacter* InEnemyCharacter);
		bool IsPlayAnimOut();
		bool IsPlayAnimIn();
		class AActor* GetNowTargetActor();
		void FadeOutDeath();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFoliageCollideManageComponent
	 * Size -> 0x0108 (FullSize[0x01C0] - InheritedSize[0x00B8])
	 */
	class USBFoliageCollideManageComponent : public UActorComponent
	{
	public:
		bool                                                       CollisionDebugDraw;                                      // 0x00B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RHQ6[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CollisionIntervalMax;                                    // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CollisionIntervalMin;                                    // 0x00C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CollisionCheckRadius;                                    // 0x00C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CollisionCheckLocation;                                  // 0x00C8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LW96[0xF4];                                  // 0x00CC(0x00F4) MISSED OFFSET (PADDING)

	public:
		void UpdateComponentsSeParticle(const struct FVector& InCheckLocation, float InCheckRadius, float DeltaTime);
		void UpdateCharactersSeParticle(const struct FVector& InCheckLocation, float InCheckRadius, float DeltaTime);
		void SetFoliageCollisionReactions(TArray<struct FSBFoliageCollisionReaction> CollisionReactions);
		void GetSeParticleCollections(TArray<class FName>* OutAssets);
		void FoliageCollisionReactionSeParticle(TArray<struct FSBFoliageCollisionResult> FoliageCollisions);
		bool FindFoliageCollide(TArray<struct FHitResult> HitResults, TArray<struct FSBFoliageCollisionResult>* OutResults);
		bool CheckFoliageCollideReactions(const struct FVector& Center, float HalfHeight, const struct FVector& Velocity, float* OutValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFoliageReactionCollisionComp
	 * Size -> 0x0058 (FullSize[0x04E0] - InheritedSize[0x0488])
	 */
	class USBFoliageReactionCollisionComp : public UCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_YVFM[0x8];                                   // 0x0488(0x0008) Fix Super Size
		unsigned char                                              UnknownData_MKWW[0x50];                                  // 0x0490(0x0050) MISSED OFFSET (PADDING)

	public:
		void SetSpawnParams(const struct FSBFoliageReactionSpawn& SpawnParams);
		void SetParameters(float DelayTime, float LifeTime, float StartRadius, float EndRadius, float StartStrength, float EndStrength, float HalfHeight, float Center, float Peak);
		void GetFoliageReactionData(struct FSBFoliageReactionData* Data);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFoliageReactions
	 * Size -> 0x00B8 (FullSize[0x02E0] - InheritedSize[0x0228])
	 */
	class ASBFoliageReactions : public AActor
	{
	public:
		bool                                                       Available;                                               // 0x0228(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UAE2[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CurrentCameraLocation;                                   // 0x022C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CurrentCameraVector;                                     // 0x0238(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentCameraCullingFOV;                                 // 0x0244(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoxComponent*                                       AreaBox;                                                 // 0x0248(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PEJA[0x34];                                  // 0x0250(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ReactionDrawCharacterMaxNum;                             // 0x0284(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReactionDrawCharacterCullingFOVOfst;                     // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrushSizeMinDist;                                        // 0x028C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrushSizeMaxDist;                                        // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O2D6[0x4];                                   // 0x0294(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBFoliageReactionData>                      FoliageReactionDatas;                                    // 0x0298(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstancesRadial;                                 // 0x02A8(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstancesSpeed;                                  // 0x02B8(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstancesHeight;                                 // 0x02C8(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SYPG[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateBoxInfo(class UBoxComponent* Box);
		void SelectCharacters(TArray<class AActor*>* OverlappingActors);
		float GetBrushSizeScale(const struct FVector& Location);
		void DrawFoliageReactionMaterial(class UObject* WorldContextObject, class UTextureRenderTarget2D* TargetRT, class UMaterialInterface* Material, ESBFoliageReactions Mode);
		void DrawFoliageReactionDebug();
		bool CreateFoliageReactionDatas();
		void CalcDrawLocations(const struct FSBFoliageReactionData& InReactionData, const struct FVector2D& CanvasScreenSize, float ScaleParam, struct FVector2D* ScreenPosition, struct FVector2D* SizeOnScreen, struct FVector2D* HeightInfo, float* Strength, float* SpeedScalar);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFoliageReactionWave
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBFoliageReactionWave : public AActor
	{
	public:
		float                                                      Radius;                                                  // 0x0228(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Strength;                                                // 0x022C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentTime;                                             // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GM12[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBFoliageReactionCollisionComp*                     ReactionCollisionComponent;                              // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class USBFoliageReactionCollisionComp* GetFoliageReactionCollisionComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFoliageSoundActor
	 * Size -> 0x0168 (FullSize[0x0390] - InheritedSize[0x0228])
	 */
	class ASBFoliageSoundActor : public AActor
	{
	public:
		float                                                      FoliageSoundPlayDistance;                                // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1PSB[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBFoliageSoundType>                         FoliageSoundTypes;                                       // 0x0230(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, NativeAccessSpecifierPublic
		float                                                      ParticleWindDirectionPower;                              // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParticleWindNumPower;                                    // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBFoliageParticleType>                      FoliageParticleTypes;                                    // 0x0248(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, NativeAccessSpecifierPublic
		TArray<struct FSBFoliageSoundInstance>                     FoliageSoundInstances;                                   // 0x0258(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TEHP[0x10];                                  // 0x0268(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBFoliageParticleInstance>                  FoliageParticleInstances;                                // 0x0278(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            PlayingSoundNumPerType;                                  // 0x0288(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TEQA[0x4];                                   // 0x0298(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bGrassSoundAvailable;                                    // 0x029C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrawGrassSoundDebug;                                    // 0x029D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JOII[0x2];                                   // 0x029E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    GrassSoundDivision;                                      // 0x02A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GrassSoundUnitSize;                                      // 0x02A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GrassSoundCheckInstanceCountThreshold;                   // 0x02A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F6D9[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBGrassSoundEventList>                      GrassSoundEvents;                                        // 0x02B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBGrassSoundMeshList>                       GrassSoundMeshes;                                        // 0x02C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TMap<class UStaticMesh*, struct FSBGrassSoundMeshList>     GrassSoundMeshesMap;                                     // 0x02D0(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TMap<struct FVector2D, class UAkComponent*>                GrassSoundInstances;                                     // 0x0320(0x0050) BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class UFoliageInstancedStaticMeshComponent*>        GrassFoliageMeshComponents;                              // 0x0370(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y7HX[0x10];                                  // 0x0380(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateWindSpeedRTPC();
		void InitFoliageSoundTick();
		void InitFoliageParticleTick();
		void GrassSoundInitialize(const struct FVector2D& basePoint);
		class UParticleSystem* GetFoliageParticleSystem(int32_t ID);
		class UAkAudioEvent* GetAudioStartEvent(int32_t ID);
		void FoliageSoundUpdate();
		void FoliageSoundTypesOrganize();
		void FoliageSoundTick(const struct FVector& Center);
		void FoliageParticleUpdate();
		void FoliageParticleTypesOrganize();
		void FoliageParticleTick(const struct FVector& Center);
		void FoliageParticleEditorDebugDisplay();
		void AddFoliageSoundType(class UStaticMesh* Mesh, class UAkAudioEvent* AkAudio, const struct FVector& Offset);
		bool AddFoliageParticleType(class UStaticMesh* Mesh, class UParticleSystem* Particle, const struct FVector& Offset, bool bRotation, float Distance);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSurfaceFootprintSetting
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class USBSurfaceFootprintSetting : public UObject
	{
	public:
		TArray<struct FSBSurfaceFootprint>                         SurfaceFootprintSetting;                                 // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      EffectDelayTime;                                         // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TEGW[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBFootprintSoundSetting                            SoundSetting;                                            // 0x0040(0x0030) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		class UParticleSystem* GetParticle(EPhysicalSurface SurfaceType);
		class UNiagaraSystem* GetNiagara(EPhysicalSurface SurfaceType);
		class UMaterialInstance* GetDecal(EPhysicalSurface SurfaceType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFootprintComponent
	 * Size -> 0x03C0 (FullSize[0x0478] - InheritedSize[0x00B8])
	 */
	class USBFootprintComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_BKRY[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_ParticleScale;                                         // 0x00D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_DecalSize;                                             // 0x00D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_RunFootprintSpeed;                                     // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_DashFootprintSpeed;                                    // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBFootprintSideSocket>                      m_FootprintSockets;                                      // 0x00E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSBSurfaceFootprintSettingList                      SurfaceFootprintSettingList;                             // 0x00F0(0x02B0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBFootPrintDecal>                           m_SpawnedDecalList;                                      // 0x03A0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_X674[0x68];                                  // 0x03B0(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bRecycleAkComponent;                                   // 0x0418(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L7Z2[0x7];                                   // 0x0419(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        m_pAkComponent;                                          // 0x0420(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_9QQ9[0x40];                                  // 0x0428(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedAssets;                                            // 0x0468(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization

	public:
		void RequestFadeoutFootprintInTime(float InFadeTime, bool bIsSuspendCreate);
		void RequestCreateFootprint(const class FName& InSocketName, class USBSurfaceFootprintSetting* Setting, EFootPrintSide Side, float LineDownLength, float LineTopLength, const struct FVector& LocationOffset, const struct FRotator& ParticleRotation, const struct FRotator& DecalRotation, float DecalLifeSpan, float OverrideScale, float OverrideEffectDelay, float OverrideSoundDelay, bool bDisableEffect, bool bDisableSound, bool bLocomotion, ESBEffectVisibleType VisibleType, bool bAsync, class USBAnimNotifyState_Footprint* FootprintNotifyState, const class FName& AttachSocketName);
		bool LineTraceForFootstep(const class FName& InSocketName, struct FHitResult* OutHit, float LineDownLength, float LineTopLength);
		EFootPrintType GetLocomotionFootprintType();
		class FName GetFootprintSocketName(EFootPrintSide FootprintSide);
		class USBSurfaceFootprintSetting* GetFootprintSetting(EFootPrintType FootPrintType);
		float GetDecalSize();
		bool CanCreateLocomotionFootprint(EFootPrintSide FPSide);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFootprintInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFootprintInterface : public UInterface
	{
	public:
		class USBFootprintComponent* GetFootprintComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBForceNavigationMaskWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBForceNavigationMaskWidget : public UUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFrameCaptureComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBFrameCaptureComponent : public UActorComponent
	{
	public:
		class UTextureRenderTarget2D*                              TextureTarget;                                           // 0x00B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NDL0[0x10];                                  // 0x00C0(0x0010) MISSED OFFSET (PADDING)

	public:
		bool Capture();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFrameGrabberActor
	 * Size -> 0x0030 (FullSize[0x0258] - InheritedSize[0x0228])
	 */
	class ASBFrameGrabberActor : public AActor
	{
	public:
		TArray<unsigned char>                                      CaptureFrameData;                                        // 0x0228(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class UTexture2D*                                          CaptureFrameTexture;                                     // 0x0238(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEveryFrame;                                             // 0x0240(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G8FV[0x17];                                  // 0x0241(0x0017) MISSED OFFSET (PADDING)

	public:
		void StopFrameGrab();
		bool StartFrameGrab(bool bEveryFrame);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFrameTimeComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBFrameTimeComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_17YP[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FrameTime;                                               // 0x00C8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PhysicalMemoryTotal;                                     // 0x00CC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PhysicalMemoryPeak;                                      // 0x00D0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PhysicalMemoryUsed;                                      // 0x00D4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0U3J[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFont*                                               FontObject;                                              // 0x00E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFreeArrangeActor
	 * Size -> 0x0040 (FullSize[0x05C0] - InheritedSize[0x0580])
	 */
	class ASBFreeArrangeActor : public AASCharacter
	{
	public:
		class FScriptMulticastDelegate                             OnSetFreeArrangingPlayerDelegate;                        // 0x0580(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ASBPlayerCharacter*                                  FreeArrangingPlayer;                                     // 0x0590(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsFreeArranging;                                         // 0x0598(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GMRQ[0x27];                                  // 0x0599(0x0027) MISSED OFFSET (PADDING)

	public:
		void UpdateServerTmpLocationAndRotation(const struct FVector& InVector, const struct FRotator& InRotator);
		void SetIsFreeArranging(bool InFlag);
		void ServerUpdateFreeArrangeActorLocationAndRotation(const struct FVector& InVector, const struct FRotator& InRotator);
		void RequestUpdateFreeArrangeActorLocationAndRotation(const struct FVector& InVector, const struct FRotator& InRotator);
		void OnSetupParameters(int32_t ActorID);
		void OnSetFreeArrangingPlayer__DelegateSignature();
		void OnRep_FreeArrangingPlayer();
		void GetServerTmpLocationAndRotation(struct FVector* OutVector, struct FRotator* OutRotator);
		void GetHitPointReticleSphereTrace(class ASBPlayerCharacter* PlayerCharacter, float Radius, struct FVector* OutVector);
		void ClientUpdateFreeArrangeActorLocationAndRotation(const struct FVector& InVector, const struct FRotator& InRotator);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFreeBuffNpcSpawnPoint
	 * Size -> 0x00A0 (FullSize[0x02C8] - InheritedSize[0x0228])
	 */
	class ASBFreeBuffNpcSpawnPoint : public AActor
	{
	public:
		unsigned char                                              UnknownData_O94Z[0xC];                                   // 0x0228(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ParamIndex;                                              // 0x0234(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBFreeBuffNpcSpawnParameter>                Parameters;                                              // 0x0238(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		ESBNpcSpawnPriority                                        SpawnPriority;                                           // 0x0248(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FDOO[0x3];                                   // 0x0249(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBNpcInteractionSettings                           InteractionSettings;                                     // 0x024C(0x0040) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LHNN[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 FieldStatusSettingHandle;                                // 0x0290(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FString                                              Animation;                                               // 0x02A0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              AnimationSubCommand;                                     // 0x02B0(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          OverrideWaitParamTable;                                  // 0x02C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameEngine
	 * Size -> 0x0000 (FullSize[0x0DF8] - InheritedSize[0x0DF8])
	 */
	class USBGameEngine : public UGameEngine
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameInstance
	 * Size -> 0x04B8 (FullSize[0x0660] - InheritedSize[0x01A8])
	 */
	class USBGameInstance : public UGameInstance
	{
	public:
		class UDataTable*                                          MapInfoOverride;                                         // 0x01A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          SublevelLoadInfo;                                        // 0x01B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              LastURL;                                                 // 0x01B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 RespawnAssistHandle;                                     // 0x01C8(0x0010) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MLT4[0xF8];                                  // 0x01D8(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FUniqueNetIdRepl, class USBOnlinePlayer*>      InviteRecipients;                                        // 0x02D0(0x0050) Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnMatchedGame;                                           // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		bool                                                       bAdminFuncUnlocked;                                      // 0x0330(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6SQZ[0x7];                                   // 0x0331(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBActorManager*                                     ActorManager;                                            // 0x0338(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBNpcManager*                                       NpcManager;                                              // 0x0340(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPartyManager*                                     PartyManager;                                            // 0x0348(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBFieldObjectManager*                               FieldObjectManager;                                      // 0x0350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBWaterFlowManager*                                 WaterFlowManager;                                        // 0x0358(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBUIVisibleSettings*                                UIVisibleSettings;                                       // 0x0360(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBMatchingManager*                                  MatchingManager;                                         // 0x0368(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBOnlineMessageManager*                             MessageManager;                                          // 0x0370(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBChatManager*                                      ChatManager;                                             // 0x0378(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBProfileManager*                                   ProfileManager;                                          // 0x0380(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlaylog*                                          Playlog;                                                 // 0x0388(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2H4M[0x80];                                  // 0x0390(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBRaidBattleManager*                                RaidBattleManager;                                       // 0x0410(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBInterruptQuestManager*                            InterruptQuestManager;                                   // 0x0418(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBAutoDeliveryQuestManager*                         AutoDeliveryQuestManager;                                // 0x0420(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBNotifyPQManager*                                  NotifyPQManager;                                         // 0x0428(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBNotifyElQuestManager*                             NotifyElQuestManager;                                    // 0x0430(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBAdventureBoardManager*                            AdventureBoardManager;                                   // 0x0438(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBScriptManager*                                    ScriptManager;                                           // 0x0440(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBTickerMessageManager*                             TickerMessageManager;                                    // 0x0448(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBNetworkCafeMessageManager*                        NetworkCafeMessageManager;                               // 0x0450(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBEventScheduler*                                   EventScheduler;                                          // 0x0458(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBDxBattleManager*                                  DxBattleManager;                                         // 0x0460(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8PH7[0x30];                                  // 0x0468(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAddPointDelegate;                                      // 0x0498(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BBSQ[0x30];                                  // 0x04A8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBChatMessage*>                              UninspectedMessageList;                                  // 0x04D8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FSBDownloadImageCache>                       DownloadImageCacheList;                                  // 0x04E8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IU2P[0x10];                                  // 0x04F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnNotificationBlackListedDelegate;                       // 0x0508(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReceiveMessageDelegate;                                // 0x0518(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnJoinPlayerCharacterDelegate;                           // 0x0528(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V2B0[0x8];                                   // 0x0538(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnUpdatePartyMemberDelegate;                             // 0x0540(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              NetworkDataCacheClass;                                   // 0x0550(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBNetworkDataCache*                                 NetworkDataCache;                                        // 0x0558(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBEventExecutor*                                    EventExecutor;                                           // 0x0560(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              ScreenShotUtilsClass;                                    // 0x0568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBScreenShotUtils*                                  ScreenShotUtils;                                         // 0x0570(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y81J[0x8];                                   // 0x0578(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBUploadImageContainer*                             UploadImageContainer;                                    // 0x0580(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TK2N[0x10];                                  // 0x0588(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChangeInvitePartyConvocationDelegate;                  // 0x0598(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnExecutePartyMigrationDelegate;                         // 0x05A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyInviteRejectedBeforeJoinRecruitDelegate;          // 0x05B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReturnDisconnectedPartyDelegate;                       // 0x05C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBErrorProc*                                        ErrorProc;                                               // 0x05D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JVJX[0x38];                                  // 0x05E0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHealthCheck;                                            // 0x0618(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VPOQ[0x3];                                   // 0x0619(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HealthCheckInterval;                                     // 0x061C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActivityStartRequestDelegate;                          // 0x0620(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2XOZ[0x8];                                   // 0x0630(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBDownloadImageImpl*>                        DownloadImageImplList;                                   // 0x0638(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadCompleteGameInstanceDelegate;                      // 0x0648(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_57LT[0x8];                                   // 0x0658(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateChatLogMessageAllAlreadyRead();
		bool Tick(float InDeltaTime);
		void StopNetworkCafeEvent();
		void StartNetworkCafeEvent();
		void ShowAccessRestrictDialog();
		bool ShouldShowCursor();
		void SetScreenshotUploadModeFlag(bool bValue);
		void SetScreenshotShowUiFlag(bool bShowUi);
		void SetOnNetworkError(bool bInNetworkError);
		void SetFirstExpiredRoseOrb(bool bInExpiredRoseOrb);
		void SetFirstExpiredBPP(bool bInExpiredBPP);
		void SetFirstCharacterSpawned(bool bInSpawned);
		void SetActiveHealthCheck(bool bInActive);
		void SendInvitation(class ASBPlayerState* RecipientPlayer, bool bNeedResponse);
		void ScreenShotSaveProcessFlagSet(int32_t Value);
		void ReturnDisconnectParty();
		void ResetActivityStartRequest();
		void RemoveDirectChatLogPlayer(const class FString& SenderPlayerId);
		void RegistrationPartyJoinRequest(const class FString& InRecruitPartyLeaderUserId, const class FString& InRecruitPartyLeaderCharacterId);
		void RecruitRegistrationWithCreatePersistentParty(const struct FSBPartyRecruitData& RecruitData);
		void ReceiveSendInvitationComplete(ESBPartySystemTextType InType, const class FString& RecipientName, bool bWasSuccessful, int32_t ResultCode, const class FString& CharacterId, ESBPrivilegeType Type);
		void ReceivePromotePartyMember(class USBPartyMemberState* PromoteMember);
		void ReceivePartySimplycityChangeForSolo();
		void ReceivePartySimplycityChange(class USBPartyGameState* PartyState);
		void ReceivePartySameMapMemberCountChanged();
		void ReceivePartyRetireGame(class USBPartyGameState* PartyState, bool bFromLeader);
		void ReceivePartyRequestMatchmaking(class USBPartyGameState* PartyState);
		void ReceivePartyMigration(class USBPartyGameState* PartyState, bool bExecuted);
		void ReceivePartyMemberLeft(class USBPartyGameState* PartyState, bool bIsReleased);
		void ReceivePartyMemberLeaving(class USBPartyMemberState* LeavingMember, bool bIsKicked);
		void ReceivePartyMemberJoined(class USBPartyMemberState* JoinedMember, bool bExistingMember, bool bIsRejoin);
		void ReceivePartyMemberDungeonEntryChanged();
		void ReceivePartyLeft(class USBPartyGameState* PartyState, bool bIsKicked);
		void ReceivePartyJoined(class USBPartyGameState* PartyState, bool bIsRejoin);
		void ReceivePartyInvitesChanged();
		void ReceivePartyInviteResponseReceived(const class FString& SenderId, const class FString& SenderName, bool bIsAccepted, const class FString& CharacterId, int32_t ResultCode, ESBPrivilegeType Type);
		void ReceivePartyInviteReceived(const class FString& SenderId, const class FString& SenderName, const class FString& SenderCharacterId, ESBPrivilegeType Type);
		void ReceivePartyConvocation(class USBPartyGameState* PartyState, bool bCanceled, int32_t MigrationResponseCode);
		void ReceiveMatchingFailed(ESBMatchingFailureType FailureType, bool PenaltyForMe, int32_t MinuteToEndPenalty);
		void ReceiveMatchedGame(class USBMatchingGameState* MatchedGame);
		void ReceiveJoinInviteParty(bool bWasSuccessful, int32_t NotApprovedReason);
		void PartyInviteResponse(const class FString& InSenderId, const class FString& InSenderName, bool bIsAccept);
		void OnUpdatePartyMemberDelegate__DelegateSignature();
		void OnReturnDisconnectedPartyDelegate__DelegateSignature(bool bWasSuccessful, int32_t ReturnPartyResultMessageIndex);
		void OnReceiveMessageDelegate__DelegateSignature(class USBChatMessage* Message, const struct FSBChatUIMessage& Mess);
		void OnPrepareScreenshot(class UObject* Sender, class UObject* Param);
		void OnPartyInviteRejectedBeforeJoinRecruitDelegate__DelegateSignature();
		void OnNotificationBlackListedDelegate__DelegateSignature(bool bBlackListed, const class FString& SenderId);
		void OnMatchedGame__DelegateSignature(class USBMatchingGameState* MatchedGame);
		void OnJoinPlayerCharacterDelegate__DelegateSignature(class ASBPlayerState* PlayerState);
		void OnHackDetected(uint32_t InCode);
		void OnFinishScreenshot(class UObject* Sender, class UObject* Param);
		void OnExecutePartyMigrationDelegate__DelegateSignature(bool bExecuted, ESBPartySystemTextType MessageType, int32_t MigrationResponseCode);
		void OnCheckMasterData();
		void OnChangeInvitePartyConvocationDelegate__DelegateSignature(bool bCanceled, int32_t MigrationResponseCode);
		void OnChangedDataDelegate__DelegateSignature();
		void OnAddPointDelegate__DelegateSignature(int32_t Point);
		void OnActivityStartRequestDelegate__DelegateSignature();
		void NotifyExecutePartyServerReConnectError();
		void MigrationHandleTravelError(int32_t RetCode);
		bool LastInputWasGamepadKey();
		bool IsStartImmediately();
		bool IsQuitReady();
		bool IsOnNetworkError();
		bool IsJoinedBackfillMap();
		bool IsJoinableMatching();
		bool IsFirstExpiredRoseOrb();
		bool IsFirstExpiredBPP();
		bool IsFirstCharacterSpawned();
		bool IsAddDirectChatLogPlayer();
		void InternalTravelToSession(const class FName& SessionName);
		void HandleTravelErrorInternal(ETravelFailure FailureType);
		void HandleNetworkErrorInternal(ENetworkFailure FailureType, bool bIsServer);
		void HandleNetworkCafeRewardNotification(int32_t NetworkCafeTotalTimePlayedToday);
		void HandleNetworkCafePlayingTimeNotification(int32_t NetworkCafeTotalTimePlayedToday);
		void HandleMigrationTravelErrorInternal(int32_t RetCode);
		class USBWaterFlowManager* GetWaterFlowManager();
		class USBRaidBattleManager* GetRaidBattleManager();
		class USBProfileManager* GetProfileManager();
		class USBNpcManager* GetNpcManager();
		class USBNotifyPQManager* GetNotifyPQManager();
		class USBNotifyElQuestManager* GetNotifyElQuestManager();
		class USBInterruptQuestManager* GetInterruptQuestManager();
		class USBFieldObjectManager* GetFieldObjectManager();
		class USBEventScheduler* GetEventScheduler();
		class USBEventExecutor* GetEventExecutor();
		class USBDxBattleManager* GetDxBattleManager();
		int32_t GetDirectChatLogWindowIndex(const class FString& SenderPlayerId);
		TArray<struct FSBDirectChatUIMessage> GetDirectChatLogList();
		TArray<struct FSBChatUIMessage> GetChatLogMessage();
		class USBAutoDeliveryQuestManager* GetAutoDeliveryQuestManager();
		class USBAdventureBoardManager* GetAdventureBoardManager();
		class USBActorManager* GetActorManager();
		struct FSBDirectChatUIMessage FindDirectChatLogMessage(const class FString& SenderPlayerId);
		void ExecuteMigrationWaitMembers();
		void ExecuteMigration(bool bExecuted, ESBPartySystemTextType MessageType, int32_t MigrationResponseCode);
		void ClearAllChatLogMessage();
		bool CheckActivityStartRequest();
		void AddDirectChatLogPlayer(const class FString& SenderPlayerId, const class FText& SenderCharacterName, int32_t WindowIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameIntent_Base
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBGameIntent_Base : public UObject
	{
	public:
		unsigned char                                              UnknownData_S42N[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnCreateSessionCompleteDelegate(const class FName& InSessionName, bool bWasSuccessful);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameIntent_XSX
	 * Size -> 0x0128 (FullSize[0x0160] - InheritedSize[0x0038])
	 */
	class USBGameIntent_XSX : public USBGameIntent_Base
	{
	public:
		unsigned char                                              UnknownData_7UJC[0x128];                                 // 0x0038(0x0128) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameIntentManager
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBGameIntentManager : public UObject
	{
	public:
		class USBGameIntent_Base*                                  GameIntentPtr;                                           // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_Dungeon
	 * Size -> 0x0218 (FullSize[0x0610] - InheritedSize[0x03F8])
	 */
	class ASBGameMode_Dungeon : public ASBGameMode
	{
	public:
		class FScriptMulticastDelegate                             OnSpawnEnemyDelegate;                                    // 0x03F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnDeathEnemyDelegate;                                    // 0x0408(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnDeathPlayerDelegate;                                   // 0x0418(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnWipedOutPlayersDelegate;                               // 0x0428(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnResurrectPlayerDelegate;                               // 0x0438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class USBMatchingRescueRequester*                          MatchingRescueRequester;                                 // 0x0448(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnDungeonProcessMessage;                                 // 0x0450(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDungeonScriptRequested;                                // 0x0460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAllPlayerLoadedDelegete;                               // 0x0470(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartGameDelegate;                                     // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPostPlayerLoginDelegate;                               // 0x0490(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    RoundTime;                                               // 0x04A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LeaveTime;                                               // 0x04A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InstanceLifeTime;                                        // 0x04A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReadyLimit;                                              // 0x04AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReadyCount;                                              // 0x04B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StartCountDownTime;                                      // 0x04B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VJV4[0x10];                                  // 0x04B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           DungeonStartDateTimeUTC;                                 // 0x04C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDateTime                                           DungeonClearDateTimeUTC;                                 // 0x04D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L8AS[0x38];                                  // 0x04D8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              GameReadyClass;                                          // 0x0510(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8TES[0xF8];                                  // 0x0518(0x00F8) MISSED OFFSET (PADDING)

	public:
		void TeleportAllPlayersAndBattleNpc(const struct FVector& Location, const struct FRotator& Rotation, float PosOffset, bool bTeleportNpc, bool bWithFade, float DelayTime);
		void TeleportAllBattleNpc();
		void SetGodModeAllPlayerAndBuddy(bool Sw);
		void SetDungeonEnemyAIStop(bool Sw);
		void SetBossEnemySpawnCheckTag(const class FName& BossEnemyTag);
		void SetAllEnemysInvincibleMode(bool Sw);
		void ResurrectAllPlayers();
		void RespawnAllPlayers(bool bDeadOnly);
		void PostPlayerLogin__DelegateSignature();
		void OnWipedOutPlayersDelegate__DelegateSignature();
		void OnStartGame__DelegateSignature();
		void OnSpawnEnemyDelegate__DelegateSignature(class ASBEnemyCharacter* Character);
		void OnResurrectPlayerDelegate__DelegateSignature(class ASBPlayerCharacter* Character);
		void OnDungeonScriptRequested__DelegateSignature(const class FString& ScriptId);
		void OnDungeonProcessMessage__DelegateSignature(const class FString& Message);
		void OnDeathPlayerDelegate__DelegateSignature(class ASBPlayerCharacter* Character, class AActor* DamageCauser);
		void OnDeathEnemyDelegate__DelegateSignature(class ASBEnemyCharacter* Character, class AActor* DamageCauser);
		void OnAllPlayerLoaded__DelegateSignature();
		bool KillDestructibleObject(class ASBDestructible* DestructibleObject);
		void KillAllEnemys();
		void InitGameContentInfoOnMaplevelInfoInitialized();
		void FinishMatch();
		void DungeonStartGame();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_DungeonNormal
	 * Size -> 0x0060 (FullSize[0x0670] - InheritedSize[0x0610])
	 */
	class ASBGameMode_DungeonNormal : public ASBGameMode_Dungeon
	{
	public:
		TArray<struct FSBDungeonScriptQueue>                       DungeonScriptQueue;                                      // 0x0610(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    ScriptRequestId;                                         // 0x0620(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L814[0x4];                                   // 0x0624(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClearDungeonDelegate;                                  // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRespawnFrontlineUpdated;                               // 0x0638(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2185[0x10];                                  // 0x0648(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                RespawnFrontline;                                        // 0x0658(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DGQW[0x10];                                  // 0x0660(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_BattleArena
	 * Size -> 0x0010 (FullSize[0x0680] - InheritedSize[0x0670])
	 */
	class ASBGameMode_BattleArena : public ASBGameMode_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_10NU[0x10];                                  // 0x0670(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetBattleArenaClearTime();
		void EventOnRushTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_CATutorial
	 * Size -> 0x0000 (FullSize[0x0670] - InheritedSize[0x0670])
	 */
	class ASBGameMode_CATutorial : public ASBGameMode_DungeonNormal
	{
	public:
		void SetContentsActionTutorialMode(class ASBPlayerCharacter* Player, ESBPlayerContentActionType Action, bool Sw);
		void ClearContentsActionTutorialMode(class ASBPlayerCharacter* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_DemoCapture
	 * Size -> 0x0000 (FullSize[0x03F8] - InheritedSize[0x03F8])
	 */
	class ASBGameMode_DemoCapture : public ASBGameMode
	{
	public:
		void TimerTick();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_DungeonOffline
	 * Size -> 0x0008 (FullSize[0x0678] - InheritedSize[0x0670])
	 */
	class ASBGameMode_DungeonOffline : public ASBGameMode_DungeonNormal
	{
	public:
		bool                                                       bUseNetData;                                             // 0x0670(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DBBH[0x7];                                   // 0x0671(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_DungeonScenario
	 * Size -> 0x0000 (FullSize[0x0670] - InheritedSize[0x0670])
	 */
	class ASBGameMode_DungeonScenario : public ASBGameMode_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_DungeonScoreAttack
	 * Size -> 0x0008 (FullSize[0x0678] - InheritedSize[0x0670])
	 */
	class ASBGameMode_DungeonScoreAttack : public ASBGameMode_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_GFIX[0x8];                                   // 0x0670(0x0008) MISSED OFFSET (PADDING)

	public:
		void InteractScoreSupplier(class AActor* Supplier, class ASBPlayerController* PlayerController);
		void ExtendGameLimitTime(float ExtraTime, const struct FVector& ActorLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_DungeonSD
	 * Size -> 0x0000 (FullSize[0x0670] - InheritedSize[0x0670])
	 */
	class ASBGameMode_DungeonSD : public ASBGameMode_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_DungeonTimeAttack
	 * Size -> 0x0008 (FullSize[0x0678] - InheritedSize[0x0670])
	 */
	class ASBGameMode_DungeonTimeAttack : public ASBGameMode_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_KS5B[0x8];                                   // 0x0670(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetClearTimeAndLapTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_DxBattle
	 * Size -> 0x0010 (FullSize[0x0680] - InheritedSize[0x0670])
	 */
	class ASBGameMode_DxBattle : public ASBGameMode_DungeonNormal
	{
	public:
		class ASBDxBattleGameInstance*                             m_pDxBattleGameInstance;                                 // 0x0670(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1A1I[0x8];                                   // 0x0678(0x0008) MISSED OFFSET (PADDING)

	public:
		class ASBDxBattleGameInstance* GetDxBattleGameInstance();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_InstanceArea
	 * Size -> 0x0000 (FullSize[0x0670] - InheritedSize[0x0670])
	 */
	class ASBGameMode_InstanceArea : public ASBGameMode_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_KwmBattle
	 * Size -> 0x0000 (FullSize[0x0670] - InheritedSize[0x0670])
	 */
	class ASBGameMode_KwmBattle : public ASBGameMode_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_Lobby
	 * Size -> 0x0050 (FullSize[0x0448] - InheritedSize[0x03F8])
	 */
	class ASBGameMode_Lobby : public ASBGameMode
	{
	public:
		unsigned char                                              UnknownData_9I0Q[0x50];                                  // 0x03F8(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_MzBattle
	 * Size -> 0x0008 (FullSize[0x0678] - InheritedSize[0x0670])
	 */
	class ASBGameMode_MzBattle : public ASBGameMode_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_EHTC[0x8];                                   // 0x0670(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_PublicDungeon
	 * Size -> 0x0000 (FullSize[0x03F8] - InheritedSize[0x03F8])
	 */
	class ASBGameMode_PublicDungeon : public ASBGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_RaidBattle
	 * Size -> 0x0010 (FullSize[0x0680] - InheritedSize[0x0670])
	 */
	class ASBGameMode_RaidBattle : public ASBGameMode_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_RTNW[0x8];                                   // 0x0670(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBRaidBattleGameInstance*                           m_pRaidBattleGameInstance;                               // 0x0678(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_RankUpExam
	 * Size -> 0x0000 (FullSize[0x0670] - InheritedSize[0x0670])
	 */
	class ASBGameMode_RankUpExam : public ASBGameMode_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_SksBattle
	 * Size -> 0x0000 (FullSize[0x0680] - InheritedSize[0x0680])
	 */
	class ASBGameMode_SksBattle : public ASBGameMode_BattleArena
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_Theater
	 * Size -> 0x0010 (FullSize[0x0688] - InheritedSize[0x0678])
	 */
	class ASBGameMode_Theater : public ASBGameMode_DungeonOffline
	{
	public:
		unsigned char                                              UnknownData_8MWQ[0x10];                                  // 0x0678(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_TowerSurvival
	 * Size -> 0x0010 (FullSize[0x0680] - InheritedSize[0x0670])
	 */
	class ASBGameMode_TowerSurvival : public ASBGameMode_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_IH0V[0x8];                                   // 0x0670(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CurrentFloorCleared;                                     // 0x0678(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5VG8[0x7];                                   // 0x0679(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetRespawnPointActor(class AActor* InRespawnPointActor);
		void ExecTeleportForJoin();
		void DebugSetNextFloor(int32_t InFloor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameMode_Tutorial
	 * Size -> 0x0008 (FullSize[0x0618] - InheritedSize[0x0610])
	 */
	class ASBGameMode_Tutorial : public ASBGameMode_Dungeon
	{
	public:
		bool                                                       bUseNetData;                                             // 0x0610(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EW6V[0x7];                                   // 0x0611(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameModeCustomBattleComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBGameModeCustomBattleComponent : public UActorComponent
	{
	public:
		bool                                                       bEnableEnemyInfiniteHP;                                  // 0x00B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnablePlayerInfiniteHP;                                 // 0x00B9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SCGG[0x6];                                   // 0x00BA(0x0006) MISSED OFFSET (PADDING)

	public:
		bool IsEnablePlayerInfiniteHP();
		bool IsEnableEnemyInfiniteHP();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameModeCustomBattleInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBGameModeCustomBattleInterface : public UInterface
	{
	public:
		class USBGameModeCustomBattleComponent* ReceiveGetBattleCustomComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameplayAbility_EnemyAction
	 * Size -> 0x0068 (FullSize[0x0418] - InheritedSize[0x03B0])
	 */
	class USBGameplayAbility_EnemyAction : public UGameplayAbility
	{
	public:
		unsigned char                                              UnknownData_NNDA[0x68];                                  // 0x03B0(0x0068) MISSED OFFSET (PADDING)

	public:
		void FinalizeActionAbility();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameplayStatics
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBGameplayStatics : public UBlueprintFunctionLibrary
	{
	public:
		void TraceMsg(class UObject* WorldContextObject, bool bInExpression, const class FString& Message);
		struct FDateTime SBUtcNow(class UObject* WorldContextObject);
		void RunGarbageCollectionIfNeeded(class UObject* WorldContextObject);
		void RemoveEventReceiverAll(class UObject* WorldContextObject, class UObject* Receiver, bool bStrict);
		void RemoveEventReceiver(class UObject* WorldContextObject, const class FName& EventName, class UObject* Receiver, bool bStrict);
		TArray<class FString> ParseIntoArrayLines(const class FString& STR, bool bCullEmpty);
		class ASBPlayerState* GetSBPlayerState(class UObject* WorldContextObject, int32_t PlayerIndex);
		class ASBPlayerController* GetSBPlayerController(class UObject* WorldContextObject, int32_t PlayerIndex);
		class ASBPlayerCharacter* GetSBPlayerCharacter(class UObject* WorldContextObject, int32_t PlayerIndex);
		class ASBGameState* GetSBGameState(class UObject* WorldContextObject);
		class ASBGameMode* GetSBGameMode(class UObject* WorldContextObject);
		class USBGameInstance* GetSBGameInstance(class UObject* WorldContextObject);
		class USBPlayerStorageComponent* GetPlayerStorageComponent(class UObject* WorldContextObject, int32_t PlayerIndex);
		class ASBPhotoModeController* GetPhotoModeController(class UObject* WorldContextObject);
		struct FDateTime GetNowDate(class UObject* WorldContextObject);
		class FString GetLocaleByCulture();
		class APlayerController* GetFirstLocalPlayerController(class UObject* WorldContextObject);
		class APlayerController* GetFirstLocalOriginalPlayerController(class UObject* WorldContextObject);
		bool GetEventTermEndTime(class UObject* WorldContextObject, const class FString& EventTermId, struct FDateTime* OutEndTime);
		class USBEventScheduler* GetEventScheduler(class UObject* WorldContextObject);
		class USBEventExecutor* GetEventExecutor(class UObject* WorldContextObject);
		class FString GetCharacterId(class UObject* WorldContextObject, int32_t PlayerIndex);
		void ExecuteEvent(class UObject* WorldContextObject, const class FName& EventName, class UObject* Sender, class UObject* Param, ESBEventExecutorOption Option);
		void EnsuresbVbs(class UObject* WorldContextObject, bool bIsCheck);
		void EnsureMsg(class UObject* WorldContextObject, bool bInExpression, const class FString& Message);
		void EnsureAlwaysMsg(class UObject* WorldContextObject, bool bInExpression, const class FString& Message);
		class FText DateTimeToText(class UObject* WorldContextObject, const struct FDateTime& DateTime, bool bHideYear);
		class FText DateTimeToTermText(class UObject* WorldContextObject, const struct FDateTime& DateTime, bool bHideYear);
		class FText DateTimeToFormatText(class UObject* WorldContextObject, const struct FDateTime& DateTime, const class FString& Format);
		bool CheckEventTermDataInstantNow(class UObject* WorldContextObject, const class FString& EventTermId);
		struct FSBEmotionInfo BP_FindEmotionInfoByIntId(int32_t ID, bool* bIsValid);
		struct FSBEmotionInfo BP_FindEmotionInfo(const class FName& ID, bool* bIsValid);
		void AddEventReceiver(class UObject* WorldContextObject, const class FName& EventName, class UObject* Receiver, const class FScriptDelegate& Delegate);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameReadyBase
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBGameReadyBase : public AActor
	{
	public:
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameServer
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBGameServer : public UObject
	{
	public:
		unsigned char                                              UnknownData_ADEJ[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameSession
	 * Size -> 0x00F8 (FullSize[0x0338] - InheritedSize[0x0240])
	 */
	class ASBGameSession : public AGameSession
	{
	public:
		int32_t                                                    MaxGMJumpers;                                            // 0x0240(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7RO6[0xF4];                                  // 0x0244(0x00F4) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameSingleton
	 * Size -> 0x0D68 (FullSize[0x0D90] - InheritedSize[0x0028])
	 */
	class USBGameSingleton : public UObject
	{
	public:
		unsigned char                                              UnknownData_030O[0xE8];                                  // 0x0028(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedAssets;                                            // 0x0110(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8TS4[0x18];                                  // 0x0120(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MasterDataManager;                                       // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              HttpQueryManager;                                        // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              ServerURL;                                               // 0x0148(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              PlayerManager;                                           // 0x0158(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CharaPartsManager;                                       // 0x0160(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              NpcJobManager;                                           // 0x0168(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ConfigSaveManager;                                       // 0x0170(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SoundManager;                                            // 0x0178(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              UIManager;                                               // 0x0180(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              LibrarySaveManager;                                      // 0x0188(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              NewMarkManager;                                          // 0x0190(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              EffectManager[0x28];                                     // 0x0198(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              SkinMaterialManager[0x28];                               // 0x01C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              MakeupManager[0x28];                                     // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              ProjectileManager[0x28];                                 // 0x0210(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              QuestManager[0x28];                                      // 0x0238(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              BoneScaleManager[0x28];                                  // 0x0260(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              ColorManager[0x28];                                      // 0x0288(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              AdditionalColorManager[0x28];                            // 0x02B0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              UIAssetManager[0x28];                                    // 0x02D8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              WeaponManager[0x28];                                     // 0x0300(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              SystemMessageManager[0x28];                              // 0x0328(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              EnemyManager[0x28];                                      // 0x0350(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              EnemyPerformanceLogger[0x28];                            // 0x0378(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              BuddyConditionalVoiceManager[0x28];                      // 0x03A0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              BuddyEnemyManager[0x28];                                 // 0x03C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DemoManager[0x28];                                       // 0x03F0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              BattleManager[0x28];                                     // 0x0418(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              BattleStatusManager[0x28];                               // 0x0440(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DroppingTextManager[0x28];                               // 0x0468(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              JingleManager[0x28];                                     // 0x0490(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              ColoringShopManager[0x28];                               // 0x04B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              EventTriggerDB[0x28];                                    // 0x04E0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DebugFunction[0x28];                                     // 0x0508(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FSBTextTableDatabase                                TextTableDB;                                             // 0x0530(0x01A0) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UDataTable*                                          ZoneDB;                                                  // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          PlayerClassDB;                                           // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CharacterSystemParamDB[0x28];                            // 0x06E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              WeaponAssetDB[0x10];                                     // 0x0708(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              AbilityModifierDB[0x28];                                 // 0x0718(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AttackMasterDataModifierDB[0x28];                        // 0x0740(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ImagineDB[0x28];                                         // 0x0768(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CharacterProfileDB[0x28];                                // 0x0790(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              RegionDB[0x28];                                          // 0x07B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              LocationDB[0x28];                                        // 0x07E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EmoteDB[0x28];                                           // 0x0808(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ScenarioFlagDB[0x28];                                    // 0x0830(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyTypeDB[0x28];                                       // 0x0858(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyCharaCreateDataInfoDB[0x28];                        // 0x0880(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyLvGapBiasDB[0x28];                                  // 0x08A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyLvGapBiasCoefficientsDB[0x28];                      // 0x08D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyDifficultyDB[0x28];                                 // 0x08F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemySetAssetDB[0x28];                                   // 0x0920(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyWaveSettingsAssetDB[0x28];                          // 0x0948(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyStatusPlayerNumBiasDB[0x28];                        // 0x0970(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyBattleStatusBiasByContentIdDB[0x28];                // 0x0998(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyMaxSpawnNumDataByContentIdDB[0x28];                 // 0x09C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyReserveSlotNumDataByContentIdDB[0x28];              // 0x09E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyDungeonAttributeDB[0x28];                           // 0x0A10(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyMinimumDamageDB[0x28];                              // 0x0A38(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DungeonDifficultyDB[0x28];                               // 0x0A60(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              StampDataDB[0x28];                                       // 0x0A88(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              StampCategoryDataDB[0x28];                               // 0x0AB0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MailDataDB[0x28];                                        // 0x0AD8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ScriptActorActionDataDB[0x28];                           // 0x0B00(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              RepGraphFrequencyDistDB[0x28];                           // 0x0B28(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              WorldUIDB[0x28];                                         // 0x0B50(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              DigitalSignageDB[0x28];                                  // 0x0B78(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              LevelNameConventionsDB[0x28];                            // 0x0BA0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              TraversePointDB[0x28];                                   // 0x0BC8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CountryTimeZoneSettingDB[0x28];                          // 0x0BF0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              InterruptQuestTreasureObjectSettingDB[0x28];             // 0x0C18(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BuddyEnemyIdDB[0x28];                                    // 0x0C40(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BuddyConditionalVoiceSettingsDB[0x28];                   // 0x0C68(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              NpcSpawnLoadReductionDB[0x28];                           // 0x0C90(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              NpcSpawnDistanceByContentIdDB[0x28];                     // 0x0CB8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ItemInUseCanGestureDataDB[0x28];                         // 0x0CE0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              TutorialHelpDB[0x28];                                    // 0x0D08(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              InvalidFlyingEnemyReductionDB[0x28];                     // 0x0D30(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MapBGConfigDB[0x28];                                     // 0x0D58(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_IHNG[0x10];                                  // 0x0D80(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnReserveLoadEnemyAssetsDelegate__DelegateSignature();
		class USBWeaponManager* GetWeaponManager();
		class USBUIManager* GetUIManager();
		class USBUIAssetManager* GetUIAssetManager();
		class USBSystemMessageManager* GetSystemMessageManager();
		class USBSoundManager* GetSoundManager();
		class USBSkinMaterialManager* GetSkinMaterialManager();
		class USBQuestManager* GetQuestManager();
		class USBProjectileManager* GetProjectileManager();
		class USBPlayerManager* GetPlayerManager();
		class USBNpcParameterManager* GetNpcParameterManager();
		class USBNewMarkManager* GetNewMarkManager();
		class USBMasterDataManager* GetMasterDataManager();
		class USBMakeupManager* GetMakeupManager();
		class USBLibrarySaveManager* GetLibrarySaveManager();
		class UJingleManager* GetJingleManager();
		class USBHttpQueryManager* GetHttpQueryManager();
		class USBEventTriggerDatabase* GetEventTriggerDatabase();
		class USBEnemyPerformanceLogger* GetEnemyPerformanceLogger();
		class USBEnemyManager* GetEnemyManager();
		class USBEffectManager* GetEffectManager();
		class USBDroppingTextManager* GetDroppingTextManager();
		class USBDemoManager* GetDemoManager();
		class USBDebugFunction* GetDebugFunction();
		class USBConfigureSaveManager* GetConfigSaveManager();
		class USBCharaCreateColorManager* GetColorManager();
		class USBColoringShopManager* GetColoringShopManager();
		class USBCharaPartsManager* GetCharaPartsManager();
		class USBBuddyEnemyManager* GetBuddyEnemyManager();
		class USBBuddyConditionalVoiceManager* GetBuddyConditionalVoiceManager();
		class USBCharaCreateBoneScaleManager* GetBoneScaleManager();
		class USBBattleStatusManager* GetBattleStatusManager();
		class USBBattleManager* GetBattleManager();
		class USBAdditionalColorManager* GetAdditionalColorManager();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState
	 * Size -> 0x0168 (FullSize[0x0400] - InheritedSize[0x0298])
	 */
	class ASBGameState : public AGameState
	{
	public:
		class FString                                              GameModeStr;                                             // 0x0298(0x0010) Net, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int64_t                                                    NetId;                                                   // 0x02A8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T5F1[0x18];                                  // 0x02B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MinutesPerDay;                                           // 0x02C8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MinutesPerDaytime;                                       // 0x02CC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableTimeProgression;                                   // 0x02D0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1RU3[0x3];                                   // 0x02D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    GameTime_Hour;                                           // 0x02D4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GameTime_Minute;                                         // 0x02D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6KPX[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    ServerTime;                                              // 0x02E0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerDiedCountDown;                                     // 0x02E8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3TFY[0x34];                                  // 0x02EC(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           ModeStartTimeUTC;                                        // 0x0320(0x0008) Net, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K4DB[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPvP : 1;                                                // 0x0330(0x0001) BIT_FIELD Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_46X1[0x3];                                   // 0x0331(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bInfiniteRespawnable;                                    // 0x0334(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZH7D[0x3];                                   // 0x0335(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    ServerGameTime;                                          // 0x0338(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FINT[0x60];                                  // 0x0340(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBPlayerState*>                              SimplicityOnPlayers;                                     // 0x03A0(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		bool                                                       bActivateShutDownServer;                                 // 0x03B0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XSDL[0x7];                                   // 0x03B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           ActivateShutDownServerDateTime;                          // 0x03B8(0x0008) Net, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESBServerShutDownReason                                    ServerShutDownReason;                                    // 0x03C0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EAOB[0x7];                                   // 0x03C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    MonitorTime_Server;                                      // 0x03C8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6SFY[0x28];                                  // 0x03D0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAuroraVisible;                                          // 0x03F8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7CBP[0x7];                                   // 0x03F9(0x0007) MISSED OFFSET (PADDING)

	public:
		void SublevelInitialLoaded();
		void SetOverrideGameTime(bool bInOverrideGameTime, const struct FDateTime& InOverrideGameTime, bool bDebug);
		void SetGameTimeSettings(bool InEnableTimeProgression, int32_t InGameTime_Hour, int32_t InGameTime_Minute);
		void SetAuroraVisible(bool Sw);
		void OnRep_ServerTime();
		void LoadSublevels();
		bool IsSublevelInitialLoaded();
		bool IsPvP();
		bool IsNoWaitSelfRespawnInput();
		bool IsAuroraVisible();
		bool GetTimeProgression();
		struct FDateTime GetServerTime();
		struct FDateTime GetServerGameTime();
		struct FDateTime GetModeStartTimeUTC();
		int32_t GetMinutesPerDaytime();
		int32_t GetMinutesPerDay();
		struct FDateTime GetLocalTime();
		struct FDateTime GetGameTime(bool IngoreOverride);
		int32_t GetGameDaysFromSkyblueEpoch();
		bool GameTimeIsOverridden();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_Dungeon
	 * Size -> 0x0D60 (FullSize[0x1160] - InheritedSize[0x0400])
	 */
	class ASBGameState_Dungeon : public ASBGameState
	{
	public:
		unsigned char                                              UnknownData_T7J0[0x8];                                   // 0x0400(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReadyCount;                                              // 0x0408(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    PlayerNumAtStart;                                        // 0x040C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RespawnableNum;                                          // 0x0410(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MissionStartType;                                        // 0x0414(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KP2Y[0x1];                                   // 0x0418(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsGameStarted;                                          // 0x0419(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFromBattleMode;                                         // 0x041A(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBGameOver                                                GameOverState;                                           // 0x041B(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsDungeonCanEntry;                                      // 0x041C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsTimerPause;                                           // 0x041D(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FEYL[0x2];                                   // 0x041E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GameLimitTime;                                           // 0x0420(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XWIJ[0x4];                                   // 0x0424(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           DungeonNowDateTimeUTC;                                   // 0x0428(0x0008) Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F3T2[0x8];                                   // 0x0430(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           DungeonLimitDateTimeUTC;                                 // 0x0438(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DungeonLossTimeSec;                                      // 0x0440(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DungeonClearTime;                                        // 0x0444(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBLevelBuddyVoiceComponent*                         LevelConditionVoiceComponent;                            // 0x0448(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeathDelegete;                                         // 0x0450(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnGameStartDelegate;                                     // 0x0460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSubtractGameLimitTimeDelegete;                         // 0x0470(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFromRespawnPointDelegete;                              // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameOverDelegate;                                      // 0x0490(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTimeOverDelegate;                                      // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDungeonClearAPIDelegate;                               // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetDungeonClearTimeDelegate;                           // 0x04C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartDungeonResult;                                    // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                PlayingDungeonId;                                        // 0x04E0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBDungeonClearConditionWatcher*                     ClearConditionWatcher;                                   // 0x04E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_654W[0x18];                                  // 0x04F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PlayScriptNumber;                                        // 0x0508(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBDungeonScriptType                                       PlayScriptType;                                          // 0x050C(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X3BE[0x3];                                   // 0x050D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBDungeonCameraDemo*                                DungeonDemoBossDead;                                     // 0x0510(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBDungeonCameraDemo*                                DungeonDemoResult;                                       // 0x0518(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U9V1[0x2];                                   // 0x0520(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDungeonEntryClosed;                                     // 0x0522(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CT14[0x5];                                   // 0x0523(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBEncounterVolume*                                  BossSpawnEncounterVolume;                                // 0x0528(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBArenaMissionWatcher*                              ArenaMissionWatcher;                                     // 0x0530(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBTowerChallengeWatcher*                            TowerChallengeWatcher;                                   // 0x0538(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PG96[0xC20];                                 // 0x0540(0x0C20) MISSED OFFSET (PADDING)

	public:
		void UpdateDungeonPlayerNum();
		void SkipGameLimitTime(float Time);
		void SetResultStartDelay(float Time);
		void SetResultLimitTime(float Time);
		void SetPlayingDungeonId(const class FName& InPlayingId);
		void SetGameLimitTime(float Time);
		void SetGameLimitEnterTime(float LimitEnterTime);
		bool SetEnableLocalPlayerInput(bool Sw);
		void SetBossSpawnEncounterVolume(class ASBEncounterVolume* EncounterVolume);
		void SBOnTimeOverDelegate__DelegateSignature();
		void SBOnSubtractGameLimitTimeDelegate__DelegateSignature(int32_t SubtractTime);
		void SBOnGameStartDelegate__DelegateSignature();
		void SBOnGameOverDelegate__DelegateSignature();
		void SBOnFromRespawnPointDelegate__DelegateSignature(bool IsFieldDead);
		void SBOnDeathDelegete__DelegateSignature(class ASBPlayerState_Dungeon* Killer, class ASBPlayerState_Dungeon* Victim, int32_t Count, int32_t KillersTotalKills, int32_t VictimsTotalDeaths);
		void RequestSkipGameLimitTime(float Time);
		void PushNewLoginLog(const class FString& InCharacterName, bool Comeback);
		void OnStartDungeonResult__DelegateSignature();
		void OnRep_RespawnableNum();
		void OnRep_ReadyCount();
		void OnRep_PlayingDungeonId();
		void OnRep_IsGameStarted();
		void OnRep_GameOverState();
		void OnRep_GameLimitTime();
		void OnRep_DungeonNowTime();
		void OnRep_DungeonLimitDataTimeUTC();
		void OnRep_DungeonClearTime();
		void OnDungeonClearTimeDelegate__DelegateSignature();
		void OnDungeonClearAPIDelegate__DelegateSignature();
		bool IsTimerPaused();
		bool IsTimeOver();
		bool IsGameStarted();
		bool IsGameOver();
		bool IsFromBattleMode();
		bool IsDungeonEntryClosed();
		bool IsAlwaysShowBossHPGauge();
		class USBTowerChallengeWatcher* GetTowerChallengeWatcher();
		struct FSBTokenTreasureBoxRewardInfo GetTokenTreasureBoxRewardInfo();
		float GetResultLimitTime();
		float GetReadyCount();
		class FName GetPlayingDungeonId();
		int32_t GetPlayerNumAtStart();
		float GetGameLimitTimeBase();
		float GetGameLimitTime();
		float GetDungeonLossTime();
		int32_t GetDungeonClearTimeMSec();
		struct FSBDungeonClearRewardInfo GetDungeonClearRewardPlusInfo();
		struct FSBDungeonClearRewardInfo GetDungeonClearRewardInfo();
		class USBDungeonClearConditionWatcher* GetClearConditionWatcher();
		class ASBEncounterVolume* GetBossSpawnEncounterVolume();
		class USBArenaMissionWatcher* GetArenaMissionWatcher();
		int32_t GetAlivePlayersNum();
		void ClientSubtractGameLimitTime(int32_t SubtractTime);
		void BP_ReadyCount();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_DungeonNormal
	 * Size -> 0x0078 (FullSize[0x11D8] - InheritedSize[0x1160])
	 */
	class ASBGameState_DungeonNormal : public ASBGameState_Dungeon
	{
	public:
		int32_t                                                    PlayerNum;                                               // 0x1160(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B4T4[0x4];                                   // 0x1164(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        DungeonScriptQueue;                                      // 0x1168(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic
		int32_t                                                    DungeonScriptIdAllPlayerStarted;                         // 0x1178(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DungeonScriptIdAllPlayerEnded;                           // 0x117C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JVPH[0x8];                                   // 0x1180(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartClearConditionScriptAllPlayers;                   // 0x1188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndClearConditionScriptAllPlayers;                     // 0x1198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndClearConditionScriptOnePlayer;                      // 0x11A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                DungeonFrontline;                                        // 0x11B8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBDungeonNormalProgress                                   DungeonProgress;                                         // 0x11C0(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X0U1[0x7];                                   // 0x11C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDungeonProgressChangeDelegate;                         // 0x11C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateDungeonProcessCondition(ESBDungeonClearCondition ClearType, const class FString& ClearParameter);
		void SetupDungeonProcessCondition(TArray<struct FSBDungeonProcess> Processes);
		void OnStartClearConditionScriptAllPlayers__DelegateSignature(int32_t StartScriptId, const class FString& ScriptName);
		void OnRep_DungeonProgressChange();
		void OnRep_DungeonFrontline();
		void OnRep_AddNewDungeonScript();
		void OnEndClearConditionScriptOnePlayer__DelegateSignature(int32_t EndScriptId, const class FString& ScriptName);
		void OnEndClearConditionScriptAllPlayers__DelegateSignature(int32_t EndScriptId, const class FString& ScriptName);
		void OnDungeonProgressChangeDelegate__DelegateSignature(ESBDungeonNormalProgress NewDungeonProgress);
		void NotifyPlayerScriptStart(class ASBPlayerState* PS, int32_t StartId);
		void NotifyPlayerScriptEnd(class ASBPlayerState* PS, int32_t StartId);
		void GetScriptPlayInfo(int32_t* AllStarted, int32_t* AllEnded);
		class FName GetDungeonScriptName(int32_t ID);
		void ExecOnePlayerScriptEnd(int32_t EndId);
		bool ExecAllPlayerScriptStart(int32_t EndId);
		bool ExecAllPlayerScriptEnd(int32_t EndId);
		bool CheckAllPlayerScriptStart(int32_t StartId);
		bool CheckAllPlayerScriptEnd(int32_t EndId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_BattleArena
	 * Size -> 0x0008 (FullSize[0x11E0] - InheritedSize[0x11D8])
	 */
	class ASBGameState_BattleArena : public ASBGameState_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_DCFT[0x8];                                   // 0x11D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetTotalWaveNo(int32_t WaveNo);
		void SetCurrentWaveNo(int32_t WaveNo);
		int32_t GetTotalWaveNo();
		int32_t GetCurrentWaveNo();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_CATutorial
	 * Size -> 0x0000 (FullSize[0x11D8] - InheritedSize[0x11D8])
	 */
	class ASBGameState_CATutorial : public ASBGameState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_DungeonOffline
	 * Size -> 0x0000 (FullSize[0x11D8] - InheritedSize[0x11D8])
	 */
	class ASBGameState_DungeonOffline : public ASBGameState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_DungeonScenario
	 * Size -> 0x0000 (FullSize[0x11D8] - InheritedSize[0x11D8])
	 */
	class ASBGameState_DungeonScenario : public ASBGameState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_DungeonScoreAttack
	 * Size -> 0x01B0 (FullSize[0x1388] - InheritedSize[0x11D8])
	 */
	class ASBGameState_DungeonScoreAttack : public ASBGameState_DungeonNormal
	{
	public:
		struct FSBScoreAttackSettings                              ScoreAttackSettings;                                     // 0x11D8(0x0160) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       SettingsInitialized;                                     // 0x1338(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R7E7[0x3];                                   // 0x1339(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Score;                                                   // 0x133C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ComboCount;                                              // 0x1340(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxComboCount;                                           // 0x1344(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ComboTimer;                                              // 0x1348(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    KillCount;                                               // 0x134C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ScoreBuffTimer;                                          // 0x1350(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ResultFixed;                                             // 0x1354(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_15UR[0x3];                                   // 0x1355(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TotalScore;                                              // 0x1358(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BestScore;                                               // 0x135C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBScoreAttackRemainTime                                   RemainTimeType;                                          // 0x1360(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ONH5[0x3];                                   // 0x1361(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpawnedEnemyNum;                                         // 0x1364(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AliveEnemyNum;                                           // 0x1368(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TXKK[0x1C];                                  // 0x136C(0x001C) MISSED OFFSET (PADDING)

	public:
		void OnTimeOver();
		void OnScoreUp(int32_t InScore);
		void OnRep_ScoreAttackRemainTime();
		void OnExtendGameLimitTime(float Time, const struct FVector& ActorLocation);
		void NotifyInteractScoreSupplier(class AActor* Supplier, class ASBPlayerController* PlayerController);
		void NotifyExtendGameLimitTime(float Time, const struct FVector& ActorLocation);
		void InitScoreAttackState(const struct FSBScoreAttackSettings& Settings);
		bool GetScoreAttackResult(struct FSBScoreAttackResult* ScoreAttackResult);
		int32_t GetScore();
		int32_t GetMaxComboCount();
		int32_t GetKillCount();
		float GetCurrentScoreRate();
		float GetCurrentScoreBuffRate();
		float GetCurrentComboScoreRate();
		float GetCurrentBuffTimer();
		float GetComboTimer();
		int32_t GetComboCount();
		float GetBuffTimer();
		int32_t GetBestScore();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_DungeonTimeAttack
	 * Size -> 0x0098 (FullSize[0x1270] - InheritedSize[0x11D8])
	 */
	class ASBGameState_DungeonTimeAttack : public ASBGameState_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_NFUS[0x88];                                  // 0x11D8(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      TAInformation;                                           // 0x1260(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic

	public:
		void SetTimeAttackResult(TArray<struct FDateTime> Time);
		void SetBestClearTimeAndLapTime(int64_t Clear, TArray<int32_t> Lap);
		void OnRep_TAInformation();
		int32_t GetResultTimeMSec();
		TArray<int32_t> GetResultLapTimeMSec();
		TArray<int32_t> GetBestLapTime();
		struct FTimespan GetBestClearTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_DxBattle
	 * Size -> 0x0020 (FullSize[0x11F8] - InheritedSize[0x11D8])
	 */
	class ASBGameState_DxBattle : public ASBGameState_DungeonNormal
	{
	public:
		class FScriptMulticastDelegate                             StartInfoDelegete;                                       // 0x11D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    BattleSequenceCount;                                     // 0x11E8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BattleCurrentSequenceTimeLimit;                          // 0x11EC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7OOR[0x8];                                   // 0x11F0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetBattleCurrentSequenceTimeLimit(float NextCurrentSequenceTimeLimit);
		void OnTimeOver();
		int32_t IncBattleSequenceCount();
		int32_t GetBattleSequenceCount();
		float GetBattleCurrentSequenceTimeLimit();
		void CallStartInfo();
		void BattleFailed();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_InstanceArea
	 * Size -> 0x0000 (FullSize[0x11D8] - InheritedSize[0x11D8])
	 */
	class ASBGameState_InstanceArea : public ASBGameState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_Lobby
	 * Size -> 0x0030 (FullSize[0x0430] - InheritedSize[0x0400])
	 */
	class ASBGameState_Lobby : public ASBGameState
	{
	public:
		class FScriptMulticastDelegate                             OnChangedLobbyDelegete;                                  // 0x0400(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                DungeonId;                                               // 0x0410(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OQRA[0x10];                                  // 0x0418(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxPlayers;                                              // 0x0428(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumPlayers;                                              // 0x042C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_DungeonId();
		void OnChangedLobbyDelegete__DelegateSignature(ESBLobbyChangedType LobbyChangedType);
		class ASBPlayerState_Lobby* GetRoomOwnerPlayer();
		int32_t GetNumPlayers();
		int32_t GetMaxPlayers();
		class FName GetDungeonId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_MzBattle
	 * Size -> 0x0048 (FullSize[0x1220] - InheritedSize[0x11D8])
	 */
	class ASBGameState_MzBattle : public ASBGameState_DungeonNormal
	{
	public:
		struct FSBMzBattleSettings                                 MzBattleSettings;                                        // 0x11D8(0x0020) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       SettingsInitialized;                                     // 0x11F8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S4G5[0x3];                                   // 0x11F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StartTime;                                               // 0x11FC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ResultFixed;                                             // 0x1200(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3L9F[0x3];                                   // 0x1201(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ClearTime;                                               // 0x1204(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DeadCount;                                               // 0x1208(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BurstCount;                                              // 0x120C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ChainComboCount;                                         // 0x1210(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RatingTotal;                                             // 0x1214(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K6QG[0x8];                                   // 0x1218(0x0008) MISSED OFFSET (PADDING)

	public:
		void InitMzBattleState(const struct FSBMzBattleSettings& Settings);
		int32_t GetStartTime();
		int32_t GetRatingTotal();
		bool GetMzBattleResult(struct FSBMzBattleResult* OutResult);
		int32_t GetDeadCount();
		int32_t GetClearTime();
		int32_t GetChainComboCount();
		int32_t GetBurstCount();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_PublicDungeon
	 * Size -> 0x0000 (FullSize[0x0400] - InheritedSize[0x0400])
	 */
	class ASBGameState_PublicDungeon : public ASBGameState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_RaidBattle
	 * Size -> 0x0018 (FullSize[0x11F0] - InheritedSize[0x11D8])
	 */
	class ASBGameState_RaidBattle : public ASBGameState_DungeonNormal
	{
	public:
		class FScriptMulticastDelegate                             StartInfoDelegete;                                       // 0x11D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VOTC[0x8];                                   // 0x11E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void CallStartInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_RankUpExam
	 * Size -> 0x0000 (FullSize[0x11D8] - InheritedSize[0x11D8])
	 */
	class ASBGameState_RankUpExam : public ASBGameState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_SksBattle
	 * Size -> 0x0000 (FullSize[0x11E0] - InheritedSize[0x11E0])
	 */
	class ASBGameState_SksBattle : public ASBGameState_BattleArena
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_Theater
	 * Size -> 0x0000 (FullSize[0x11D8] - InheritedSize[0x11D8])
	 */
	class ASBGameState_Theater : public ASBGameState_DungeonOffline
	{
	public:
		void UnloadPreloadedSubLevels();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameState_TowerSurvival
	 * Size -> 0x0008 (FullSize[0x11E0] - InheritedSize[0x11D8])
	 */
	class ASBGameState_TowerSurvival : public ASBGameState_DungeonNormal
	{
	public:
		int32_t                                                    NowFloorNum;                                             // 0x11D8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VTMG[0x4];                                   // 0x11DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGameViewportClient
	 * Size -> 0x0050 (FullSize[0x03B8] - InheritedSize[0x0368])
	 */
	class USBGameViewportClient : public UGameViewportClient
	{
	public:
		unsigned char                                              UnknownData_YR32[0x50];                                  // 0x0368(0x0050) MISSED OFFSET (PADDING)

	public:
		void OnPlayerClassChanged(class UObject* Sender, class UObject* Param);
		void OnKeyConfigChanged(class UObject* Sender, class UObject* Param);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGashaComponent
	 * Size -> 0x0090 (FullSize[0x0148] - InheritedSize[0x00B8])
	 */
	class USBGashaComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCompleteProductsDelegate;                              // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteRateDelegate;                                  // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletePlayCountDelegate;                             // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletePullDelegate;                                  // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S3F9[0x50];                                  // 0x00F8(0x0050) MISSED OFFSET (PADDING)

	public:
		void SortRarityGashaRewardList(TArray<struct FSBGashaReward>* InGashaRewardList);
		void SortGashaInfoList(TArray<struct FSBGashaInfo>* InGashaInfoList);
		void SortConfirmGashaRewardList(TArray<struct FSBGashaReward>* InGashaRewardList);
		void SetTicketGashaItemList(bool Flag);
		void SetCurrentGashaStepNow(int32_t Num);
		void SetCurrentGashaStepMax(int32_t Num);
		void SetCurrentGashaLapCount(int32_t Num);
		void SetCurrentGashaId(const class FString& ID);
		void ServerOnCompleteRate(int32_t InRetCode, const class FString& GashaIdName, TArray<struct FSBGashaReward> InGashaRewardList);
		void ServerOnCompletePull(int32_t InRetCode, const struct FSBGashaPullInfo& GashaPullInfo);
		void ServerOnCompleteProducts(int32_t InRetCode, TArray<struct FSBGashaInfo> InGashaList, TArray<struct FSBGashaCategory> InCategoryList);
		void ServerOnCompletePlayCount(int32_t InRetCode, TArray<struct FSBGashaPlayCount> PlayCountList);
		void Server_RequestRate(class ASBPlayerController* InPlayerController, int32_t GashaId, const class FString& GashaIdName);
		void Server_RequestPull(class ASBPlayerController* InPlayerController, int32_t GashaId, const class FString& GashaIdName, int32_t CurrencyType, int32_t TokenID, int32_t Count);
		void Server_RequestProducts(class ASBPlayerController* InPlayerController);
		void Server_RequestPlayCount(class ASBPlayerController* InPlayerController, TArray<int32_t> GashaIds, TArray<class FString> GashaIdNameList);
		void RequestRate(int32_t GashaId, const class FString& GashaIdName);
		void RequestPull(int32_t GashaId, const class FString& GashaIdName, int32_t CurrencyType, int32_t TokenID, int32_t Count);
		void RequestProducts();
		void RequestPlayCount(TArray<int32_t> GashaIds, TArray<class FString> GashaIdNameList);
		void OnCompleteRateDelegate__DelegateSignature(bool Result, int32_t RetCode, int32_t GashaId, const class FString& GashaIdName, TArray<struct FSBGashaReward> GashaRewardList);
		void OnCompletePullDelegate__DelegateSignature(bool Result, int32_t RetCode, const struct FSBGashaPullInfo& GashaPullInfo);
		void OnCompleteProductsDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FSBGashaInfo> InGashaList);
		void OnCompletePlayCountDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FSBGashaPlayCount> PlayCountList);
		bool IsTicketGashaOnly();
		bool IsTicketGashaItemList();
		bool IsLoopStepUpGasha();
		bool IsCurrentStepUp();
		bool GetNextCurrencyBonusInfo(struct FSBGashaBonus* OutGashaBonus, int32_t* OutCount, int32_t* OutPlayCount, bool* OutIsEveryLap);
		bool GetNextBonusInfo_StepUpGasha(struct FSBGashaBonus* OutGashaBonus, bool* OutIsNowGetBonus);
		bool GetNextBonusInfo(struct FSBGashaBonus* OutGashaBonus, int32_t* OutCount, int32_t* OutPlayCount);
		void GetGashaRewardList_PurchaseType(ESBGashaPurchaseType Type, TArray<struct FSBGashaReward>* OutGashaRewardList);
		void GetGashaRewardList(int32_t Step, TArray<struct FSBGashaReward>* OutGashaRewardList);
		bool GetGashaInfoStep(int32_t Step, struct FSBGashaInfo* OutGashaInfo);
		struct FSBGashaInfo GetGashaInfo(const class FString& GashaId);
		struct FSBGashaBonusListInfo GetGashaCurrencyBonusListInfo(const class FString& GashaId);
		TArray<struct FSBGashaCategory> GetGashaCategoryList();
		struct FSBGashaBonusListInfo GetGashaBonusListInfo(const class FString& GashaId);
		int32_t GetCurrentGashaStepNow();
		int32_t GetCurrentGashaStepMax();
		int32_t GetCurrentGashaLapCount();
		class FString GetCurrentGashaId();
		TArray<struct FSBGashaInfo> GetCategoryGashaInfoList(int32_t InCategoryId);
		void ClientCompleteRate(int32_t InRetCode, const class FString& GashaIdName, TArray<struct FSBGashaReward> InGashaRewardList);
		void ClientCompletePull(int32_t InRetCode, const struct FSBGashaPullInfo& GashaPullInfo);
		void ClientCompleteProducts(int32_t InRetCode, TArray<struct FSBGashaInfo> InGashaList, TArray<struct FSBGashaCategory> InCategoryList);
		void ClientCompletePlayCount(int32_t InRetCode, TArray<struct FSBGashaPlayCount> PlayCountList);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGashaDemoActor
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ASBGashaDemoActor : public AActor
	{
	public:
		class UDataTable*                                          RankUpDemoLotteryTable;                                  // 0x0228(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          ExpectDemoLotteryTable;                                  // 0x0230(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          GreetingVoiceGroupTable;                                 // 0x0238(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          GreetingVoiceTable;                                      // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       GreetingVoiceEvent;                                      // 0x0248(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBGashaResultData                                  GashaResult;                                             // 0x0250(0x0018) BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, NativeAccessSpecifierPublic
		bool                                                       bIsMainFlow;                                             // 0x0268(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WNUZ[0x7];                                   // 0x0269(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnShowResultDelegate;                                    // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic

	public:
		void SetActorHiddenDemo(bool bInHidden);
		void PlaySpecialCut(ESBRarity InDemoRarity, ESBRarity InActualRarity);
		void Play(bool bInSkip);
		void OnShowResultDelegate__DelegateSignature();
		float GetPlayRate();
		struct FSBGashaVoiceData DecideGreetingVoice();
		void DecideDemo();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGeneralPurposeCounterComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBGeneralPurposeCounterComponent : public USBPlayerPropertyComponent
	{
	public:
		int32_t                                                    OldClassMaxDamage;                                       // 0x00B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESBGeneralPurposeCounterType                               OldKindType;                                             // 0x00BC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SO47[0x3];                                   // 0x00BD(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetOldClassMaxDamage(int32_t Damage);
		void Server_GeneralPurposeCounter(ESBGeneralPurposeCounterType Type, int32_t Count);
		void Request_GeneralPurposeCounter(ESBGeneralPurposeCounterType Type, int32_t Count);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGimmickBase
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBGimmickBase : public ASBInteractionSwBase
	{
	public:
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MinimapIconParam;                                        // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PMW5[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGrassSoundComponent
	 * Size -> 0x0148 (FullSize[0x0200] - InheritedSize[0x00B8])
	 */
	class USBGrassSoundComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_QFQ9[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBFoliageSoundActor*                                FoliageSoundActor;                                       // 0x00C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<struct FVector2D, class UAkComponent*>                GrassSoundInstances;                                     // 0x00C8(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KLME[0x88];                                  // 0x0118(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMesh*>                                 LSGrassMeshes;                                           // 0x01A0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1MKP[0x50];                                  // 0x01B0(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGroundComponent
	 * Size -> 0x0008 (FullSize[0x0210] - InheritedSize[0x0208])
	 */
	class USBGroundComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_Q6J0[0x4];                                   // 0x0208(0x0004) Fix Super Size
		float                                                      FloatingHeight;                                          // 0x020C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetActorLocationOnGround();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHappyNappoComponent
	 * Size -> 0x0048 (FullSize[0x0100] - InheritedSize[0x00B8])
	 */
	class USBHappyNappoComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnInteractAPIDelegate;                                   // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3ZY8[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnInteractHappyNappoDelegate;                            // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0BWN[0x20];                                  // 0x00E0(0x0020) MISSED OFFSET (PADDING)

	public:
		void Server_InteractHappyNappo(const class FString& NappoId);
		void RapGetInteractedHappyNappoIds(bool Result);
		void OnInteractHappyNappoDelegate__DelegateSignature(int32_t RetCode, TArray<class FString> NappoIds);
		void OnInteractAPIDelegate__DelegateSignature(int32_t RetCode, bool is_new, TArray<int32_t> gained_achievement_ids);
		void InteractNappo(const class FString& NappoId);
		TArray<class FString> GetInteractedNapposList();
		int32_t GetInteractedHappyNappoIds();
		void Client_InteractHappyNappo(int32_t RetCode, bool is_new, TArray<int32_t> gained_achievement_ids);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHateAlertWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBHateAlertWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_01IU[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnIsTrainingBattleState();
		void OnHide();
		void OnFindByEnemy();
		void OnEnemyTarget();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHateManagementComponent
	 * Size -> 0x0108 (FullSize[0x01C0] - InheritedSize[0x00B8])
	 */
	class USBHateManagementComponent : public UActorComponent
	{
	public:
		float                                                      InitialHate;                                             // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HateToReinforcement;                                     // 0x00BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IncrementHatePerDamageAmountTaken;                       // 0x00C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IncrementHatePerDamageRateTaken;                         // 0x00C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IncrementHatePerRecoveryAmount;                          // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IncrementHatePerRecoveryRate;                            // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IncrementHateToHostileBuffEffect;                        // 0x00D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IncrementHateToNegativeEffect;                           // 0x00D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecrementHatePerDamageAmountGiven;                       // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DecrementHateWhenAttakking;                              // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReleaseRate;                                             // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LSEB[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              HateTopActor;                                            // 0x00E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class AActor*, float>                                 HateList;                                                // 0x00F0(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TMap<class FName, float>                                   FactionHateList;                                         // 0x0140(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      FixHateActorList;                                        // 0x0190(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnUpdatedFactionHateDelegate;                            // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FYHM[0x10];                                  // 0x01B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void ResetHateByFaction(const class FName& FactionName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHelpMatchingComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBHelpMatchingComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnIsHelpMatchingModeDelegate;                            // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Request_GetHelpMatchingMode(class ASBPlayerController* InPlayerController, int32_t ModeId);
		void OnIsHelpMatchingModeDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode, const class FString& GameContentId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHoldHandComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBHoldHandComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_Y33G[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (PADDING)

	public:
		bool IsSuspendHoldHand();
		bool IsHoldHandByRightHand();
		bool IsHoldHandAsLead();
		bool IsHoldHandActive();
		struct FVector GetHoldHandLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHoldHandInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBHoldHandInterface : public UInterface
	{
	public:
		class USBHoldHandComponent* GetHoldHandComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckComboEndPlanning
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBHTNCheckComboEndPlanning : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           PrevActionKey;                                           // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_Assigned
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_Assigned : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           MemberKey;                                               // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bAssigned;                                               // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_AttackRequest
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_AttackRequest : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bFilled;                                                 // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_AttackRequestRequired
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_AttackRequestRequired : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           MemberKey;                                               // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bRequired;                                               // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_Boss
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_Boss : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           MemberKey;                                               // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bBoss;                                                   // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_CanHitAttack
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_CanHitAttack : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           Command;                                                 // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_CanHitCounterAttack
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_CanHitCounterAttack : public UAIFwHTNNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_Combo
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_Combo : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           PrevActionKey;                                           // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           Command;                                                 // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_CommandAction
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_CommandAction : public UAIFwHTNNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_HeightDifference
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_HeightDifference : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            HeightMin;                                               // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            HeightMax;                                               // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNCheckState_IsAbsoluteCombo
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class USBHTNCheckState_IsAbsoluteCombo : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           PrevActionKey;                                           // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           Command;                                                 // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNGetState_SpActTargets
	 * Size -> 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
	 */
	class USBHTNGetState_SpActTargets : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           BlackboardKey;                                           // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           TupleSpaceKey;                                           // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           ListenerKey;                                             // 0x0070(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyInt                              MinTargetNum;                                            // 0x0090(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyInt                              MaxTargetNum;                                            // 0x00A8(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNModifyState_AnimationMovement
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBHTNModifyState_AnimationMovement : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           Command;                                                 // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNModifyState_Assigned
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBHTNModifyState_Assigned : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           MemberKey;                                               // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNModifyState_Combo
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class USBHTNModifyState_Combo : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           PrevActionKey;                                           // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           Command;                                                 // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNModifyState_CommandAction
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBHTNModifyState_CommandAction : public UAIFwHTNNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNModifyState_MoveForAttack
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBHTNModifyState_MoveForAttack : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           AttackSkill;                                             // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bMoveToTarget;                                           // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNModifyState_ResetSkillTree
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBHTNModifyState_ResetSkillTree : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           PrevActionKey;                                           // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_ActionCategory
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_ActionCategory : public UAIFwHTNOperator
	{
	public:
		unsigned char                                              UnknownData_OH1I[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetCategory(const class FString& Category);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_ActionLottery
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_ActionLottery : public UAIFwHTNOperator
	{
	public:
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0028(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5B5U[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_CompareState_Int
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_CompareState_Int : public UAIFwHTNOperator
	{
	public:
		class FString                                              Key;                                                     // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Value;                                                   // 0x0038(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBHTNStateComparison                                      Comparison;                                              // 0x003C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_11CY[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_CompareState_Float
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_CompareState_Float : public UAIFwHTNOperator
	{
	public:
		class FString                                              Key;                                                     // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Value;                                                   // 0x0038(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBHTNStateComparison                                      Comparison;                                              // 0x003C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F4LS[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_CompareState_Bool
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_CompareState_Bool : public UAIFwHTNOperator
	{
	public:
		class FString                                              Key;                                                     // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bValue;                                                  // 0x0038(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LM5R[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_Constant
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_Constant : public UAIFwHTNOperator
	{
	public:
		unsigned char                                              UnknownData_H2D1[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetValue(float InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_Cooldown
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_Cooldown : public UAIFwHTNOperator
	{
	public:
		unsigned char                                              UnknownData_7IIB[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_Direction
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_Direction : public UAIFwHTNOperator
	{
	public:
		unsigned char                                              UnknownData_0L8Q[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetDirection(float InBestDirectionMin, float InBestDirectionMax, float InBetterDirectionMin, float InBetterDirectionMax);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_Distance
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_Distance : public UAIFwHTNOperator
	{
	public:
		unsigned char                                              UnknownData_3S8R[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetRange(float InBestRangeMin, float InBestRangeMax, float InBetterRangeMin, float InBetterRangeMax);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_IsIntensiveAttacked
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_IsIntensiveAttacked : public UAIFwHTNOperator
	{
	public:
		unsigned char                                              UnknownData_AQBW[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetAIController(class AAIController* InController);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_NearAttackedPlayerNum
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_NearAttackedPlayerNum : public UAIFwHTNOperator
	{
	public:
		unsigned char                                              UnknownData_R7OB[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetValue(class AAIController* InController, float InMaxDistance, int32_t InMinPlayerNum);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_PartyStrategy
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_PartyStrategy : public UAIFwHTNOperator
	{
	public:
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0028(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UDSR[0x58];                                  // 0x0030(0x0058) MISSED OFFSET (PADDING)

	public:
		void SetValue(ESBAIPartyStrategy Strategy, float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_PassThroughState
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_PassThroughState : public UAIFwHTNOperator
	{
	public:
		class FString                                              Key;                                                     // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInvert;                                                 // 0x0038(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UTM0[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_Random
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_Random : public UAIFwHTNOperator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNOperator_Stamina
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBHTNOperator_Stamina : public UAIFwHTNOperator
	{
	public:
		unsigned char                                              UnknownData_2OT5[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNRemoveState_SpActTargets
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class USBHTNRemoveState_SpActTargets : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           TupleSpaceKey;                                           // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           TargetsKey;                                              // 0x0050(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHTNTakeState_AttackRequest
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBHTNTakeState_AttackRequest : public UAIFwHTNNode
	{
	public:
		struct FAIFwBTNodePropertyString                           TargetKey;                                               // 0x0030(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHttpQuery
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBHttpQuery : public UObject
	{
	public:
		unsigned char                                              UnknownData_WN12[0x68];                                  // 0x0028(0x0068) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHttpQueryCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBHttpQueryCheatCommand : public UObject
	{
	public:
		void SetHttpQueryResponseCallbackDelayTime(const class FString& InURL, float InDelayTime);
		void ResetHttpQueryResponseCallbackDelayTime(const class FString& InURL);
		void DumpMasterDataStatus();
		void DumpHttpQuery();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBHttpQueryManager
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBHttpQueryManager : public UObject
	{
	public:
		TArray<struct FSBHttpQueryPool>                            HttpQueries;                                             // 0x0028(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ADVF[0x28];                                  // 0x0038(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBIconCaptureToolMenu
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBIconCaptureToolMenu : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_GJ4W[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		bool SetupWeapon(TArray<class ASBWeapon*> InWeapons, int32_t InWeaponID);
		void NotifyError(const class FString& InErrorMessage);
		bool LoadCaptureTargetList(TArray<struct FSBLoadCaptureTargetItem>* OutTargets, const class FString& InPath);
		void HandleNotifyError(const class FString& InErrorMessage);
		int32_t GetCharaPartsFaceType(const class FString& InCharaPartsId);
		bool ExportFromRenderTarget(const class FString& InFilePath, class UTextureRenderTarget2D* InRenderTarget2D);
		bool DeleteDirectory(const class FString& InPath);
		bool CreateDirectory(const class FString& InPath);
		void CaptureWait(const class FString& InFilePath, const struct FVector2D& InResolution, bool bInMaskEnable, bool bInDumpBufferVisualizationTargets, const struct FLatentActionInfo& LatentInfo);
		bool Capture(const class FString& InFilePath, const struct FVector2D& InResolution, bool bInMaskEnable, bool bInDumpBufferVisualizationTargets);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBIconInputControl
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBIconInputControl : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnValidIconInputDelegate;                                // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8JCD[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartIconInputInvalidTimer();
		void SetIconInputInvalidTime(float InTime);
		void OnValidIconInputDelegate__DelegateSignature();
		bool IsIconInputValid();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBIdentityGetAccountAuthToken
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBIdentityGetAccountAuthToken : public UObject
	{
	public:
		unsigned char                                              UnknownData_JY1A[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBImagineBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBImagineBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsPassiveImagineEquipSlotMatch(int32_t InImagineId, ESBPlayerPassiveImagineSlotType SlotType);
		ESBPlayerPassiveImagineSlotType GetPassiveImagineSlotTypeFromCharaEquipType(ESBCharaEquipType InEquipType, bool* bIsValid);
		class FName GetImagineTableRowName(class ASBPlayerController* Controller, const class FString& InUniqueId);
		int32_t GetImagineTableIndex(class ASBPlayerController* Controller, const class FString& InUniqueId);
		int32_t GetImagineRelitiveLevel(int32_t InImagineId, int32_t InTotalExp, int32_t* NowExp, int32_t* NextExp);
		struct FImagineParameter GetImagineLevelParam(int32_t ImagineId, int32_t Level);
		class FName GetImagineArtsName(class ASBPlayerController* Controller, const class FString& InUniqueId);
		struct FSBStackBImagineParam CalcStackBImagineParam(class USBNetworkDataCache* InNetworkDataCache, const class FString& InUniqueId, int32_t InStackBNum, bool bStorageAccess, ESBStackBEnableType InStackBEnableType);
		struct FImagineParameter CalcImagineParam(class USBNetworkDataCache* NetworkDataCache, const class FString& InUniqueId, int32_t LevelSyncTarget, bool bStorageAccess, bool DisableStackBCalc, ESBStackBEnableType InStackBEnableType);
		struct FImagineParameter CalcDiff(const struct FImagineParameter& A, const struct FImagineParameter& B);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerRecepiComponentBase
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBPlayerRecepiComponentBase : public USBPlayerControllerComponentBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBImagineLabComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBImagineLabComponent : public USBPlayerRecepiComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnFinishedImagineCraft;                                  // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnImagineRecepiUpdated;                                  // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnImagineRecepiCraftedUpdate;                            // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FCharacterCraftRecepi>                       OwningRecepis;                                           // 0x00E8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void Server_Request_UnlockImagineRecepis(class ASBPlayerController* InPlayerController, TArray<int32_t> recepiIds);
		void Server_Request_UnlockImagineRecepi(class ASBPlayerController* InPlayerController, int32_t RecepiId);
		void Server_Request_ImagineCraft(class ASBPlayerController* InPlayerController, int32_t InRecepiId, int32_t StorageNo);
		void Request_ImagineCraft(int32_t InRecepiId, int32_t StorageNo);
		void OnFinishedRecepiUpdated__DelegateSignature(int32_t RetCode);
		void OnFinishedRecepiCraftedUpdated__DelegateSignature(int32_t RecepiId);
		void OnFinishedImagineCraft__DelegateSignature(int32_t RetCode, const class FString& MakedUID);
		bool IsLearned(int32_t InId);
		TArray<struct FMasterImagineRecepi> GetOwningImagineRecepi();
		TArray<struct FCharacterCraftRecepi> GetHasImagineRecepi();
		struct FCharacterCraftRecepi FindImagineRecepi(bool* IsExist, int32_t InRecepiId);
		void Client_UpdateRecepis(int32_t RetCode, TArray<struct FCharacterCraftRecepi> Recepis);
		void Client_Request_ImagineCraft(int32_t RetCode, int32_t InRecepiId, TArray<struct FOwnItemInfo> InOwnItemInfos, const class FString& MakedUID, int32_t Money);
		void Client_ParseRecepi(TArray<struct FCharacterCraftRecepi> Values);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBImagineSkillInfo
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBImagineSkillInfo : public USBSkillInfoClass
	{
	public:
		class FString                                              CameraID;                                                // 0x02B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBImagineArtsSkillInfo
	 * Size -> 0x0048 (FullSize[0x0308] - InheritedSize[0x02C0])
	 */
	class USBImagineArtsSkillInfo : public USBImagineSkillInfo
	{
	public:
		unsigned char                                              UnknownData_KT1I[0x8];                                   // 0x02C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x02C8(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_46T7[0x8];                                   // 0x02F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDataTable*>                                  AppendLoadProjectileList;                                // 0x02F8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBImagineArtsMarkerSkillInfo
	 * Size -> 0x0078 (FullSize[0x0380] - InheritedSize[0x0308])
	 */
	class USBImagineArtsMarkerSkillInfo : public USBImagineArtsSkillInfo
	{
	public:
		unsigned char                                              UnknownData_PB16[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSkillMarkerSetting                               MarkerSetting;                                           // 0x0310(0x0070) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBImagineMountSkillInfo
	 * Size -> 0x03F8 (FullSize[0x06B8] - InheritedSize[0x02C0])
	 */
	class USBImagineMountSkillInfo : public USBImagineSkillInfo
	{
	public:
		unsigned char                                              MountAsset[0x28];                                        // 0x02C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		struct FSBSurfaceFootprintSettingList                      FootprintSettingList;                                    // 0x02E8(0x02B0) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBMountIKParam                                     IKParam;                                                 // 0x0598(0x0030) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                AttachSocketName;                                        // 0x05C8(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             AttachLocation;                                          // 0x05D0(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            AttachRotator;                                           // 0x05DC(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      AttachHeightOffset;                                      // 0x05E8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NamePlateHeightOffset;                                   // 0x05EC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetableHeightOffset;                                  // 0x05F0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlayerCapsuleHeightOffset;                               // 0x05F4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MountCapusuleHalfHeight;                                 // 0x05F8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SummonPositionHeight;                                    // 0x05FC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CalculatedPlayerCapsuleAttachPos;                        // 0x0600(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MountOffsetStopDistWithFollow;                           // 0x060C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MountTargetHeightWithFollow;                             // 0x0610(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1XI4[0x4];                                   // 0x0614(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MountCameraID;                                           // 0x0618(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              MountFollowCameraID;                                     // 0x0628(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnergyDamageIntervalTime;                                // 0x0638(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnergyDamageRateByTimeMove;                              // 0x063C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnergyDamageRateByTimeStop;                              // 0x0640(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnergyDamageRateByPerLv;                                 // 0x0644(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MinAttentionEnemyLevelDiff;                              // 0x0648(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxAttentionEnemyLevelDiff;                              // 0x064C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ThresholdAttentionEnemyLevelDiff;                        // 0x0650(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R5SD[0x4];                                   // 0x0654(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              AttentionEnemyLevelDiffMaxRate;                          // 0x0658(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      EnergyDamageByOverlapBase;                               // 0x0668(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnergyDamageByOverlapPerLv;                              // 0x066C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MinOverlapLevelDiff;                                     // 0x0670(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxOverlapLevelDiff;                                     // 0x0674(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    ThresholdOverlapLevelDiff;                               // 0x0678(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XA31[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              OverlapLevelDiffMaxRate;                                 // 0x0680(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      MountSummonPosOffsetFront;                               // 0x0690(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MountSummonPosOffsetFrontMinimum;                        // 0x0694(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MountJumpOnVelocity;                                     // 0x0698(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MountJumpOffVelocity;                                    // 0x06A4(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MountJumpOnMaxHeightOffset;                              // 0x06B0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0WBY[0x4];                                   // 0x06B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBImaginRecepiBase
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBImaginRecepiBase : public USBUserWidget
	{
	public:
		int32_t GetOwnItemExp(const struct FOwnItemInfo& Info);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBIndoorLightSchedule
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBIndoorLightSchedule : public AActor
	{
	public:
		void UpdateEditorPreview(float TimeRate, bool Sw);
		void ResetToDefaultEditorPreview();
		void InitEditorPreview(bool Sw);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBIndoorLightScheduleComponent
	 * Size -> 0x0060 (FullSize[0x0118] - InheritedSize[0x00B8])
	 */
	class USBIndoorLightScheduleComponent : public UActorComponent
	{
	public:
		TMap<class UMaterialInterface*, class UMaterialInstanceDynamic*> MaterialInstanceDynamics;                                // 0x00B8(0x0050) Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<class ULightComponent*>                             LightComponents;                                         // 0x0108(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateEditorPreview(float TimeRate, bool Sw);
		void SetupMaterialInstances(TArray<class UMeshComponent*> MeshComponents, bool Sw);
		void SetupLightComponents(const class FName& InTargetLightTag, bool Sw);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInitialiCheatCommandActor
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBInitialiCheatCommandActor : public AActor
	{
	public:
		TArray<struct FSBInitialiCheatCommandData>                 CommandList;                                             // 0x0228(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInstanceBattleProvider
	 * Size -> 0x0060 (FullSize[0x0288] - InheritedSize[0x0228])
	 */
	class ASBInstanceBattleProvider : public AActor
	{
	public:
		class FName                                                InstanceBattleId;                                        // 0x0228(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<ESBDungeonCompleteType, struct FSBInstanceBattleProviderSpawnInfo> ProviderAgents;                                          // 0x0230(0x0050) Edit, DisableEditOnTemplate, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LE7A[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		class FName GetInstanceBattleId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInstanceBattleProviderAgent
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBInstanceBattleProviderAgent : public UInterface
	{
	public:
		void OnEnableProvider(class ASBInstanceBattleProvider* InOwner);
		void OnDisableProvider(class ASBInstanceBattleProvider* InOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInstanceBattleProviderComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBInstanceBattleProviderComponent : public UActorComponent
	{
	public:
		class ASBInstanceBattleProvider*                           OwnerProvider;                                           // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASBPlayerCharacter*                                  TargetPlayerCharacter;                                   // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PZUQ[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void Provide(class ASBPlayerCharacter* InTargetPlayerCharacter);
		void HandleEnableProvider(class ASBInstanceBattleProvider* InOwner);
		void HandleDisableProvider(class ASBInstanceBattleProvider* InOwner);
		class FName GetInstanceBattleId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInteractionMoveComponent
	 * Size -> 0x0028 (FullSize[0x0230] - InheritedSize[0x0208])
	 */
	class USBInteractionMoveComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_009U[0x4];                                   // 0x0208(0x0004) Fix Super Size
		float                                                      MoveEndDistance;                                         // 0x020C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DUD8[0x20];                                  // 0x0210(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetTargetRotation(const struct FRotator& TargetRotation);
		void SetTargetLocation(const struct FVector& TargetLocation);
		struct FRotator GetTargetRotation();
		struct FVector GetTargetLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInteractionTargetAuthorComponent
	 * Size -> 0x0018 (FullSize[0x0220] - InheritedSize[0x0208])
	 */
	class USBInteractionTargetAuthorComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_V77U[0x8];                                   // 0x0208(0x0008) Fix Super Size
		unsigned char                                              UnknownData_9WFG[0x10];                                  // 0x0210(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInteractionTargetComponent
	 * Size -> 0x0088 (FullSize[0x0290] - InheritedSize[0x0208])
	 */
	class USBInteractionTargetComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_YOVE[0x4];                                   // 0x0208(0x0004) Fix Super Size
		int32_t                                                    InteractNameID;                                          // 0x020C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SelectCursorAttachBoneName;                              // 0x0210(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SelectCursorLocationOffset;                              // 0x0218(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LookAtLocationBoneName;                                  // 0x0224(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             LookAtLocationOffset;                                    // 0x022C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReachableDistance;                                       // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReachableAnglePitch;                                     // 0x023C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReachableAngleYaw;                                       // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HoldTime;                                                // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsHideShowObjectCursor;                                 // 0x0248(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanOccupied;                                            // 0x0249(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldSheathe;                                          // 0x024A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldNoBattle;                                         // 0x024B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNotShouldMount;                                         // 0x024C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNotShouldEmote;                                         // 0x024D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowCarrying;                                          // 0x024E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowFreeArranging;                                     // 0x024F(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowCommandMenu;                                       // 0x0250(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VXGT[0x3];                                   // 0x0251(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AnimCommand;                                             // 0x0254(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InteractionActionDeltaTime;                              // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ProfileDataId;                                           // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractionDelegate;                                   // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IVK3[0x18];                                  // 0x0278(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetNamePlate(class USBNamePlateWidget* NamePlate);
		void SetInteractionActive(bool Flag);
		bool IsInteractionActive();
		struct FVector GetSelectCursorLocation();
		class FName GetProfileDataId();
		struct FVector GetLookAtLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInteractionTargetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBInteractionTargetInterface : public UInterface
	{
	public:
		void OnInteraction(class AActor* InOtherActor, const struct FRotator& ViewRotation);
		bool IsInteractionDisable(class AActor* InOtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInterruptQuestGimmickActorBase
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBInterruptQuestGimmickActorBase : public AActor
	{
	public:
		class FName                                                NameId;                                                  // 0x0228(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ProfileDataId;                                           // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAppear;                                                 // 0x0238(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KB9Q[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetAppear(bool InAppear);
		bool isAppear();
		void Disappear();
		void Appear();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInterruptQuestGimmickActor
	 * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
	 */
	class ASBInterruptQuestGimmickActor : public ASBInterruptQuestGimmickActorBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInterruptQuestInstance
	 * Size -> 0x0298 (FullSize[0x04C0] - InheritedSize[0x0228])
	 */
	class ASBInterruptQuestInstance : public AActor
	{
	public:
		unsigned char                                              UnknownData_U6DD[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    QuestAreaCollisionComponent;                             // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PYWU[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                QuestID;                                                 // 0x0240(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		uint64_t                                                   EndTime;                                                 // 0x0248(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSBInterruptQuestProgressInfo                       ProgressInfo;                                            // 0x0250(0x0010) Net, Transient, NativeAccessSpecifierPrivate
		struct FSBInterruptQuestMasterData                         MasterData;                                              // 0x0260(0x00B8) Net, Transient, NativeAccessSpecifierPrivate
		struct FVector                                             Location;                                                // 0x0318(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRotator                                            Rotation;                                                // 0x0324(0x000C) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		EInterruptQuestStatus                                      Status;                                                  // 0x0330(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IWYX[0x1];                                   // 0x0331(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EInterruptQuestResult                                      Result;                                                  // 0x0332(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WSW6[0x18D];                                 // 0x0333(0x018D) MISSED OFFSET (PADDING)

	public:
		void StartQuest();
		void SetResult(EInterruptQuestResult InResult);
		void OnPlayerActorEndPlay(class AActor* InActor, EEndPlayReason InEndPlayReason);
		void OnEnemyDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void OnEnemyAssetLoaded();
		void OnClearTargetEnemyDead(class ASBEnemyCharacter* pClearTargetEnemy);
		void HandleQuestAreaCollisionComponentEndOverlapEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex);
		void HandleQuestAreaCollisionComponentBeginOverlapEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		float GetQuestAreaSize();
		struct FDateTime GetEndTime();
		void BP_GetQuestName(class FString* OutQuestName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInterruptQuestInteractionGimmickActor
	 * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
	 */
	class ASBInterruptQuestInteractionGimmickActor : public ASBInterruptQuestGimmickActorBase
	{
	public:
		void Request_SetInteractionActiveAll(class USBInteractionTargetComponent* InTarget, class UPrimitiveComponent* InMesh, bool InFlag);
		void Request_SetInteractionActive(class USBInteractionTargetComponent* InTarget, class UPrimitiveComponent* InMesh, class ASBPlayerCharacter* InPlayer, bool InFlag);
		void InteractionCheck(class ASBPlayerCharacter* InPlayer, const class FString& InProfileId);
		void InitAppearedCheck();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInterruptQuestManager
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class USBInterruptQuestManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_GCGP[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartInterruptQuestDelegete;                           // 0x00A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndInterruptQuestDelegete;                             // 0x00B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartCheckInterruptQuestDelegete;                      // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		int32_t GetInterruptQuestInstanceNum();
		class ASBInterruptQuestInstance* GetInterruptQuestInstance(int32_t InIndex);
		bool CheckInteractionObjectAppeared(const class FName& InProfileDataId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBInterruptQuestPoint
	 * Size -> 0x0188 (FullSize[0x03B0] - InheritedSize[0x0228])
	 */
	class ASBInterruptQuestPoint : public AActor
	{
	public:
		TArray<class FName>                                        QuestIdList;                                             // 0x0228(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic
		class USphereComponent*                                    SensorComponent;                                         // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USphereComponent*                                    GimmickAreaCollisionComponent;                           // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurStep;                                                 // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EAUA[0x2C];                                  // 0x024C(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBInterruptQuestInstance*                           QuestInstance;                                           // 0x0278(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RemainCoolTime;                                          // 0x0280(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O9SN[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBInterruptQuestGimmickActor*                       pGimmickActor;                                           // 0x0288(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASBInterruptQuestInteractionGimmickActor*            pInteractionGimmickActor;                                // 0x0290(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASBBhtSignalManager*                                 pSignalDoorActor;                                        // 0x0298(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSBInterruptQuestMasterData                         MasterData;                                              // 0x02A0(0x00B8) Edit, EditConst, NativeAccessSpecifierPrivate
		bool                                                       SetMasterFlag;                                           // 0x0358(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TB2O[0x3];                                   // 0x0359(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBInterruptQuestFieldObjectVisible                 FieldObjectQuestConditionFlag;                           // 0x035C(0x0014) Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QD8K[0x28];                                  // 0x0370(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       DestructibleObjectSpawnFlag;                             // 0x0398(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5J1L[0x7];                                   // 0x0399(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DropTreasureClass;                                       // 0x03A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              DropGatherSpotClass;                                     // 0x03A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnQuestInstanceEndPlay(class AActor* InActor, EEndPlayReason InEndPlayReason);
		void OnConditionEnemyDead(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* Myself);
		void HandleSensorComponentEndOverlapEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex);
		void HandleSensorComponentBeginOverlapEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		void HandleGimmickAreaCollisionComponentEndOverlapEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex);
		void HandleGimmickAreaCollisionComponentBeginOverlapEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		class UClass* GetTreasureSpot();
		class UClass* GetGatherSpot();
		void DestructibleObjectDestruct(class ASBDestructible* InDestructibleObject);
		void DeleteDestructibleObject(class ASBDestructible* InDestructibleObject);
		void CreateDestructibleObject(const class FString& SpawnId);
		bool CheckInteractionObjectAppeared(const class FName& InProfileDataId);
		void AddDestructibleObject(class ASBDestructible* InDestructibleObject, EInterruptQuestDestructibleType InProfileId, const class FName& InInDataId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBItemAppraisalResultWidget
	 * Size -> 0x0040 (FullSize[0x02F0] - InheritedSize[0x02B0])
	 */
	class USBItemAppraisalResultWidget : public USBUserWidget
	{
	public:
		EItemAppraisalResultPhase                                  NowPhase;                                                // 0x02B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AEHF[0x7];                                   // 0x02B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBOwnItemListContainer*                             MovedAppraisedItems;                                     // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBOwnItemListContainer*                             MovedUnidentifiedItems;                                  // 0x02C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBOwnItemListContainer*                             Saleitems;                                               // 0x02C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SalePrice;                                               // 0x02D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OH5K[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBOwnItemListContainer*                             MoveditemsAll;                                           // 0x02D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClose;                                                 // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		void SetAppraisalItems(class USBOwnItemListContainer* InMovedUnidentifiedItems, class USBOwnItemListContainer* InMovedAppraisedItems, class USBOwnItemListContainer* InSaleUnidentifiedItems, class USBOwnItemListContainer* InSaleAppraisedItems, int32_t InSalePrice);
		void OnCloseItemAppraisalResult__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBItemBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBItemBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool WeaponPerkNotEquals(const struct FSBCharacterWeaponPerkData& Lhs, const struct FSBCharacterWeaponPerkData& rhs);
		bool WeaponPerkEquals(const struct FSBCharacterWeaponPerkData& Lhs, const struct FSBCharacterWeaponPerkData& rhs);
		void SortFilter(class UObject* InWorldContextObject, class USBOwnItemListContainer* Container, ESBItemSortType SortType, TArray<struct FFilterGroup> Filters);
		EItemType RewardItemTypeToItemType(ESBRewardItemType InRewardItemType);
		EItemType RecepiItemType2ItemType(ESBRecepiItemType Type);
		ESBRewardItemType ItemTypeToRewardItemType(EItemType InItemType);
		bool IsWeaponSubAbilityValueMax(const struct FOwnItemInfo& Info);
		bool IsWeaponPerkEqual(const struct FSBWeaponItemData& Prev, const struct FSBWeaponItemData& After, int32_t SlotNo);
		void IsWeaponMainAbilityValueMax(const struct FOwnItemInfo& Info, bool* bIsValue1Max, bool* bIsValue2Max);
		void IsWeaponMainAbilityGrater(const struct FOwnItemInfo& A, const struct FOwnItemInfo& B, bool* Value1, bool* Value2);
		void IsWeaponMainAbilityEqualByValue(const struct FOwnItemInfo& A, const struct FOwnItemInfo& B, bool* Value1, bool* Value2);
		bool IsWeaponMainAbilityEqualById(const struct FOwnItemInfo& A, const struct FOwnItemInfo& B);
		bool IsValidOwnItem(const struct FOwnItemInfo& Info);
		bool IsSubAbilityEnabled(const struct FOwnItemInfo& Info);
		bool IsSlotOpenable(const struct FOwnItemInfo& Info);
		bool IsProtectorCategoryAccessory(EProtectorCategory InProtectorCategory);
		bool IsInvalidFusionItem(const struct FOwnItemInfo& Weapon, int32_t FusionItemId);
		bool IsFusionAbleWeapon(const struct FOwnItemInfo& Info);
		bool IsFusionAbleItem(const struct FOwnItemInfo& Weapon, int32_t FusionItemId);
		bool IsCompositWearCostumeByMasterData(const struct FSBMasterCostume& InCostumeMaster);
		bool IsCompositWearCostume(int32_t InCostumeId);
		bool IsBPPtExchangable(const struct FOwnItemInfo& Info);
		bool IsBilling(const struct FOwnItemInfo& Info);
		bool IsAddedWishlist(class UObject* InWorldContextObject, int32_t ItemId);
		bool IsActiveEfficacyType(class UObject* InWorldContextObject, EItemEfficacyType InEfficacyType);
		bool HasConditionItem(int32_t ItemId, EItemType ItemType);
		int32_t GetWeaponSubAbilityValue(const struct FOwnItemInfo& Info);
		struct FSBMasterWeaponPerkLottery GetWeaponSubAbilityNoCheck(const struct FOwnItemInfo& Info, bool* bIsValid);
		void GetWeaponSubAbilityInfoByWeaponId(class UObject* InWorldContextObject, int32_t WeaponID, bool* bExist, class FText* Name, class FText* AbilityEffectName, int32_t* ValueMin, class FText* ValueMinText, int32_t* ValueMax, class FText* ValueMaxText);
		void GetWeaponSubAbilityInfo(class UObject* InWorldContextObject, const struct FOwnItemInfo& Info, bool* bExist, bool* bEnable, class FText* Name, class FText* AbilityEffectName, int32_t* Value, class FText* ValueText, bool* bIsMax, int32_t* ValueMax, class FText* ValueMaxText);
		bool GetWeaponSubAbilityByWeaponItemData(const struct FSBWeaponItemData& WeaponData, struct FSBMasterWeaponPerkLottery* OutWeaponPerkLottery);
		struct FSBMasterWeaponPerkLottery GetWeaponSubAbility(const struct FOwnItemInfo& Info, bool* bIsValid);
		int32_t GetWeaponStatus(class UObject* InWorldContextObject, const struct FOwnItemInfo& item, ESBWeaponStatus Status, bool bLevelSync);
		void GetWeaponMainAbilityValue(const struct FOwnItemInfo& Info, int32_t* Value1, int32_t* Value2);
		void GetWeaponMainAbilityInfo(class UObject* InWorldContextObject, const struct FOwnItemInfo& Info, ESBWeaponPerkRarity* Rarity, class FText* Name, bool* bValid1, int32_t* Value1, class FText* Value1Text, bool* bIsMax1, bool* bValid2, int32_t* Value2, class FText* Value2Text, bool* bIsMax2);
		bool GetWeaponMainAbilityByWeaponItemData(const struct FSBWeaponItemData& WeaponData, struct FSBMasterWeaponPerkLottery* OutWeaponPerkLottery);
		bool GetWeaponMainAbility(const struct FOwnItemInfo& Info, struct FSBMasterWeaponPerkLottery* OutWeaponPerkLottery);
		int32_t GetStackBNum(const struct FOwnItemInfo& Info);
		void GetPerkP2P(const struct FSBPerkAmplitudes& InAmplitude, struct FSBPerkAmplitude* Min, struct FSBPerkAmplitude* Max);
		ESBRarity GetItemRarity(EItemType InItemType, int32_t InItemIndex);
		bool GetItemName(EItemType InType, int32_t InIndex, class FString* OutName);
		int32_t GetItemLevel(const struct FOwnItemInfo& Info);
		int32_t GetItemDefaultOrderInt(class UObject* InWorldContextObject, const class FString& InUniqueId, int32_t StorageNumber);
		bool GetImagineSubAbility(const struct FOwnItemInfo& Info, struct FSBPerkAmplitude* OutAbility, bool* bIsMax);
		struct FImagineParameter GetImagineStatus(class UObject* InWorldContextObject, const struct FOwnItemInfo& item, bool bLevelSync);
		bool GetImagineMainAbility(const struct FOwnItemInfo& Info, struct FSBPerkAmplitude* OutAbility, bool* bIsMax);
		int32_t GetEquipmentMainAbilityId(const struct FOwnItemInfo& Info);
		int32_t GetConvertExp(const struct FOwnItemInfo& Info);
		struct FTimespan GetConditionLimit(int32_t ItemId, EItemType ItemType);
		int32_t GetAllStoragesAmount(class UObject* InWorldContextObject, EItemType ItemType, int32_t ItemIndex);
		bool FindItemByAllStorage(class UObject* InWorldContextObject, const class FString& InUniqueId, struct FOwnItemInfo* OutResult);
		bool FindCharacterStorageEquipment(class UObject* InWorldContextObject, struct FOwnItemInfo* OutResult, const class FString& InUniqueId, int32_t InStorageId);
		struct FOwnItemInfo FindCharacterEquipmentItem(class UObject* InWorldContextObject, bool* bIsValid, ESBCharaEquipType EquipType);
		bool FindCharacterEquipment(class UObject* InWorldContextObject, struct FOwnItemInfo* OutResult, const class FString& InUniqueId, bool bInSearchStorage);
		struct FSBActiveItemData FindActiveItemByEfficacyType(class UObject* InWorldContextObject, EItemEfficacyType InEfficacyType, bool* bOutExist);
		void DumpOwnItemData(const struct FOwnItemInfo& Info);
		class USBTemporallyStorage* CreateCombinedBox(class USBOwnItemListContainer* ContainerLhs, class USBOwnItemListContainer* ContainerRhs);
		bool ContainsLockedItem(class USBTemporallyStorage* Storage);
		bool ContainsBattleSetItem(class UObject* InWorldContextObject, class USBTemporallyStorage* Storage);
		void CheckOwnItemEquips(class UObject* InWorldContextObject, class USBOwnItemListContainer* Container);
		ESBItemUseStatus CanPlayerUseCheerfulItem(class UObject* InWorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBItemFilterWidgetBase
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBItemFilterWidgetBase : public UUserWidget
	{
	public:
		struct FFilterGroup                                        Filters;                                                 // 0x0278(0x0010) Protected, NativeAccessSpecifierProtected

	public:
		void UnRegisterFilterType(EItemFilterType Type);
		void ResetAllFilter();
		void ResetAll();
		void RegisterFilterType(EItemFilterType Type);
		struct FFilterGroup GetFilters();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBItemSelector
	 * Size -> 0x0068 (FullSize[0x02E0] - InheritedSize[0x0278])
	 */
	class USBItemSelector : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBItemSelectorList*                                 ItemIconList;                                            // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBItemSelectorArrow*                                ArrowLeft;                                               // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBItemSelectorArrow*                                ArrowRight;                                              // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBItemSelectorNamePlate*                            SelectItemNamePlate;                                     // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBUIKeyConfigAction                                       KeyUse;                                                  // 0x02A0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBUIKeyConfigAction                                       KeyLeft;                                                 // 0x02A1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBUIKeyConfigAction                                       KeyRight;                                                // 0x02A2(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KZ7F[0x1];                                   // 0x02A3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        ColorActive;                                             // 0x02A4(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ColorInactive;                                           // 0x02B4(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_APNN[0x1C];                                  // 0x02C4(0x001C) MISSED OFFSET (PADDING)

	public:
		void Use();
		void UpdateList(bool IsSetup);
		void SetupList();
		void SetupKeyTextUse();
		void SetupKeyTextRight();
		void SetupKeyTextLeft();
		void SetOptionEditMode(bool IsOptionEditMode);
		void SetEnable(bool Flag);
		void OnUseItem();
		void OnUnbind();
		void OnTerminate();
		void OnShowCoolTime();
		void OnPlaySESelect();
		void OnPlaySECanNotUse(ESBItemUseStatus InUseStatus);
		void OnInitialize();
		void OnHiddenCoolTime();
		void OnBind();
		void Move(bool IsLeft);
		bool IsSetupList();
		bool IsRegistItemForInventoryData(const struct FOwnItemInfo& InItemInfo);
		bool IsRegistItem(int32_t InItemIndex, bool IsCanUse);
		bool IsEnable();
		void HiddenCoolTime();
		class FText GetCurrentItemName();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBItemSelectorArrow
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBItemSelectorArrow : public UUserWidget
	{
	public:
		void PlayAnim();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBItemSelectorIcon
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBItemSelectorIcon : public UUserWidget
	{
	public:
		void Setup(int32_t InItemIndex, int32_t InAmount);
		void PlayAnimationScaleUp();
		void PlayAnimationScaleDown();
		void PlayAnimationRight();
		void PlayAnimationLeft();
		void Empty();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBItemSelectorList
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBItemSelectorList : public UUserWidget
	{
	public:
		class UHorizontalBox*                                      HBItemIconList;                                          // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBItemSelectorNamePlate
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBItemSelectorNamePlate : public UUserWidget
	{
	public:
		class UTextBlock*                                          TextItemName;                                            // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.JingleManager
	 * Size -> 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
	 */
	class UJingleManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_9KXY[0x4C];                                  // 0x0028(0x004C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InterruptJingleLifeTime;                                 // 0x0074(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJingleDelegate;                                        // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJingleSubDelegate;                                     // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCancelJingleDelegate;                                  // 0x0098(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTutorialHelpJingleDelegate;                            // 0x00A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Request_TutorialHelp(const class FName& TutorialId);
		void Request_Jingle(EJingleType Jingle, int32_t QuestIndex);
		void Request_CancelJingle(EJingleType Jingle, int32_t QuestIndex);
		void OnPlayTutorialHelpJingleDelegate__DelegateSignature(const class FName& TutorialHelpId);
		void OnPlayJingleDelegate__DelegateSignature(EJingleType JingleType);
		bool IsJinglePlaying();
		bool HasStack();
		EJingleType GetCurrentJingleType();
		void FinishJingle(EJingleType Jingle);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBJointGestureComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBJointGestureComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUpdateJointGestureStatusDelegate;                      // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSBPlayerJointGestureInfo                           JointGestureInfo;                                        // 0x00C8(0x0014) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class ASBPlayerCharacter>                   JointPlayerCharacter;                                    // 0x00DC(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_70XB[0xC];                                   // 0x00E4(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetStatusType(ESBJointGestureStatusType Type);
		void SetJankenUI(bool Visible);
		void SetJankenHandType(ESBJankenHandType InHandType);
		void Server_UpdateJointGestureInfo(const struct FSBPlayerJointGestureInfo& Info, bool ResetJointPlayer, bool RequestSameForJointPlayer);
		void Server_SetStatusType(ESBJointGestureStatusType Type);
		void Server_SetJointPlayerCharacterAndStatusType(class ASBPlayerCharacter* TargetPlayerCharacter, ESBJointGestureStatusType Type);
		void Server_SetJointGestureInfo(const class FName& EmoteName, class ASBPlayerCharacter* TargetPlayer);
		void Server_RequestJankenWaitStart(class ASBPlayerCharacter* Player, class ASBPlayerCharacter* TargetPlayer);
		void Server_RequestJankenStart(class ASBPlayerCharacter* TargetPlayer);
		void Server_RequestHandHoldingWaitStart(class ASBPlayerCharacter* Player, class ASBPlayerCharacter* TargetPlayer);
		void Server_RequestHandHoldingStart(class ASBPlayerCharacter* TargetPlayer);
		void ResetJointPlayerCharacter(bool RequestSameForJointPlayer);
		void RequestJankenWaitStart(class UObject* WorldContextObject, class ASBPlayerCharacter* TargetPlayerCharacter);
		void RequestHandHoldingWaitStart(class UObject* WorldContextObject, class ASBPlayerCharacter* TargetPlayerCharacter);
		void PushSystemLog(const class FString& Message);
		void OnUpdateGestureDelegate__DelegateSignature();
		void OnRep_JointPlayerCharacter();
		void OnRep_JointGestureInfo();
		void Multicast_UpdateJointGestureInfo(const struct FSBPlayerJointGestureInfo& Info, bool ResetJointPlayer, bool RequestSameForJointPlayer);
		void Multicast_SetStatusType(ESBJointGestureStatusType Type);
		void Multicast_SetJointPlayerCharacterAndStatusType(class ASBPlayerCharacter* TargetPlayerCharacter, ESBJointGestureStatusType Type);
		bool IsJankenWait();
		bool IsJankenUI();
		bool IsHandHoldingWait();
		bool IsHandHolding();
		class ASBPlayerCharacter* GetTargetJointGestureInfo(struct FSBPlayerJointGestureInfo* OutTargetInfo);
		ESBJointGestureStatusType GetStatusType();
		ESBJankenHandType GetResultHandType(bool IsTargetPlayer);
		struct FSBPlayerJointGestureInfo GetJointGestureInfo();
		void Client_SetResultTargetHandType(ESBJankenHandType Type);
		void Client_SetResultHandType(ESBJankenHandType Type);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBKeyGuideHUDWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBKeyGuideHUDWidget : public UUserWidget
	{
	public:
		bool                                                       bIsOpen;                                                 // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QQUM[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnReset();
		void OnPlayAnim(bool bOpen);
		void OnInit();
		bool IsPlayAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLayoutableHUD
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBLayoutableHUD : public UUserWidget
	{
	public:
		void ShortcutRingUnregistShortcutKey();
		void ShortcutRingSwitch();
		void ShortcutRingRegistShortcutKey();
		void ShortcutRingOpen();
		void ShortcutRingExecuteF9();
		void ShortcutRingExecuteF8();
		void ShortcutRingExecuteF7();
		void ShortcutRingExecuteF6();
		void ShortcutRingExecuteF5();
		void ShortcutRingExecuteF12();
		void ShortcutRingExecuteF11();
		void ShortcutRingExecuteF10();
		void ShortcutRingClose();
		class USBWholeMap* GetWholemapWidget();
		class USBShortcutRingWidget* GetShortcutRing();
		class USBPlayerGaugeBaseWidget* GetPlayerGaugeBaseWidget();
		class USBStepList* GetNewStepListWidget();
		class USBMiniMapWidget* GetMinimapWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelBuddyVoiceComponent
	 * Size -> 0x0008 (FullSize[0x0210] - InheritedSize[0x0208])
	 */
	class USBLevelBuddyVoiceComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_LHPE[0x8];                                   // 0x0208(0x0008) Fix Super Size

	public:
		void NotifyConditionId(ESBLevelBuddyVoiceCondition Condition);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelEditorPlaySettings
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBLevelEditorPlaySettings : public UObject
	{
	public:
		int32_t                                                    MaxPlayers;                                              // 0x0028(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bConnectOtherHost;                                       // 0x002C(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y7QE[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              HostIpAddress;                                           // 0x0030(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    HostPortNumber;                                          // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2PB1[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AdditionalOptions;                                       // 0x0048(0x0010) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelNavModifyControl
	 * Size -> 0x0010 (FullSize[0x04A0] - InheritedSize[0x0490])
	 */
	class USBLevelNavModifyControl : public UBillboardComponent
	{
	public:
		TArray<class FName>                                        UseSublevelName;                                         // 0x0490(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic

	public:
		void UpdateVisibilityStatus();
		void UpdateShowHideInLevel();
		void ToggleShowAlways();
		void ShowInTheSublevel();
		bool ShowInSublevel(const class FName& SublevelId);
		void SetShowAlways(bool Sw);
		void ResetShowHideInLevel(const class FName& CurrentName);
		void HideInTheSublevel();
		bool HideInSublevel(const class FName& SublevelId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelNavModifyInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBLevelNavModifyInterface : public UInterface
	{
	public:
		void ShowActorThisLevel();
		void HideActorThisLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelSequenceActor
	 * Size -> 0x0048 (FullSize[0x02F8] - InheritedSize[0x02B0])
	 */
	class ASBLevelSequenceActor : public ALevelSequenceActor
	{
	public:
		bool                                                       bAutoDestroy;                                            // 0x02B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBLevelSequenceType                                       LevelSequenceType;                                       // 0x02B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UPH6[0x6];                                   // 0x02B2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ULevelSequence*>                              ChoiceSequences;                                         // 0x02B8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZGJO[0x10];                                  // 0x02C8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTexture2D*>                                  StreamingTextures;                                       // 0x02D8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4MHT[0x10];                                  // 0x02E8(0x0010) MISSED OFFSET (PADDING)

	public:
		void ReceiveOnStop();
		void ReceiveOnPrePlay();
		void ReceiveOnPlay();
		void OnStop();
		void OnPlay();
		void OnChoiceDialogSelectItem(int32_t nSelectItemIndex);
		void OnCameraCut(class UCameraComponent* CameraComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelSequencePlayer
	 * Size -> 0x0000 (FullSize[0x0608] - InheritedSize[0x0608])
	 */
	class USBLevelSequencePlayer : public ULevelSequencePlayer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelStreamingManager
	 * Size -> 0x00B0 (FullSize[0x02D8] - InheritedSize[0x0228])
	 */
	class ASBLevelStreamingManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_47K5[0x50];                                  // 0x0228(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FEditorStreamingDependencies>                LevelDependencies;                                       // 0x0278(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5BOJ[0x50];                                  // 0x0288(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelupBase
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBLevelupBase : public USBUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnFinished;                                              // 0x02B0(0x0010) Edit, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void PlayLevelUp();
		void OnFinishedLevelUp__DelegateSignature(class USBLevelupBase* Target);
		void FinishLevelUp();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLevelupBaseInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBLevelupBaseInterface : public UInterface
	{
	public:
		void AddLevelUpSkill(const class FString& SkillType);
		void AddLevelUpClass(int32_t Level);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLibraryBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBLibraryBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		TArray<struct FSBTutorialHelpData> SortTutorialHelpDataArray(TArray<struct FSBTutorialHelpData>* TutorialHelpList, TMap<class FName, class FName> RowNameMap, TArray<class FName> ReadList);
		void SetupLibraryEnemyModel(class ASBEnemyCharacter* EnemyActor, class ASBLibraryEnemyLoadCheck* OnLoadFunction);
		void SetLibraryEnemyPartsBreakState(class ASBEnemyCharacter* EnemyActor, TArray<struct FSBLibraryEnemyPartsBreakData>* TargetPartsList, bool IsBreak);
		void SetLibraryEnemyId(class ASBEnemyCharacter* EnemyActor, const class FString& EnemyId);
		void Request_LibraryWeaponObtainedIdList(class ASBPlayerController* PlayerController, class UObject* CallbackObject, bool InIsStartSequence);
		void Request_LibraryItemObtainedIdList(class ASBPlayerController* PlayerController, class UObject* CallbackObject, bool InIsStartSequence);
		void Request_LibraryEnhanceImagineObtainedIdList(class ASBPlayerController* PlayerController, class UObject* CallbackObject, bool InIsStartSequence);
		void Request_LibraryBattleImagineObtainedIdList(class ASBPlayerController* PlayerController, class UObject* CallbackObject, bool InIsStartSequence);
		void LibraryEnemyModelLoadRequest(const class FName& EnemyId, class ASBLibraryEnemyLoadCheck* OnCompleteFunc, bool* Result);
		bool IsUnreadEnableBookmarkCategory(ESBTutorialHelpCategoryType InCategoryType);
		bool IsReadWeaponData(class UObject* InWorldContextObject, const class FString& CharacterId, int32_t WeaponID);
		bool IsReadNameList(TArray<class FName> CheckList, TArray<class FName> ReadList);
		bool IsReadName(const class FName& CheckName, TArray<class FName> ReadList);
		bool IsReadList(TArray<int32_t> CheckList, TArray<int32_t> ReadList);
		bool IsReadItemData(class UObject* InWorldContextObject, const class FString& CharacterId, int32_t ItemId);
		bool IsReadImagineData(class UObject* InWorldContextObject, const class FString& CharacterId, int32_t ImagineId, ELibraryImagineType ImagineType);
		bool IsRead(int32_t CheckNum, TArray<int32_t> ReadList);
		bool IsNotUnreadBookmark(const class FName& RowName);
		bool IsNewInformationEnemyLibrary(class UObject* WorldContextObject, class UDataTable* EnemyDataTable);
		bool IsNewInformationAwardLibrary(class UObject* WorldContextObject);
		bool IsNewInformationAchievementLibrary(class UObject* WorldContextObject);
		bool IsNewInformatioAddLibraryPic(class UObject* WorldContextObject, const class FString& CharacterId);
		bool IsExistActiveLoginBonus(class APlayerController* PlayerController);
		bool IsAllReadDefaultBookmark(const class FString& CharacterId, class USBCharactersLogComponent* CharacterComponent, class UDataTable* DataTable);
		bool IsAllReadBookmark(const class FString& CharacterId, class USBCharactersLogComponent* CharacterComponent);
		TArray<struct FSBWeaponMasterData> GetWeaponList(class ASBPlayerController* PlayerController);
		TArray<bool> GetReadWeaponCategoryList(class UObject* InWorldContextObject, const class FString& CharacterId, TArray<ESBClassType> ClassTypeList);
		TArray<bool> GetReadItemCategoryList(class UObject* InWorldContextObject, const class FString& CharacterId);
		TArray<bool> GetReadImagineCategoryList(class UObject* InWorldContextObject, const class FString& CharacterId, ELibraryImagineType ImagineType, TArray<class FName> CategoryList);
		TArray<class FName> GetNotUnreadBookmarkList();
		void GetLibraryEnemyTypeData(const class FName& ModelId, struct FSBEnemyTypeData* OutData, bool* IsValid);
		void GetLibraryEnemySize(class ASBEnemyCharacter* EnemyActor, struct FVector* Size, struct FVector2D* SideBottom);
		void GetLibraryEnemyResistElement(class ASBPlayerController* PlayerController, const class FName& EnemyId, TArray<int32_t>* OutList);
		void GetLibraryEnemyRaceIndexList(const struct FSBTextTableHash& RaceId, TArray<struct FSBLibraryEnemyData>* InList, TArray<int32_t>* IndexList);
		void GetLibraryEnemyPartsBreakData(class ASBEnemyCharacter* EnemyActor, TArray<struct FSBLibraryEnemyPartsBreakData>* OutPartsData);
		void GetLibraryEnemyModelPath(const class FName& ModelId, struct FSoftObjectPath* OutData, bool* IsValid);
		void GetLibraryEnemyList(class ASBPlayerController* PlayerController, TArray<struct FSBLibraryEnemyData>* EnemyList, class UDataTable* DataTable);
		void GetLibraryEnemyKillCount(const class FName& EnemyId, struct FSBLibraryEnemyData* InData, int32_t* OutTargetCount, int32_t* OutSumCount);
		void GetLibraryEnemyDropIconTypeMulti(int32_t DropId, TArray<ESBLibraryEnemyDropItemIconType>* IconTypes, TArray<int32_t>* ItemIds);
		void GetLibraryEnemyDropIconType(int32_t DropId, int32_t LotIndex, ESBLibraryEnemyDropItemIconType* IconType, int32_t* ItemId);
		void GetLibraryEnemyDebugModelID(const class FName& EnemyId, class FString* ID);
		void GetLibraryEnemyDebugFlag(class ASBPlayerController* PlayerController, bool* Flag);
		void GetLibraryEnemyAttribute(int32_t AttributeData, TArray<int32_t>* OutList);
		TArray<int32_t> GetItemMakeList(class UObject* InWorldContextObject, int32_t ItemId);
		TArray<struct FItemMasterData> GetItemList(class ASBPlayerController* PlayerController);
		struct FMasterImagineRecepi GetImagineRecepiDataByImagineId(int32_t ImagineId);
		TArray<struct FEnemyParamMasterData> GetEnemyList(class ASBPlayerController* PlayerController);
		int32_t GetEnemyHPRank(const class FString& EnemyId, int32_t Level);
		int32_t GetEnemyAttackRank(const class FString& EnemyId, int32_t Level);
		struct FCraftMasterData GetCraftMasterDataByWeaponId(int32_t WeaponID);
		bool ForceReadNewInformationEnemyLibrary(class UObject* WorldContextObject, class UDataTable* EnemyDataTable);
		bool ForceNewInformationTheatreLibrary(class UObject* WorldContextObject);
		bool ForceNewInformationAwardLibrary(class UObject* WorldContextObject);
		bool ForceNewInformationAchievementLibrary(class UObject* WorldContextObject);
		bool ForceNewAllReadBookmark(class UObject* WorldContextObject, class UDataTable* DataTable);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLibraryMenuDataInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBLibraryMenuDataInterface : public UInterface
	{
	public:
		void GetIdListCallback(bool WasSuccessful, int32_t RetCode, ESBLibraryPictureBookType Type);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLibraryEnemyLoadCheck
	 * Size -> 0x0048 (FullSize[0x0270] - InheritedSize[0x0228])
	 */
	class ASBLibraryEnemyLoadCheck : public AActor
	{
	public:
		class FScriptMulticastDelegate                             LoadCompleteDelegate;                                    // 0x0228(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             WeaponSpawnDelegate;                                     // 0x0238(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ASBEnemyCharacter*                                   TargetEnemy;                                             // 0x0248(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        WeaponName;                                              // 0x0250(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		ESBLibraryEnemyViewSetting                                 StandType;                                               // 0x0260(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBLibraryEnemyWeaponSetting                               WeaponType;                                              // 0x0261(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GMNB[0xE];                                   // 0x0262(0x000E) MISSED OFFSET (PADDING)

	public:
		void UnbindDelegate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLibraryMenuItemList
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class USBLibraryMenuItemList : public USBCommandMenuChildBase
	{
	public:
		void GetWeaponList(TArray<struct FSBWeaponMasterData>* OutList);
		void GetMountImagineList(TArray<struct FSBMasterMountImagine>* OutList);
		void GetItemList(TArray<struct FItemMasterData>* OutList);
		void GetImagineList(TArray<struct FSBMasterImagine>* OutList);
		void GetEnemyList(TArray<struct FEnemyParamMasterData>* OutList);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLibrarySaveGame
	 * Size -> 0x0240 (FullSize[0x0268] - InheritedSize[0x0028])
	 */
	class USBLibrarySaveGame : public USaveGame
	{
	public:
		class FString                                              SlotName;                                                // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    SlotNum;                                                 // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Version;                                                 // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PlayerId;                                                // 0x0040(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBLibrarySaveData                                  Data;                                                    // 0x0050(0x0218) SaveGame, NativeAccessSpecifierPublic

	public:
		bool SaveLibraryData();
		bool LoadLibraryData();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLibrarySaveManager
	 * Size -> 0x0220 (FullSize[0x0248] - InheritedSize[0x0028])
	 */
	class USBLibrarySaveManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_EFVT[0x220];                                 // 0x0028(0x0220) MISSED OFFSET (PADDING)

	public:
		void SetTheaterModeInfo_SelectedIndex(int32_t CategoryId, int32_t ListId, float CategoryOffset, float ListOffset);
		void SetTheaterModeInfo_IsPlayDemo(bool IsPlayDemo);
		void SetReadWeaponList(const class FString& CharacterId, const struct FSBLibraryWeaponSaveData& WeaponSaveData);
		void SetReadMountImagineIdList(TArray<int32_t> ReadList);
		void SetReadMonsterList(TArray<struct FSBLibraryEnemyReadData> ReadList);
		void SetReadMonsterIdList(TArray<class FName> ReadList);
		void SetReadMonsterDataCount(const class FName& ID, int32_t Index, int32_t Count);
		void SetReadMonsterData(const struct FSBLibraryEnemyReadData& ReadData);
		void SetReadMonsterAreaIdList(const class FName& ID, TArray<class FName> IDList);
		void SetReadItemList(const class FString& CharacterId, const struct FSBLibraryItemSaveData& ItemSaveData);
		void SetReadImagineList(const class FString& CharacterId, const struct FSBLibraryImagineSaveData& ImagineSaveData, ELibraryImagineType ImagineType);
		void SetReadDemoIdList(TArray<class FName> ReadList);
		void SetReadBookmarkList(const class FString& CharacterId, TArray<class FName> ReadList);
		void SetReadAwardIdList(TArray<int32_t> ReadList);
		void SetReadAchievementIdList(TArray<int32_t> ReadList);
		bool SaveLibraryData(const class FString& PlayerId);
		struct FSBLibrarySaveData LoadLibraryData(const class FString& PlayerId);
		bool IsLoadedLibraryData();
		struct FSBTheaterModeInfo GetTheaterModeInfo();
		TArray<struct FSBReadLibraryWeaponData> GetReadWeaponList(const class FString& CharacterId);
		struct FSBReadLibraryWeaponData GetReadWeapon(const class FString& CharacterId, int32_t WeaponID);
		TArray<int32_t> GetReadMountImagineIdList();
		void GetReadMonsterList(TArray<struct FSBLibraryEnemyReadData>* ReadList);
		TArray<class FName> GetReadMonsterIdList();
		void GetReadMonsterDataCount(const class FName& ID, int32_t Index, int32_t* Count);
		void GetReadMonsterData(const class FName& ID, struct FSBLibraryEnemyReadData* ReadData);
		void GetReadMonsterAreaIdList(const class FName& ID, TArray<class FName>* IDList);
		void GetReadItemMakeList(const class FString& CharacterId, int32_t ItemId, TArray<int32_t>* OutReadMakeList);
		TArray<struct FSBReadLibraryItemData> GetReadItemList(const class FString& CharacterId);
		struct FSBReadLibraryItemData GetReadItem(const class FString& CharacterId, int32_t ItemId);
		TArray<struct FSBReadLibraryImagineData> GetReadImagineList(const class FString& CharacterId, ELibraryImagineType ImagineType);
		struct FSBReadLibraryImagineData GetReadImagine(const class FString& CharacterId, int32_t ImagineId, ELibraryImagineType ImagineType);
		TArray<class FName> GetReadDemoIdList();
		TArray<class FName> GetReadBookmarkList(const class FString& CharacterId);
		TArray<int32_t> GetReadAwardIdList();
		TArray<int32_t> GetReadAchievementIdList();
		bool FindReadMonsterIdList(const class FName& EnemyId);
		void AddReadWeaponList(const class FString& CharacterId, const struct FSBReadLibraryWeaponData& WeaponData);
		void AddReadMountImagineIdList(int32_t ID);
		void AddReadMonsterIdList(const class FName& ID);
		void AddReadMonsterData(const struct FSBLibraryEnemyReadData& ReadData);
		void AddReadItemList(const class FString& CharacterId, const struct FSBReadLibraryItemData& ItemData);
		void AddReadImagineList(const class FString& CharacterId, const struct FSBReadLibraryImagineData& ImagineData, ELibraryImagineType ImagineType);
		void AddReadDemoIdList(const class FName& DemoId);
		void AddReadBookmarkList(const class FString& CharacterId, const class FName& BookmarkName);
		void AddReadAwardIdList(int32_t Index);
		void AddReadAchievementIdList(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLightSchedule
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBLightSchedule : public AActor
	{
	public:
		void InitEditorPreview(bool Sw);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLightScheduleComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBLightScheduleComponent : public UActorComponent
	{
	public:
		void UpdateAllLightComponents(float Rate, TMap<class ULightComponent*, float> LightComponents, TArray<struct FSBLightMaterialSchedule> Materials);
		int32_t GetNowHourMinInteger(class ASBSkySphere* InDynamicSky, int32_t DefaultTime);
		bool EditorPreview(float TimeRate, bool Sw);
		bool CheckTimeFadeStatus(float InFadeDuration, int32_t InCurrentTime, TArray<int32_t> InLightOnTime, TArray<int32_t> InLightOffTime, int32_t* OutLastTime, float* OutFadeRate);
		int32_t AddIntGameTime(int32_t InGameTime, int32_t InAddTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLineOfSightComponent
	 * Size -> 0x0018 (FullSize[0x0220] - InheritedSize[0x0208])
	 */
	class USBLineOfSightComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_9NQK[0x8];                                   // 0x0208(0x0008) Fix Super Size
		float                                                      Pupil_X;                                                 // 0x0210(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Pupil_Y;                                                 // 0x0214(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     TargetComponent;                                         // 0x0218(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void AttachTarget(class USceneComponent* InParent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLineSoundComponent
	 * Size -> 0x0020 (FullSize[0x0430] - InheritedSize[0x0410])
	 */
	class USBLineSoundComponent : public USBShapeSoundBaseComponent
	{
	public:
		unsigned char                                              UnknownData_5C1G[0x8];                                   // 0x0410(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsRelative;                                             // 0x0418(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WQ1H[0x7];                                   // 0x0419(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBLineSoundData>                            LineDataArray;                                           // 0x0420(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetLine(bool InIsRelative, const struct FVector& StartPoint, const struct FVector& EndPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBListBox
	 * Size -> 0x0028 (FullSize[0x08D0] - InheritedSize[0x08A8])
	 */
	class USBListBox : public UScrollBox
	{
	public:
		bool                                                       bLoop;                                                   // 0x08A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInputEnable;                                            // 0x08A9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1PFP[0x2];                                   // 0x08AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SelectItem;                                              // 0x08AC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeSelectItemDelegate;                              // 0x08B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPressOkItemDelegate;                                   // 0x08C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetSelectItemAt(int32_t InIndex);
		void SetSelectItem(class UWidget* InWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLoadAssetsInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBLoadAssetsInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLoadingBase
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBLoadingBase : public USBUserWidget
	{
	public:
		unsigned char                                              UnknownData_3UPV[0x4];                                   // 0x02B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ELoadingType                                               LoadingType;                                             // 0x02B4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9ZOH[0x3];                                   // 0x02B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                GameContentId;                                           // 0x02B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Show();
		void SetLoadingType(ELoadingType Type);
		void SetGameContentID(const class FName& GameContentId);
		class UTexture2D* LoadFromPath(const class FString& InPath);
		class UObject* LoadFromDungeonID();
		int32_t GetRandomRange(int32_t Min, int32_t Max, bool bBeforeOverlap);
		ELoadingType GetLoadingType();
		class FName GetGameContentID();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLocalPlayer
	 * Size -> 0x0110 (FullSize[0x0368] - InheritedSize[0x0258])
	 */
	class USBLocalPlayer : public ULocalPlayer
	{
	public:
		unsigned char                                              UnknownData_FGSF[0x110];                                 // 0x0258(0x0110) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLocationAnchor
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBLocationAnchor : public AActor
	{
	public:
		int32_t                                                    LocationId;                                              // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceOnGround;                                          // 0x022C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8TB8[0x3];                                   // 0x022D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBTargetableComponent*                              TargetableComp;                                          // 0x0230(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLocationAnchorManager
	 * Size -> 0x0050 (FullSize[0x0278] - InheritedSize[0x0228])
	 */
	class ASBLocationAnchorManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_CHIH[0x50];                                  // 0x0228(0x0050) MISSED OFFSET (PADDING)

	public:
		bool IsValidLocationID(int32_t InLocationID);
		class ASBLocationAnchor* GetAnchor(int32_t InLocationID);
		void Client_PrintLocationLog(int32_t LocationId, const class FString& AnchorName, const struct FVector& AnchorLocation, const class FString& WorldName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLocationAnchorRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBLocationAnchorRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_N9ND[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLocationInfoManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBLocationInfoManager : public UObject
	{
	public:
		TArray<class UDataTable*>                                  LocationInfoArray;                                       // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		struct FSBLocationInfo BP_Find(const class FName& InLocationID, bool* bOutExist);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLockOnTargetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBLockOnTargetInterface : public UInterface
	{
	public:
		class FName GetLockOnRangeInfoID();
		class FName GetLockOnCameraID();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLoggerBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBLoggerBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void LogMetricsResetBattleArea(class AActor* BattleArea);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLoginBonusWindow
	 * Size -> 0x0048 (FullSize[0x02F8] - InheritedSize[0x02B0])
	 */
	class USBLoginBonusWindow : public USBUserWidget
	{
	public:
		class FScriptMulticastDelegate                             FinishDelegate;                                          // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             NoticeCheckCompleteDelegate;                             // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_18KQ[0x28];                                  // 0x02D0(0x0028) MISSED OFFSET (PADDING)

	public:
		void NoticeCheckCompleteDelegate__DelegateSignature(int32_t DataCount);
		void GetTypeCount(int32_t* Count);
		void GetLoginBonusData(int32_t Index, struct FSBLoginBonusWindowData* LoginBonusData, bool* Valid);
		void GetLoginBonusAllData(int32_t Index, TArray<struct FSBLoginBonusWindowData>* LoginBonusData, bool* Valid);
		void GetDetail_Callback(bool bWasSuccessful, int32_t ErrorCode);
		void GetActiveList_Callback(bool bWasSuccessful, int32_t ErrorCode);
		void FinishDelegate__DelegateSignature();
		void CheckLoginData_Callback(bool bWasSuccessful, int32_t ErrorCode);
		void CheckLoginBonusNotice();
		void CheckLoginBonusData();
		void CallFinishEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLoginSaveGame
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBLoginSaveGame : public USaveGame
	{
	public:
		class FString                                              EMail;                                                   // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Password;                                                // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRemenberMe;                                             // 0x0048(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LZZ9[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLoginWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBLoginWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_MJPB[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnLoginSuccess();
		void OnLoginFailure(int32_t InRetCode);
		void OnCheckMaintenanceComplete(bool bCheckSucess, bool bIsMaintenance);
		void Login(const class FString& EMail, const class FString& Password);
		class FString GetUrl(const class FString& InURLName);
		void CheckMaintenance();
		void BNOLauncherLogin(const class FString& AuthToken);
		void BNIDLogin(const class FString& ApiToken);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLookAtComponent
	 * Size -> 0x0158 (FullSize[0x0210] - InheritedSize[0x00B8])
	 */
	class USBLookAtComponent : public UActorComponent
	{
	public:
		class USceneComponent*                                     AimArrowComp;                                            // 0x00B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBCacheBonePosition                                RootBone;                                                // 0x00C0(0x0040) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FSBCacheBonePosition                                RotateBone;                                              // 0x0100(0x0040) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FSBCacheBonePosition                                AimBone;                                                 // 0x0140(0x0040) Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		struct FAxis                                               AimBoneDirection;                                        // 0x0180(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FAxis                                               UpBoneDirection;                                         // 0x0190(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             ComponentCurrentTargetLocation;                          // 0x01A0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            SpeedMultipleValue;                                      // 0x01AC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            PowValue;                                                // 0x01B8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R6LA[0x4];                                   // 0x01C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     AimComponent;                                            // 0x01C8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MHD8[0x40];                                  // 0x01D0(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagnetMovementComponent
	 * Size -> 0x0010 (FullSize[0x0150] - InheritedSize[0x0140])
	 */
	class USBMagnetMovementComponent : public USBProjectileMovementBaseComponent
	{
	public:
		class USBProjectileChainMovementParamMovementMagnet*       MagnetParam;                                             // 0x0140(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0MJF[0x8];                                   // 0x0148(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMailAttachmentAcceptBase
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBMailAttachmentAcceptBase : public UUserWidget
	{
	public:
		bool IsVanishment(TArray<struct FSBMailData> MailData);
		bool IsTransferMail(TArray<struct FSBMailData> MailData);
		bool IsPurchaseTokenVanishment(TArray<struct FSBMailData> MailData);
		bool IsOverflow(TArray<struct FSBMailData> MailData);
		bool IsContainsVanishmentItems(TArray<struct FSBMailData> MailData);
		bool IsBagCapacityOver(TArray<struct FSBMailData> MailData, int32_t* OverType);
		bool IsAccountTypeMail(TArray<struct FSBMailData> MailData);
		void GetOverflowIconStatus(TArray<struct FSBMailData> MailData, TArray<int32_t>* IconStatus, int32_t* MarkFlag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMailBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBMailBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void MailRewardDuplicateCheck(class ASBPlayerController* InPlayerController, ESBRewardItemType RewardType, int32_t ID, bool* IsDuplicate);
		bool IsPlayerCharacterItemBagCapacityOverFromMailData(class UObject* InWorldContextObject, TArray<struct FSBMailData> MailData, int32_t* OverType);
		bool IsNeedMailAcceptResult(struct FSBMailRewardData* MailRewardData, class ASBPlayerController* PlayerController);
		bool IsAcceptableMailAttachments(class UObject* InWorldContextObject, TArray<struct FSBMailData> Mails, class ASBPlayerController* InPlayerController);
		float GetMailAcceptBtnTimeoutTime();
		TArray<struct FSBMailData> FilterCoinConvertableMails(TArray<struct FSBMailData>* Mails);
		int32_t ConvertMail2SkyCoin(TArray<struct FSBMailData> Mails);
		bool CheckMailRewardAdventureBoardGet(struct FSBMailRewardData* MailRewardData, class ASBPlayerController* PlayerController);
		bool CheckMailReadStatus(int32_t Status, ESBMailReadStatus Flag);
		int32_t CalcMailOverflowAttachmentsItemSaleValue(class UObject* InWorldContextObject, TArray<struct FSBMailData> Mails, class ASBPlayerController* InPlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMailHistory
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBMailHistory : public USBUserWidget
	{
	public:
		void Request_History(class ASBPlayerController* InPlayerController);
		void OnCompleted_History(int32_t RetCode, TArray<struct FSBMailData> MailData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMakeupManager
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBMakeupManager : public UObject
	{
	public:
		class UDataTable*                                          MakeupDB;                                                // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          CustomTextureDB;                                         // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WEKL[0x28];                                  // 0x0038(0x0028) MISSED OFFSET (PADDING)

	public:
		class UTexture2D* GetMaskTexture(ESBCharacterGender Gender, ESBMakeupType Type, int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMap
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBMap : public UUserWidget
	{
	public:
		struct FVector GetTargetWorldLocation(const class FName& InTargetId, bool* IsTargetExists);
		class FString GetTargetLevelName(const class FName& InTargetId, bool* IsTargetExists);
		bool GetQuestTargetWorldLocation(int32_t InQuestIndex, EQuestStatus InQuestStatus, class FString* QuestName, TArray<class FName>* OutLocatedLevelNames, TArray<struct FVector>* OutWorldLocations);
		void GetPartyMember(TArray<class USBPartyMemberState*>* OutPartyMembers, TArray<class ASBPlayerState*>* OutInterruptQuestMembers);
		void GetOccurringInterruptQuestInfos(bool* IsQuestInfoValid, TArray<struct FMapInterruptQuestInfo>* OutQuestInfos);
		struct FMapInterruptQuestInfo GetCurrentJoinedInterruptQuestInfo(bool* IsQuestJoined);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapIcon
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBMapIcon : public UUserWidget
	{
	public:
		class UWidget*                                             IconSize;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           DefaultSize;                                             // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             WorldPosition;                                           // 0x0288(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WZRC[0x4];                                   // 0x0294(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetWorldPosition(const struct FVector& InWorldPosition);
		void SetVisible(bool InVisible);
		void SetSizeScale(float InScale);
		void SetSize(const struct FVector2D& InSize);
		void SetPosition(const struct FVector2D& InPosition);
		void SetInside(bool IsInSide);
		void SetAngle(float InAngle);
		void OnSetInside(bool IsInSide);
		void OnSetAngle(float InAngle);
		struct FVector GetWorldPosition();
		struct FVector2D GetSize();
		struct FVector2D GetPosition();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapPlayerIcon
	 * Size -> 0x0010 (FullSize[0x02A8] - InheritedSize[0x0298])
	 */
	class USBMapPlayerIcon : public USBMapIcon
	{
	public:
		class UImage*                                              CameraDirectionIcon;                                     // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     IconSwitcher;                                            // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapPartyMemberIcon
	 * Size -> 0x0050 (FullSize[0x02E8] - InheritedSize[0x0298])
	 */
	class USBMapPartyMemberIcon : public USBMapIcon
	{
	public:
		class FScriptMulticastDelegate                             OnDeadDelegate;                                          // 0x0298(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     Root;                                                    // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     InSideSwitcher;                                          // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     OutSideSwitcher;                                         // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBPlayerState*                                      PlayerState;                                             // 0x02C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPartyMemberState*                                 PartyMemberState;                                        // 0x02C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASBCarry*>                                    CarryList;                                               // 0x02D0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R5XQ[0x8];                                   // 0x02E0(0x0008) MISSED OFFSET (PADDING)

	public:
		void Setup2(class ASBPlayerState* State);
		void Setup(class USBPartyMemberState* State);
		void SetDeadFlag(bool Flag);
		void SetCarryVisibleFlag(bool Flag);
		void SetCarryingFlag(bool Flag);
		void OnDead__DelegateSignature(class USBMapPartyMemberIcon* InPartyMemberIcon, bool IsDead);
		bool IsPlayerValidHP();
		bool IsPlayerAlive();
		bool IsDeadFlag();
		bool IsCarryVisibleFlag();
		bool IsCarryingFlag();
		struct FVector GetPlayerPosition();
		void DebugPrint();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapBuddyIcon
	 * Size -> 0x0020 (FullSize[0x02B8] - InheritedSize[0x0298])
	 */
	class USBMapBuddyIcon : public USBMapIcon
	{
	public:
		class UWidgetSwitcher*                                     Root;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     InSideSwitcher;                                          // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     OutSideSwitcher;                                         // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              Buddy;                                                   // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Setup(class AActor* InBuddy);
		void SetDead(bool IsDead);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapEnemyIcon
	 * Size -> 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
	 */
	class USBMapEnemyIcon : public USBMapIcon
	{
	public:
		class UWidgetSwitcher*                                     IconSwitcher;                                            // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapNamedEnemyIcon
	 * Size -> 0x0010 (FullSize[0x02A8] - InheritedSize[0x0298])
	 */
	class USBMapNamedEnemyIcon : public USBMapIcon
	{
	public:
		unsigned char                                              UnknownData_7KX0[0x10];                                  // 0x0298(0x0010) MISSED OFFSET (PADDING)

	public:
		void Setup(const class FString& InNamedEnemyID);
		class FString GetEnemyId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapFacilityIcon
	 * Size -> 0x0058 (FullSize[0x02F0] - InheritedSize[0x0298])
	 */
	class USBMapFacilityIcon : public USBMapIcon
	{
	public:
		unsigned char                                              UnknownData_7TY3[0x58];                                  // 0x0298(0x0058) MISSED OFFSET (PADDING)

	public:
		void Setup(const class FName& InNpcProfileID, ESBFacilityType InFacilityType, const struct FSBCharacterProfileLocationData& InLocationData);
		void OnSetup();
		class FName GetNpcProfileID();
		struct FSBCharacterProfileLocationData GetLocationData();
		ESBFacilityType GetFacilityType();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapBuffIcon
	 * Size -> 0x0020 (FullSize[0x02B8] - InheritedSize[0x0298])
	 */
	class USBMapBuffIcon : public USBMapIcon
	{
	public:
		class UWidgetSwitcher*                                     Root;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     BuffNPCSwitcher;                                         // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     BuffObjSwitcher;                                         // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBFieldActorFreeBuffPoint*                          BuffPoint;                                               // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Setup(class ASBFieldActorFreeBuffPoint* InBuffPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapQuestIcon
	 * Size -> 0x0010 (FullSize[0x02A8] - InheritedSize[0x0298])
	 */
	class USBMapQuestIcon : public USBMapIcon
	{
	public:
		unsigned char                                              UnknownData_SM6E[0x10];                                  // 0x0298(0x0010) MISSED OFFSET (PADDING)

	public:
		void Setup(int32_t QuestIndex);
		TArray<int32_t> GetQuestIndexList();
		void AddQuestIndex(int32_t InQuestIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapAreaIcon
	 * Size -> 0x0030 (FullSize[0x02C8] - InheritedSize[0x0298])
	 */
	class USBMapAreaIcon : public USBMapIcon
	{
	public:
		class UWidgetSwitcher*                                     Root;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              IconInterrupt;                                           // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              AreaInterrupt;                                           // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              AreaQuest;                                               // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AVWW[0x10];                                  // 0x02B8(0x0010) MISSED OFFSET (PADDING)

	public:
		void Setup(bool InIsInterrupt, const struct FVector& InLocation, float InRange, const struct FLinearColor& InColor);
		void SetRange(float InRange);
		void SetQuestInstance(class ASBInterruptQuestInstance* InQuestInstance);
		void SetAreaSize(const struct FVector2D& InSize);
		float GetRange();
		class ASBInterruptQuestInstance* GetQuestInstance();
		struct FVector2D GetAreaSize();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapIDIcon
	 * Size -> 0x0058 (FullSize[0x02F0] - InheritedSize[0x0298])
	 */
	class USBMapIDIcon : public USBMapIcon
	{
	public:
		unsigned char                                              UnknownData_M0DV[0x58];                                  // 0x0298(0x0058) MISSED OFFSET (PADDING)

	public:
		void Setup(const struct FSBLocationInfo& InLocationInfo, const class FName& InLocationID);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapWarpIcon
	 * Size -> 0x0048 (FullSize[0x02E0] - InheritedSize[0x0298])
	 */
	class USBMapWarpIcon : public USBMapIcon
	{
	public:
		class UImage*                                              Icon;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U3MQ[0x40];                                  // 0x02A0(0x0040) MISSED OFFSET (PADDING)

	public:
		void Setup(const class FString& InLevelName, const class FName& InWarpPointId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapWarpIconEx
	 * Size -> 0x0028 (FullSize[0x02C0] - InheritedSize[0x0298])
	 */
	class USBMapWarpIconEx : public USBMapIcon
	{
	public:
		class UImage*                                              Icon;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CJ5P[0x20];                                  // 0x02A0(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetupEx(const class FString& InLevelName, const class FName& InWarpPointId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapWarpIconDungeon
	 * Size -> 0x0028 (FullSize[0x02C0] - InheritedSize[0x0298])
	 */
	class USBMapWarpIconDungeon : public USBMapIcon
	{
	public:
		class UImage*                                              Icon;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A20J[0x20];                                  // 0x02A0(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetupDungeon(const class FString& InLevelName, const class FName& InWarpPointId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapPinIcon
	 * Size -> 0x0048 (FullSize[0x02E0] - InheritedSize[0x0298])
	 */
	class USBMapPinIcon : public USBMapIcon
	{
	public:
		class USBTextBoxBase*                                      SBTextBox;                                               // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FMapPinInfo                                         PinInfo;                                                 // 0x02A0(0x0040) NativeAccessSpecifierPrivate

	public:
		void Setup(const struct FMapPinInfo& InPinInfo, const struct FVector& InWorldPosition);
		void SetCommentVisible(bool IsVisible);
		void OnSetup();
		struct FMapPinInfo GetPinInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapShortPinIcon
	 * Size -> 0x0058 (FullSize[0x02F0] - InheritedSize[0x0298])
	 */
	class USBMapShortPinIcon : public USBMapIcon
	{
	public:
		class UWidgetSwitcher*                                     InSideSwitcher;                                          // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     OutSideSwitcher;                                         // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBShortPinInfo                                     ShortPinInfo;                                            // 0x02A8(0x0048) NativeAccessSpecifierPrivate

	public:
		void Setup(const struct FSBShortPinInfo& InPinInfo);
		void SetPinInfo(const struct FSBShortPinInfo& InPinInfo);
		void ResetPinInfo();
		bool GetPinInfo(struct FSBShortPinInfo* PinInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapEngramCannonIcon
	 * Size -> 0x0018 (FullSize[0x02B0] - InheritedSize[0x0298])
	 */
	class USBMapEngramCannonIcon : public USBMapIcon
	{
	public:
		class UWidgetSwitcher*                                     IconSwitcher;                                            // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBEngramCannon*                                     EngramCannon;                                            // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1SXK[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void Setup(class ASBEngramCannon* InEngramCannon);
		class ASBEngramCannon* GetEngramCannon();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapCampIcon
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class USBMapCampIcon : public USBMapIcon
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapFishingIcon
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class USBMapFishingIcon : public USBMapIcon
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapClimbIcon
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class USBMapClimbIcon : public USBMapIcon
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapUpdraftIcon
	 * Size -> 0x0000 (FullSize[0x0298] - InheritedSize[0x0298])
	 */
	class USBMapUpdraftIcon : public USBMapIcon
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapCarryBaseIcon
	 * Size -> 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
	 */
	class USBMapCarryBaseIcon : public USBMapIcon
	{
	public:
		class UWidgetSwitcher*                                     IconSwitcher;                                            // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateIcon(int32_t MinimapIconParam);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapNFTAreaIcon
	 * Size -> 0x0020 (FullSize[0x02B8] - InheritedSize[0x0298])
	 */
	class USBMapNFTAreaIcon : public USBMapIcon
	{
	public:
		class UWidgetSwitcher*                                     Root;                                                    // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              IconInterrupt;                                           // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              AreaInterrupt;                                           // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IA59[0x8];                                   // 0x02B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void Setup(const struct FVector& InLocation, float InRange, const struct FLinearColor& InColor);
		void SetAreaSize(const struct FVector2D& InSize);
		float GetRange();
		struct FVector2D GetAreaSize();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMapWidgetCloud
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBMapWidgetCloud : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnCloudReachedLeftEdgeOfTheScreenDelegate;               // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8P73[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetLeftEdgePosDiff(float InLeftEdgePosDiff);
		void SetCloudMoveSpeed(float InMoveSpped);
		void ResetCloud(const struct FVector2D& InPosition, const struct FVector2D& InRenderScale, float InMoveSpped);
		void OnCloudReachedLeftEdgeOfTheScreenDelegate__DelegateSignature();
		float GetCloudMoveSpeed();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMasterDataManager
	 * Size -> 0x2020 (FullSize[0x2048] - InheritedSize[0x0028])
	 */
	class USBMasterDataManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_X11S[0x40];                                  // 0x0028(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBMasterDataStatusList                             StatusList;                                              // 0x0068(0x0010) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BZH7[0x1FD0];                                // 0x0078(0x1FD0) MISSED OFFSET (PADDING)

	public:
		void OnLocalOverrideAttackMasterDatatableChanged();
		void OnDataAvailableDelegate__DelegateSignature();
		bool IsNamedEnemy(const class FString& EnemyId);
		bool IsFeatureSettingEenabled(const class FName& FeatureId);
		bool IsExistImagineRecepi(int32_t InRecepiId);
		bool IsExistCraft(int32_t InRecepiId);
		bool IsBossEnemy(const class FString& EnemyId);
		TMap<int32_t, struct FSBWeaponMasterData> GetWeaponMasterMap();
		struct FSBWeaponMasterData GetWeaponMasterData(int32_t WeaponID, bool* IsExists);
		int32_t GetWeaponLevel(int32_t InWeaponID);
		TMap<class FName, struct FSBMasterWarpPoint> GetWarpPointMasterMap();
		struct FSBMasterWarpPoint GetWarpPointMasterData(const class FName& ID, bool* IsExists);
		int32_t GetTokenRatio(int32_t TokenID);
		void GetTacticalAbilitySkillIds(int32_t InSkillId, TArray<int32_t>* OutTackticalAbilitySkillIdList);
		struct FSBStackBWeaponParam GetStackBWeaponParamByWeaponId(int32_t WeaponID, int32_t stackb_num, bool* IsValid);
		struct FSBStackBImagineParam GetStackBImagineParamByImagineId(int32_t ImagineId, int32_t stackb_num, bool* IsValid);
		struct FSBStackBImagineHyouiAbility GetStackBImagineHyouiAbilityByParamType(const class FString& ParamType, int32_t stackb_num, bool* IsValid);
		struct FSBStackBImagineHyouiAbility GetStackBImagineHyouiAbilityByImagineId(int32_t ImagineId, int32_t stackb_num, bool* IsValid);
		struct FSBSkillMasteryParam GetSkillMasteryParam(int32_t SkillId, int32_t Level, bool* IsExists);
		int32_t GetSkillLevelMax(int32_t SkillId);
		int32_t GetSkillLevelFromClassLevel(int32_t InSkillId, int32_t InClassLevel);
		int32_t GetShopItemNum(const class FName& InShopItemTableName);
		int32_t GetShopItemItemIndex(const class FName& InShopItemTableName, int32_t InId);
		struct FShopItemInfo GetShopItemInfo(const class FName& InShopItemTableName, int32_t InId);
		struct FQuestMasterData GetQuestMasterDataByLongId(const class FName& InLongId, bool* IsExists);
		struct FQuestMasterData GetQuestMasterData(int32_t Index, bool* IsExists);
		struct FSBOutGameBuffMasterData GetOutGameBuffMasterData(EOutGameBuffType InBuffType);
		TArray<struct FSBHappyNappo> GetNappoMasterData();
		TArray<struct FMasterTokenUse> GetMasterTokenUseArray();
		TArray<struct FMasterToken> GetMasterTokenArray();
		TArray<struct FSBMasterRoom> GetMasterRoomList();
		TArray<struct FSBMasterOrnament> GetMasterOrnamentList();
		TArray<struct FSBMasterDungeonReward> GetMasterDungeonRewardArray(const class FName& DungeonRewardId);
		TArray<struct FSBMasterDungeonRankedReward> GetMasterDungeonRankedRewardArray(const class FName& MapId, ESBClassType ClassType);
		TArray<struct FDigitalSignageMasterData> GetMasterDigitalSignageDataList();
		TArray<struct FDigitalSignageMasterData> GetMasterDigitalSignageArray(const class FString& GroupId);
		TMap<class FName, struct FSBMapInfo> GetMapInfoMap();
		struct FSBMapInfo GetMapInfoByMapName(const class FString& MapName, bool* IsExists);
		struct FSBMapInfo GetMapInfo(const class FName& MapId, bool* IsExists);
		int32_t GetLuckyChanceNum(int32_t StackBNum);
		TArray<struct FSBLiquidMemoryAccumulateTokenInfo> GetLiquidMemoryAccumulateTokenInfoMaster();
		TArray<int32_t> GetItemMasterWeaponIDList();
		TArray<int32_t> GetItemMasterItemIdListFromEfficacyType(EItemEfficacyType InEfficacyType);
		TArray<int32_t> GetItemMasterItemIDList();
		int32_t GetItemMasterItemIdFromEfficacyTypeAndValue(EItemEfficacyType InEfficacyType, int32_t InValue, bool InIsAccounting);
		TArray<int32_t> GetItemMasterItemCostumeList();
		struct FItemMasterData GetItemMasterData(int32_t Index, bool* IsExists);
		struct FItemEfficacyTypeMasterData GetItemEfficacyTypeMasterData(int32_t Index, bool* IsExists);
		struct FSBMasterItemBox GetItemBoxMasterData(int32_t InId);
		TArray<int32_t> GetImagineMasterItemIDList();
		bool GetGameModeInfoIsTreasureBoxDrawItemById(const class FName& ID);
		struct FEnemyPtAltMasterData GetEnemyPtAltMasterData(const class FName& ContentId, bool* IsExists);
		struct FEnemyParamMasterData GetEnemyParamMasterData(const class FString& EnemyId, bool* IsExists);
		TArray<int32_t> GetCraftTokenArray(ESBCraftTokenType InTokenType);
		void GetCraftAllRecepi(TArray<struct FCraftMasterData>* MasterData);
		int32_t GetCounterStopClassLevel();
		int32_t GetClassSharedAbilityUsableSlotNum(ESBClassType InClassType, int32_t InLevel);
		int32_t GetClassSharedAbilitySlotUsableLevel(ESBClassType InClassType, int32_t InSlotId);
		TArray<int32_t> GetBranchingSkillID(int32_t SkillId, int32_t SkillLV);
		TArray<struct FMasterImagineRecepi> GetAllMasterImagineRecepi();
		bool GetAdventureBoardPanelList(int32_t InBoardId, TArray<struct FSBAdventureBoardPanelParamMasterData>* OutPanelList);
		int32_t GetAchievementNum();
		struct FAchievementMasterData GetAchievementMasterDataByNoId(int32_t NoId, bool* IsExists);
		struct FAchievementMasterData GetAchievementMasterData(int32_t Index, bool* IsExists);
		struct FSBAbilityMasterData GetAbilityMasterDataByEffectId(int32_t EffectId, bool* IsExists);
		struct FSBAbilityMasterData GetAbilityMasterData(int32_t PerkId, bool* IsExists);
		bool FindWarpPointPortalByGameContentId(const class FString& GameContentId, TArray<class FString>* PortalNameList, bool bOstensiblyExist);
		struct FSBStampCategoryMasterData FindStampMasterDataByStampId(int32_t StampId, bool* IsExists);
		struct FSBStampCategoryMasterData FindStampMasterData(int32_t CategoryId, bool* IsExists);
		struct FSBStampMasterData FindStampDataByStampId(int32_t StampId, bool* IsExists);
		struct FSBStackBTicketData FindStackBTicketData(int32_t token_id);
		struct FSBStackBMasterData FindStackBData(const class FString& StackBId, int32_t StackBNum);
		struct FSBSkillDataMasterData FindSkillDataDataBySkillId(int32_t SkillId, bool* IsExists);
		struct FSBMasterT_ApartEquipmentData FindSBMasterT_ApartEquipmentDataForBP(int32_t ID, EItemType ItemType, bool* IsExists);
		struct FSBMasterAwardsData FindSBMasterAwardsDataForBP(int32_t ID, bool* IsExists);
		struct FSBMasterAdventureCardDecoration FindSBMasterAdventureCardDecorationDataForBP(int32_t ID, bool* bIsExists);
		struct FSBGameSettingsMasterData FindSBGameSettingsMasterDataForBP(ESBGameSettingsType ID, bool* IsExists);
		struct FRecipeSetMasterData FindRecipeSetMasterData(int32_t InRecipeSetId, bool* IsExists);
		TArray<struct FSBRecipeReleaseConditionMasterData> FindRecipeReleaseConditionMasterData_RecipeID(int32_t RecipeId, ESBRecipeType RecipeType);
		struct FSBRecipeReleaseConditionMasterData FindRecipeReleaseConditionMasterData(int32_t ID, bool* IsExists);
		TArray<struct FRankingRewardData> FindRankingRewardDataList(const class FName& InRankingID, const class FName& InContentId, ESBClassType InClassType);
		struct FRankingRewardData FindRankingRewardData(int32_t InRankingRewardID);
		struct FSBPlayerTagMasterData FindPlayerTagMasterData(int32_t ID);
		struct FSBMasterTreasure FindMasterTreasureForBP(int32_t ID, bool* IsExists);
		int32_t FindMasterTokenUseID(ESBTokenPlaceToConsumeType InPlaceToConsumeType);
		struct FSBSupplyMasterData FindMasterSupplyForBP(const class FString& ID, bool* IsExists);
		TArray<struct FSBMasterRoomPut> FindMasterRoomPutDataList(int32_t RoomId);
		struct FSBMasterRoomPut FindMasterRoomPutDataBP(int32_t ID, bool* bExists);
		struct FSBMasterRoom FindMasterRoomDataBP(int32_t ID, bool* bExists);
		struct FSBMasterReward FindMasterReward(const class FName& RewardId, bool* IsExists);
		struct FRandomTreasureBoxChest FindMasterRandomTreasureForBP(const class FString& Tag, bool* IsExists);
		struct FSBMasterOrnament FindMasterOrnamentDataBP(int32_t ID, bool* bExists);
		TArray<struct FSBMasterNaEvent> FindMasterNaEventPlayerTagId(int32_t PlayerTagId);
		struct FMasterImagineRecepi FindMasterImagineRecepi(bool* InExists, int32_t InImagineId);
		struct FMasterImaginePerkTable FindMasterImaginePerkByParamType(const class FString& InParamType);
		struct FMasterImaginePerkTable FindMasterImaginePerk(const struct FSBMasterImagine& InImagineMaster);
		struct FImagineParameter FindMasterImagineParameter(const struct FSBMasterImagine& InImagineMaster, int32_t InLevel);
		struct FSBMasterImagine FindMasterImagineData(bool* IsExists, int32_t InId);
		struct FSBMasterImagine FindMasterImagineByArtsName(const class FName& ImagineArtsName);
		struct FSBMasterImagine FindMasterImagine(int32_t InId);
		struct FSBMasterFreeBuffPoint FindMasterFreeBuffPointForBP(int32_t ID, bool* IsExists);
		struct FSBMasterDungeonRankedReward FindMasterDungeonRankedReward(const class FName& MapId, ESBClassType ClassType, ESBDungeonEvaluation Evaluation, bool* IsExists);
		struct FSBLiquidMemoryAccumulateTokenInfo FindLiquidMemoryAccumulateTokenInfo(int32_t InId, bool* IsExists);
		struct FSBFangTokenMasterData FindFangTokenMasterDataBP(int32_t ID, bool* bExists);
		struct FSBEmoteMasterData FindEmoteData(int32_t EmoteId, bool* IsExists);
		struct FCraftMasterData FindCraftMasterData(int32_t InRecepiId, bool* IsExists);
		struct FSBAdventurerRankMasterData FindAdventurerRankDataByRank(int32_t Rank, bool* IsExists);
		struct FSBAdventureBoardPanelParamMasterData FindAdventureBoardPanel(int32_t InBoardId, int32_t InPanelId, bool* IsExists);
		struct FSBAdventureBoardMissionParamMasterData FindAdventureBoardMission(const class FString& MissionId, bool* IsExists);
		struct FSBAdventureBoardParamMasterData FindAdventureBoard(int32_t InBoardId, bool* IsExists);
		bool ExistsMapInfoEntryConditionForEquip(class UObject* WorldContextObject, ESBDungeonEntryConditionItemType ItemType, int32_t ItemIndex, struct FSBMapInfo* OutFoundData);
		bool ExistsEventEnemyDropEntryConditionForEquip(class UObject* WorldContextObject, ESBDungeonEntryConditionItemType ItemType, int32_t ItemIndex, struct FSBEventEnemyDropMasterData* OutFoundData);
		bool ExistsChallengeQuestDropEntryConditionForEquip(class UObject* WorldContextObject, ESBDungeonEntryConditionItemType ItemType, int32_t ItemIndex, struct FSBMasterEventChallengeQuestDrop* OutFoundData);
		int32_t CalculateClassLevel(ESBClassType InClassType, int32_t InExp, int32_t InAdventurerRank);
		void BuildAttackMasterDatas();
		void BP_SortAestheShopCourseMasterDataBySeasonPass(TArray<struct FSBAestheShopCourseMasterData>* OutDataArray);
		void BP_SortAestheShopCourseIdBySeasonPass(TArray<int32_t>* OutCourseIdArray);
		struct FSBWeaponLevelStatusMasterData BP_GetWeaponLevelStatusMasterDataFromExp(int32_t InWeaponID, bool* bOutExist);
		struct FSBWeaponLevelStatusMasterData BP_GetWeaponLevelStatusMasterDataByLevel(int32_t InWeaponID, int32_t InLevel, bool* bOutExist);
		struct FSBWeaponLevelStatusMasterData BP_GetWeaponLevelStatusMasterData(int32_t InWeaponID, bool* bOutExist);
		struct FSBWeaponKillerPerkPickMasterData BP_GetWeaponKillerPerkPickMasterDataByPerkPickId(const class FName& PickId, bool* IsExists);
		TArray<struct FSBWeaponKillerPerkPickMasterData> BP_GetWeaponKillerPerkPickMasterData(const class FName& InTableId, bool* IsExists);
		void BP_GetUsableExtraColorMasterDataList(class UObject* WorldContextObject, int32_t InCostumeId, class USBEventScheduler* InEventScheduler, TArray<struct FSBCostumeExtraColorMasterData>* OutUsableExtraColorMasterDataList);
		int32_t BP_GetStackBMax(const class FString& StackBId);
		bool BP_GetStackBImagineHyouiAbilitysByParamType(const class FString& ParamType, TArray<struct FSBStackBImagineHyouiAbility>* OutStackBImagineHyouiAbilityList);
		bool BP_GetStackBImagineHyouiAbilitysByImagineId(int32_t ImagineId, TArray<struct FSBStackBImagineHyouiAbility>* OutStackBImagineHyouiAbilityList);
		int32_t BP_GetStackBImagineHyouiAbilityMax(const class FString& ParamType);
		struct FSBFlatShopItemSetMasterData BP_GetShopItemSetMasterByShopItemId(int32_t Index, bool* IsExists);
		struct FSBFlatShopItemSetMasterData BP_GetShopItemSetMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBFlatShopItemSetMasterData> BP_GetShopItemSetMaster();
		struct FSBSeasonPassShopPurchaseLimitMasterData BP_GetSeasonPassShopPurchaseLimitMasterByLimitId(int32_t Index, bool* IsExists);
		struct FSBSeasonPassShopPurchaseLimitMasterData BP_GetSeasonPassShopPurchaseLimitMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBSeasonPassShopPurchaseLimitMasterData> BP_GetSeasonPassShopPurchaseLimitMaster();
		struct FSBSeasonPassShopItemMasterData BP_GetSeasonPassShopItemMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBSeasonPassShopItemMasterData> BP_GetSeasonPassShopItemMaster();
		int32_t BP_GetRoSPurchaseShopRibbonByItemId(int32_t Index);
		TArray<struct FSBRoseOrbShopItemMasterData> BP_GetRoSPurchaseShopMaster();
		struct FSBRmShopMasterData BP_GetRmShopIdMasterByShopTypeId(int32_t Index, bool* IsExists);
		struct FSBRmShopMasterData BP_GetRmShopIdMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBRmShopMasterData> BP_GetRmShopIdMaster();
		struct FSBPurchaseConditionMasterData BP_GetPurchaseConditionMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBPurchaseConditionMasterData> BP_GetPurchaseConditionMaster();
		TArray<struct FSBPaymentLimitMasterData> BP_GetPaymentLimitMaster();
		struct FSBNetworkCafeBuffsMasterData BP_GetNetworkCafeBuffsMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBNetworkCafeBuffsMasterData> BP_GetNetworkCafeBuffsMaster();
		struct FSBMissionEntryConditionSet BP_GetMissionEntryConditionSetMasterDataById(int32_t ID, bool* bExists);
		TArray<struct FSBMissionEntryConditionSet> BP_GetMissionEntryConditionSetMasterData();
		TMap<class FName, struct FSBMasterSeasonPassReward> BP_GetMasterSeasonPassRewardMap();
		TArray<struct FSBMasterSeasonPass> BP_GetMasterSeasonPassList();
		TMap<int32_t, struct FSBMasterSeason> BP_GetMasterSeasonMap();
		TArray<struct FSBRaidBattleMasterData> BP_GetMasterRaidBattle();
		struct FSBMasterEventChallengeQuestDrop BP_GetMasterEventChallengeQuestDropById(const class FString& ID, bool* IsExists);
		TArray<struct FSBMasterEventChallengeQuestDrop> BP_GetMasterEventChallengeQuestDrop();
		TArray<struct FSBLiquidMemoryMasterData> BP_GetLiquidMemoryMasterDataArray();
		float BP_GetLiquidMemoryEfficacyValue(int32_t InLiquidMemoryId, int32_t InLiquidMemoryLevel, int32_t InClassLevel);
		TArray<struct FSBHelpMatchingRewardInfo> BP_GetHelpMatchingRewardInfoMasterData();
		struct FSBHelpMatchingRequiredInfo BP_GetHelpMatchingRequiredInfoMasterDataById(int32_t ID, bool* bExists);
		TArray<struct FSBHelpMatchingRequiredInfo> BP_GetHelpMatchingRequiredInfoMasterData();
		struct FSBHelpMatchingModeInfo BP_GetHelpMatchingModeInfoMasterDataById(int32_t ID, bool* bExists);
		TArray<struct FSBHelpMatchingModeInfo> BP_GetHelpMatchingModeInfoMasterData();
		TArray<struct FGuildRankUnlockMaster> BP_GetGuildRankUnLockMaster();
		int32_t BP_GetGuildRankFromExp(int32_t InExp, int32_t* RemainExp, int32_t* NeedExp);
		struct FSBEventShopRealGoodsMasterData BP_GetEventShopRealGoodsMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBEventShopRealGoodsMasterData> BP_GetEventShopRealGoodsMaster();
		struct FSBEventShopMasterData BP_GetEventShopMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBEventShopMasterData> BP_GetEventShopMaster();
		struct FSBEventShopItemSetMasterData BP_GetEventShopItemSetMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBEventShopItemSetMasterData> BP_GetEventShopItemSetMaster();
		struct FSBEventShopItemMasterData BP_GetEventShopItemMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBEventShopItemMasterData> BP_GetEventShopItemMaster();
		struct FSBEventEnemyDropMasterData BP_GetEventEnemyDropMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBEventEnemyDropMasterData> BP_GetEventEnemyDropMaster();
		struct FSBCurrencyShopPurchaseLimitMasterData BP_GetCurrencyShopPurchaseLimitMasterByLimitId(int32_t Index, bool* IsExists);
		struct FSBCurrencyShopPurchaseLimitMasterData BP_GetCurrencyShopPurchaseLimitMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBCurrencyShopPurchaseLimitMasterData> BP_GetCurrencyShopPurchaseLimitMaster();
		struct FSBCurrencyShopItemMasterData BP_GetCurrencyShopItemMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBCurrencyShopItemMasterData> BP_GetCurrencyShopItemMaster();
		struct FSBCouponMasterData BP_GetCouponMasterByTargetId(int32_t Index, bool* IsExists);
		TArray<struct FSBCouponMasterData> BP_GetCouponMaster();
		struct FSBCountryConfigMasterData BP_GetCountryConfigMasterById(int32_t InId);
		TArray<struct FSBCountryConfigMasterData> BP_GetCountryConfigMaster();
		bool BP_GetCostumeOccupiedSubLocations(int32_t InCostumeId, TArray<ECharaPartsLocation>* OutSubLocationList);
		TArray<struct FSBMasterCostume> BP_GetCostumeMasterArray();
		TArray<struct FSBCostumeExtraColorMasterData> BP_GetCostumeExtraColorMasterDataArray();
		struct FSBBPPtShopPurchaseLimitMasterData BP_GetBPPtShopPurchaseLimitMasterByLimitId(int32_t Index, bool* IsExists);
		struct FSBBPPtShopPurchaseLimitMasterData BP_GetBPPtShopPurchaseLimitMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBBPPtShopPurchaseLimitMasterData> BP_GetBPPtShopPurchaseLimitMaster();
		struct FSBBPPtShopItemMasterData BP_GetBPPtShopItemMasterById(int32_t Index, bool* IsExists);
		TArray<struct FSBBPPtShopItemMasterData> BP_GetBPPtShopItemMaster();
		struct FSBBPPtExchangeMasterData BP_GetBPPtExchangeMasterByItemId(ESBRewardItemType ItemType, int32_t ItemId, bool* IsExists);
		TArray<struct FSBBPPtExchangeMasterData> BP_GetBPPtExchangeMaster();
		TArray<struct FSBAestheShopPartsMasterData> BP_GetAestheShopPartsMasterDataArray();
		TArray<struct FSBAestheShopCourseMasterData> BP_GetAestheShopCourseMasterDataArrayWithFreePassCheck(class UObject* WorldContextObject, bool bInIsFreePass);
		TArray<struct FSBAestheShopCourseMasterData> BP_GetAestheShopCourseMasterDataArray();
		TArray<struct FSBAestheShopCharaParamRestrictionMasterData> BP_GetAestheShopCharaParamRestrictionMasterDataArray();
		struct FSBAbilityEffectMasterData BP_GetAbilityEffectMasterData(int32_t ID, bool* IsExists);
		struct FSBSyntheAbilityPickUp BP_FindSyntheAbilityPickupMasterData(bool* IsExists, int32_t ID);
		struct FSBMasterWeaponPerkLotteriesData BP_FindMasterWeaponPerkLotteryTable(const class FString& InTableId);
		struct FSBWarehouseAbilityZoneMasterData BP_FindMasterWarehouseAbilityZoneByRecepiId(int32_t RecepiId, bool* bExists);
		struct FSBWarehouseAbilityZoneMasterData BP_FindMasterWarehouseAbilityZone(int32_t ID, bool* bExists);
		struct FSBWarehouseAbilityTokenMasterData BP_FindMasterWarehouseAbilityToken(int32_t ID, bool* bExists);
		struct FSBWarehouseAbilityStoringMasterData BP_FindMasterWarehouseAbilityStoringByRecepiId(int32_t RecepiId, bool* bExists);
		struct FSBWarehouseAbilityStoringMasterData BP_FindMasterWarehouseAbilityStoring(int32_t ID, bool* bExists);
		struct FSBWarehouseAbilityRecipeMasterData BP_FindMasterWarehouseAbilityRecipe(int32_t ID, bool* bExists);
		struct FSBWarehouseAbilityProductionMasterData BP_FindMasterWarehouseAbilityProductionByRecepiId(int32_t RecepiId, bool* bExists);
		struct FSBWarehouseAbilityProductionMasterData BP_FindMasterWarehouseAbilityProduction(int32_t ID, bool* bExists);
		struct FSBWarehouseAbilityMissionMasterData BP_FindMasterWarehouseAbilityMissionByRecepiId(int32_t RecepiId, bool* bExists);
		struct FSBWarehouseAbilityMissionMasterData BP_FindMasterWarehouseAbilityMission(int32_t ID, bool* bExists);
		struct FSBWarehouseAbilityCollectionMasterData BP_FindMasterWarehouseAbilityCollectionByRecepiId(int32_t RecepiId, bool* bExists);
		struct FSBWarehouseAbilityCollectionMasterData BP_FindMasterWarehouseAbilityCollection(int32_t ID, bool* bExists);
		struct FMasterTokenUse BP_FindMasterTokenUse(bool* bIsValid, int32_t InTokenId);
		struct FMasterToken BP_FindMasterToken(bool* bIsValid, int32_t InTokenId);
		struct FSBMasterSeasonPassReward BP_FindMasterSeasonPassReward(const class FName& ID, bool* bExists);
		struct FSBMasterSeasonPass BP_FindMasterSeasonPass(int32_t SeasonId, ESBSeasonPassPlanState Type, bool* bExists);
		struct FSBMasterSeason BP_FindMasterSeason(int32_t ID, bool* bExists);
		struct FSBMasterRewardLotteryGroups BP_FindMasterRewardLotteryGroups(int32_t InId, bool* bExists);
		struct FSBRewardBoostMissionMasterData BP_FindMasterRewardBoostMission(int32_t ID, bool* bExists);
		struct FSBRewardBoostLiquidMemoryMasterData BP_FindMasterRewardBoostLiquidMemory(int32_t ID, bool* bExists);
		struct FSBResearchTeamMasterData_CostTime BP_FindMasterResearchTeam_CostTime(const class FString& MapId, bool* bExists);
		struct FSBResearchTeamMasterData_Buff BP_FindMasterResearchTeam_BuffByRecipeId(int32_t InRecipeId, bool* bExists);
		struct FSBResearchTeamMasterData_Buff BP_FindMasterResearchTeam_Buff(const class FString& MapId, bool* bExists);
		struct FSBRaidBattleMasterData BP_FindMasterRaidBattle(const class FString& InRaidId, bool* bExists);
		struct FSBMasterMountImagine BP_FindMasterMountImagineData(int32_t InId, bool* bOutExist);
		struct FSBMasterMainAbilityTickets BP_FindMasterMainAbilityTickets(int32_t InId);
		struct FSBInterruptQuestDestructibleObjectMasterData BP_FindMasterInterruptQuestDestructibleObject(const class FName& InId, bool* bExists);
		struct FSBInterruptQuestMasterData BP_FindMasterInterruptQuest(const class FString& QuestID, bool* bExists);
		struct FSBMasterFusionItem BP_FindMasterFusionItem(int32_t Index, bool* Exists);
		struct FSBEventTermsMasterData BP_FindMasterEventTerms(const class FString& TermId, bool* IsExists);
		struct FSBMasterEquipmentSeries BP_FindMasterEquipmentSeries(int32_t ID, bool* Exists);
		struct FSBDungeonEntryConditionMasterData BP_FindMasterDungeonEntryCondition(int32_t ID, bool* bExists);
		struct FSBLiquidMemoryMasterData BP_FindLiquidMemoryMaster(int32_t InId, bool* IsExists);
		struct FGuildRank BP_FindGuildRankData(int32_t Rank);
		struct FSBMasterCostume BP_FindCostumeMasterByPartsNameAndEquipableGender(bool* IsExist, const class FString& InCostumePartsName, EEquipableGender InEquipableGender);
		struct FSBMasterCostume BP_FindCostumeMasterByPartsName(bool* IsExist, const class FString& InCostumePartsName);
		struct FSBMasterCostume BP_FindCostumeMaster(bool* IsExist, int32_t CostumeId);
		TArray<struct FSBCostumeExtraColorMasterData> BP_FindCostumeExtraColorMastersFromCostumeId(int32_t InCostumeId);
		struct FSBCostumeExtraColorMasterData BP_FindCostumeExtraColorMaster(int32_t InId, bool* IsExists);
		struct FSBAestheShopPartsMasterData BP_FindAestheShopPartsMasterByIconId(const class FString& InIconId, bool* IsExists);
		struct FSBAestheShopPartsMasterData BP_FindAestheShopPartsMasterByAssetId(const class FString& InAssetId, bool* IsExists);
		struct FSBAestheShopPartsMasterData BP_FindAestheShopPartsMaster(int32_t InId, bool* IsExists);
		struct FSBAestheShopCourseMasterData BP_FindAestheShopCourseMaster(int32_t InId, bool* IsExists);
		struct FSBAestheShopCharaParamRestrictionMasterData BP_FindAestheShopCharaParamRestrictionMaster(const class FString& InId, bool* IsExists);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMatchCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBMatchCheatCommand : public UObject
	{
	public:
		void SetMatchingDebugLogEnable(int32_t InLogSpan);
		void RescueMode(bool B);
		void RequestRescue();
		void RequestMatching(const class FString& InContentId, bool bInUnlimit);
		void DumpMatchingState();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMatchingBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBMatchingBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void RequestMatchingDirect(class UObject* WorldContextObject, const struct FSBMapInfo& MapInfo, bool bUnlimit, bool bBackfill);
		bool IsAbleToTravel(class UObject* WorldContextObject);
		void GetRequestGameContentIds(class UObject* WorldContextObject, TArray<class FName>* OutIds, bool* bExists);
		class USBMatchingGameState* GetMatchedState(class UObject* WorldContextObject, bool* bExists);
		class USBMatchingGameState* GetCurrentMatchmakingState(class UObject* WorldContextObject, bool* bExists);
		void ForceMatchingDirect(class UObject* WorldContextObject);
		bool CheckEquipItemOr(class UObject* WorldContextObject, int32_t EntryConditionId);
		void CancelMatchingDirect(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMatchingGameState
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class USBMatchingGameState : public UObject
	{
	public:
		unsigned char                                              UnknownData_06J3[0xB0];                                  // 0x0028(0x00B0) MISSED OFFSET (PADDING)

	public:
		void JoinMatchingGame();
		bool IsWaitServer();
		bool IsUnlimit();
		bool IsMatched();
		bool IsJoinable();
		bool IsGathered();
		bool IsConfirmed();
		bool IsBackfill_Result();
		bool IsBackfill_Request();
		int32_t GetRemainingTime();
		int32_t GetRegularNumber();
		int32_t GetParticipantNumber();
		int32_t GetNeedParticipantNumber();
		int32_t GetHelpMathingModeId();
		class FName GetGameContentID();
		float GetConfirmLimitTime();
		int32_t GetConfirmedParticipantNumber();
		void CancelMatchingGame();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMatchingManager
	 * Size -> 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
	 */
	class USBMatchingManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnGetPenaltyInfoDelegate;                                // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyRequestMatchmakingDelegate;                       // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNoticeButtonUpdateDelegate;                            // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q5OL[0x4];                                   // 0x0058(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultConfirmLimit;                                     // 0x005C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BAG9[0xF0];                                  // 0x0060(0x00F0) MISSED OFFSET (PADDING)

	public:
		void OnTryConnectNextServer();
		void OnPartyRequestMatchmaking__DelegateSignature();
		void OnNoticeButtonUpdate__DelegateSignature(int32_t RetCode);
		void OnGetPenaltyInfo__DelegateSignature(bool bWasSuccessful, int32_t PenaltyLiftedAt, int32_t LeftBeforePenalty);
		bool GetPenaltyInfo(class ASBPlayerController* InPlayerController);
		struct FDateTime GetMatchingStartTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMatchingMenu
	 * Size -> 0x0008 (FullSize[0x02B0] - InheritedSize[0x02A8])
	 */
	class USBMatchingMenu : public USBCommandMenuChildBase
	{
	public:
		unsigned char                                              UnknownData_5Y3P[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (PADDING)

	public:
		ESBMatchingMenuStartMatchResult StartMatchmaking(TArray<struct FSBMapInfo> DungeonMapInfoArray, bool bUnlimit, bool bBackfill);
		void SetDungeonId(const class FName& InDungeonId);
		class FName GetDungeonId();
		ESBMatchingMenuCancelMatchResult CancelMatchmaking();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMatchingRescueRequester
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBMatchingRescueRequester : public UObject
	{
	public:
		unsigned char                                              UnknownData_M4QJ[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.MatchingSystem
	 * Size -> 0x0150 (FullSize[0x0178] - InheritedSize[0x0028])
	 */
	class UMatchingSystem : public UObject
	{
	public:
		unsigned char                                              UnknownData_ZD46[0x150];                                 // 0x0028(0x0150) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerActorComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBPlayerActorComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_T94F[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMeshClimbingComponent
	 * Size -> 0x00A8 (FullSize[0x0178] - InheritedSize[0x00D0])
	 */
	class USBMeshClimbingComponent : public USBPlayerActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnSetClimbingDelegate;                                   // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSBMeshClimbingHandsOffset>                  HandsOffsetList;                                         // 0x00E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      SearchClimbingComponentDistance;                         // 0x00F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchClimbingPointDistance_LandingXY;                   // 0x00F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchClimbingPointDistance_LandingZ;                    // 0x00F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchClimbingPointDistance_Flying;                      // 0x00FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClimbingMoveSpeed;                                       // 0x0100(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ClimbingMoveLimitTime;                                   // 0x0104(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ClimbingReachedTargetPointLength;                        // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckPrevClimbAnimAngle;                                 // 0x010C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ClimbingFallMoveScale;                                   // 0x0110(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ClimbingMoveInputThreshold;                              // 0x0114(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SurfaceTraceLength;                                      // 0x0118(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SurfaceTraceRadius;                                      // 0x011C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ClimbingTargetPointID;                                   // 0x0120(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ClimbingPointUILocation;                                 // 0x0124(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSetClimbingPointUILocation;                            // 0x0130(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PJ79[0x47];                                  // 0x0131(0x0047) MISSED OFFSET (PADDING)

	public:
		void OnSetClimbingDelegate__DelegateSignature();
		bool IsClimbing();
		class AActor* GetClimbingTargetActor();
		struct FVector GetAtPointVelocity();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapBG
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBMiniMapBG : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              BG;                                                      // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_22LM[0x10];                                  // 0x0288(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapChangeVolume
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBMiniMapChangeVolume : public AActor
	{
	public:
		void OnEndOverlap(class AActor* InActor);
		void OnBeginOverlap(class AActor* InActor);
		void GetConfigName(class FName* InVolume, class FName* OutVolume);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconBase
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBMiniMapIconBase : public UUserWidget
	{
	public:
		class AActor*                                              Actor;                                                   // 0x0278(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBMapIcon*                                          MapIcon;                                                 // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Radius;                                                  // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0KFS[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetVisibleOutside(bool InFlag);
		void SetVisible(bool Visible);
		void SetFixedArrow(bool InFlag);
		void OnSetInside(bool IsInSide);
		void OnSetAngle(float InAngle);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconArea
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconArea : public USBMiniMapIconBase
	{
	public:
		void Setup(bool InIsInterrupt, const struct FVector& InLocation, float InRange, const struct FVector2D& InAreaSize, const struct FLinearColor& InColor);
		void SetQuestInstance(class ASBInterruptQuestInstance* InQuestInstance);
		class ASBInterruptQuestInstance* GetQuestInstance();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconPartyMember
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconPartyMember : public USBMiniMapIconBase
	{
	public:
		void Setup2(class ASBPlayerState* State);
		void Setup(class USBPartyMemberState* State);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconQuest
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconQuest : public USBMiniMapIconBase
	{
	public:
		void Setup(int32_t QuestIndex, const struct FVector& InLocation);
		TArray<int32_t> GetQuestIndexList();
		void AddQuestIndex(int32_t InQuestIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconChallengeQuest
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconChallengeQuest : public USBMiniMapIconBase
	{
	public:
		void Setup(const struct FVector& InLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconEnemy
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconEnemy : public USBMiniMapIconBase
	{
	public:
		float                                                      HeightMin;                                               // 0x0290(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeightMax;                                               // 0x0294(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeightOpacity;                                           // 0x0298(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5HL8[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconNamedEnemy
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconNamedEnemy : public USBMiniMapIconBase
	{
	public:
		float                                                      HeightMin;                                               // 0x0290(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeightMax;                                               // 0x0294(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HeightOpacity;                                           // 0x0298(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OGMM[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (PADDING)

	public:
		void Setup(const class FString& InNamedEnemyID);
		class FString GetEnemyId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconBuddy
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconBuddy : public USBMiniMapIconBase
	{
	public:
		unsigned char                                              UnknownData_BD0H[0x8];                                   // 0x0290(0x0008) MISSED OFFSET (PADDING)

	public:
		void Setup();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconFacility
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconFacility : public USBMiniMapIconBase
	{
	public:
		void Setup(const class FName& InNpcProfileID, ESBFacilityType InFacilityType, const struct FSBCharacterProfileLocationData& InLocationData, const struct FVector& InLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconID
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconID : public USBMiniMapIconBase
	{
	public:
		void Setup(const struct FSBLocationInfo& InLocationInfo, const struct FVector& InLocation, const class FName& InLocationID);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconWarp
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconWarp : public USBMiniMapIconBase
	{
	public:
		void Setup(const class FString& InLevelName, const class FName& InWarpPointId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconWarpEx
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconWarpEx : public USBMiniMapIconBase
	{
	public:
		void SetupEx(const class FString& InLevelName, const class FName& InWarpPointId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconWarpDungeon
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconWarpDungeon : public USBMiniMapIconBase
	{
	public:
		void SetupDungeon(const class FString& InLevelName, const class FName& InWarpPointId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconPin
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconPin : public USBMiniMapIconBase
	{
	public:
		void Setup(const struct FMapPinInfo& InPinInfo, const struct FVector& InWorldPosition);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconShortPin
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconShortPin : public USBMiniMapIconBase
	{
	public:
		void Setup(const struct FSBShortPinInfo& InPinInfo);
		bool GetPinInfo(struct FSBShortPinInfo* InPinInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconEngramCannon
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconEngramCannon : public USBMiniMapIconBase
	{
	public:
		void Setup();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconCamp
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconCamp : public USBMiniMapIconBase
	{
	public:
		void Setup(const struct FVector& InLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconFishing
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconFishing : public USBMiniMapIconBase
	{
	public:
		void Setup(const struct FVector& InLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconClimb
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconClimb : public USBMiniMapIconBase
	{
	public:
		void Setup(const struct FVector& InLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconUpdraft
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconUpdraft : public USBMiniMapIconBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconBuffNpcObj
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconBuffNpcObj : public USBMiniMapIconBase
	{
	public:
		void Setup();
		class ASBFieldActorFreeBuffPoint* GetBuffPoint();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconCarry
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconCarry : public USBMiniMapIconBase
	{
	public:
		class UCanvasPanel*                                        CanvasPanel_1;                                           // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconCarryBase
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconCarryBase : public USBMiniMapIconBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconNFTArea
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBMiniMapIconNFTArea : public USBMiniMapIconArea
	{
	public:
		void SetUpNFTArea(class USBMiniMapWidget* InMiniMapWidget, const struct FVector& InLocation, float InRange, const struct FLinearColor& InColor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIconsBase
	 * Size -> 0x0080 (FullSize[0x02F8] - InheritedSize[0x0278])
	 */
	class USBMiniMapIconsBase : public UUserWidget
	{
	public:
		class UDataTable*                                          CharacterProfileDB;                                      // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          LocationDB;                                              // 0x0280(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          QuestAreaConfigDB;                                       // 0x0288(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        Icons;                                                   // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NBSS[0x60];                                  // 0x0298(0x0060) MISSED OFFSET (PADDING)

	public:
		void StartTimerEventUpdateQuest();
		bool RemoveIcon(class UWidget* InIcon);
		void OnUnbind();
		void OnStartInterruptQuest(class ASBInterruptQuestInstance* InInstance);
		void OnRepUpdateInterruptQuestNpcDelegete(TArray<struct FSBInterruptQuestNpcData> InNpcDataList);
		void OnRepUpdateInterruptQuestGimmickObjectDelegete(TArray<struct FSBInterruptQuestGimmickObjectData> InGimmickObjectList);
		void OnRepUpdateInterruptQuesteDestructibleObjectDelgete(TArray<struct FSBInterruptQuestDestructibleObjectData> InDestructibleObjectDataList);
		void OnFreeBuffPointChangeStateNPC();
		void OnEndInterruptQuest(class ASBInterruptQuestInstance* InInstance);
		void OnDungeonAddActivate(const class FName& DungeonId);
		void OnDeletePartyMemberIcon();
		void OnCreateWarpPointIcon(const class FString& LevelName, const class FString& PortalName);
		void OnCreateWarpPointExIcon(const class FString& LevelName, const class FString& PortalName);
		void OnCreateWarpPointDungeonIcon(const class FString& LevelName, const class FString& PortalName);
		void OnCreateUpdraftIcon(class ASBUpdraft* InUpdraft);
		void OnCreateShortPin();
		void OnCreateRaidIcon(const struct FSBLocationInfo& LocationInfo, const struct FVector& InLocation);
		void OnCreateQuestNPCIcon(int32_t QuestID, EQuestIconType QuestType, EQuestCategory2 QuestCategory, const struct FVector& Location);
		void OnCreateQuestIcon();
		void OnCreateQuestChallenge(ESBMiniMapIconType IconType, const struct FVector& InLocation);
		void OnCreateQuestAreaIcon(const struct FVector& InLocation, float InRange, const struct FVector2D& InAreaSize, const struct FLinearColor& InColor);
		void OnCreatePublicDungeonIcon(const struct FSBLocationInfo& LocationInfo, const class FName& RowName, const struct FVector& InLocation);
		void OnCreatePin(const struct FMapPinInfo& MapPinInfo, const struct FVector& InWorldPosition);
		void OnCreatePartyMemberIcon();
		void OnCreateNFTAreaIcon(class USBMiniMapIcons* InMiniMapIcons, const struct FVector& InLocation, float InRange, const struct FVector2D& InAreaSize);
		void OnCreateFishingIcon(const struct FVector& InLocation);
		void OnCreateFacilityIcon(const class FName& InProfileId, ESBFacilityType InType, const struct FSBCharacterProfileLocationData& InLocationData, const struct FVector& InLocation);
		void OnCreateEngramCannon(class ASBEngramCannon* EngramCannon);
		void OnCreateEnemyGate(class AActor* InActor);
		void OnCreateDxBattleSupplier(class AActor* InActor);
		void OnCreateDxBattleGateBarrier(class AActor* InActor);
		void OnCreateDungeonIcon(const struct FSBLocationInfo& LocationInfo, const struct FVector& InLocation);
		void OnCreateClimbIcon(class ASBClimbPoint* InClimbPoint);
		void OnCreateCarrys(class ASBCarry* InCarry);
		void OnCreateCarryBases(class AActor* InActor);
		void OnCreateCampIcon(const struct FVector& InLocation);
		void OnCreateBuffNPCIcon(class ASBFieldActorFreeBuffPoint* FreeBuffPoint);
		void OnCampFireChangedDataDelegate();
		void OnBind();
		bool IsCreatedQuestIcon(int32_t InQuestId, const struct FVector& InLocation);
		void EndNFTArea();
		void CreatePin();
		void CreatePartyMemberIcon();
		void CreateEnemyGate();
		void CreateDxBattleSupplier();
		void AddInterruptQuestIcon(class ASBInterruptQuestInstance* InInstance, const struct FVector& InLocation, float InRange, const struct FVector2D& InAreaSize);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapIcons
	 * Size -> 0x01B8 (FullSize[0x04B0] - InheritedSize[0x02F8])
	 */
	class USBMiniMapIcons : public USBMiniMapIconsBase
	{
	public:
		class USBMapPlayerIcon*                                    PlayerIcon;                                              // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          EnemyIcons;                                              // 0x0300(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          BuddyIcons;                                              // 0x0310(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          NamedEnemyIcons;                                         // 0x0320(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          PartyMemberIcons;                                        // 0x0330(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          FacilityIcons;                                           // 0x0340(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          BuffNPCIcons;                                            // 0x0350(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          QuestIconS;                                              // 0x0360(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          QuestNpcIcons;                                           // 0x0370(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          QuestAreaIcons;                                          // 0x0380(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          QuestInterruptIcons;                                     // 0x0390(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          QuestChallengeIcons;                                     // 0x03A0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          WarpPointIcons;                                          // 0x03B0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          WarpPointIconsDungeon;                                   // 0x03C0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          IDIcons;                                                 // 0x03D0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          EngramCannonIcons;                                       // 0x03E0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          CampIcons;                                               // 0x03F0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          FishingIcons;                                            // 0x0400(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          ClimbIcons;                                              // 0x0410(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          UpdraftIcons;                                            // 0x0420(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          PinIcons;                                                // 0x0430(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          ShortPinIcons;                                           // 0x0440(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          CarryIcons;                                              // 0x0450(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          CarryBaseIcons;                                          // 0x0460(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          DxBattleSupplierIcons;                                   // 0x0470(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          EnemyGateIcons;                                          // 0x0480(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          DxBattleGateBarrierIcons;                                // 0x0490(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMiniMapIconBase*>                          NFTAreaIcons;                                            // 0x04A0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		class USBMiniMapIconQuest* IsTypeQuestIcon(EQuestIconType InQuestType, const struct FVector& InLocation);
		void DeleteEnemyIcon(class USBMiniMapIconBase* InIcon);
		void DeleteEnemyGateIcon(class AActor* InActor);
		void DeleteDxBattleSupplierIcon(class AActor* InActor);
		class USBMiniMapIconBase* CreateEnemyIcon(class AActor* InActor);
		class USBMiniMapIconBase* AddNamedEnemyIcon(class ASBEnemyCharacter* InEnemyCharacter);
		class USBMiniMapIconBase* AddEnemyIcon(class ASBEnemyCharacter* InEnemyCharacter);
		class USBMiniMapIconBase* AddBuddyIcon(class ASBEnemyCharacter* InEnemyCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapLowerIcons
	 * Size -> 0x0010 (FullSize[0x0308] - InheritedSize[0x02F8])
	 */
	class USBMiniMapLowerIcons : public USBMiniMapIconsBase
	{
	public:
		TArray<class USBMiniMapIconBase*>                          WarpPointIconsEx;                                        // 0x02F8(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapName
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBMiniMapName : public UUserWidget
	{
	public:
		class UTextBlock*                                          LabelMapName;                                            // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapTime
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBMiniMapTime : public UUserWidget
	{
	public:
		class UImage*                                              TimeGauge;                                               // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     SwitchTimeIcon;                                          // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NR4T[0x10];                                  // 0x0288(0x0010) MISSED OFFSET (PADDING)

	public:
		void Update(bool IsVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapWidgetBase
	 * Size -> 0x00F0 (FullSize[0x0368] - InheritedSize[0x0278])
	 */
	class USBMiniMapWidgetBase : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CPRoot;                                                  // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class URetainerBox*                                        RetainerBox;                                             // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBMiniMapIconsBase*                                 Icons;                                                   // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBMiniMapIconsBase*                                 LowerIcons;                                              // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          MapTexture;                                              // 0x02A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0AMT[0xC0];                                  // 0x02A8(0x00C0) MISSED OFFSET (PADDING)

	public:
		void SetupBGFlag(bool Flag);
		void SetPhaseCount(int32_t InPhaseCount);
		void SetOptionEdit(bool Flag);
		void SetOpen(bool Flag);
		void OnUnbind();
		void OnSetOptionEditMode();
		void OnBind();
		void LoadComplateBG(class UTexture2D* InBGTexture);
		void LoadBG();
		bool IsSetupBGFlag();
		bool IsOptionEdit();
		bool IsOpen();
		class UWidgetSwitcher* GetSwitcher();
		class UCanvasPanel* GetRoot();
		class URetainerBox* GetRetainerBox();
		struct FVector2D GetMapSize();
		class USBMiniMapIconsBase* GetLowerIcons();
		class USBMiniMapIconsBase* GetIcons();
		struct FVector2D GetBGTextureSize();
		class FName GetBGConfigRowName();
		struct FSBMapBGConfigTableRow GetBGConfig();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMiniMapWidget
	 * Size -> 0x0048 (FullSize[0x03B0] - InheritedSize[0x0368])
	 */
	class USBMiniMapWidget : public USBMiniMapWidgetBase
	{
	public:
		class USBMiniMapBG*                                        MiniMapBG;                                               // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBMiniMapTime*                                      MiniMapTime;                                             // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBMiniMapName*                                      MiniMapName;                                             // 0x0378(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OutRadius_;                                              // 0x0380(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           CenterPosition_;                                         // 0x0384(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C5JQ[0x24];                                  // 0x038C(0x0024) MISSED OFFSET (PADDING)

	public:
		void SetMapScale(const struct FVector2D& InMapScale);
		void SetCenterPosition(const struct FVector2D& InPosition);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMobCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBMobCheatCommand : public UObject
	{
	public:
		void SetMobDensityScale(float DensityScale);
		void DumpNpcSpawnPointsInfo();
		void CreateSpawnPoint(ECharaPartsCharacterType CharacterType, int32_t IndexOffset, int32_t XNum, int32_t YNum, float SpaceOffset);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOpenModelessDirectoryDialogScreenBlock
	 * Size -> 0x0018 (FullSize[0x00A0] - InheritedSize[0x0088])
	 */
	class USBOpenModelessDirectoryDialogScreenBlock : public FSBModelessDialog_USBOpenModelessDirectoryDialog
	{
	public:
		unsigned char                                              UnknownData_IWFB[0x18];                                  // 0x0088(0x0018) MISSED OFFSET (PADDING)

	public:
		class USBOpenModelessDirectoryDialogScreenBlock* SBOpenModelessDirectoryDialogScreenBlock(class UObject* WorldContextObject, const class FString& DialogTitle, const class FString& DefaultPath);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMountCharacter
	 * Size -> 0x0090 (FullSize[0x0610] - InheritedSize[0x0580])
	 */
	class ASBMountCharacter : public AASCharacter
	{
	public:
		unsigned char                                              UnknownData_DQ14[0x30];                                  // 0x0580(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlendValueX;                                             // 0x05B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlendValueXlerped;                                       // 0x05B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlendValueY;                                             // 0x05B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MountAnimPlayRate;                                       // 0x05BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WVCX[0x10];                                  // 0x05C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBActorVisibilityComponent*                         ActorVisibilityComponent;                                // 0x05D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBFootprintComponent*                               FootprintComp;                                           // 0x05D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              DashStartFootprint;                                      // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S6OP[0x28];                                  // 0x05E8(0x0028) MISSED OFFSET (PADDING)

	public:
		class USBPlayerMovementComponent* GetOwnerPlayerMovement();
		class ASBPlayerController* GetOwnerPlayerController();
		class ASBPlayerCharacter* GetOwnerPlayerCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMount
	 * Size -> 0x0100 (FullSize[0x0710] - InheritedSize[0x0610])
	 */
	class ASBMount : public ASBMountCharacter
	{
	public:
		unsigned char                                              UnknownData_KEPP[0x18];                                  // 0x0610(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBNetworkSmoothMoveComponent*                       m_NetworkSmoothMoveComponent;                            // 0x0628(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_27AT[0x8];                                   // 0x0630(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OwnerCharacterScale;                                     // 0x0638(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZQ6[0x4];                                   // 0x063C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBPlayerController*                                 OwnerPlayerController;                                   // 0x0640(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UBGN[0x80];                                  // 0x0648(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       StartAkEvent;                                            // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       EndAkEvent;                                              // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       MoveOnAkEvent;                                           // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       MoveOffAkEvent;                                          // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_60ZY[0x10];                                  // 0x06E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBMountPlayerCliffComponent*                        MountPlayerCliffComponent;                               // 0x06F8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SPS4[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        AkComponent;                                             // 0x0708(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ResetDashStartEffectRequested();
		void RequestFinishSequenceToBP();
		void PostEvent(class UAkAudioEvent* Event);
		bool IsWarp();
		bool IsMovingOnGround();
		bool IsFinishMotion();
		bool IsEnableDashEffect();
		bool IsDashStartEffectRequested();
		bool IsDash();
		bool IsAutoRunCameraControl();
		bool IsAttach();
		float GetWalkBSSampleValueX();
		float GetWaitBSSampleValueX();
		float GetSpeedRate();
		float GetRunBSSampleValueX();
		class USBCharacterMovementComponent* GetMountMovementComponent();
		struct FSBMountIKParam GetIKParam();
		struct FVector GetCliffJumpVelocity();
		bool CheckWallHitBeforeGettingOff();
		void CalcuMaxWalkRunBlendSample(class UASAnimationSet* AnimationSet);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMountCapsuleComponent
	 * Size -> 0x0008 (FullSize[0x0490] - InheritedSize[0x0488])
	 */
	class USBMountCapsuleComponent : public UCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_L90X[0x8];                                   // 0x0488(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMountEffectBaseComponent
	 * Size -> 0x0028 (FullSize[0x0230] - InheritedSize[0x0208])
	 */
	class USBMountEffectBaseComponent : public USceneComponent
	{
	public:
		TArray<struct FSBMountPlayingEffect>                       m_PlayingEffectList;                                     // 0x0208(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_T7AX[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBMountEffectParams>                        EffectParams;                                            // 0x0220(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		class UParticleSystemComponent* SpawnEmitter(const struct FSBMountEffectParams& Param);
		class ASBMount* GetMountPlayer();
		ESBMountEffectType GetEffectType(const struct FSBMountEffectParams& Param);
		TArray<struct FSBMountEffectParams> GetEffectParams();
		void DeactivateAllEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMountPlayerCliffComponent
	 * Size -> 0x0030 (FullSize[0x0100] - InheritedSize[0x00D0])
	 */
	class USBMountPlayerCliffComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_65U9[0x4];                                   // 0x00D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CliffJumpDetectionLength;                                // 0x00D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_08PD[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CliffJumpCapsuleRadius;                                  // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinCliffJumpLength;                                      // 0x00E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxCliffJumpLength;                                      // 0x00E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinCliffJumpHeight;                                      // 0x00EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxCliffJumpHeight;                                      // 0x00F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JD73[0xC];                                   // 0x00F4(0x000C) MISSED OFFSET (PADDING)

	public:
		struct FVector GetCliffJumpVelocity();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerMovementComponentBase
	 * Size -> 0x0154 (FullSize[0x0E10] - InheritedSize[0x0CBC])
	 */
	class USBPlayerMovementComponentBase : public USBCharacterMovementComponent
	{
	public:
		unsigned char                                              UnknownData_GQ8B[0x4];                                   // 0x0CBC(0x0004) Fix Super Size
		unsigned char                                              UnknownData_21IA[0x60];                                  // 0x0CC0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerInterpMoveSetting                          InterpMoveSetting;                                       // 0x0D20(0x0040) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_29Z8[0xB0];                                  // 0x0D60(0x00B0) MISSED OFFSET (PADDING)

	public:
		void RequestTurnActorToLocation(const struct FVector& Location, const class FName& TurnProcessName, float InterpSpeed);
		void RequestTurnActorOnce(ESBTurnPlayerActorType TurnType, bool bImmediately);
		void RequestTurnActor(ESBTurnPlayerActorType TurnType, const class FName& TurnProcessName, bool bImmediately, float InterpSpeed);
		void RequestSmoothMoveJump();
		void RemoveTurnActorRequestByName(const class FName& TurnProcessName);
		bool CanSmoothMoveJump();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMountPlayerMovementComponent
	 * Size -> 0x0130 (FullSize[0x0F40] - InheritedSize[0x0E10])
	 */
	class USBMountPlayerMovementComponent : public USBPlayerMovementComponentBase
	{
	public:
		unsigned char                                              UnknownData_CN43[0xC];                                   // 0x0E10(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AnimationFrameWait;                                      // 0x0E1C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnimationTransformWalk;                                  // 0x0E20(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AnimationFrameWalk;                                      // 0x0E24(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnimationTransformRun;                                   // 0x0E28(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AnimationFrameRun;                                       // 0x0E2C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnimationPlayRateMax;                                    // 0x0E30(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MZ5L[0x4];                                   // 0x0E34(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         PlayerBlendXCompCurve;                                   // 0x0E38(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseDashAnimation;                                        // 0x0E40(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4W0B[0x3];                                   // 0x0E41(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpeedMax;                                                // 0x0E44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WalkSpeedMax;                                            // 0x0E48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CitySpeedMax;                                            // 0x0E4C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CityWalkSpeedMax;                                        // 0x0E50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedAddParSec;                                          // 0x0E54(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CitySpeedAddParSec;                                      // 0x0E58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7Z8A[0x4];                                   // 0x0E5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         SpeedAddCurve;                                           // 0x0E60(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedSubParSec;                                          // 0x0E68(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StopSpeedParSec;                                         // 0x0E6C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StopSpeedSubParSec;                                      // 0x0E70(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CitySpeedSubParSec;                                      // 0x0E74(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SpeedSubCurve;                                           // 0x0E78(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedSubRateRunToWalk;                                   // 0x0E80(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OutOfEnergySpeed;                                        // 0x0E84(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotateDegreeMax;                                         // 0x0E88(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CityRotateDegreeMax;                                     // 0x0E8C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotateDegreeAddParSec;                                   // 0x0E90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CityRotateDegreeAddParSec;                               // 0x0E94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         RotateDegreeAddCurve;                                    // 0x0E98(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotateDegreeSubParSec;                                   // 0x0EA0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartSlowDownRotateDegree;                               // 0x0EA4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         RunSlowDownCurve;                                        // 0x0EA8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         WalkSlowDownCurve;                                       // 0x0EB0(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         RotateAnimReflectCurve;                                  // 0x0EB8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DashSpeedMaxScale;                                       // 0x0EC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CityDashSpeedMaxScale;                                   // 0x0EC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DashSpeedAddScale;                                       // 0x0EC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CityDashSpeedAddScale;                                   // 0x0ECC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DashRotateMaxScale;                                      // 0x0ED0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrakeSpeedMaxScale;                                      // 0x0ED4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrakeSpeedSubScale;                                      // 0x0ED8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrakeRotateMaxScale;                                     // 0x0EDC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrakeRotateAddScale;                                     // 0x0EE0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BrakeRotateSubScale;                                     // 0x0EE4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CheckSideCliffDist;                                      // 0x0EE8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckSideCliffDepth;                                     // 0x0EF4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckForwardCliffDist;                                   // 0x0EF8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckFrontCliffDepth;                                    // 0x0EFC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CliffTurnMinSpeedSub;                                    // 0x0F00(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CliffTurnMaxSpeedSub;                                    // 0x0F04(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartCliffDeceleDegree;                                  // 0x0F08(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartCliffTurnDegree;                                    // 0x0F0C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitWallConditionSpeedRate;                               // 0x0F10(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitWallSpeedMaxScale;                                    // 0x0F14(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitWallSpeedSubScale;                                    // 0x0F18(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bActiveScaleAnimation;                                   // 0x0F1C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3BZQ[0x3];                                   // 0x0F1D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LocationMove;                                            // 0x0F20(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotationYawMove;                                         // 0x0F2C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q4SJ[0x10];                                  // 0x0F30(0x0010) MISSED OFFSET (PADDING)

	public:
		float UpdateFixedCorrectionDirection(float Direction, float InputRotateDelta);
		bool IsWalkSpeedType(ESBPlayerWalkSpeedType WalkSpeedType);
		bool IsRestraint();
		bool IsAir();
		float GetWalkSpeedMax();
		float GetSpeedSubParSec();
		float GetSpeedMax();
		float GetSpeedAddParSec();
		float GetRotateDegreeMax();
		float GetRotateDegreeAddParSec();
		float GetDashSpeedMaxScale();
		float GetDashSpeedAddScale();
		float GetAnimationSpeedWalk();
		float GetAnimationSpeedRun();
		float CheckWideSide(const struct FVector& GroundNormal, const struct FVector& Dist, float Depth);
		struct FHitResult CheckRayIsCliff(const struct FVector& Start, const struct FVector& End);
		bool CheckFrontIsCliff(float ForwardDist, float Depth, const struct FVector& GroundNormal);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovementPredictComponent
	 * Size -> 0x0070 (FullSize[0x0128] - InheritedSize[0x00B8])
	 */
	class USBMovementPredictComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_7OKN[0x64];                                  // 0x00B8(0x0064) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StateNoiseDispersion;                                    // 0x011C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ObserveNoiseDispersion;                                  // 0x0120(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LI5V[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMoveSpeedSoundComponent
	 * Size -> 0x0118 (FullSize[0x0320] - InheritedSize[0x0208])
	 */
	class USBMoveSpeedSoundComponent : public USceneComponent
	{
	public:
		TWeakObjectPtr<class UAkComponent>                         AkComponent;                                             // 0x0208(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8S5B[0x10];                                  // 0x0210(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAkEventVariables                                   MoveStartEvent;                                          // 0x0220(0x0040) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FAkEventVariables                                   MoveEndEvent;                                            // 0x0260(0x0040) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FAkEventVariables                                   MaxSpeedStartEvent;                                      // 0x02A0(0x0040) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FAkEventVariables                                   MaxSpeedEndEvent;                                        // 0x02E0(0x0040) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneAudioEventSection
	 * Size -> 0x0018 (FullSize[0x01E8] - InheritedSize[0x01D0])
	 */
	class USBMovieSceneAudioEventSection : public UMovieSceneAkAudioEventSection
	{
	public:
		TArray<ESBMovieSceneAkEventSwitchType>                     MovieSceneAkEventSwitchTypeArray;                        // 0x01D0(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		ESBFootSESocketType                                        FootSESocketType;                                        // 0x01E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       EnableAkComponentOutputBusVolume;                        // 0x01E1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WHYL[0x6];                                   // 0x01E2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneAudioEventTrack
	 * Size -> 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
	 */
	class USBMovieSceneAudioEventTrack : public UMovieSceneAkAudioEventTrack
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneAudioListenerSection
	 * Size -> 0x0280 (FullSize[0x0368] - InheritedSize[0x00E8])
	 */
	class USBMovieSceneAudioListenerSection : public UMovieSceneSection
	{
	public:
		struct FMovieSceneBoolChannel                              IsOffset;                                                // 0x00E8(0x0090) NativeAccessSpecifierPrivate
		struct FMovieSceneFloatChannel                             Translation[0x3];                                        // 0x0178(0x01E0) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_55D1[0x10];                                  // 0x0358(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneAudioListenerTrack
	 * Size -> 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
	 */
	class USBMovieSceneAudioListenerTrack : public UMovieSceneNameableTrack
	{
	public:
		unsigned char                                              UnknownData_Y63M[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMovieSceneSection*>                          Sections;                                                // 0x0098(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneChoiceDialogSection
	 * Size -> 0x0088 (FullSize[0x0170] - InheritedSize[0x00E8])
	 */
	class USBMovieSceneChoiceDialogSection : public UMovieSceneSection
	{
	public:
		struct FMovieSceneChoiceDialogSectionData                  ChoiceDialogData;                                        // 0x00E8(0x0088) NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneChoiceDialogTrack
	 * Size -> 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
	 */
	class USBMovieSceneChoiceDialogTrack : public UMovieSceneNameableTrack
	{
	public:
		unsigned char                                              UnknownData_6RX2[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBTextTableAsset*                                   TextTable;                                               // 0x0098(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMovieSceneSection*>                          Sections;                                                // 0x00A0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneNotify
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBMovieSceneNotify : public UObject
	{
	public:
		TWeakObjectPtr<class UObject>                              CachedObject;                                            // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FFrameNumber                                        StartFrame;                                              // 0x0030(0x0004) Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFrameNumber                                        EndFrame;                                                // 0x0034(0x0004) Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFrameRate                                          FrameRate;                                               // 0x0038(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ReceivStoreState(class UObject* Object);
		void ReceivRestoreState(class UObject* Object);
		void ReceivNotifyTick(class UObject* Object, float Time, float Delta, ESBMovieScenePlayerStatus PlayerStatus);
		float GetTimeSize();
		float GetStartTime();
		struct FFrameNumber GetStartFrame();
		class FString GetNotifyName();
		struct FFrameRate GetFrameRate();
		float GetEndTime();
		struct FFrameNumber GetEndFrame();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneNotifySection
	 * Size -> 0x0008 (FullSize[0x00F0] - InheritedSize[0x00E8])
	 */
	class USBMovieSceneNotifySection : public UMovieSceneSection
	{
	public:
		class USBMovieSceneNotify*                                 Notify;                                                  // 0x00E8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneNotifyTrack
	 * Size -> 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
	 */
	class USBMovieSceneNotifyTrack : public UMovieSceneNameableTrack
	{
	public:
		unsigned char                                              UnknownData_AN8S[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBFireNotifiesAtPosition                                  NotifyPosition;                                          // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TS9V[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMovieSceneSection*>                          Sections;                                                // 0x00A0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneSkeletalAnimationSection
	 * Size -> 0x0018 (FullSize[0x0280] - InheritedSize[0x0268])
	 */
	class USBMovieSceneSkeletalAnimationSection : public UMovieSceneSkeletalAnimationSection
	{
	public:
		class UAnimSequenceBase*                                   FemaleAnimation;                                         // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AnimationKeyName;                                        // 0x0270(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBRootMotionType                                          RootMotionType;                                          // 0x0278(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S5MU[0x3];                                   // 0x0279(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLoop : 1;                                               // 0x027C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MMWL[0x3];                                   // 0x027D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneSkeletalAnimationTrack
	 * Size -> 0x0000 (FullSize[0x00E8] - InheritedSize[0x00E8])
	 */
	class USBMovieSceneSkeletalAnimationTrack : public UMovieSceneSkeletalAnimationTrack
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneTextWindowSection
	 * Size -> 0x0010 (FullSize[0x00F8] - InheritedSize[0x00E8])
	 */
	class USBMovieSceneTextWindowSection : public UMovieSceneSection
	{
	public:
		class FName                                                TextIdName;                                              // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    TextId;                                                  // 0x00F0(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESBMovieSceneTextWindowGender                              Gender;                                                  // 0x00F4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUseSubtitle;                                            // 0x00F5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ARS7[0x2];                                   // 0x00F6(0x0002) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMovieSceneTextWindowTrack
	 * Size -> 0x0030 (FullSize[0x00C0] - InheritedSize[0x0090])
	 */
	class USBMovieSceneTextWindowTrack : public UMovieSceneNameableTrack
	{
	public:
		unsigned char                                              UnknownData_L0GR[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SpeakerId;                                               // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBTextTableAsset*                                   TextTable;                                               // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UMovieSceneSection*>                          Sections;                                                // 0x00A8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		bool                                                       bUseSubtitle;                                            // 0x00B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3IOG[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMultipleSelectDialog
	 * Size -> 0x0020 (FullSize[0x02D0] - InheritedSize[0x02B0])
	 */
	class USBMultipleSelectDialog : public USBUserWidget
	{
	public:
		class FScriptDelegate                                      OnDynamicFinishedDelegate;                               // 0x02B0(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4Z30[0x10];                                  // 0x02C0(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnDynamicFinished__DelegateSignature(int32_t Result);
		void InitMultipleSelectDialog(const class FText& Message, TArray<class FText> Selections);
		void HandleInit(const class FText& Message, TArray<class FText> Selections);
		void Finish(int32_t SelectIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMyCharaPioneerAbilityWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBMyCharaPioneerAbilityWidget : public UUserWidget
	{
	public:
		TMap<class FName, struct FPioneerAbilityList> GetPioneerAbilityMap(class USBWarehouseAbilityComponent* InWarehouseAbilityComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNaEventData
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class USBNaEventData : public UObject
	{
	public:
		struct FSBNaEventInfo                                      Info;                                                    // 0x0028(0x0058) BlueprintVisible, NativeAccessSpecifierPublic

	public:
		int32_t GetTeamAcquiredPoint();
		struct FDateTime GetProgressEndDate();
		int32_t GetPlayerAcquiredPoint();
		int32_t GetOnTeamAcquiredPoint();
		struct FDateTime GetNearEndDate(bool* bNowProgress);
		int32_t GetEventId();
		struct FDateTime GetEndDate();
		bool ExistsTeamReward();
		bool ExistsQuest();
		bool ExistsPersonReward();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNaEventRewardData
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBNaEventRewardData : public UObject
	{
	public:
		TArray<int32_t>                                            IDList;                                                  // 0x0028(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       bIsTeamReward;                                           // 0x0038(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VJWK[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Point;                                                   // 0x003C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RequiredPoint;                                           // 0x0040(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GC7C[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        RewardIdList;                                            // 0x0048(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		bool IsReceivedItem(int32_t Index);
		bool IsReceived();
		bool IsMatch(int32_t EventId);
		bool IsEnoughRequiredPoint();
		bool IsEnoughPoint();
		struct FSBMasterNaEventReward GetMasterEventReward();
		class USBNaEventData* GetEventData();
		bool CanReceive();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNaEventTeamMemberData
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class USBNaEventTeamMemberData : public UObject
	{
	public:
		struct FSBNaEventTeamMemberInfo                            Info;                                                    // 0x0028(0x00C0) BlueprintVisible, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNameConventionsFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNameConventionsFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool CheckNameConventions(const class FString& Name, class UDataTable* NameConventinos);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWidgetComponent2DNoOSR
	 * Size -> 0x0068 (FullSize[0x0270] - InheritedSize[0x0208])
	 */
	class USBWidgetComponent2DNoOSR : public USceneComponent
	{
	public:
		class UClass*                                              WidgetClass;                                             // 0x0208(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EUIZOrder                                                  ZOrderType;                                              // 0x0210(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MSRR[0x3];                                   // 0x0211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           Anchor;                                                  // 0x0214(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTopLimitMode;                                           // 0x021C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N3OO[0x3];                                   // 0x021D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TopaActiveDistance;                                      // 0x0220(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TopLimit;                                                // 0x0224(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TopCulling;                                              // 0x0228(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAdjustedLocationDeath;                                  // 0x022C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2JZN[0x3];                                   // 0x022D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         AdjustedLocationDeathCurve;                              // 0x0230(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2DDY[0x4];                                   // 0x0238(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDistanceScaleEnable;                                    // 0x023C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TWD5[0x3];                                   // 0x023D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DistanceScaleMaxDistance;                                // 0x0240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceScaleValueMin;                                   // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClippingEnable;                                         // 0x0248(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MCVI[0x3];                                   // 0x0249(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FarClip;                                                 // 0x024C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget*                                         Widget;                                                  // 0x0250(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QXOC[0x18];                                  // 0x0258(0x0018) MISSED OFFSET (PADDING)

	public:
		class UUserWidget* GetUserWidgetObject();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNamePlateComponent2D
	 * Size -> 0x0050 (FullSize[0x02C0] - InheritedSize[0x0270])
	 */
	class USBNamePlateComponent2D : public USBWidgetComponent2DNoOSR
	{
	public:
		struct FVector2D                                           ClipDistance;                                            // 0x0270(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GCNW[0x48];                                  // 0x0278(0x0048) MISSED OFFSET (PADDING)

	public:
		void Tick_Npc_Internal(class ASBMobCharacter* InCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNamePlateWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBNamePlateWidget : public UUserWidget
	{
	public:
		TWeakObjectPtr<class ASBCharacter>                         Character;                                               // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ASBMobCharacter>                      NpcCharacter;                                            // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetTeamNumber(int32_t TeamNumber);
		void SetNpcCharacter_Internal(class ASBMobCharacter* InNpcCharacter);
		void SetNameVisibility(bool bInVisibility);
		void SetName(const class FString& Name);
		void SetLevel(int32_t Level);
		void SetInteractionTargetVisibility(bool bInVisibility);
		void SetInitialHpRate(float HPRate);
		void SetHpRate(float HPRate);
		void SetHpGaugeWidthRate(float InWidthRate);
		void SetHpGaugeVisibility(bool bInVisibility);
		void SetHostility(ESBHostility Hostility);
		void SetChargeMax();
		void SetCharacter_Internal(class ASBCharacter* InCharacter);
		void SetAchievementSelected(int32_t InAchievementSelected);
		void OnDisplayStart();
		void InteractionComplete();
		void AutoChangeVisible();
		void AutoChangeInvisible();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyNamePlateWidget
	 * Size -> 0x0080 (FullSize[0x0308] - InheritedSize[0x0288])
	 */
	class USBEnemyNamePlateWidget : public USBNamePlateWidget
	{
	public:
		TWeakObjectPtr<class ASBEnemyCharacter>                    EnemyCharacter;                                          // 0x0288(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              HPPrev;                                                  // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher*                                     WSBar;                                                   // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher*                                     WSLine;                                                  // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidgetSwitcher*                                     WSIcon;                                                  // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget*                                         PartyIcon;                                               // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget*                                         HateAlertIcon;                                           // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBP020_MarkEnemy*                                   P020_MarkEnemy;                                          // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBElementGaugeWidget*                               ElementGauge;                                            // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanelSlot*                                    HPPrevSlot;                                              // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanelSlot*                                    HPSlot;                                                  // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       LerpHpRate;                                              // 0x02E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NT83[0x3];                                   // 0x02E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurHpRate;                                               // 0x02E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PrevHpRate;                                              // 0x02E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ItplSpeed;                                               // 0x02EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           SlotSizeXY;                                              // 0x02F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RNWE[0x8];                                   // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          P020_StatusAlimentConfigDataTable;                       // 0x0300(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateHPSize(float InHPRate);
		void UpdateHPPrevSize(float InHPRate);
		void SetupElementGauge();
		void ResetElementGauge();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerNamePlateWidget
	 * Size -> 0x0070 (FullSize[0x02F8] - InheritedSize[0x0288])
	 */
	class USBPlayerNamePlateWidget : public USBNamePlateWidget
	{
	public:
		TWeakObjectPtr<class ASBPlayerCharacter>                   PlayerCharacter;                                         // 0x0288(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBDeadMarkerWidget*                                 DeadMarker;                                              // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        HPGrp;                                                   // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              Line1;                                                   // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBBuffListWidget*                                   BuffList;                                                // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              HPPrev;                                                  // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanelSlot*                                    HPPrevSlot;                                              // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBDsStateWidget*                                    DsState;                                                 // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              HPLoss;                                                  // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              HPLossLine;                                              // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HpGaugeVisibility;                                       // 0x02D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsHpMax;                                                // 0x02D9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V5J0[0x2];                                   // 0x02DA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LerpHpRateTimer;                                         // 0x02DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PrevHpRate;                                              // 0x02E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurHpRate;                                               // 0x02E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ItplSpeed;                                               // 0x02E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           SlotSizeXY;                                              // 0x02EC(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLastCheckParty;                                         // 0x02F4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLastSimplycityPartyOn;                                  // 0x02F5(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6L93[0x2];                                   // 0x02F6(0x0002) MISSED OFFSET (PADDING)

	public:
		void OnUpdatenSimplycityPartyOn();
		void OnUpdateNameColor(bool bParty);
		bool IsCheckParty();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_AutoPlay
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_AutoPlay : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_BlockDefault
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_BlockDefault : public UNavArea_Null
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_BlockLarge
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_BlockLarge : public UNavArea_Null
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_BlockMedium
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_BlockMedium : public UNavArea_Null
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_BuddyOnly
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_BuddyOnly : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_ClimbingWallLink
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_ClimbingWallLink : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_Default
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_Default : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_Dynamic
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_Dynamic : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_ExcludeBoss
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_ExcludeBoss : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_Null
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_Null : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_SegmentLinkBuddyOnly
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_SegmentLinkBuddyOnly : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_SegmentLinkDefault
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_SegmentLinkDefault : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_TidalArea
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_TidalArea : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_TidalArea_Mid
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_TidalArea_Mid : public USBNavArea_Default
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavArea_TidalArea_Low
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBNavArea_TidalArea_Low : public USBNavArea_Default
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavFilter_ExcludeNavLink
	 * Size -> 0x0058 (FullSize[0x00A0] - InheritedSize[0x0048])
	 */
	class USBNavFilter_ExcludeNavLink : public UNavigationQueryFilter
	{
	public:
		TMap<class UClass*, class UClass*>                         ExcludeNavLinkFilterConvertList;                         // 0x0048(0x0050) Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		class UClass*                                              DefaultExcludeNavLinkFilter;                             // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavigationFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNavigationFunctionLibrary : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavigationSystem
	 * Size -> 0x0048 (FullSize[0x1638] - InheritedSize[0x15F0])
	 */
	class USBNavigationSystem : public UAIFwNavigationSystem
	{
	public:
		unsigned char                                              UnknownData_G81A[0x20];                                  // 0x15F0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBNpcLaneGraph*                                     LaneGraph;                                               // 0x1610(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KE5Z[0x20];                                  // 0x1618(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnMasterDataAvailable();
		class USBNavigationSystem* GetSBNavigationSystem(class UObject* WorldContextObject);
		void CreateNavLink();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavigationSystemConfig
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class USBNavigationSystemConfig : public UNavigationSystemModuleConfig
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavigationSystemProjectSettings
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class USBNavigationSystemProjectSettings : public UObject
	{
	public:
		class FString                                              TargetNavMeshName;                                       // 0x0028(0x0010) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistance;                                             // 0x0038(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinPathDistance;                                         // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHeight;                                               // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxOneWayHeight;                                         // 0x0044(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Division;                                                // 0x0048(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumLinkWidth;                                        // 0x004C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AgentJumpHeight;                                         // 0x0050(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AgentHeight;                                             // 0x0054(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AgentRadius;                                             // 0x0058(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AgentMarginRadius;                                       // 0x005C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LinkableAngle;                                           // 0x0060(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCreateClimbingWallLink;                                 // 0x0064(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MRGH[0x3];                                   // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ClimbingWallLinkTargetNavMeshName;                       // 0x0068(0x0010) Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WallWidthMargin;                                         // 0x0078(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxEdgeDistanceFromWall;                                 // 0x007C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAssignDefaultDepthManually;                             // 0x0080(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XX0M[0x3];                                   // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultMaxDepth;                                         // 0x0084(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAssignMediumDepthManually;                              // 0x0088(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W4LW[0x3];                                   // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MediumMaxDepth;                                          // 0x008C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAssignLargeDepthManually;                               // 0x0090(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CF9P[0x3];                                   // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LargeMaxDepth;                                           // 0x0094(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavigationTestingActor
	 * Size -> 0x0018 (FullSize[0x0330] - InheritedSize[0x0318])
	 */
	class ASBNavigationTestingActor : public ANavigationTestingActor
	{
	public:
		ENavigationTestingType                                     NavTestType;                                             // 0x0318(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OJM6[0x3];                                   // 0x0319(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RunAwayDistance;                                         // 0x031C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ANavigationTestingActor*>                     OtherActors;                                             // 0x0320(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavLinkJumpComponent
	 * Size -> 0x0068 (FullSize[0x0120] - InheritedSize[0x00B8])
	 */
	class USBNavLinkJumpComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_LQYJ[0x68];                                  // 0x00B8(0x0068) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavLinkProxy
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class ASBNavLinkProxy : public ANavLinkProxy
	{
	public:
		class USBNavLinkJumpComponent*                             NavLinkJumpComp;                                         // 0x0278(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnJumpStart(class AActor* PathOwner, const struct FVector& Destination);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavLinkProxy_AutoPlay
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class ASBNavLinkProxy_AutoPlay : public ANavLinkProxy
	{
	public:
		class UClass*                                              TaskClass;                                               // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6TS6[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		void ResumeMoveTask(class UAutoPlayTask* Task);
		class UAutoPlayTask* ReceiveNewAutoPlayTask(class USBAutoPlayTask_MoveTo* OwnerTask, const struct FVector& DestPoint);
		void ReceiveInitAutoPlayTask(class UAutoPlayTask* AutoPlayTask, const struct FVector& DestPoint);
		void OnNavigationGenerationFinished(class ANavigationData* NavData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavLinkProxy_APClimbing
	 * Size -> 0x0028 (FullSize[0x02B0] - InheritedSize[0x0288])
	 */
	class ASBNavLinkProxy_APClimbing : public ASBNavLinkProxy_AutoPlay
	{
	public:
		class FName                                                ClimbingActorName;                                       // 0x0288(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TopEdge;                                                 // 0x0290(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BottomEdge;                                              // 0x029C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FSRV[0x8];                                   // 0x02A8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavMesh
	 * Size -> 0x0048 (FullSize[0x0528] - InheritedSize[0x04E0])
	 */
	class ASBNavMesh : public ARecastNavMesh
	{
	public:
		int32_t                                                    VolatileNavMeshVersion;                                  // 0x04E0(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumPolys;                                                // 0x04E4(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    NumActivatedPolys;                                       // 0x04E8(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M02E[0x4];                                   // 0x04EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBAutoLinkCreaterComponent*                         AutoLinkCreaterComp;                                     // 0x04F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_61IW[0x30];                                  // 0x04F8(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavMeshAutoLinkVolume
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ASBNavMeshAutoLinkVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavSeedComponent
	 * Size -> 0x0008 (FullSize[0x0210] - InheritedSize[0x0208])
	 */
	class USBNavSeedComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_6BDW[0x8];                                   // 0x0208(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNavVolumeObstructer
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ASBNavVolumeObstructer : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNetConnection
	 * Size -> 0x0010 (FullSize[0x1C68] - InheritedSize[0x1C58])
	 */
	class USBNetConnection : public UIpConnection
	{
	public:
		unsigned char                                              UnknownData_AT9D[0x10];                                  // 0x1C58(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnAttachedClientPlayerState(class ASBPlayerController* PC);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNetDriver
	 * Size -> 0x0040 (FullSize[0x0810] - InheritedSize[0x07D0])
	 */
	class USBNetDriver : public UIpNetDriver
	{
	public:
		unsigned char                                              UnknownData_B2O5[0x40];                                  // 0x07D0(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNetworkCafeMessageManager
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBNetworkCafeMessageManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_J1LB[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBNetworkCafeInfo                                  NetworkCafeInfo;                                         // 0x0050(0x0010) NoDestructor, NativeAccessSpecifierPrivate

	public:
		bool IsNetworkCafe();
		void GetRewards(TArray<struct FSBNetworkCafeReward>* OutRewards);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNetworkDataCache
	 * Size -> 0x0568 (FullSize[0x0590] - InheritedSize[0x0028])
	 */
	class USBNetworkDataCache : public UObject
	{
	public:
		class USBCharacterData*                                    CharacterData;                                           // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBOwnItemList*                                      OwnItemList;                                             // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSBRecastTimeInfo                                   ItemRecastTime;                                          // 0x0038(0x0010) NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FUnlockedQuestInfo>                          UnlockedQuestInfoList;                                   // 0x0048(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FAcceptedQuestInfo>                          AcceptedQuestInfoList;                                   // 0x0058(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    ProceedingMainQuestNum;                                  // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    ProceedingSubQuestNum;                                   // 0x006C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBActivatedDungeonList*                             ActivatedDungeonList;                                    // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBDungeonRecordList*                                DungeonRecordList;                                       // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSBGatherPointRespawnInfo>                   GatherPointRespawmInfoList;                              // 0x0080(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBTreasureBoxRespawnInfo>                   TreasureBoxRespawmInfoList;                              // 0x0090(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBFreeBuffPointRespawnInfo>                 FreeBuffPointRespawmInfoList;                            // 0x00A0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBFreeBuffPlayerBuffTimeInfo>               FreeBuffPlayerBuffTimeInfoList;                          // 0x00B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBTreasureBoxOpeningLotResult>              TreasureBoxOpeningLotResults;                            // 0x00C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBGatherPointGimmicInfo>                    GatherPointGimmicInfoList;                               // 0x00D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBAchievementInfo>                          AchievementInfoList;                                     // 0x00E0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            PopupNewAchievementList;                                 // 0x00F0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            AwardIdList;                                             // 0x0100(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FDecorationData>                             CharacterCardDecorationDataList;                         // 0x0110(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FDecorationData>                             AdventureCardDecorationDataList;                         // 0x0120(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FDecorationData>                             BackGroundColorDataList;                                 // 0x0130(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FSBLiquidMemoryInfo>                         LiquidMemoryInfos;                                       // 0x0140(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FPhotoModeUploadedImageInfo>                 PhotoModeUploadedImageInfos;                             // 0x0150(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class FString>                                      BlackListedInfos;                                        // 0x0160(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class FString>                                      SafeListInfos;                                           // 0x0170(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class FString>                                      PSOnlyDiffListedInfos;                                   // 0x0180(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KCTR[0x1B0];                                 // 0x0190(0x01B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBLoginBonus>                               LoginBonusCheckData;                                     // 0x0340(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TMap<class FString, int32_t>                               LoginBonusDayCount;                                      // 0x0350(0x0050) NativeAccessSpecifierPublic
		struct FDateTime                                           LoginBonusCheckTime;                                     // 0x03A0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBLoginBonus>                               LoginBonusMenuListData;                                  // 0x03A8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		struct FSBFang_expeditionData                              ExpeditionData;                                          // 0x03B8(0x0038) NativeAccessSpecifierPublic
		struct FSBMailRewardData                                   ExpeditionRewardData;                                    // 0x03F0(0x0180) NativeAccessSpecifierPublic
		TArray<class FString>                                      ExpeditionUseIdList;                                     // 0x0570(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBNotificationMenuData>                     NotificationMenuDataList;                                // 0x0580(0x0010) ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void UpdatePSOnlyDiffListedInfos(const class FString& CharacterId, bool IsAdd);
		void UpdateProceedingQuestNum();
		void UpdatePartyInfoLeave(const class FString& CharacterId);
		void UpdateBlackListedInfos(const class FString& CharacterId, bool IsAdd);
		void SortLiquidMemoryInfos(ESBLiquidMemoryInfoSortType InSortType, TArray<struct FSBLiquidMemoryInfo>* InLiquidMemoryInfos);
		void SetQuestStatus(int32_t QuestIndex, EQuestStatus QuestStatus);
		void SaveRecruitPartyInfo(const struct FSBPartyRecruitData& Info);
		void SaveRecruitmentPartyInfo(const struct FSBPartyRecruitData& InMyRecruitmentPartyInfo);
		bool IsLiquidMemoryEfficacyActivated_Id(int32_t InLiquidMemoryId);
		bool IsLiquidMemoryEfficacyActivated_CategoryAndEfficacyType(ESBLiquidMemoryCategory InCategory, ESBLiquidMemoryEfficacyType InEfficacyType);
		bool IsAllowAcceptQuestByProceedingNum(int32_t QuestIndex);
		bool IsAchievementPossession(int32_t InAchievementIndex);
		bool HaveDecorationData(int32_t ID);
		int32_t GetStorageNumber();
		class USBOwnItemListContainer* GetStorage(int32_t InStorageNumber, EItemType InItemType);
		struct FSBPartyRecruitData GetRecruitPartyInfo();
		struct FSBPartyRecruitData GetRecruitmentPartyInfo();
		EQuestStatus GetQuestStatus(int32_t QuestIndex);
		int32_t GetProceedingSubQuestNum();
		int32_t GetProceedingSubQuestMax();
		int32_t GetProceedingMainQuestNum();
		TArray<struct FPhotoModeUploadedImageInfo> GetPhotoModeUploadedImageInfos();
		int32_t GetOwnLiquidMemoryNum();
		class USBOwnItemList* GetOwnItemList();
		float GetOwnActivatedLiquidMemoryEfficacyValue_ByCategoryAndEfficacyType(ESBLiquidMemoryCategory InCategory, ESBLiquidMemoryEfficacyType InEfficacyType, bool* OutIsValid);
		float GetOwnActivatedLiquidMemoryEfficacyValue(const struct FSBLiquidMemoryInfo& InLiquidMemoryInfo, bool* OutIsValid);
		void GetNotificationMenuData(TArray<struct FSBNotificationMenuData>* DataList);
		void GetLoginBonusActiveIds(TArray<class FString>* IDList);
		TArray<struct FSBLiquidMemoryInfo> GetLiquidMemoryInfos();
		class USBOwnItemListContainer* GetInventory();
		class USBOwnItemListContainer* GetEquipmentBag();
		class USBDungeonRecordList* GetDungeonRecordList();
		class USBCharacterData* GetCharacterData();
		TArray<struct FDecorationData> GetCharacterCardDataList();
		TArray<struct FDecorationData> GetBackGroundColorDecorationDataList();
		TArray<int32_t> GetAwardIdList();
		TArray<struct FDecorationData> GetAdventureCardDecorationDataList();
		class USBActivatedDungeonList* GetActivatedDungeonList();
		TArray<struct FSBAchievementInfo> GetAchievementList();
		int32_t FindUnlockedQuestIndex(int32_t QuestIndex);
		struct FSBLiquidMemoryInfo FindOwnLiquidMemoryInfo_ByCategoryAndEfficacyType(ESBLiquidMemoryCategory InCategory, ESBLiquidMemoryEfficacyType InEfficacyType, bool* OutExists);
		struct FSBLiquidMemoryInfo FindOwnLiquidMemoryInfo(int32_t InLiquidMemoryId, bool* OutExists);
		int32_t FindAcceptedQuestIndex(int32_t QuestIndex);
		struct FAcceptedQuestInfo FindAcceptedQuestData(int32_t QuestIndex, bool* bExist);
		void DeleteRecruitPartyInfo();
		void DeleteRecruitmentPartyInfo();
		void ClearNotificationData();
		void Clear();
		bool CheckIsSafeListByCharacterId(const class FString& CharacterId);
		bool CheckIsPSOnlyDiffListedByCharacterId(const class FString& CharacterId);
		bool CheckIsBlackListedByCharacterId(const class FString& CharacterId);
		bool CheckIfOneOrMoreLiquidMemoryIsUsable();
		void AddNotificationData(const struct FSBNotificationMenuData& Data);
		void AddAchievement(int32_t InAchievementIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNetworkSmoothMoveComponent
	 * Size -> 0x0098 (FullSize[0x0150] - InheritedSize[0x00B8])
	 */
	class USBNetworkSmoothMoveComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_2WSF[0x98];                                  // 0x00B8(0x0098) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNetworkSmoothMoveInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNetworkSmoothMoveInterface : public UInterface
	{
	public:
		bool BP_UseSBSmoothClientPosition();
		float BP_GetSmoothMoveWalkSpeed();
		class USBPlayerMovementComponentBase* BP_GetMovementComponentForSmoothMove();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNewMarkManager
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class USBNewMarkManager : public UObject
	{
	public:
		TMap<ENewMarkContentType, struct FReadedMarkData>          ReadedIDDictionary;                                      // 0x0028(0x0050) SaveGame, NativeAccessSpecifierPrivate
		bool                                                       bIsModify;                                               // 0x0078(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SNPW[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		bool IsReadedID(ENewMarkContentType InContentType, const class FString& InId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNFTArea
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBNFTArea : public AActor
	{
	public:
		bool                                                       bAvailable;                                              // 0x0228(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MC2G[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LeftTime;                                                // 0x022C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool IsActive();
		void DungeonExtendTime(float ExtendTimeSec);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNgWordComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBNgWordComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_TFYM[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHasNgWord;                                             // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		bool Request_CheckHasNgWords(const class FString& CheckText);
		void OnHasNgWord_Internal(bool HasNgWord);
		void OnHasNgWord__DelegateSignature(bool bHasNgWord);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNiagaraCaptureComponent
	 * Size -> 0x0028 (FullSize[0x0230] - InheritedSize[0x0208])
	 */
	class USBNiagaraCaptureComponent : public USceneComponent
	{
	public:
		TArray<TWeakObjectPtr<class UNiagaraComponent>>            ShowComponents;                                          // 0x0208(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic
		ECameraProjectionMode                                      ProjectionType;                                          // 0x0218(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C4NE[0x3];                                   // 0x0219(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FOVAngle;                                                // 0x021C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OrthoWidth;                                              // 0x0220(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MAY8[0x4];                                   // 0x0224(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              TextureTarget;                                           // 0x0228(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ShowComponent(class UNiagaraComponent* InComponent);
		void RemoveShowComponent(class UNiagaraComponent* InComponent);
		void ClearShowComponents();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNiagaraSoundComponent
	 * Size -> 0x0018 (FullSize[0x0220] - InheritedSize[0x0208])
	 */
	class USBNiagaraSoundComponent : public USceneComponent
	{
	public:
		class UAkAudioEvent*                                       OneShotSE;                                               // 0x0208(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraComponent*                                   NiagaraComponent;                                        // 0x0210(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PURA[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetNiagaraComponent(class UNiagaraComponent* InNiagaraComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNoMapDisplayVolume
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ASBNoMapDisplayVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNoRepCharaCreateCharacter
	 * Size -> 0x0000 (FullSize[0x14B0] - InheritedSize[0x14B0])
	 */
	class ASBNoRepCharaCreateCharacter : public ASBCharaCreateCharacter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNoticeBoard
	 * Size -> 0x0010 (FullSize[0x0248] - InheritedSize[0x0238])
	 */
	class ASBNoticeBoard : public AStaticMeshActor
	{
	public:
		class UShapeComponent*                                     SensorVolume;                                            // 0x0238(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UShapeComponent*                                     CachedSensorVolume;                                      // 0x0240(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNotificationMenu
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBNotificationMenu : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             FinishDelegateNotification;                              // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GPLZ[0x10];                                  // 0x0288(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetParameter();
		void GetNotificationMenuAllData(TArray<struct FSBNotificationMenuData>* OutData, bool* Valid);
		void FinishDelegate__DelegateSignature();
		void CheckDisplayTime(const struct FSBNotificationMenuData& Data, bool* Valid);
		void CallFinishEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNotifyMessageInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNotifyMessageInterface : public UInterface
	{
	public:
		void AddTutorialHelpMessage(const class FName& InTutorialHelpId);
		void AddRecipeMessage(ESBRecipeType RecipeType, int32_t RecepiId);
		void AddRankingRewardNotifyMessage();
		void AddNetworkCafeLoginTimeNotificationMessage(int32_t NetworkCafeTotalTimePlayedToday, bool bIsLoginTimeOnly);
		void AddMailAcceptLimitNotifyMessage();
		void AddLoginBonusNotifyMessage(const class FText& InMessage);
		void AddLine2NotifyMessage(const class FText& InMainMessage, const class FText& InSubMessage);
		void AddLine1NotifyMessage(const class FText& InMessage);
		void AddLine1LNotifyMessage(const class FText& InMessage);
		void AddItemExpiryNotifyMessage(int32_t InItemID);
		void AddAwakeInterruptQuestMessage(const class FName& InQuestId);
		void AddAutoDeliveryQuestCompleteMessage(ESBSeasonPassQuestCycleType InCycle, const class FString& QuestName);
		void AddAdventurerRankUpdateCompleteMessage(ESBPlayerPassiveImagineSlotType Slot);
		void AddAdventurerRankupCompleteMessage();
		void AddAchievementGainedMessage(int32_t InAchievementId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNotifySchedulerComponent
	 * Size -> 0x0058 (FullSize[0x0260] - InheritedSize[0x0208])
	 */
	class USBNotifySchedulerComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_I2HZ[0x8];                                   // 0x0208(0x0008) Fix Super Size
		unsigned char                                              UnknownData_06HV[0x18];                                  // 0x0210(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBTimeNotifyEvent>                          Notifies;                                                // 0x0228(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NJRH[0x10];                                  // 0x0238(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBTimeNotifyEventsData*>                     SBTimeNotifyEventsDatas;                                 // 0x0248(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HI8Y[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (PADDING)

	public:
		void ClearNotifyEvents();
		void AddNotifyEventsFromRegisteredAsset(int32_t AssetIndex);
		void AddNotifyEventsFromAsset(class USBTimeNotifyEventsData* NotifyAsset);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNPCAITask_TalkEndAction
	 * Size -> 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
	 */
	class USBNPCAITask_TalkEndAction : public UAITask
	{
	public:
		unsigned char                                              UnknownData_JKSI[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnChangeStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNPCAITask_TalkTurn
	 * Size -> 0x0048 (FullSize[0x00B8] - InheritedSize[0x0070])
	 */
	class USBNPCAITask_TalkTurn : public UAITask
	{
	public:
		class AActor*                                              TargetActor;                                             // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W7DM[0x40];                                  // 0x0078(0x0040) MISSED OFFSET (PADDING)

	public:
		void OnChangeStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNPCAITask_Turn
	 * Size -> 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
	 */
	class USBNPCAITask_Turn : public UAITask
	{
	public:
		class AActor*                                              TargetActor;                                             // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FVT5[0x38];                                  // 0x0078(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNPCAITask_WanderOnLane
	 * Size -> 0x00B8 (FullSize[0x0128] - InheritedSize[0x0070])
	 */
	class USBNPCAITask_WanderOnLane : public UAITask
	{
	public:
		unsigned char                                              UnknownData_RE74[0x20];                                  // 0x0070(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               OwnerPawn;                                               // 0x0090(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPawnMovementComponent*                              MovementComp;                                            // 0x0098(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    SplineComponent;                                         // 0x00A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBNpcLaneGraph*                                     Graph;                                                   // 0x00A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WISN[0x78];                                  // 0x00B0(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNpcBase : public UInterface
	{
	public:
		void ReceiveMapAction(class AActor* ActionActor);
		void MapAction(class AActor* ActionActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcBPFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNpcBPFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcCharacterMovementComponent
	 * Size -> 0x0004 (FullSize[0x0BE0] - InheritedSize[0x0BDC])
	 */
	class USBNpcCharacterMovementComponent : public USBCharacterMovementBaseComponent
	{
	public:
		float                                                      StandardDeviationWalkSpeed;                              // 0x0BDC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcControlSettings
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBNpcControlSettings : public USBPawnControlSettings
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcHoldHandComponent
	 * Size -> 0x0008 (FullSize[0x00E0] - InheritedSize[0x00D8])
	 */
	class USBNpcHoldHandComponent : public USBHoldHandComponent
	{
	public:
		bool                                                       bHoldHandWithLocalPlayer;                                // 0x00D8(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_PVPJ[0x7];                                   // 0x00D9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcInteractionTargetComponent
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBNpcInteractionTargetComponent : public USBInteractionTargetComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcParameterManager
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USBNpcParameterManager : public UObject
	{
	public:
		class UDataTable*                                          NpcJobDB;                                                // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          NpcSpawnParameterDB;                                     // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          NpcJobAutoCreateCmnDB;                                   // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          NpcJobAutoCreateR01DB;                                   // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          NpcJobAutoCreateR02DB;                                   // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          NpcJobAutoCreateR03DB;                                   // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          NpcJobAutoCreateR04DB;                                   // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          NpcJobAutoCreateR05DB;                                   // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T48N[0x10];                                  // 0x0068(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcLaneBase
	 * Size -> 0x0048 (FullSize[0x0270] - InheritedSize[0x0228])
	 */
	class ASBNpcLaneBase : public AActor
	{
	public:
		TArray<struct FSBNpcLaneSpawnSettings>                     SpawnSettings;                                           // 0x0228(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      Density;                                                 // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBNpcLaneDirection                                        Direction;                                               // 0x023C(0x0001) ELEMENT_SIZE_MISMATCH Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E6B9[0x3];                                   // 0x023D(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class USBNpcLaneGraph*                                     OwnerGraph;                                              // 0x0240(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBNpcLanePoint>                             SpawnPoints;                                             // 0x0248(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0LZW[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AController*>                                 WalkingControllers;                                      // 0x0260(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcLaneGraph
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBNpcLaneGraph : public UObject
	{
	public:
		TArray<struct FSBNpcLaneNode>                              Nodes;                                                   // 0x0028(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBNpcLaneLink>                              Links;                                                   // 0x0038(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_68YC[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnNavigationGenerationFinished(class ANavigationData* NavData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBNpcManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_LHRB[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		int32_t GetNpcNum();
		class AActor* GetNpc(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.NpcNavPathDef
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UNpcNavPathDef : public UObject
	{
	public:
		TArray<struct FNpcNavPathData>                             PointList;                                               // 0x0028(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.NpcNavPathInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNpcNavPathInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcNavPathProxy
	 * Size -> 0x0038 (FullSize[0x0260] - InheritedSize[0x0228])
	 */
	class ASBNpcNavPathProxy : public AActor
	{
	public:
		unsigned char                                              UnknownData_R1V4[0x10];                                  // 0x0228(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNpcNavPathData>                             PointList;                                               // 0x0238(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FName                                                PathName;                                                // 0x0248(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FPathConfig                                         PathConfig;                                              // 0x0250(0x000C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_57VJ[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (PADDING)

	public:
		class FName GetPathName();
		int32_t GetPathDataNum();
		TArray<struct FNpcNavPathData> GetPathData();
		struct FPathConfig GetPathConfig();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcNavPathRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBNpcNavPathRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_I8PH[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcPath
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBNpcPath : public AActor
	{
	public:
		class USBNpcPathComponent*                                 NpcPathComponent;                                        // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                PathName;                                                // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class FName GetPathName();
		class USBNpcPathComponent* GetNpcPathComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcPathComponent
	 * Size -> 0x0010 (FullSize[0x0570] - InheritedSize[0x0560])
	 */
	class USBNpcPathComponent : public USplineComponent
	{
	public:
		float                                                      PathPointWidth;                                          // 0x0560(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPathDirection                                             PathDirection;                                           // 0x0564(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPathTarget                                                PathTarget;                                              // 0x0565(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6IAE[0xA];                                   // 0x0566(0x000A) MISSED OFFSET (PADDING)

	public:
		EPathTarget GetPathTarget();
		float GetPathPointWidth();
		EPathDirection GetPathDirection();
		struct FVector FindLocationAndDistanceClosestToWorldLocation(const struct FVector& WorldLocation, float* Distance);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcPathFollowingComponent
	 * Size -> 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
	 */
	class USBNpcPathFollowingComponent : public UPathFollowingComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcPerformanceOptimizationComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBNpcPerformanceOptimizationComponent : public UActorComponent
	{
	public:
		class APlayerController*                                   PlayerController;                                        // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBNpcSpawner*                                       NpcSpawner;                                              // 0x00C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y229[0x10];                                  // 0x00C8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnPool
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class USBPawnPool : public USBActorPool
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcPool
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class USBNpcPool : public USBPawnPool
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcPreviewComponent
	 * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
	 */
	class USBNpcPreviewComponent : public UChildActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcProjectSettings
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBNpcProjectSettings : public UObject
	{
	public:
		struct FSoftClassPath                                      NpcClass;                                                // 0x0028(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      AnimalClass;                                             // 0x0040(0x0018) Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcSensorComponent
	 * Size -> 0x0058 (FullSize[0x04E0] - InheritedSize[0x0488])
	 */
	class USBNpcSensorComponent : public UCapsuleComponent
	{
	public:
		class FScriptMulticastDelegate                             OnSensorInActor;                                         // 0x0488(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSensorOutActor;                                        // 0x0498(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSensorNearestActorChange;                              // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H976[0x28];                                  // 0x04B8(0x0028) MISSED OFFSET (PADDING)

	public:
		void SetDisableEventNotify(bool bDisable);
		void OnSensorOutActor__DelegateSignature(class AActor* Actor, bool IsLastOut);
		void OnSensorNearestActorChange__DelegateSignature(class AActor* PrevActor, class AActor* NextActor);
		void OnSensorInActor__DelegateSignature(class AActor* Actor, bool IsFirstIn);
		bool IsValidInSensorActor(class AActor* Actor);
		bool IsInSensorActor(class AActor* Actor);
		bool IsDisableEventNotify();
		class AActor* GetNearestActor();
		void EndComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void BeginComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcSpawnArea
	 * Size -> 0x0038 (FullSize[0x0298] - InheritedSize[0x0260])
	 */
	class ASBNpcSpawnArea : public AVolume
	{
	public:
		unsigned char                                              UnknownData_92Q4[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBNpcSpawnAreaSettings>                     SpawnSettings;                                           // 0x0268(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      Density;                                                 // 0x0278(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseFaceLocation;                                        // 0x027C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z01I[0x3];                                   // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FaceLocation;                                            // 0x0280(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseFaceDirection;                                       // 0x028C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JYH4[0x3];                                   // 0x028D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FaceDirection;                                           // 0x0290(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFlipped;                                                // 0x0294(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6LSU[0x3];                                   // 0x0295(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcSpawner
	 * Size -> 0x00E8 (FullSize[0x0310] - InheritedSize[0x0228])
	 */
	class ASBNpcSpawner : public AActor
	{
	public:
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwHierarchyComponent*                             HierarchyComponent;                                      // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              NpcClass;                                                // 0x0238(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              AnimalClass;                                             // 0x0240(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FYU8[0xB8];                                  // 0x0248(0x00B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBNpcPool*                                          NpcPool;                                                 // 0x0300(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPawnPool*                                         AnimalPool;                                              // 0x0308(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void NotifyNeedToUpdateFieldStatus();
		void InitNpcSpawn();
		void DeactivateWanderingNpc(class ASBMobCharacter* InMobCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcSpawnPoint
	 * Size -> 0x01D0 (FullSize[0x03F8] - InheritedSize[0x0228])
	 */
	class ASBNpcSpawnPoint : public AActor
	{
	public:
		unsigned char                                              UnknownData_0I75[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ProfileDataId;                                           // 0x0230(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBNpcSpawnPriority                                        SpawnPriority;                                           // 0x0238(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MTY5[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBNpcDisableOutRangeInfo                           OutRangeInfo;                                            // 0x023C(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LTCQ[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBNpcSpawnPointSettings                            SpawnSettings;                                           // 0x0248(0x0110) Edit, NativeAccessSpecifierPublic
		struct FSBNpcScriptInfo                                    ScriptInfo;                                              // 0x0358(0x0028) Edit, NativeAccessSpecifierPublic
		struct FSBNpcInteractionSettings                           InteractionSettings;                                     // 0x0380(0x0040) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 FieldStatusSettingHandle;                                // 0x03C0(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		class FString                                              Animation;                                               // 0x03D0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              AnimationSubCommand;                                     // 0x03E0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          OverrideWaitParamTable;                                  // 0x03F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class FName GetProfileDataId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcSpawnPointNappo
	 * Size -> 0x0000 (FullSize[0x03F8] - InheritedSize[0x03F8])
	 */
	class ASBNpcSpawnPointNappo : public ASBNpcSpawnPoint
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcSpawnSourceInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNpcSpawnSourceInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcStraightLane
	 * Size -> 0x0048 (FullSize[0x02B8] - InheritedSize[0x0270])
	 */
	class ASBNpcStraightLane : public ASBNpcLaneBase
	{
	public:
		struct FVector                                             Left;                                                    // 0x0270(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeftPointRate;                                           // 0x027C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LeftPoint;                                               // 0x0280(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Right;                                                   // 0x028C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RightPointRate;                                          // 0x0298(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             RightPoint;                                              // 0x029C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Width;                                                   // 0x02A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutoAdjustWidth;                                        // 0x02AC(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsDrawPoint;                                            // 0x02AD(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NZBS[0x2];                                   // 0x02AE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NumWalking;                                              // 0x02B0(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DensityPerLength;                                        // 0x02B4(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ChangeDrawPoint();
		void AdjustWidthToNavMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcStraightLaneRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBNpcStraightLaneRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_KB6Q[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcTalkActionComponent
	 * Size -> 0x0098 (FullSize[0x0150] - InheritedSize[0x00B8])
	 */
	class USBNpcTalkActionComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_J840[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InteractionTurnAngle;                                    // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsInteractionLookAt;                                     // 0x00CC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G9IS[0x13];                                  // 0x00CD(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTickComponentDelegate;                                 // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XHXH[0x50];                                  // 0x00F0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsTurnAnimationRatioMax;                                // 0x0140(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5RCF[0xF];                                   // 0x0141(0x000F) MISSED OFFSET (PADDING)

	public:
		void SetSkipStartWaitSendCommand();
		void SetActorRotationAtTick(const struct FRotator& NewRotation);
		bool SendWaitCommand();
		void SBOnTickComponentDelegate__DelegateSignature(class ASBMobCharacter* InMobCharacter);
		void ReserveWaitCommand(const class FName& Command);
		bool IsSkipStartWaitSendCommand();
		bool IsEnableNpcTalk();
		void InitializeWaitCommand();
		void FinishWaitCommand();
		void EnableNpcTalk();
		void ClearTalkEndAction();
		void ClearSkipStartWaitSendCommand();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNpcWaitParamComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBNpcWaitParamComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_C40Z[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBObjectDropManager
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBObjectDropManager : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBObjectNamePlateComponent2D
	 * Size -> 0x0000 (FullSize[0x02C0] - InheritedSize[0x02C0])
	 */
	class USBObjectNamePlateComponent2D : public USBNamePlateComponent2D
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOceanGrid
	 * Size -> 0x0008 (FullSize[0x0310] - InheritedSize[0x0308])
	 */
	class ASBOceanGrid : public AOceanGrid
	{
	public:
		class USBOceanRippleCaptureComponent*                      RippleCapture;                                           // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SwitchOceanCollision(bool Sw);
		void EndActorOverlap(class AActor* OverlappingActor, class AActor* OtherActor);
		void BeginActorOverlap(class AActor* OverlappingActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOceanRippleCaptureComponent
	 * Size -> 0x00C0 (FullSize[0x02F0] - InheritedSize[0x0230])
	 */
	class USBOceanRippleCaptureComponent : public USBNiagaraCaptureComponent
	{
	public:
		class UNiagaraSystem*                                      RippleEffect;                                            // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraHeight;                                            // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AEES[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialParameterCollection*                        ParameterCollection;                                     // 0x0240(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AOcean*                                              Ocean;                                                   // 0x0248(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class ASBPlayerCharacter*, class UNiagaraComponent*>  SpawnedEffects;                                          // 0x0250(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TMap<class ASBPlayerCharacter*, int32_t>                   OverlappedAreas;                                         // 0x02A0(0x0050) NativeAccessSpecifierPrivate

	public:
		void OnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void AddOverlapWaterArea(class AActor* WaterArea);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlineBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBOnlineBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool TravelToOffGameFromOfflineByGameContentId(class UObject* WorldContextObject, const class FName& GameContextId);
		void TravelToOffGameByGameContentId(class UObject* WorldContextObject, class ASBPlayerCharacter* PlayerCharacter, const class FName& GameContentId, const class FString& ExtraConfig);
		void TravelToOffGame(class UObject* WorldContextObject, class ASBPlayerCharacter* PlayerCharacter, const class FString& MapName, const class FString& ExtraConfig);
		void StartInstanceBattleFromId(class UObject* WorldContextObject, class ASBPlayerController* PlayerController, const class FName& ContentId);
		void StartInstanceBattle(class UObject* WorldContextObject, class ASBPlayerController* PlayerController, const struct FSBMapInfo& ContentInfo);
		void RejoinGameTravelOption(class UObject* WorldContextObject, const struct FSBTravelOption& InOption);
		void RejoinGameTravel(class UObject* WorldContextObject, const class FName& InGameContentId, const class FString& InGameMode, const class FString& InSpawnPortalName);
		void RejoinGamePreviousMap(class UObject* WorldContextObject);
		void RejoinGame(class UObject* WorldContextObject);
		bool IsTraveling(class UObject* WorldContextObject);
		bool HasAccessTokenLocalPlayer(class UObject* WorldContextObject, class FString* OutAccessToken);
		void EndTutorialMap(class UObject* WorldContextObject);
		void BeginTutorialMap(class UObject* WorldContextObject, bool bFirstChallenge);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlineCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBOnlineCheatCommand : public UObject
	{
	public:
		void SelfKickConflictPlayer();
		void PrintRepGraphNodePolicies();
		void KickConflictPlayer(const class FString& InUserId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlineMessageManager
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class USBOnlineMessageManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_Z9TY[0xA0];                                  // 0x0028(0x00A0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlineMessageSystem
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBOnlineMessageSystem : public UObject
	{
	public:
		unsigned char                                              UnknownData_2E5P[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlinePlayer
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class USBOnlinePlayer : public UObject
	{
	public:
		unsigned char                                              UnknownData_QRO4[0x80];                                  // 0x0028(0x0080) MISSED OFFSET (PADDING)

	public:
		class FString GetPlayerIdString();
		class FString GetCharacterName();
		class FString GetCharacterIdString();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlinePlayerState
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBOnlinePlayerState : public UInterface
	{
	public:
		class FString GetSessionId();
		class FString GetPlayerIdString();
		struct FSBPlatformInfo GetPlatformInfo();
		int32_t GetOnlineStatus();
		class FString GetGameContentID();
		class FString GetCharacterName();
		class FString GetCharacterId();
		int32_t GetAchievementSelected();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlineSessionBase
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBOnlineSessionBase : public UOnlineSession
	{
	public:
		unsigned char                                              UnknownData_KWNP[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlineSessionClient
	 * Size -> 0x0240 (FullSize[0x0278] - InheritedSize[0x0038])
	 */
	class USBOnlineSessionClient : public USBOnlineSessionBase
	{
	public:
		struct FSBPreJoinSessionFirstData                          FirstData;                                               // 0x0038(0x0030) NativeAccessSpecifierPrivate
		struct FSBPreJoinSessionDummyClientData                    DummyClientData;                                         // 0x0068(0x00B0) NativeAccessSpecifierPrivate
		struct FTimerHandle                                        Handle;                                                  // 0x0118(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1Z3T[0x10];                                  // 0x0120(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHandlingDisconnect;                                     // 0x0130(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AJ75[0x147];                                 // 0x0131(0x0147) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnlineSessionServer
	 * Size -> 0x0080 (FullSize[0x00B8] - InheritedSize[0x0038])
	 */
	class USBOnlineSessionServer : public USBOnlineSessionBase
	{
	public:
		unsigned char                                              UnknownData_TJ3X[0x80];                                  // 0x0038(0x0080) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOpenCommandMenu
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBOpenCommandMenu : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOptionChildBase
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBOptionChildBase : public USBUserWidget
	{
	public:
		void SetTitleMode(bool bTitle);
		void Open();
		void Close();
		void ApplyCursorSpeed(class ASBPlayerController* InPlayerController, int32_t Speed);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOptionHUDInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBOptionHUDInterface : public UInterface
	{
	public:
		class UUserWidget* GetOptionLayoutableHUD();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOrnamentCreateActor
	 * Size -> 0x0140 (FullSize[0x0368] - InheritedSize[0x0228])
	 */
	class ASBOrnamentCreateActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_9UQN[0x18];                                  // 0x0228(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnOrnamentCreationCompletedDelegete;                     // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOrnamentResetCompletedDelegete;                        // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    RoomId;                                                  // 0x0260(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I4CN[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PutLocationId;                                           // 0x0268(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableInteraction;                                     // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JNN6[0x3];                                   // 0x0279(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OverrideItemId;                                          // 0x027C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     SceneRootComponent;                                      // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBOrnamentCreateComponent*                          OrnamentCreateComponent;                                 // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBPlayerCharacter*                                  OrnamentCreatePlayer;                                    // 0x0298(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBPlayerCharacter*                                  OrnamentEmotePlayer;                                     // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBPlayerOrnamentComponent*                          PlayerOrnamentComponent;                                 // 0x02A8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDataRequested;                                          // 0x02B0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BWF9[0x7];                                   // 0x02B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              OverrideUniqueId;                                        // 0x02B8(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDataLoaded;                                             // 0x02C8(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_505U[0x3];                                   // 0x02C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LoadingCheckTime;                                        // 0x02CC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDataUpdated;                                            // 0x02D0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDataSelected;                                           // 0x02D1(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D2A2[0x6];                                   // 0x02D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerRoomPutData                                CustomPutData;                                           // 0x02D8(0x0058) BlueprintVisible, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   CapsuleComponent;                                        // 0x0330(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       BoxComponent;                                            // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBActorVisibilityComponent*                         ActorVisibilityComponent;                                // 0x0340(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBFieldStatusComponent*                             FieldStatusComponent;                                    // 0x0348(0x0008) Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AZYP[0x18];                                  // 0x0350(0x0018) MISSED OFFSET (PADDING)

	public:
		bool UpdateCustomOrnament(class ASBPlayerCharacter* PlayerCharacter);
		bool TransformCustomOrnament(const struct FTransform& InTransform);
		void SetTransparent(bool bIsTransparent);
		void SetTemporaryLocationAndRotation(const struct FVector& InVector, const struct FRotator& InRotator);
		void SetStelth(bool bInStelth);
		void SetSelectedPutData(bool bInSelected, const struct FSBPlayerRoomPutData& InPutData);
		void SetOverrideUniqueId(const class FString& InUniqueId);
		void SetOverrideItemId(int32_t InItemID);
		void SetMaterialVectorParameterValue(const class FName& ParameterName, const struct FLinearColor& Value);
		void SetMaterialScalarParameterValue(const class FName& ParameterName, float Value);
		void SetForceMipStreaming(bool bEnable);
		void SetDataUpdated(bool bInUpdated);
		void SetDataRequested(bool bInRequested);
		void SetDataLoaded(bool bInLoaded);
		void SetAdditionalColor(ESBAdditionalColor Type);
		void SBOnOrnamentResetCompletedDelegete__DelegateSignature(bool Result);
		void SBOnOrnamentCreationCompletedDelegete__DelegateSignature(bool Result);
		bool ResetCustomOrnament();
		void RequestCustomOrnament(const class FName& OrnamentName);
		bool IsPlayingEmote();
		bool IsOrnamentPlaced();
		bool IsOrnamentCreated();
		bool IsOrnamentAvailable();
		bool IsNeedDataLoad();
		bool IsLoadedAllMipStreaming();
		void GetTemporaryLocationAndRotation(struct FVector* OutVector, struct FRotator* OutRotator);
		float GetGridRotationValue(const struct FVector& InAxisVector, float InRotValue, float InGridValue, float InNearlyZero);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOrnamentColorList
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBOrnamentColorList : public UDataAsset
	{
	public:
		TArray<struct FSBOrnamentColorData>                        ColorList;                                               // 0x0030(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOrnamentEmissiveList
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBOrnamentEmissiveList : public UDataAsset
	{
	public:
		TArray<struct FSBOrnamentEmissiveData>                     ColorList;                                               // 0x0030(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOrnamentMaterialList
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBOrnamentMaterialList : public UDataAsset
	{
	public:
		TArray<class UMaterialInterface*>                          MaterialList;                                            // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOrnamentCreateComponent
	 * Size -> 0x0278 (FullSize[0x0330] - InheritedSize[0x00B8])
	 */
	class USBOrnamentCreateComponent : public UActorComponent
	{
	public:
		bool                                                       bForceMipStreaming;                                      // 0x00B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceMipResident;                                       // 0x00B9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableDefaultData;                                      // 0x00BA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3D5S[0x5];                                   // 0x00BB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBOrnamentCreateData                               OrnamentCreateDefault;                                   // 0x00C0(0x0120) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UMeshComponent>                       MeshBaseComponent;                                       // 0x01E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EOrnamentMaterialType>                              MaterialTypeList;                                        // 0x01E8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInterface*>                          MaterialInterfaceDefaultList;                            // 0x01F8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstanceDefaultList;                             // 0x0208(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstanceCustomList;                              // 0x0218(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UMaterialInstanceDynamic*>                    StaticMaterialInstanceList;                              // 0x0228(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6RHI[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStreamableRenderAsset*>                      ResidentTextures;                                        // 0x0240(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E7LC[0x20];                                  // 0x0250(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedAssets;                                            // 0x0270(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_PLXX[0x98];                                  // 0x0280(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBOrnamentEffectManageData>                 EffectManageList;                                        // 0x0318(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_XO3Y[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateInteractEffect();
		void SetOrnamentCreateData(const struct FSBOrnamentCreateData& InOrnamentCreateData);
		void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);
		void SetCustomWorldTransform(const struct FTransform& InTransform);
		void SetCustomRelativeTransform(const struct FTransform& InTransform);
		void SetCustomMeshID(int32_t InMeshID);
		void SetCustomMaterialIndex(int32_t InMaterialIndex);
		void SetCustomColorHSV(int32_t InId, int32_t InSaturation, int32_t InValue);
		bool RequestLoadAsset(const struct FSBOrnamentCreateData& InData);
		bool PrepareLoadAsset(TArray<struct FSoftObjectPath> InAssets);
		void OnAssetLoadedInternal();
		void OnAssetLoaded(bool bInResult);
		bool IsCreatingComponent();
		void ImportDefaultData(bool bUpdate);
		struct FSBOrnamentCreateData GetOrnamentCreateData();
		class UMeshComponent* GetMeshComponent();
		TArray<struct FSBOrnamentEffectPlayData> GetEffectPlayList();
		struct FTransform GetCustomWorldTransform();
		struct FTransform GetCustomRelativeTransform();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOrnamentManageActor
	 * Size -> 0x0098 (FullSize[0x02C0] - InheritedSize[0x0228])
	 */
	class ASBOrnamentManageActor : public ASBInteractionSwBase
	{
	public:
		unsigned char                                              UnknownData_5X1A[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RoomId;                                                  // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZLT4[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     SceneRoot;                                               // 0x0238(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBPlayerCharacter*                                  ManagePlayer;                                            // 0x0248(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class ASBPlayerCharacter*, struct FSBOrnamentManagePlayerInfo> PlayerInfo;                                              // 0x0250(0x0050) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		class ASBOrnamentCreateActor*                              SelectedOrnament;                                        // 0x02A0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBActorVisibilityComponent*                         ActorVisibilityComponent;                                // 0x02A8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBFieldStatusComponent*                             FieldStatusComponent;                                    // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBInteractionMoveComponent*                         InteractionMoveComponent;                                // 0x02B8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization

	public:
		bool UpdateSelectedOrnament(const class FString& InPutLocationId);
		void StartOrnamentManage();
		void PushLog(const class FString& LogText);
		class ASBOrnamentManageActor* GetOrnamentManageActor(class AActor* Actor);
		class USBInteractionMoveComponent* GetInteractionMoveComponent();
		void ChangePlayerState(class ASBPlayerCharacter* InPlayer, ESBOrnamentPlayerState InState, const class FString& InOption);
		void ChangeManageState(class ASBPlayerCharacter* InPlayer, ESBOrnamentManageState InState, const class FString& InOption);
		void CancelOrnamentManage();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOtherMessageComponent
	 * Size -> 0x00D0 (FullSize[0x0188] - InheritedSize[0x00B8])
	 */
	class USBOtherMessageComponent : public UActorComponent
	{
	public:
		int32_t                                                    RenderTargetSizeX;                                       // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    RenderTargetSizeY;                                       // 0x00BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZPGJ[0xB0];                                  // 0x00C0(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FOtherMessageRenderTarget>                   RenderTargetList;                                        // 0x0170(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PT7I[0x8];                                   // 0x0180(0x0008) MISSED OFFSET (PADDING)

	public:
		bool ShowRequest(class AActor* InSpeaker, const class FString& InText);
		void SetForceShow(bool IsFlag);
		void OnCloseWindow(class USBBalloonWindow* InWindow);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOutGameBuffComponent
	 * Size -> 0x0240 (FullSize[0x02F8] - InheritedSize[0x00B8])
	 */
	class USBOutGameBuffComponent : public UActorComponent
	{
	public:
		struct FSBActiveOutGameBuffDataList                        BuffDataList;                                            // 0x00B8(0x0030) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H001[0x210];                                 // 0x00E8(0x0210) MISSED OFFSET (PADDING)

	public:
		float GetBuffValue(EOutGameBuffType InType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBActiveOutGameBuffData
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBActiveOutGameBuffData : public UObject
	{
	public:
		struct FSSBActiveOutGameBuffData                           Data;                                                    // 0x0028(0x0028) NativeAccessSpecifierPrivate
		bool                                                       bLifetimeCheckEnable;                                    // 0x0050(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YWME[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOutGameBuffBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBOutGameBuffBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		TArray<struct FSBOwnedBuffItemData> GetOwnedBuffItemData(class UObject* InWorldContextObject);
		float GetLimitedBuffValue(EOutGameBuffType InBuffType, float InCheckValue);
		int32_t GetBuffValueInt(class ASBPlayerController* PlayerController, EOutGameBuffType InBuffType);
		float GetBuffValueFloat(class ASBPlayerController* PlayerController, EOutGameBuffType InBuffType);
		EOutGameBuffType GetBuffType(EItemEfficacyType InEfficatyType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOverlay
	 * Size -> 0x0068 (FullSize[0x01A0] - InheritedSize[0x0138])
	 */
	class USBOverlay : public UPanelWidget
	{
	public:
		unsigned char                                              UnknownData_3ZHP[0x10];                                  // 0x0138(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        ContentColorAndOpacity;                                  // 0x0148(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptDelegate                                      ContentColorAndOpacityDelegate;                          // 0x0158(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bBlockInput;                                             // 0x0168(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I4E1[0x7];                                   // 0x0169(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnKeyDown;                                               // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKeyUp;                                                 // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClicked;                                               // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetContentColorAndOpacity(const struct FLinearColor& InContentColorAndOpacity);
		class USBOverlaySlot* AddChildToOverlay(class UWidget* Content);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOverlaySlot
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBOverlaySlot : public UPanelSlot
	{
	public:
		struct FMargin                                             Padding;                                                 // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		EHorizontalAlignment                                       HorizontalAlignment;                                     // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVerticalAlignment                                         VerticalAlignment;                                       // 0x0049(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P9MZ[0xE];                                   // 0x004A(0x000E) MISSED OFFSET (PADDING)

	public:
		void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);
		void SetPadding(const struct FMargin& InPadding);
		void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOwnItemListContainer
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USBOwnItemListContainer : public UObject
	{
	public:
		unsigned char                                              UnknownData_3CJZ[0x40];                                  // 0x0028(0x0040) MISSED OFFSET (PADDING)

	public:
		void Sort(ESBItemSortType SortType);
		void SetItemLock(const class FString& InUniqueId, bool InLock);
		void ResetSort();
		EAddItemOpResult QueryAddItem(EItemType InItemType, int32_t InItemIndex, int32_t InAmount);
		bool IsValidIndex(int32_t InIndex);
		bool IsItemLock(const class FString& InUniqueId);
		bool IsItemInventory();
		bool IsInventory();
		bool IsEquipInventory();
		bool IsBppIrredeemable(const class FString& InUniqueId);
		int32_t GetUseBlockNum();
		class USBTemporallyStorage* GetTemporallyStorage();
		int32_t GetStackableNum(class ASBPlayerController* PlayerController, EItemType InItemType, int32_t InItemIndex, bool bInInventory);
		int32_t GetSotedIndexNum();
		TArray<struct FOwnItemInfo> GetSortFilterItem(ESBItemSortType InSortType, const struct FFilterGroup& InFilter, TArray<struct FFilterGroup> InFilterBox);
		int32_t GetSlackNum(EItemType InItemType, int32_t InItemIndex);
		int32_t GetItemTypeNum(EItemType InItemType);
		EItemType GetItemType(int32_t InItemIndex);
		int32_t GetItemsNum();
		int32_t GetItemAmount_ByUniqueId(const class FString& InUniqueId);
		bool GetIsBoostCapacity();
		int32_t GetFreeBlockNum();
		TArray<class FString> GetCollectItemsUniqueID(int32_t InItemIndex, int32_t InAmount);
		int32_t GetCapacity();
		int32_t GetBoostCapacitySum();
		int32_t GetBoostCapacity();
		int32_t FindSortedIndexByUniqueId(const class FString& UniqueId);
		void Filter(const struct FFilterGroup& Filter);
		bool ContainsByUniqueId(const class FString& UniqueId);
		struct FOwnItemInfo BP_GetSortedItemAt(int32_t InIndex);
		int32_t BP_GetItemAmount_ByItemIndex(EItemType InItemType, int32_t InItemIndex, bool bInCalcUnidentifiedItem);
		struct FOwnItemInfo BP_GetItem(int32_t InIndex);
		struct FOwnItemInfo BP_FindItem_ByUniqueId(const class FString& InUniqueId, bool* bOutExist);
		struct FOwnItemInfo BP_FindItem_ByItemIndex(EItemType InItemType, int32_t ItemIndex, bool* bOutExist);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTemporallyStorage
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class USBTemporallyStorage : public USBOwnItemListContainer
	{
	public:
		int32_t                                                    PagerMax;                                                // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PagenateNum;                                             // 0x006C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_77GG[0x8];                                   // 0x0070(0x0008) MISSED OFFSET (PADDING)

	public:
		bool SubItemByUniqueId(const class FString& InUniqueId, int32_t InAmount);
		bool SubItem(EItemType InItemType, int32_t InItemIndex, int32_t InAmount);
		void SetPagenateNum(int32_t Pagenate);
		void SetFilterID(int32_t ID);
		bool MoveItem(class USBTemporallyStorage* ToStorage, const class FString& UniqueId, int32_t InMoveAmount);
		TArray<int32_t> GetSortedPageIndexes(int32_t InPage);
		int32_t GetPagenateNum();
		int32_t GetMaxPage();
		TArray<struct FOwnItemInfo> GetAllItems();
		void DropUniqueIdSortIndex(const class FString& UniqueId);
		class USBTemporallyStorage* CreateEmptyTemporallyStorage(int32_t Capacity);
		void BPUpdateItem(const struct FOwnItemInfo& Info);
		void ApplyFilterID();
		int32_t AddItemByUniqueId(EItemType InItemType, const class FString& InUniqueId, int32_t InItemIndex, int32_t InAmount);
		int32_t AddItem(EItemType InItemType, int32_t InItemIndex, int32_t InAmount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBGetMaterialEventParam
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBGetMaterialEventParam : public UObject
	{
	public:
		class FString                                              Name;                                                    // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBWishListType                                            Type;                                                    // 0x0038(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EWWR[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOwnItemList
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class USBOwnItemList : public UObject
	{
	public:
		class USBOwnItemListContainer*                             Inventory;                                               // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBOwnItemListContainer*                             EquipmentBag;                                            // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class USBOwnItemListContainer*>                     Storages;                                                // 0x0038(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class USBOwnItemListContainer*                             UnpossessedItems;                                        // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBOwnItemListContainer*                             OrnamentStorage;                                         // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PNE3[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OwnItemChangeAmountDelegate;                             // 0x0060(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OwnItemPostUpdateItemsDelegate;                          // 0x0070(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBOwnItemListContainer*                             Identified_Appraised;                                    // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBOwnItemListContainer*                             Identified_Unidentified;                                 // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBOwnItemListContainer*                             Deleted_Appraised;                                       // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBOwnItemListContainer*                             Deleted_Unidentified;                                    // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    SaleProfits;                                             // 0x00A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LZYU[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void OwnItemPostUpdateItemsDelegate__DelegateSignature();
		void OwnItemChangeAmountDelegate__DelegateSignature(const struct FSBChangeItemAmountParam& InParam);
		void NotifyWishList();
		bool IsMoveditemsData();
		class USBOwnItemListContainer* GetUnpossessedItems();
		int32_t GetStorageNumber();
		class USBOwnItemListContainer* GetStorage(int32_t InStorageNumber, EItemType InItemType);
		int32_t GetSaleProfits();
		class USBOwnItemListContainer* GetOrnamentStorage();
		class USBOwnItemListContainer* GetMoveditems_Unidentified();
		class USBOwnItemListContainer* GetMoveditems_Appraised();
		class USBOwnItemListContainer* GetItemBag();
		class USBOwnItemListContainer* GetInventory();
		class USBOwnItemListContainer* GetEquipmentBag();
		class USBOwnItemListContainer* GetDeletedtems_Unidentified();
		class USBOwnItemListContainer* GetDeletedtems_Appraised();
		class USBOwnItemListContainer* GetCharacterStorage();
		struct FOwnItemInfo BP_FindItemByAllStorage(const class FString& InUniqueId, bool* bOutExist);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBP020_MarkIcon
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBP020_MarkIcon : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_QM9H[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowIcon(bool bVisible);
		void OnIconVisibilityStart();
		void OnIconVisibilityEnd();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBP020_MarkEnemy
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBP020_MarkEnemy : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        CanvasPanel_1;                                           // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBP020_MarkIcon*                                    MarkA;                                                   // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBP020_MarkIcon*                                    MarkB;                                                   // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBP020_MarkIcon*                                    MarkC;                                                   // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void Update(bool bVisible, bool bMarkA, bool bMarkB, bool bMarkC);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPagerBase
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBPagerBase : public UUserWidget
	{
	public:
		int32_t                                                    currentPageNum;                                          // 0x0278(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxPageNum;                                              // 0x027C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPageChange;                                            // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetMaxPage(int32_t Page);
		void SetCurrentPage(int32_t Page);
		void OnUpdatePagerButtonEnable(bool Before, bool Next);
		void OnPageChange__DelegateSignature(int32_t Page);
		void NextPage();
		int32_t GetMaxPage();
		int32_t GetCurrentPage();
		void BeforePage();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPainCausingVolume
	 * Size -> 0x0038 (FullSize[0x02D0] - InheritedSize[0x0298])
	 */
	class ASBPainCausingVolume : public APainCausingVolume
	{
	public:
		class FName                                                SocketNameForImpactPoint;                                // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlayerDamage;                                            // 0x02A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G16S[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PlayerDamageType;                                        // 0x02A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnemyDamage;                                             // 0x02B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CPC2[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              EnemyDamageType;                                         // 0x02B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DamageToCenterDirection;                                 // 0x02C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IgnoreUpDirection;                                       // 0x02C1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3Q3M[0x6];                                   // 0x02C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     HitParticle;                                             // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBParabolaMovementComponent
	 * Size -> 0x0068 (FullSize[0x0280] - InheritedSize[0x0218])
	 */
	class USBParabolaMovementComponent : public USBProjectileMovementHomingComponent
	{
	public:
		class FScriptMulticastDelegate                             OnSbProjectileBounce;                                    // 0x0218(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSbProjectileStop;                                      // 0x0228(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		bool                                                       bIsSliding : 1;                                          // 0x0238(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_233E[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreviousHitTime;                                         // 0x023C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             PreviousHitNormal;                                       // 0x0240(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBParabolaMoveParameter                            ParabolaParam;                                           // 0x024C(0x0034) Edit, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBParticleSystemComponent
	 * Size -> 0x0090 (FullSize[0x0790] - InheritedSize[0x0700])
	 */
	class USBParticleSystemComponent : public UParticleSystemComponent
	{
	public:
		ESBEffectVisibleType                                       EffectVisibleType;                                       // 0x0700(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVisibleByHiddenSourceActor;                             // 0x0701(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8MOC[0x6];                                   // 0x0702(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAkEventVariables                                   PlayAkEvent;                                             // 0x0708(0x0040) Edit, Protected, NativeAccessSpecifierProtected
		struct FAkEventVariables                                   StopAkEvent;                                             // 0x0748(0x0040) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3CZB[0x8];                                   // 0x0788(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPartyBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void UpdateMemberCharacterInfo(class UObject* WorldContextObject);
		void SendInvitation(class UObject* WorldContextObject);
		void PostProcessingByCancelRecruitRegistration(class UObject* WorldContextObject);
		void LeaveParty(class UObject* WorldContextObject);
		bool IsNeedShowPartyList(class UObject* WorldContextObject);
		bool IsCurrentPartyLeader(class UObject* WorldContextObject, class ASBPlayerState* Player);
		bool GetSomeOfPartyMemberIsInMissionResult(class UObject* WorldContextObject, const class FName& InGameContentId);
		bool GetPendingInviteInfo(class UObject* WorldContextObject, struct FSBInviteInfo* OutInviteInfo);
		class USBPartyMemberState* GetPartyMemberParticipatingInMission(class UObject* WorldContextObject);
		int32_t GetPartyListIndex();
		bool GetInstantParty(class UObject* WorldContextObject, class USBPartyGameState** OutPartyState);
		float GetGameLimitTimeOfMissionInWhichPartyMemberIsParticipating(class UObject* WorldContextObject);
		class FName GetGameContentIdPartyMemberIsParticipatingIn(class UObject* WorldContextObject);
		int32_t GetDefaultPartyMaxSize(class UObject* WorldContextObject);
		bool GetCurrentRaidPartyMember(class UObject* WorldContextObject, TArray<class USBPartyMemberState*>* OutPersistentMembers, TArray<class USBPartyMemberState*>* OutInstantMembers, bool bInExcludeLocalPlayer);
		bool GetCurrentPersistantPartyMember(class UObject* WorldContextObject, TArray<class USBPartyMemberState*>* OutPartyMembers);
		class USBPartyMemberState* GetCurrentPartyMemberStateFromId(class UObject* WorldContextObject, const class FString& CharacterId);
		class USBPartyMemberState* GetCurrentPartyMemberState(class UObject* WorldContextObject, class ASBPlayerState* Player);
		bool GetCurrentPartyMember(class UObject* WorldContextObject, TArray<class USBPartyMemberState*>* OutPartyMembers);
		bool GetCurrentParty(class UObject* WorldContextObject, class USBPartyGameState** OutPartyState);
		bool CheckInDungeon(class UObject* WorldContextObject);
		bool CanSendInvitation(class UObject* WorldContextObject);
		bool CanRecruitRegistration(class UObject* WorldContextObject);
		bool CancelInvitation(class UObject* WorldContextObject, class USBPartyMemberState* MemberState);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyChainWidget
	 * Size -> 0x0060 (FullSize[0x02D8] - InheritedSize[0x0278])
	 */
	class USBPartyChainWidget : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     WidgetSwitcher;                                          // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        ChainActiveGrp;                                          // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        ChainCooldownGrp;                                        // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCanvasPanel*                                        ChainOutofRangeGrp;                                      // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock*                                          ComboText;                                               // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock*                                          DamageRateText;                                          // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UImage*                                              ComboGauge;                                              // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock*                                          ComboTimerText;                                          // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstanceDynamic*                            ComboGaugeMat;                                           // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock*                                          CooldownTimeText;                                        // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstanceDynamic*                            CooldownGaugeMat;                                        // 0x02C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6AS4[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPlayBonusEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPartyCheatCommand : public UObject
	{
	public:
		void Party_SetSimplycityMatchingRangeSecStepAll(int32_t NewRangeStepSecL, int32_t NewRangeStepSecM);
		void Party_SetSimplycityMatchingRadiusStepAll(float NewRadiusStepL, float NewRadiusStepM, float NewRadiusStepH);
		void Party_Release();
		void Party_Create_Template(int32_t TypeNumber, int32_t MemberCount);
		void Party_Create_Invite_Send();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyGameState
	 * Size -> 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
	 */
	class USBPartyGameState : public UObject
	{
	public:
		class UScriptStruct*                                       PartyStateRefDef;                                        // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_APJT[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FUniqueNetIdRepl                                    OwningUserId;                                            // 0x0038(0x0028) Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FNQ2[0x38];                                  // 0x0060(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PartyMemberStateClass;                                   // 0x0098(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KWDQ[0x68];                                  // 0x00A0(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             PartyMemberPlayerStateChanged;                           // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M65T[0x30];                                  // 0x0118(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnPartyMemberPlayerStateChanged__DelegateSignature(class USBPartyMemberState* MemberState);
		bool IsSolo();
		bool IsPartyFull();
		bool IsLocalPartyLeader();
		int32_t GetRealPartySize();
		ESBPartyType GetPartyType();
		int32_t GetPartySize();
		int32_t GetPartyMaxSize();
		class FText GetPartyLeaderName();
		class USBPartyMemberState* GetPartyLeaderMember();
		void GetJoinedPartyMembers(TArray<class USBPartyMemberState*>* PartyMembers);
		void GetAllPartyMembers(TArray<class USBPartyMemberState*>* PartyMembers);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyGameStateGeneral
	 * Size -> 0x0098 (FullSize[0x01E0] - InheritedSize[0x0148])
	 */
	class USBPartyGameStateGeneral : public USBPartyGameState
	{
	public:
		unsigned char                                              UnknownData_2FWQ[0x98];                                  // 0x0148(0x0098) MISSED OFFSET (PADDING)

	public:
		void SwitchSimplycityPartyOn(bool InSimplycityPartyOn);
		void StartRecruiting();
		void StartConvocation();
		void SetMigrationResponseCode(ESBMigrationInfoRequestResult InMigrationResponseCode);
		bool RunMigration(bool bNeedCancel);
		void OnMapLevelInfoLoadCompleted();
		bool IsSimplycityPartyOn();
		bool IsRetireGame();
		bool IsRecruiting();
		bool IsExistNonMigrationMember();
		bool IsExecuteMigration();
		bool HasConvocation();
		class FString GetMigrationSessionId();
		int32_t GetMigrationResponseCode();
		void CancelRecruiting();
		void CancelConvocationByLeader();
		void CancelConvocation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyManager
	 * Size -> 0x0448 (FullSize[0x0470] - InheritedSize[0x0028])
	 */
	class USBPartyManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_DWHK[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DefaultMaxPartySize;                                     // 0x0078(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultInviteResponseTimeLimit;                          // 0x007C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H15A[0x3F0];                                 // 0x0080(0x03F0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyMemberState
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USBPartyMemberState : public UObject
	{
	public:
		unsigned char                                              UnknownData_DFKL[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FUniqueNetIdRepl                                    UniqueId;                                                // 0x0030(0x0028) Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                DisplayName;                                             // 0x0058(0x0018) BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic
		class ASBPlayerState*                                      PlayerState;                                             // 0x0070(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsInvited;                                              // 0x0078(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SDP4[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UScriptStruct*                                       MemberStateRefDef;                                       // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NU7Z[0x10];                                  // 0x0088(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasAnnouncedJoin;                                       // 0x0098(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bExistingMember;                                         // 0x0099(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_55R2[0x6];                                   // 0x009A(0x0006) MISSED OFFSET (PADDING)

	public:
		bool IsSameMap();
		bool IsPartyLeader();
		bool IsNeedRejoin();
		bool IsLocalPlayer();
		bool IsEnableRejoinTime();
		int32_t GetTotalPower();
		class USBPartyGameState* GetParty();
		float GetEnableRejoinRemainingTime();
		ESBClassType GetClassType();
		int32_t GetClassLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyMemberStateGeneral
	 * Size -> 0x00B0 (FullSize[0x0150] - InheritedSize[0x00A0])
	 */
	class USBPartyMemberStateGeneral : public USBPartyMemberState
	{
	public:
		class FScriptMulticastDelegate                             OnChangeConvocationDelegate;                             // 0x00A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UEO8[0xA0];                                  // 0x00B0(0x00A0) MISSED OFFSET (PADDING)

	public:
		void SetMigrationInfos(bool bConvocationSet, bool bAgreeToMigrationSet, bool Force);
		void OnChangeConvocationDelegate__DelegateSignature(bool bConvocation);
		bool IsInDungeon();
		bool IsConvocation();
		bool IsActivatedDungeon(const class FName& DungeonId);
		bool HasAgreeToMigration();
		void GetMemberMapName(class FString* OutMapName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyMemberWidget
	 * Size -> 0x0030 (FullSize[0x02A8] - InheritedSize[0x0278])
	 */
	class USBPartyMemberWidget : public UUserWidget
	{
	public:
		class USBPartyMemberState*                                 PartyMemberState;                                        // 0x0278(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowBattleStatus;                                       // 0x0280(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldDisplayInfoUpdate;                                // 0x0281(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSameMap;                                                // 0x0282(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3IJ9[0x1];                                   // 0x0283(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HitPoint;                                                // 0x0284(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUpdateBattleStatus;                                     // 0x0288(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QHDO[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBStatusAilmentIconConfig>                  StatusAilments;                                          // 0x0290(0x0010) BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PDU8[0x8];                                   // 0x02A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateDisplayInfo();
		void Setup(class USBPartyMemberState* InPartyMemberState);
		void OnUpdateDisplayInfoFinish();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyMemberNormalHPGaugeWidget
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBPartyMemberNormalHPGaugeWidget : public UUserWidget
	{
	public:
		bool                                                       EnableBlinkAnim;                                         // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_24DA[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetSwitcher*                                     BGWidgetSwitcher;                                        // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        HPGaugeSize;                                             // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     IconWidgetSwitcher;                                      // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetVisibleIcon(bool Visible);
		void SetRespawn(bool IsRespawn);
		void SetOnline(bool IsOnline);
		void SetEnableBlinkAnim(bool enable);
		void OnUpdateAnim(class USBPlayerCharacterParameterComponent* ParameterComponent, int32_t InTeamId);
		void OnUpdate(class USBPlayerCharacterParameterComponent* ParameterComponent, int32_t InTeamId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyMemberNormalPlayerStatusWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBPartyMemberNormalPlayerStatusWidget : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     WS_Status;                                               // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextBlock*                                          MapName;                                                 // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetModeIndex(int32_t ModeIndex, const class FString& InMapName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyMemberPlayerNameWidget
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBPartyMemberPlayerNameWidget : public UUserWidget
	{
	public:
		class FText                                                CacheCharacterName;                                      // 0x0278(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		void OnSetPlayerName(const class FText& InCacheCharacterName, bool IsBlock, const class FString& PlayerId, const class FString& CharacterId, bool IsUGC);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyMemberNormalWidget
	 * Size -> 0x00C0 (FullSize[0x0338] - InheritedSize[0x0278])
	 */
	class USBPartyMemberNormalWidget : public UUserWidget
	{
	public:
		class USBPartyMemberState*                                 PartyMemberState;                                        // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBGameModeInfo                                     PlayerOwnGameModeInfo;                                   // 0x0280(0x0030) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     SwitchState;                                             // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     SwitchMapStatus;                                         // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPartyMemberNormalHPGaugeWidget*                   HPGauge;                                                 // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPartyMemberNormalPlayerStatusWidget*              PartyMemberInfo_PlayerStatus;                            // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              IconChannel;                                             // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBClassIcon*                                        ClassIcon1;                                              // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBClassIcon*                                        ClassIconShadow;                                         // 0x02E0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TB_ClassLevel;                                           // 0x02E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPartyMemberPlayerNameWidget*                      PlayerName;                                              // 0x02F0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BorderMemberkaColor_SameMap;                             // 0x02F8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        BorderMemberkaColor_NotSameMap;                          // 0x0308(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBattleStatusComponent*                            BattleStatusComponent;                                   // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TZP9[0x18];                                  // 0x0320(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetPartyMemberInfo(int32_t InTeamId);
		void SetCurrentMapMode();
		bool OwnerPlayerIsInMission();
		void OnSetColorIcon(bool bSetColor);
		void OnSetBufIcon();
		void OnChangeSameMap(bool InSameMap);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyMenu
	 * Size -> 0x00A0 (FullSize[0x0318] - InheritedSize[0x0278])
	 */
	class USBPartyMenu : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_1Z1F[0xA0];                                  // 0x0278(0x00A0) MISSED OFFSET (PADDING)

	public:
		void ReleaseParty();
		void ReceivePromotePartyMemberComplete(bool bWasSuccessful, class USBPartyMemberState* MemberState, ESBPartySystemTextType ResultTextType);
		void ReceiveLeavePersistentPartyComplete(bool bWasSuccessful);
		void ReceiveKickPartyMemberComplete(bool bWasSuccessful, class USBPartyMemberState* MemberState, ESBPartySystemTextType ResultTextType);
		void PromoteMember(class USBPartyMemberState* MemberState);
		void NotifyInvalidParty();
		void LeavePersistentParty();
		void KickMember(class USBPartyMemberState* MemberState);
		void CancelInvitation(class USBPartyMemberState* MemberState);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPartyRecruitComponent
	 * Size -> 0x0080 (FullSize[0x0138] - InheritedSize[0x00B8])
	 */
	class USBPartyRecruitComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnIsGetPartyRecruitListDelegate;                         // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsRecruitPartyDelegate;                                // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsUpdateRecruitInfoDelegate;                           // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsCancelRecruitDelegate;                               // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetListDetailInfoDelegate;                           // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsJoinPartyDelegate;                                   // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsLeavePartyDelegate;                                  // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetPrevInfoDelegate;                                 // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void UpdateRecruitPartyMemberWebAPI(class ASBPlayerController* InPlayerController, const class FString& CharacterId, const class FString& UpdatedCharacterId, int32_t UpdatedCharacterClassIndex, int32_t UpdatedCharacterTotalPower);
		class FString RemoveReturnCode(const class FString& Input);
		void RecruitPartyWebAPI(class ASBPlayerController* InPlayerController, const struct FSBPartyRecruitData& RecruitData);
		void OnIsUpdateRecruitInfoDelegate__DelegateSignature(bool bWasSuccessful);
		void OnIsRecruitPartyDelegate__DelegateSignature(bool bWasSuccessful, int32_t iRetCode);
		void OnIsLeavePartyDelegate__DelegateSignature(bool bWasSuccessful);
		void OnIsJoinPartyDelegate__DelegateSignature(bool bWasSuccessful);
		void OnIsGetPrevInfoDelegate__DelegateSignature(bool bWasSuccessful, const struct FSBPartyRecruitData& PrevInfo);
		void OnIsGetPartyRecruitListDelegate__DelegateSignature(bool bWasSuccessful, TArray<struct FSBPartyRecruitData> PartyRecruitListData);
		void OnIsGetListDetailInfoDelegate__DelegateSignature(bool bWasSuccessful, const struct FSBPartyRecruitData& ListDetailInfo);
		void OnIsCancelRecruitDelegate__DelegateSignature(bool bWasSuccessful, int32_t iRetCode);
		void LeavePartyWebAPI(class ASBPlayerController* InPlayerController, const class FString& CharacterId, const class FString& LeavedCharacterId);
		void JoinPartyWebAPI(class ASBPlayerController* InPlayerController, const class FString& CharacterId, const class FString& JoinedCharacterId, int32_t JoinedCharacterClassIndex, int32_t JoinedCharacterTotalPower);
		void GetPrevInfoWebAPI(class ASBPlayerController* InPlayerController, const class FString& CharacterId);
		void GetPartyRecruitListWebAPIBySearchId(class ASBPlayerController* InPlayerController, const class FString& SearchId);
		void GetPartyRecruitListWebAPI(class ASBPlayerController* InPlayerController, int32_t PageNumber, bool bTargetAnyone, bool bTargetFriend, bool bTargetTeam);
		void GetListDetailInfoWebAPI(class ASBPlayerController* InPlayerController, const class FString& CharacterId);
		void CancelRecruitWebAPI(class ASBPlayerController* InPlayerController, const class FString& CharacterId, bool bEstablished);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.PartySystem
	 * Size -> 0x03C0 (FullSize[0x03E8] - InheritedSize[0x0028])
	 */
	class UPartySystem : public UObject
	{
	public:
		unsigned char                                              UnknownData_EAXG[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PartyServerSocketScheme;                                 // 0x0038(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              PartyServerScheme;                                       // 0x0048(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              PartyServerHost;                                         // 0x0058(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PartyServerPort;                                         // 0x0068(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SD79[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PartyServerVersion;                                      // 0x0070(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GVCG[0x368];                                 // 0x0080(0x0368) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlAxisAction
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBPawnControlAxisAction : public UObject
	{
	public:
		class APawn*                                               Pawn;                                                    // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class APawn* GetPawn();
		class APlayerController* GetController();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlAxisAction_AddPitchInput
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPawnControlAxisAction_AddPitchInput : public USBPawnControlAxisAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlAxisAction_AddYawInput
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPawnControlAxisAction_AddYawInput : public USBPawnControlAxisAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlAxisAction_MoveCameraForward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBPawnControlAxisAction_MoveCameraForward : public USBPawnControlAxisAction
	{
	public:
		float                                                      CameraSpeed;                                             // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DBCN[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlAxisAction_MoveForward
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPawnControlAxisAction_MoveForward : public USBPawnControlAxisAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlAxisAction_MoveRight
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPawnControlAxisAction_MoveRight : public USBPawnControlAxisAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlKeyAction_AnimCommand
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USBPawnControlKeyAction_AnimCommand : public USBPawnControlKeyAction
	{
	public:
		class FName                                                PressCommand;                                            // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                ReleaseCommand;                                          // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlKeyAction_BlueprintBase
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBPawnControlKeyAction_BlueprintBase : public USBPawnControlKeyAction
	{
	public:
		void ReceiveTick(float DeltaTime);
		void ReceiveInvokeReleased();
		void ReceiveInvoke();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlKeyAction_ResetCamera
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USBPawnControlKeyAction_ResetCamera : public USBPawnControlKeyAction
	{
	public:
		struct FVector                                             CameraOffset;                                            // 0x0038(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M96Y[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPawnControlSettingsComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBPawnControlSettingsComponent : public UActorComponent
	{
	public:
		class UClass*                                              ControlSettingsClass;                                    // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPCClassComponentBase
	 * Size -> 0x00E0 (FullSize[0x01B0] - InheritedSize[0x00D0])
	 */
	class USBPCClassComponentBase : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_G6LN[0x50];                                  // 0x00D0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBPlayerPassiveSkill*>                       m_EquippedPassiveArtsList;                               // 0x0120(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             PassiveSkillChangeNotify;                                // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YIXB[0x58];                                  // 0x0140(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayerAttackHitLaunchProjectile>          AttackLaunchProjectileList;                              // 0x0198(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5CDM[0x8];                                   // 0x01A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ServerChangeEquipPassiveArts(const struct FSBPassiveSkillID& PassiveArtsID, bool bSetEquipped, int32_t SlotIndex);
		void RequestUnequipPassiveSkillAll();
		bool RequestUnequipPassiveSkill(int32_t PassiveSkillID, int32_t SlotIndex);
		bool RequestEquipPassiveSkill(int32_t PassiveSkillID, int32_t SlotIndex);
		void RequestAimAssist(const struct FSBPlayerAimAssistSetting& AimAssistSetting);
		void OnPassiveSkillChangeNotify__DelegateSignature();
		void MulticastChangeEquipPerkInterlockPassiveArts(const struct FSBPerkInterlockPassiveSkillInfo& PassiveSkillInfo, bool bSetEquipped);
		void MulticastChangeEquipPassiveArts(int32_t PassiveArtsID, bool bSetEquipped, int32_t SlotIndex);
		bool IsPerkInterlockPassiveSkillActive(int32_t PassiveSkillID);
		bool IsPassiveSkillEquipped(int32_t PassiveSkillID);
		int32_t GetPassiveSkillEquippedSlotIndex(int32_t PassiveSkillID);
		bool GetEquippedPassiveSkillByIndex(int32_t Index, int32_t* OutSkillId, int32_t* OutSlotIndex);
		int32_t GetEquippedPassiveSkill(int32_t SlotIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPCBerserkerComponent
	 * Size -> 0x01A8 (FullSize[0x0358] - InheritedSize[0x01B0])
	 */
	class USBPCBerserkerComponent : public USBPCClassComponentBase
	{
	public:
		struct FSBBerserkerComboSettings                           ComboSetting;                                            // 0x01B0(0x0060) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3HMK[0xA0];                                  // 0x0210(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ComboGaugeResetHPRate;                                   // 0x02B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QGW4[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckParam>                      ComboGaugeNoResetConditionList;                          // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L02V[0x88];                                  // 0x02C8(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RampageRecastTimeRate;                                   // 0x0350(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RampageMaxHitPointRate;                                  // 0x0354(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ServerUpdateConsumeComboParam(float ComboGaugeAmount, bool bCanConsumeComboAttack, unsigned char SkillPosition);
		void ServerSetComboGaugeAmount(float Amount);
		void Server_StartInTheZone();
		void Multicast_StartInTheZone();
		void Multicast_EndInTheZone();
		float GetComboGaugeRate();
		float GetComboDamageUpRate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerSkillInfo
	 * Size -> 0x0028 (FullSize[0x02D8] - InheritedSize[0x02B0])
	 */
	class USBBerserkerSkillInfo : public USBSkillInfoClass
	{
	public:
		TArray<struct FSBBerserkerComboGaugeCastSetting>           SkillCastComboGaugeChangeList;                           // 0x02B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBerserkerConsumeComboAttackSetting>       ConsumeComboAttackSettingList;                           // 0x02C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		ESBBerserkerConsumeComboTiming                             ConsumeComboAttackConsumeTiming;                         // 0x02D0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U9OC[0x7];                                   // 0x02D1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerBrutalBlowSkill
	 * Size -> 0x0030 (FullSize[0x0308] - InheritedSize[0x02D8])
	 */
	class USBBerserkerBrutalBlowSkill : public USBBerserkerSkillInfo
	{
	public:
		unsigned char                                              UnknownData_1IJY[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x02E0(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerBoneCutSkill
	 * Size -> 0x0030 (FullSize[0x0308] - InheritedSize[0x02D8])
	 */
	class USBBerserkerBoneCutSkill : public USBBerserkerSkillInfo
	{
	public:
		unsigned char                                              UnknownData_S0C4[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x02E0(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerRoundBlowSkill
	 * Size -> 0x0018 (FullSize[0x02F0] - InheritedSize[0x02D8])
	 */
	class USBBerserkerRoundBlowSkill : public USBBerserkerSkillInfo
	{
	public:
		float                                                      LoopStamina;                                             // 0x02D8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G6BC[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 LoopStaminaModifyList;                                   // 0x02E0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerBloodAxeSkill
	 * Size -> 0x0040 (FullSize[0x02F0] - InheritedSize[0x02B0])
	 */
	class USBBerserkerBloodAxeSkill : public USBSkillInfoClass
	{
	public:
		struct FDataTableRowHandle                                 StatusRowHandle;                                         // 0x02B0(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckFloatParam>                 TimeUpComboGaugeRecoveryList;                            // 0x02C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckFloatParam>                 DamageUpSettingList;                                     // 0x02D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBerserkerBloodAxeTotalDrainSetting>       TotalDrainSettingList;                                   // 0x02E0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerBerserkModeSkill
	 * Size -> 0x0020 (FullSize[0x02D0] - InheritedSize[0x02B0])
	 */
	class USBBerserkerBerserkModeSkill : public USBSkillInfoClass
	{
	public:
		TArray<struct FSBActiveArtsID>                             ActiveArtsList;                                          // 0x02B0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBerserkerBerserkModeComboGaugeModifyDamageUpSetting> ComboGaugeModifyDamageUpSettingList;                     // 0x02C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerEngramAbsorbSkill
	 * Size -> 0x0030 (FullSize[0x0308] - InheritedSize[0x02D8])
	 */
	class USBBerserkerEngramAbsorbSkill : public USBBerserkerSkillInfo
	{
	public:
		unsigned char                                              UnknownData_KCK4[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x02E0(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBPlayerPassiveSkill : public UObject
	{
	public:
		unsigned char                                              UnknownData_YXZK[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerBerserkModeSkillRecastDownPassiveSkill
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBBerserkerBerserkModeSkillRecastDownPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		float                                                      ModifyTime;                                              // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KVS1[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerMoveSpeedUpWhileFullComboGaugePassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBBerserkerMoveSpeedUpWhileFullComboGaugePassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBConditionCheckFloatParam>                 MoveSpeedRateSettingList;                                // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerPartyChainDrainPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBBerserkerPartyChainDrainPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		struct FSBPassiveArtsID                                    PassiveArtsID;                                           // 0x0040(0x0004) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KMD9[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBBerserkerPartyChainDrainSetting>          PartyChainDrainSettingList;                              // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerInTheZonePassiveSkill
	 * Size -> 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
	 */
	class USBBerserkerInTheZonePassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		float                                                      EffectTime;                                              // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V00X[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBBerserkerInTheZonePassiveSkillSetting>    SettingList;                                             // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AddGaugeAmountDodgeSucceeded;                            // 0x0058(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BP1Q[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESkillActionPosition, float>                          AddGaugeAmountSkillPositionMap;                          // 0x0060(0x0050) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectSetting>                            EffectSettingList;                                       // 0x00B0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPerkInterlockPassiveSkill
	 * Size -> 0x0220 (FullSize[0x0260] - InheritedSize[0x0040])
	 */
	class USBPlayerPerkInterlockPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_JGT8[0x78];                                  // 0x0040(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      DynamicConditionSatisfiedEffect;                         // 0x00B8(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBerserkerApplyBleedingStatusWhileFullComboGaugePassiveSkill
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class USBBerserkerApplyBleedingStatusWhileFullComboGaugePassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_8FBZ[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         ValueSetStatusAlimentArray;                              // 0x0268(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPCBlasterComponent
	 * Size -> 0x00F0 (FullSize[0x02A0] - InheritedSize[0x01B0])
	 */
	class USBPCBlasterComponent : public USBPCClassComponentBase
	{
	public:
		TArray<struct FSBBlasterHitDistanceDamageModifySetting>    HitDistanceDamageModifySettingList;                      // 0x01B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UUAK[0xB0];                                  // 0x01C0(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBWeaponAnimationPlayParam                         m_DefaultBowAnimationParam;                              // 0x0270(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NN9C[0x10];                                  // 0x0280(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEffectShaderParameter>                    m_WeaponEmissiveShaderParamList;                         // 0x0290(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void OnCharacterServerTakeDamageBeforeCalcDamageAttacker(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* DamageDst, bool bInvincible);
		int32_t GetReflectMirageNum();
		class AActor* GetReflectMirage(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterSkillInfo
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBBlasterSkillInfo : public USBSkillInfoClass
	{
	public:
		TArray<struct FSBWeaponAnimationTagPlayParam>              BowAnimationList;                                        // 0x02B0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterShootSkillInfo
	 * Size -> 0x0018 (FullSize[0x02D8] - InheritedSize[0x02C0])
	 */
	class USBBlasterShootSkillInfo : public USBBlasterSkillInfo
	{
	public:
		TArray<struct FSBBlasterHoldingArrowEffectSetting>         HoldArrowSettingList;                                    // 0x02C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bRemoveHoldArrowWhenCastSkill;                           // 0x02D0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4SZF[0x7];                                   // 0x02D1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterChargeShootSkillInfo
	 * Size -> 0x0040 (FullSize[0x0318] - InheritedSize[0x02D8])
	 */
	class USBBlasterChargeShootSkillInfo : public USBBlasterShootSkillInfo
	{
	public:
		unsigned char                                              UnknownData_QH07[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBBlasterSkillChargeSetting                        ChargeSkillSetting;                                      // 0x02E0(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBlasterWeakPointHitDamageUpSetting>       WeakPointHitDamageUpSettingList;                         // 0x0308(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterMarkerShootSkill
	 * Size -> 0x0078 (FullSize[0x0390] - InheritedSize[0x0318])
	 */
	class USBBlasterMarkerShootSkill : public USBBlasterChargeShootSkillInfo
	{
	public:
		unsigned char                                              UnknownData_W5D8[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSkillMarkerSetting                               MarkerSetting;                                           // 0x0320(0x0070) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterDodgeSkillInfo
	 * Size -> 0x0038 (FullSize[0x0310] - InheritedSize[0x02D8])
	 */
	class USBBlasterDodgeSkillInfo : public USBBlasterShootSkillInfo
	{
	public:
		unsigned char                                              UnknownData_CESH[0x10];                                  // 0x02D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCurveMoveSetting>                         CurveMoveSettingList;                                    // 0x02E8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FName                                                DodgeSucceededCharacterMaterial;                         // 0x02F8(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBConditionCheckParam>                      DodgeSuccessAttackConditionList;                         // 0x0300(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterStepShotSkill
	 * Size -> 0x0018 (FullSize[0x02F0] - InheritedSize[0x02D8])
	 */
	class USBBlasterStepShotSkill : public USBBlasterShootSkillInfo
	{
	public:
		unsigned char                                              UnknownData_KTLG[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCurveMoveSetting>                         CurveMoveSettingList;                                    // 0x02E0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterMultiShotSkill
	 * Size -> 0x0000 (FullSize[0x02D8] - InheritedSize[0x02D8])
	 */
	class USBBlasterMultiShotSkill : public USBBlasterShootSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterRegularBuffArrowSkill
	 * Size -> 0x00D0 (FullSize[0x03A8] - InheritedSize[0x02D8])
	 */
	class USBBlasterRegularBuffArrowSkill : public USBBlasterShootSkillInfo
	{
	public:
		unsigned char                                              UnknownData_BXKB[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GaugeAmountBaseMultiplier;                               // 0x02E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A7JV[0x4];                                   // 0x02E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              GaugeAmountSkillLevelMultiplierList;                     // 0x02E8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBlasterGaugeAmountAddSetting>             GaugeAmountAddSettingList;                               // 0x02F8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBlasterGaugeAmountWeakPointHitMultiplierSetting> GaugeAmountWeakPointHitMultiplierSettingList;            // 0x0308(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      GaugeAmountCriticalHitMultiplier;                        // 0x0318(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GaugeAmountResetTime;                                    // 0x031C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBSkillMarkerSetting                               MarkerSetting;                                           // 0x0320(0x0070) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBRegularBuffArrowLevelSetting>             GaugeLevelSettingList;                                   // 0x0390(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      MaxGaugeAmount;                                          // 0x03A0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BM2I[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterElementSpreadShotSkill
	 * Size -> 0x0040 (FullSize[0x0358] - InheritedSize[0x0318])
	 */
	class USBBlasterElementSpreadShotSkill : public USBBlasterChargeShootSkillInfo
	{
	public:
		struct FSBAttackID                                         AttackID;                                                // 0x0318(0x0004) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XVAX[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBBlasterElementSpreadProjectileSetting>    ElementSpreadProjectileSettingList;                      // 0x0320(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBlasterElementSpreadAccumulationSetting>  ElementSpreadAccumulationSettingList;                    // 0x0330(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       IsSpreadDuringElementalBurst;                            // 0x0340(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2BEM[0x7];                                   // 0x0341(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBBlasterBattleStatusSpreadSetting>         BattleStatusSpreadSettingList;                           // 0x0348(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterHatTrickSkillInfo
	 * Size -> 0x0020 (FullSize[0x02E0] - InheritedSize[0x02C0])
	 */
	class USBBlasterHatTrickSkillInfo : public USBBlasterSkillInfo
	{
	public:
		TArray<struct FSBBlasterHatTrickSetting>                   HatTrickSettingList;                                     // 0x02C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBBlasterHatTrickWeakPointHitDamageModifySetting> HatTrickWeakPointHitDamageModifySettingList;             // 0x02D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterGravityGrenadeSkill
	 * Size -> 0x0010 (FullSize[0x0328] - InheritedSize[0x0318])
	 */
	class USBBlasterGravityGrenadeSkill : public USBBlasterChargeShootSkillInfo
	{
	public:
		TArray<struct FDataTableRowHandle>                         SpecialHandleList;                                       // 0x0318(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterHatTrickWeakPointHitCriticalPassiveSkill
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBBlasterHatTrickWeakPointHitCriticalPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterSatisfyPassiveSkill
	 * Size -> 0x00E0 (FullSize[0x0120] - InheritedSize[0x0040])
	 */
	class USBBlasterSatisfyPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		struct FSBBlasterSatisfyPassiveSkillSetting_RegularBuffGauge RegularBuffGaugeSetting;                                 // 0x0040(0x00B0) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBBlasterSatisfyPassiveSkillSetting_AddHeal        AddHealSetting;                                          // 0x00F0(0x0020) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<int32_t>                                            ExcludeAttackIDList;                                     // 0x0110(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterChargeShot5WayDamageUpPerkInterlockPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class USBBlasterChargeShot5WayDamageUpPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_BVRL[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBAttackID                                         ChargeShot5WayExplodeAttackID;                           // 0x0268(0x0004) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KT62[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBBlasterMainActionPenetrationDamageUpPerkInterlockPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class USBBlasterMainActionPenetrationDamageUpPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_QNHB[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAttackID>                                 DamageUpAttackIDList;                                    // 0x0268(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPCLancerComponent
	 * Size -> 0x0080 (FullSize[0x0230] - InheritedSize[0x01B0])
	 */
	class USBPCLancerComponent : public USBPCClassComponentBase
	{
	public:
		unsigned char                                              UnknownData_WW6J[0x20];                                  // 0x01B0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartIntervalDesire;                                   // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndIntervalDesire;                                     // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AEJY[0x40];                                  // 0x01F0(0x0040) MISSED OFFSET (PADDING)

	public:
		void OnUpdateErasedMarkList(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* DamageDst, bool bInvincible);
		void OnStartIntervalDesire__DelegateSignature();
		void OnEndIntervalDesire__DelegateSignature();
		void Multicast_SetUnavailableDesireStatusAilment();
		float GetDesireIntervalRemainingTimeRate();
		float GetDesireIntervalRemainingTime();
		bool CanDesire();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerSkillInfo
	 * Size -> 0x0008 (FullSize[0x02B8] - InheritedSize[0x02B0])
	 */
	class USBLancerSkillInfo : public USBSkillInfoClass
	{
	public:
		bool                                                       bCorrespondToPrepareStyle;                               // 0x02B0(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHideSpearByLaunchProjectile;                            // 0x02B1(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ATE6[0x6];                                   // 0x02B2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerMainActionSkill
	 * Size -> 0x0028 (FullSize[0x02E0] - InheritedSize[0x02B8])
	 */
	class USBLancerMainActionSkill : public USBLancerSkillInfo
	{
	public:
		float                                                      ChargeAttackInputTime;                                   // 0x02B8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargeAttackRecastTime;                                  // 0x02BC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBEffectAsset>                              ChargeEffectList;                                        // 0x02C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectAsset>                              ChargingEffectList;                                      // 0x02D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		bool IsInputChargeMainAttack(class ASBPlayerCharacter* PlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerEscapeJumpSkill
	 * Size -> 0x0000 (FullSize[0x02B8] - InheritedSize[0x02B8])
	 */
	class USBLancerEscapeJumpSkill : public USBLancerSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerThunderThrustSkill
	 * Size -> 0x0030 (FullSize[0x02E8] - InheritedSize[0x02B8])
	 */
	class USBLancerThunderThrustSkill : public USBLancerSkillInfo
	{
	public:
		unsigned char                                              UnknownData_5O94[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x02C0(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerPrepareStyleSkill
	 * Size -> 0x0048 (FullSize[0x0300] - InheritedSize[0x02B8])
	 */
	class USBLancerPrepareStyleSkill : public USBLancerSkillInfo
	{
	public:
		TArray<struct FSBStatusAilmentHandle>                      MarkCountStatusAilmentList;                              // 0x02B8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckFloatParam>                 MarkCountStatusTimeModifyList;                           // 0x02C8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBLancerPrepareStyleMarkCountSetting>       MarkCountSettingList;                                    // 0x02D8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AttackUpTime;                                            // 0x02E8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XRYR[0x4];                                   // 0x02EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 AttackUpTimeModifyList;                                  // 0x02F0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerResonanceSpearSkill
	 * Size -> 0x0208 (FullSize[0x04C0] - InheritedSize[0x02B8])
	 */
	class USBLancerResonanceSpearSkill : public USBLancerSkillInfo
	{
	public:
		struct FSBAttackID                                         AttackID;                                                // 0x02B8(0x0004) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FWF5[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 LancerMarkSpreadProjectileHandle;                        // 0x02C0(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FSBEffectAsset                                      SpreadHitEffect;                                         // 0x02D0(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBLancerResonanceSpearLancerMarkSpreadSetting> LancerMarkSpreadSettingList;                             // 0x0478(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBLancerResonanceSpearMaxNumSpreadCharacterSetting> MaxNumSpreadCharacterSettingList;                        // 0x0488(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckParam>                      SpreadDamageUpRateConditionList;                         // 0x0498(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBAttackID                                         SpreadDamageAttackID;                                    // 0x04A8(0x0004) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      SpreadDamageUpRate;                                      // 0x04AC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckParam>                      ResetLancerMarkRemainTimeConditionList;                  // 0x04B0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerChangeDamageReactionAtErasedLancerMarkPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBLancerChangeDamageReactionAtErasedLancerMarkPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<int32_t>                                            ConditionList;                                           // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      DamageReactionValue;                                     // 0x0050(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SRYU[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerElementDamageAtErasedLancerMarkPassiveSkill
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBLancerElementDamageAtErasedLancerMarkPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<int32_t>                                            ConditionList;                                           // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckIntParam>                   ElementDamageList;                                       // 0x0050(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerDesirePassiveSkill
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class USBLancerDesirePassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBLancerDesirePassiveSkillSetting>          SettingList;                                             // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectSetting>                            CanDrainEffectSettingList;                               // 0x0050(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectSetting>                            StartDrainEffectSettingList;                             // 0x0060(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerShortULTRecastTimeAtAllLancerMarkErasedPerkInterlockPassiveSkill
	 * Size -> 0x0028 (FullSize[0x0288] - InheritedSize[0x0260])
	 */
	class USBLancerShortULTRecastTimeAtAllLancerMarkErasedPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_TPK5[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         StatusAlimentArray;                                      // 0x0268(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FDataTableRowHandle>                         ValueSetStatusAlimentArray;                              // 0x0278(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLancerAddMarkMainAttackPerkInterlockPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class USBLancerAddMarkMainAttackPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_IMSV[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAttackID>                                 DamageUpAttackIDList;                                    // 0x0268(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPCMagicianComponent
	 * Size -> 0x0210 (FullSize[0x03C0] - InheritedSize[0x01B0])
	 */
	class USBPCMagicianComponent : public USBPCClassComponentBase
	{
	public:
		unsigned char                                              UnknownData_OACP[0x18];                                  // 0x01B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxMagicPoint;                                           // 0x01C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6XBU[0x4];                                   // 0x01CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 m_ModifyMaxMPSettingList;                                // 0x01D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ICOH[0x38];                                  // 0x01E0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_NoBattleMPRecoveryCycle;                               // 0x0218(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_NoBattleMPRecoveryAmount;                              // 0x021C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBConditionCheckParam                              CancelSameSkillCondition;                                // 0x0220(0x0068) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSBConditionCheckParam                              CancelDifferentSkillCondition;                           // 0x0288(0x0068) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2SJM[0x8];                                   // 0x02F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartIntervalInspiration;                              // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndIntervalInspiration;                                // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FM1F[0x30];                                  // 0x0318(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bMagicStackEnable;                                     // 0x0348(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z1U9[0x3];                                   // 0x0349(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_CurrentMagicStack;                                     // 0x034C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_MagicStackAccumulationElapedTime;                      // 0x0350(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_ResetMagicStackNoBattleElapedTime;                     // 0x0354(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_MagicStackTakeDamageDelay;                             // 0x0358(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_MagicStackAccumulationSpeedUpRemainTimeByDodgeSuccess; // 0x035C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_MagicStackAccumulationSpeedUpRemainTimeByCastSpecialSkill; // 0x0360(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    InitialMagicStack;                                       // 0x0364(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxMagicStack;                                           // 0x0368(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MagicStackAccumulationSec;                               // 0x036C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MagicStackNoBattleResetSec;                              // 0x0370(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MagicStackTakeDamageDelaySec;                            // 0x0374(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MagicStackTakeDamageDecPercentage;                       // 0x0378(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VS45[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAttackID>                                 ExclusionDecMagicStackAttackIDs;                         // 0x0380(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBMagicianMagicStackBattleStatusSetting>    MagicStackBattleStatusSettingList;                       // 0x0390(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      MagicStackAccumulationSpeedUpSecByDodgeSuccess;          // 0x03A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MagicStackAccumulationSpeedUpRateByDodgeSuccess;         // 0x03A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MagicStackAccumulationSpeedUpSecByCastSpecialSkill;      // 0x03A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MagicStackAccumulationSpeedUpRateByCastSpecialSkill;     // 0x03AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBEffectAsset>                              MagicStackMaxEffectList;                                 // 0x03B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void SetInfiniteMP(bool bEnable);
		void SetCurrentMagicPoint(float InMagicPoint);
		void ServerStopThunderCloudInfo();
		void ServerStartThunderCloudInfo();
		void ServerSetSubAction(bool bSubAction);
		void ServerMagicStackAccumulationSpeedUpByDodgeSuccess();
		void ServerMagicStackAccumulationSpeedUpByCastSpecialSkill();
		void ServerLaunchThunder();
		void ServerCheckThunderMineInfo(int32_t SkillId, int16_t SkillLevel, int16_t LaunchNum);
		void ServerCheckReduceMagicPoint(int32_t SkillId, float PreValue, float AftValue, float MaxValue);
		void Server_StartInspiration();
		void OnStartIntervalInspiration__DelegateSignature();
		void OnEndIntervalInspiration__DelegateSignature();
		void Multicast_StartInspiration();
		bool IsStackMEnable();
		float GetStackMAccumulationSec();
		float GetStackMAccumulationElapedTime();
		float GetMaxMagicPoint();
		float GetMagicPointRate();
		float GetInspirationIntervalTime();
		float GetInspirationIntervalRemainingTime();
		int32_t GetCurrentStackM();
		float GetCurrentMagicPoint();
		void ClientNotifyMagicStackMax();
		void AdjustCurrentMagicPoint(float AddValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianSkillInfo
	 * Size -> 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
	 */
	class USBMagicianSkillInfo : public USBSkillInfoClass
	{
	public:
		float                                                      MagicPoint;                                              // 0x02B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EI8B[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 MPCostModifyRateSettingList;                             // 0x02B8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckFloatParam>                 MPCostModifyAmountSettingList;                           // 0x02C8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       EnableElementAmp;                                        // 0x02D8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1RMZ[0x7];                                   // 0x02D9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianReloadSkill
	 * Size -> 0x0030 (FullSize[0x0310] - InheritedSize[0x02E0])
	 */
	class USBMagicianReloadSkill : public USBMagicianSkillInfo
	{
	public:
		float                                                      MPRecoverySpeed;                                         // 0x02E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7AEL[0x4];                                   // 0x02E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 MPRecoverySpeedModifySettingList;                        // 0x02E8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      MPRecoveryAmount;                                        // 0x02F8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R2VG[0x4];                                   // 0x02FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 MPRecoveryAmountModifySettingList;                       // 0x0300(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianChargeMagicSkillInfo
	 * Size -> 0x0030 (FullSize[0x0310] - InheritedSize[0x02E0])
	 */
	class USBMagicianChargeMagicSkillInfo : public USBMagicianSkillInfo
	{
	public:
		unsigned char                                              UnknownData_30RC[0x8];                                   // 0x02E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x02E8(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDodgeSkillInfo
	 * Size -> 0x0038 (FullSize[0x02E8] - InheritedSize[0x02B0])
	 */
	class USBDodgeSkillInfo : public USBSkillInfoClass
	{
	public:
		unsigned char                                              UnknownData_UBUS[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCurveMoveSetting>                         CurveMoveSettingList;                                    // 0x02C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FName                                                DodgeSucceededCharacterMaterial;                         // 0x02D0(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBConditionCheckParam>                      DodgeSuccessAttackConditionList;                         // 0x02D8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianDodgeSkill
	 * Size -> 0x0018 (FullSize[0x0300] - InheritedSize[0x02E8])
	 */
	class USBMagicianDodgeSkill : public USBDodgeSkillInfo
	{
	public:
		unsigned char                                              UnknownData_1JP5[0x8];                                   // 0x02E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 CastMPChangeList;                                        // 0x02F0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianHealingAreaSkill
	 * Size -> 0x0078 (FullSize[0x0388] - InheritedSize[0x0310])
	 */
	class USBMagicianHealingAreaSkill : public USBMagicianChargeMagicSkillInfo
	{
	public:
		unsigned char                                              UnknownData_RY7L[0x8];                                   // 0x0310(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSkillMarkerSetting                               MarkerSetting;                                           // 0x0318(0x0070) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianFireBurnerSkill
	 * Size -> 0x03C8 (FullSize[0x06A8] - InheritedSize[0x02E0])
	 */
	class USBMagicianFireBurnerSkill : public USBMagicianSkillInfo
	{
	public:
		unsigned char                                              UnknownData_DUHS[0x8];                                   // 0x02E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 ActiveTimeMPChangeList;                                  // 0x02E8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      FiringCameraRotationSpeedLimit;                          // 0x02F8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireShotRotationSpeedLimitYaw;                           // 0x02FC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireShotRotationDelayDegreeLimitYaw;                     // 0x0300(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireShotRotationSpeedLimitPitch;                         // 0x0304(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FireShotRotationDelayDegreeLimitPitch;                   // 0x0308(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G6RW[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      FireShotEffect;                                          // 0x0310(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBEffectAsset                                      FireStringEffect;                                        // 0x04B8(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      FireShotLaunchCycle;                                     // 0x0660(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2OE4[0x4];                                   // 0x0664(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              FireShotMoveCurve[0x28];                                 // 0x0668(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      FireShotDeactiveTimeRatio;                               // 0x0690(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8FEF[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 ReceiveDamageDownRateSettingList;                        // 0x0698(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianThunderBeamSkill
	 * Size -> 0x0010 (FullSize[0x0320] - InheritedSize[0x0310])
	 */
	class USBMagicianThunderBeamSkill : public USBMagicianChargeMagicSkillInfo
	{
	public:
		TArray<struct FSBMagicianShotProjectileLevelSetting>       ProjectileLevelSettingList;                              // 0x0310(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianThunderMineSkill
	 * Size -> 0x0010 (FullSize[0x0320] - InheritedSize[0x0310])
	 */
	class USBMagicianThunderMineSkill : public USBMagicianChargeMagicSkillInfo
	{
	public:
		TArray<struct FSBMagicianShotProjectileLevelSetting>       ProjectileLevelSettingList;                              // 0x0310(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianThunderCloudSkill
	 * Size -> 0x0208 (FullSize[0x04E8] - InheritedSize[0x02E0])
	 */
	class USBMagicianThunderCloudSkill : public USBMagicianSkillInfo
	{
	public:
		struct FVector                                             LocationOffset;                                          // 0x02E0(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LI1R[0x4];                                   // 0x02EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      IdlingEffect;                                            // 0x02F0(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      OptionLocationInterpSpeed;                               // 0x0498(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_81WB[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckRowHandleParam>             LaunchProjectileList;                                    // 0x04A0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      LaunchProjectileCycle;                                   // 0x04B0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AWUN[0x4];                                   // 0x04B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 LaunchProjectileCycleModifyList;                         // 0x04B8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AttackRangeH;                                            // 0x04C8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DL6J[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 AttackRangeHModifyList;                                  // 0x04D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AttackRangeV;                                            // 0x04E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2OEZ[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianFireBallSkill
	 * Size -> 0x0000 (FullSize[0x0310] - InheritedSize[0x0310])
	 */
	class USBMagicianFireBallSkill : public USBMagicianChargeMagicSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianHailSkill
	 * Size -> 0x0078 (FullSize[0x0388] - InheritedSize[0x0310])
	 */
	class USBMagicianHailSkill : public USBMagicianChargeMagicSkillInfo
	{
	public:
		unsigned char                                              UnknownData_X8MJ[0x8];                                   // 0x0310(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSkillMarkerSetting                               MarkerSetting;                                           // 0x0318(0x0070) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianElementAmpSkill
	 * Size -> 0x01D0 (FullSize[0x0480] - InheritedSize[0x02B0])
	 */
	class USBMagicianElementAmpSkill : public USBSkillInfoClass
	{
	public:
		TArray<struct FSBElementAmpOptionLocationSetting>          OptionLocationList;                                      // 0x02B0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBEffectAsset                                      IdlingEffect;                                            // 0x02C0(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBElementAmpOptionElementSetting>           ElementSettingList;                                      // 0x0468(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      OptionLocationInterpSpeed;                               // 0x0478(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BackToIdlingEffectTime;                                  // 0x047C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianMeteorSkill
	 * Size -> 0x0078 (FullSize[0x0358] - InheritedSize[0x02E0])
	 */
	class USBMagicianMeteorSkill : public USBMagicianSkillInfo
	{
	public:
		unsigned char                                              UnknownData_1364[0x8];                                   // 0x02E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSkillMarkerSetting                               MarkerSetting;                                           // 0x02E8(0x0070) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianMagicBulletSkill
	 * Size -> 0x0000 (FullSize[0x0310] - InheritedSize[0x0310])
	 */
	class USBMagicianMagicBulletSkill : public USBMagicianChargeMagicSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianHPDownMPUpPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBMagicianHPDownMPUpPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FMagicianModifyMaxHPMP>                      ModifyMaxHPMPList;                                       // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianSubActionReceiveDamageDownPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBMagicianSubActionReceiveDamageDownPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBConditionCheckFloatParam>                 ReceiveDamageDownRateSettingList;                        // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianMaxMPUpWhileBattleEffectPassiveSkill
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBMagicianMaxMPUpWhileBattleEffectPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		ESBAbilityFlags                                            AbilityFlag;                                             // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ESOJ[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ModifyAddMaxMP;                                          // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianInspirationPassiveSkill
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class USBMagicianInspirationPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		struct FDataTableRowHandle                                 StatusAilmentHandle;                                     // 0x0040(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FSBMagicianInspirationSkillLevelSetting>     SkillLevelSettingList;                                   // 0x0050(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectSetting>                            EffectSettingList;                                       // 0x0060(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMagicianULTDamageUpPerkInterlockPassiveSkill
	 * Size -> 0x0020 (FullSize[0x0280] - InheritedSize[0x0260])
	 */
	class USBMagicianULTDamageUpPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_JRBW[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ElementalAddDamage;                                      // 0x0268(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4BQU[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAttackID>                                 DamageUpAttackIDList;                                    // 0x0270(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventParamPerformerVoltageGauge
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBEventParamPerformerVoltageGauge : public UObject
	{
	public:
		unsigned char                                              UnknownData_RQKB[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		bool IsFever();
		float GetRate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPCPerformerComponent
	 * Size -> 0x00D8 (FullSize[0x0288] - InheritedSize[0x01B0])
	 */
	class USBPCPerformerComponent : public USBPCClassComponentBase
	{
	public:
		unsigned char                                              UnknownData_Z17O[0x4];                                   // 0x01B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPerformerVoltageGaugeSettings                    VoltageGaugeSetting;                                     // 0x01B4(0x000C) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O148[0x8];                                   // 0x01C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 FeverTimeStatusHandle;                                   // 0x01C8(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H2RY[0x8];                                   // 0x01D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPerformerVoltageGaugeAddModifySetting>    VoltageGaugeAddModifySettingList;                        // 0x01E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KV3F[0x18];                                  // 0x01F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPerformerVoltageGaugeFeverTimeDecreaseAmountModifySetting> VoltageGaugeFeverTimeDecreaseAmountModifySettingList;    // 0x0208(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TY07[0x50];                                  // 0x0218(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        GroovyAkComponent;                                       // 0x0268(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RapidSkillTimeAllMainAbilityID;                          // 0x0270(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DGVD[0x14];                                  // 0x0274(0x0014) MISSED OFFSET (PADDING)

	public:
		void ServerSetLoopActionAttackLevel(int32_t NewAttackLevel);
		void Server_StartGroovyEffect();
		void Server_StartFeverTime();
		void Server_SetIsVoltageGaugeMax(bool IsVoltageGaugeMax);
		void Server_EndFeverTime();
		void Multicast_StartGroovyEffect();
		void Multicast_StartFeverTime();
		void Multicast_SetIsVoltageGaugeMax(bool IsVoltageGaugeMax);
		void Multicast_EndFeverTime();
		int32_t GetLoopActionAttackLevel();
		void Client_AddVoltageGaugeAmount(float AddValue, bool IsAddDuringFeverTime, bool bNotModify);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerSkillInfo
	 * Size -> 0x0050 (FullSize[0x0300] - InheritedSize[0x02B0])
	 */
	class USBPerformerSkillInfo : public USBSkillInfoClass
	{
	public:
		unsigned char                                              UnknownData_WR69[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPerformerCastVoltageGaugeAddSetting>      SkillCastVoltageGaugeAddList;                            // 0x02C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBPerformerAmpExplodeVoltageGaugeAddSetting> AmpExplodeVoltageGaugeAddList;                           // 0x02D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBPerformerAttackHitVoltageGaugeAddSetting> AttackHitVoltageGaugeAddList;                            // 0x02E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBCurveMoveSetting>                         CurveMoveSettingList;                                    // 0x02F0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerMeleeSkillInfo
	 * Size -> 0x0010 (FullSize[0x0310] - InheritedSize[0x0300])
	 */
	class USBPerformerMeleeSkillInfo : public USBPerformerSkillInfo
	{
	public:
		unsigned char                                              UnknownData_7NOM[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableAutoTarget;                                       // 0x0308(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KWTR[0x7];                                   // 0x0309(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerMeleeChargeSkillInfo
	 * Size -> 0x0030 (FullSize[0x0340] - InheritedSize[0x0310])
	 */
	class USBPerformerMeleeChargeSkillInfo : public USBPerformerMeleeSkillInfo
	{
	public:
		unsigned char                                              UnknownData_YJN0[0x8];                                   // 0x0310(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x0318(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerChargeSkillInfo
	 * Size -> 0x0030 (FullSize[0x0330] - InheritedSize[0x0300])
	 */
	class USBPerformerChargeSkillInfo : public USBPerformerSkillInfo
	{
	public:
		unsigned char                                              UnknownData_4VK8[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x0308(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerChargeMarkerSkillInfo
	 * Size -> 0x0078 (FullSize[0x03A8] - InheritedSize[0x0330])
	 */
	class USBPerformerChargeMarkerSkillInfo : public USBPerformerChargeSkillInfo
	{
	public:
		unsigned char                                              UnknownData_WGQE[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSkillMarkerSetting                               MarkerSetting;                                           // 0x0338(0x0070) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerLoopActionSkillInfo
	 * Size -> 0x0058 (FullSize[0x0358] - InheritedSize[0x0300])
	 */
	class USBPerformerLoopActionSkillInfo : public USBPerformerSkillInfo
	{
	public:
		TArray<float>                                              ConsumeStaminaAmountList;                                // 0x0300(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConsumeStaminaAmountSetting>              ConsumeStaminaAmountSettingList;                         // 0x0310(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<int32_t>                                            AttackLevelLimitList;                                    // 0x0320(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<float>                                              NextAttackLevelSecondList;                               // 0x0330(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AttackStartStaminaLowerLimit;                            // 0x0340(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S7CD[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPerformerMoveSpeedSetting>                MoveSpeedRateSettingList;                                // 0x0348(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerMainActionSkillInfo
	 * Size -> 0x0028 (FullSize[0x0338] - InheritedSize[0x0310])
	 */
	class USBPerformerMainActionSkillInfo : public USBPerformerMeleeSkillInfo
	{
	public:
		float                                                      ChargeAttackInputTime;                                   // 0x0310(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargeAttackRecastTime;                                  // 0x0314(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBEffectAsset>                              ChargeEffectList;                                        // 0x0318(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectAsset>                              MaxChargeEffectList;                                     // 0x0328(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		bool IsInputChargeMainAttack(class ASBPlayerCharacter* PlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerDodgeSkillInfo
	 * Size -> 0x0018 (FullSize[0x0300] - InheritedSize[0x02E8])
	 */
	class USBPerformerDodgeSkillInfo : public USBDodgeSkillInfo
	{
	public:
		unsigned char                                              UnknownData_NDZN[0x8];                                   // 0x02E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPerformerAmpExplodeVoltageGaugeAddSetting> AmpExplodeVoltageGaugeAddList;                           // 0x02F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerGenerateSpeakerSkillInfo
	 * Size -> 0x00B0 (FullSize[0x0458] - InheritedSize[0x03A8])
	 */
	class USBPerformerGenerateSpeakerSkillInfo : public USBPerformerChargeMarkerSkillInfo
	{
	public:
		TArray<struct FSBPerformerMarkerRangeOverrideSetting>      MarkerRangeOverrideSettingList;                          // 0x03A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         GenerateSpeakerProjectileHandleList;                     // 0x03B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<int32_t>                                            BuffSkillIDList;                                         // 0x03C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 TakeDamageDownBuffAreaProjectileHandle;                  // 0x03D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 TakeDamageDownBuffAreaProjectileHandle_Amp;              // 0x03E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		TArray<int32_t>                                            DebuffSkillIDList;                                       // 0x03F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 GiveDamageUpBuffAreaProjectileHandle;                    // 0x0408(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 GiveDamageUpBuffAreaProjectileHandle_Amp;                // 0x0418(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		TArray<int32_t>                                            HealSkillIDList;                                         // 0x0428(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 HealUpBuffAreaProjectileHandle;                          // 0x0438(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 HealUpBuffAreaProjectileHandle_Amp;                      // 0x0448(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerConcertSkillInfo
	 * Size -> 0x0000 (FullSize[0x0300] - InheritedSize[0x0300])
	 */
	class USBPerformerConcertSkillInfo : public USBPerformerSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerModifyAddVoltageGaugePassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPerformerModifyAddVoltageGaugePassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBConditionCheckFloatParam>                 ModifySettingList;                                       // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerGroovyPassiveSkill
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class USBPerformerGroovyPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBPerformerGroovyPassiveSkillSetting>       SettingList;                                             // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UParticleSystem*                                     Particle;                                                // 0x0050(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBEffectSetting>                            EffectSettingList;                                       // 0x0058(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       Event;                                                   // 0x0068(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGiveStatusAlimentPerkInterlockPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class USBPlayerGiveStatusAlimentPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		TArray<struct FSBPlayerGiveStatusAlimentPerkInterlockPassiveSkillSetting> StatusAlimentSettingList;                                // 0x0260(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      IntervalOnDynamicConditionSatisfied;                     // 0x0270(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_48O9[0x4];                                   // 0x0274(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGiveStatusAlimentValueSetPerkInterlockPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBPlayerGiveStatusAlimentValueSetPerkInterlockPassiveSkill : public USBPlayerGiveStatusAlimentPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_2GPZ[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         ValueSetStatusAlimentArray;                              // 0x0280(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerRapidSkillTimeAllPerkInterlockPassiveSkill
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class USBPerformerRapidSkillTimeAllPerkInterlockPassiveSkill : public USBPlayerGiveStatusAlimentValueSetPerkInterlockPassiveSkill
	{
	public:
		struct FDataTableRowHandle                                 RapidSkillTimeAllStatusHandle;                           // 0x0290(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPCRebellionComponent
	 * Size -> 0x0150 (FullSize[0x0300] - InheritedSize[0x01B0])
	 */
	class USBPCRebellionComponent : public USBPCClassComponentBase
	{
	public:
		unsigned char                                              UnknownData_SACE[0x30];                                  // 0x01B0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bBarrierActive;                                        // 0x01E0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EHCX[0x3];                                   // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_BarrierCurrentHP;                                      // 0x01E4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBPlayingEffect                                    m_BarrierEffect;                                         // 0x01E8(0x00C8) Transient, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnStartIntervalDependent;                                // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndIntervalDependent;                                  // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4J35[0x30];                                  // 0x02D0(0x0030) MISSED OFFSET (PADDING)

	public:
		void ServerSetShieldCounterCondition(bool bActive);
		void ServerCounterBarrierActive(bool bActive);
		void Server_StartDependent();
		void OnStartIntervalDependent__DelegateSignature();
		void OnRep_BarrierActive();
		void OnEndIntervalDependent__DelegateSignature();
		void NotifyShieldCounterPosture();
		void NotifyCounterBarrierChange(bool bActive);
		void Multicast_StartDependent();
		bool IsCounterBarrierActive();
		class USBRebellionGuardSkill* GetRebellionGuardSkill();
		float GetDependentIntervalRemainingTime();
		float GetCounterBarrierMaxHP();
		float GetCounterBarrierHP();
		bool CanDependent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionSkillInfo
	 * Size -> 0x0028 (FullSize[0x02D8] - InheritedSize[0x02B0])
	 */
	class USBRebellionSkillInfo : public USBSkillInfoClass
	{
	public:
		bool                                                       bNeedShield;                                             // 0x02B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KZ25[0x7];                                   // 0x02B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckParam>                      NotNeedShieldConditionList;                              // 0x02B8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckFloatParam>                 CastShieldDurabilityList;                                // 0x02C8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionChargeSkill
	 * Size -> 0x0030 (FullSize[0x0308] - InheritedSize[0x02D8])
	 */
	class USBRebellionChargeSkill : public USBRebellionSkillInfo
	{
	public:
		unsigned char                                              UnknownData_9WNU[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         ChargeSkillSetting;                                      // 0x02E0(0x0028) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionMarkerChargeSkill
	 * Size -> 0x0078 (FullSize[0x0380] - InheritedSize[0x0308])
	 */
	class USBRebellionMarkerChargeSkill : public USBRebellionChargeSkill
	{
	public:
		unsigned char                                              UnknownData_WE3S[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBSkillMarkerSetting                               MarkerSetting;                                           // 0x0310(0x0070) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionGuardSkill
	 * Size -> 0x01C0 (FullSize[0x0498] - InheritedSize[0x02D8])
	 */
	class USBRebellionGuardSkill : public USBRebellionSkillInfo
	{
	public:
		int32_t                                                    CounterCost;                                             // 0x02D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XY82[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      GreatGuardSuccessEffect;                                 // 0x02E0(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBGreatGuardCostSetting>                    GreatGuardCostSettingList;                               // 0x0488(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		float GetCounterCostValue(class ASBPlayerCharacter* PlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionLargeShieldSkill
	 * Size -> 0x00C8 (FullSize[0x03A0] - InheritedSize[0x02D8])
	 */
	class USBRebellionLargeShieldSkill : public USBRebellionSkillInfo
	{
	public:
		unsigned char                                              UnknownData_ISM4[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShieldWidth;                                             // 0x02E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShieldHeight;                                            // 0x02E4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShieldThickness;                                         // 0x02E8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RelativeLocation;                                        // 0x02EC(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxShieldTime;                                           // 0x02F8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7FC5[0x4];                                   // 0x02FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBRebellionLargeShieldAdjustTimeSetting>    AdjustTimeConditionList;                                 // 0x0300(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FDataTableRowHandle                                 NoShieldDamageStatusAilment;                             // 0x0310(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FSBDefenceGuardConfig                               LargeShieldGuardConfig;                                  // 0x0320(0x000C) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N8N9[0x4];                                   // 0x032C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowHandle                                 OverlapAttackProjectile;                                 // 0x0330(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FSBAttackID                                         MeleePushBackAttack;                                     // 0x0340(0x0004) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KUSU[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBRebellionLargeShieldChargeLevelSetting>   ChargeSettingList;                                       // 0x0348(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckFloatParam>                 ChargeAmountModifyList;                                  // 0x0358(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBGuardEffectSetting>                       GuardEffectSettingList;                                  // 0x0368(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckParam>                      ShockWaveConditionList;                                  // 0x0378(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBRebellionLargeShieldGuardSucceededSelfStatusAilment> GuardSucceededSelfStatusAilmentList;                     // 0x0388(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              GuardSucceededSelfStatusAilmentCountMax;                 // 0x0398(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6YQY[0x3];                                   // 0x0399(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GuardSucceededSelfStatusAilmentInterval;                 // 0x039C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		float GetShieldEnergyAmount(class ASBPlayerCharacter* PlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionShieldDashSkill
	 * Size -> 0x0038 (FullSize[0x0310] - InheritedSize[0x02D8])
	 */
	class USBRebellionShieldDashSkill : public USBRebellionSkillInfo
	{
	public:
		unsigned char                                              UnknownData_0J7V[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DashStamina;                                             // 0x02E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E2VS[0x4];                                   // 0x02E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckFloatParam>                 DashStaminaModifySettingList;                            // 0x02E8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBRebellionShieldDashDamageUpConfig>        DamageUpSettingList;                                     // 0x02F8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBAttackID                                         DashEndAttackID;                                         // 0x0308(0x0004) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U6TI[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionCounterBarrierSkill
	 * Size -> 0x02A8 (FullSize[0x0580] - InheritedSize[0x02D8])
	 */
	class USBRebellionCounterBarrierSkill : public USBRebellionSkillInfo
	{
	public:
		struct FSBEffectSetting                                    BarrierEffect;                                           // 0x02D8(0x0150) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBEffectSetting                                    BarrierDamageEffect;                                     // 0x0428(0x0150) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      BarrierHP;                                               // 0x0578(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BarrierTimeDamage;                                       // 0x057C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionPowerBurstSkill
	 * Size -> 0x0018 (FullSize[0x02F0] - InheritedSize[0x02D8])
	 */
	class USBRebellionPowerBurstSkill : public USBRebellionSkillInfo
	{
	public:
		TArray<struct FSBRebellionSpecialSkillHandle>              ChangeSkillHandleList;                                   // 0x02D8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      UseGaugeAmount;                                          // 0x02E8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SOBK[0x4];                                   // 0x02EC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionProtectionSkill
	 * Size -> 0x01E0 (FullSize[0x04B8] - InheritedSize[0x02D8])
	 */
	class USBRebellionProtectionSkill : public USBRebellionSkillInfo
	{
	public:
		struct FSBEffectAsset                                      GuardSuccessEffect;                                      // 0x02D8(0x01A8) Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckRowHandleParam>             GuardLaunchProjectileList;                               // 0x0480(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FName                                                GuardLaunchProjectileSpawnSocketName;                    // 0x0490(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             GuardLaunchProjectileOffsetFromOwner;                    // 0x0498(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             GuardLaunchProjectileOffsetFromLargeShield;              // 0x04A4(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GuardLaunchProjectileCoolDown;                           // 0x04B0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_20AI[0x4];                                   // 0x04B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionTauntSkill
	 * Size -> 0x0040 (FullSize[0x02F0] - InheritedSize[0x02B0])
	 */
	class USBRebellionTauntSkill : public USBSkillInfoClass
	{
	public:
		TArray<struct FSBAttackID>                                 NotCorrespondingAttackIDList;                            // 0x02B0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckRowHandleParam>             GiveStatusAilmentList;                                   // 0x02C0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckRowHandleParam>             DeactiveSelfStatusAilmentList;                           // 0x02D0(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      GraceTime;                                               // 0x02E0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxNumCharacterGiveStatus;                               // 0x02E4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsBattleImagineGiveStatusAilment;                        // 0x02E8(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q25P[0x7];                                   // 0x02E9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionShieldPressureSkill
	 * Size -> 0x0010 (FullSize[0x02E8] - InheritedSize[0x02D8])
	 */
	class USBRebellionShieldPressureSkill : public USBRebellionSkillInfo
	{
	public:
		TArray<struct FDataTableRowHandle>                         ChangeSkillHandleList;                                   // 0x02D8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionHateCollectSkill
	 * Size -> 0x0028 (FullSize[0x03A8] - InheritedSize[0x0380])
	 */
	class USBRebellionHateCollectSkill : public USBRebellionMarkerChargeSkill
	{
	public:
		TArray<struct FSBConditionCheckParam>                      AttackHitAddShieldDurabilityConditionList;               // 0x0380(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AttackHitAddShieldDurabilityRate;                        // 0x0390(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttackHitAddShieldDurabilityRateMax;                     // 0x0394(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBRebellionHateCollectHitStatusAilmentConfig> HitStatusAilmentConfigList;                              // 0x0398(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionGlitterModeSkill
	 * Size -> 0x0040 (FullSize[0x0318] - InheritedSize[0x02D8])
	 */
	class USBRebellionGlitterModeSkill : public USBRebellionSkillInfo
	{
	public:
		struct FDataTableRowHandle                                 GlitterModeStatus;                                       // 0x02D8(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FSBRebellionGlitterModeStatusAlimentModifySetting> GlitterModeStatusModifyParamList;                        // 0x02E8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      EnergyAmoountMax;                                        // 0x02F8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GuardAddEnergy;                                          // 0x02FC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FDataTableRowHandle>                         GaugeBuffList;                                           // 0x0300(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      GaugeBuffRange;                                          // 0x0310(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GaugeBuffPlayerNum;                                      // 0x0314(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionLargeShieldSeparationPassiveSkill
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBRebellionLargeShieldSeparationPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionLargeShieldExtendTimePassiveSkill
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBRebellionLargeShieldExtendTimePassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		float                                                      ExtendTime;                                              // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YCL5[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionShieldGaugeDamageMagnificationPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBRebellionShieldGaugeDamageMagnificationPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBConditionCheckFloatCurveParam>            DamageMagnificationCurveSettings;                        // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionDependentPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBRebellionDependentPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		int32_t                                                    SkillId;                                                 // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Interval;                                                // 0x0044(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBRebellionDependentPassiveSkillSetting>    SettingList;                                             // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionAttractSkill
	 * Size -> 0x0010 (FullSize[0x0390] - InheritedSize[0x0380])
	 */
	class USBRebellionAttractSkill : public USBRebellionMarkerChargeSkill
	{
	public:
		TArray<struct FSBRebellionAttractSkillProjectileHitConfig> ProjectileHitConfigList;                                 // 0x0380(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionGlitterModeDamageUpPerkInterlockPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class USBRebellionGlitterModeDamageUpPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_X1WW[0x8];                                   // 0x0260(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              BaseDamageUpRateByGlitterModeLevelArray;                 // 0x0268(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRebellionResurrectionPerkInterlockPassiveSkill
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class USBRebellionResurrectionPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		float                                                      Distance;                                                // 0x0260(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2EU7[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPCSmasherComponent
	 * Size -> 0x04B8 (FullSize[0x0668] - InheritedSize[0x01B0])
	 */
	class USBPCSmasherComponent : public USBPCClassComponentBase
	{
	public:
		unsigned char                                              UnknownData_EXDR[0x80];                                  // 0x01B0(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxBoostCartridge;                                       // 0x0230(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialBoostCartridge;                                   // 0x0234(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBSmasherReloadSettingGroup                        ReloadSetting;                                           // 0x0238(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      MaxReloadBonusBoostCartridge;                            // 0x0258(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_597E[0x98];                                  // 0x025C(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBWeaponAnimationPlayParam                         m_WeaponSheatheAnimationParam;                           // 0x02F4(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBWeaponAnimationPlayParam                         m_WeaponUnsheatheAnimationParam;                         // 0x0304(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9129[0x2D4];                                 // 0x0314(0x02D4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartIntervalRevolution;                               // 0x05E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndIntervalRevolution;                                 // 0x05F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9457[0x58];                                  // 0x0608(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    GiveScapeArmorMainAbilityID;                             // 0x0660(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CKE0[0x4];                                   // 0x0664(0x0004) MISSED OFFSET (PADDING)

	public:
		void StopWeaponBallRotatingEffect();
		void StartWeaponBallRotatingEffect(const struct FRotator& RotationSpeed);
		void SetBoostCartridgeReloadType(ESBSmasherReloadType InType);
		void ServerSetSwingRushAttackLevel(int32_t NewAttackLevel);
		void ServerSetLastSetupSkillConsumedBoostCartridgeAmount(ESkillActionPosition Position, float NewConsumeAmount);
		void ServerSetDustStormAttackLevel(int32_t NewAttackLevel);
		void Server_RequestRevolution();
		void OnStartIntervalRevolution__DelegateSignature();
		void OnEndIntervalRevolution__DelegateSignature();
		void NotifySendStatusAilmentByQuickShotBuffCharge();
		void Multicast_RequestRevolution();
		bool IsStoneBodyActive();
		bool IsPowerReloadActive();
		bool IsHealBulletActive();
		bool IsBallShooting();
		bool IsBallShootHitToTarget(ESkillActionPosition Position);
		bool IsBallShootBallReturning(ESkillActionPosition Position);
		bool IsApplyBallShootHitDamage(ESkillActionPosition Position);
		void InterruptBallShootAll(bool bImmediatelyBallReturn);
		void InterruptBallShoot(ESkillActionPosition Position, bool bImmediatelyBallReturn);
		int32_t GetSwingRushAttackLevel();
		float GetRevolutionIntervalRemainingTime();
		float GetMaxBoostCartridge();
		float GetLastSetupSkillConsumedBoostCartridgeAmount();
		int32_t GetDustStormAttackLevel();
		float GetCurrentBoostCartridge();
		float GetBoostCartridgeQuickReloadAmount();
		void ConsumeBoostCartridgeBySkill(ESkillActionPosition Position, int32_t SettingIndex);
		void ClientStartDecreaseConsumeBoostCartridgeByBattleStatus(float Amount);
		void ClientEndDecreaseConsumeBoostCartridgeByBattleStatus(float Amount);
		bool CanStartBoostCartridgeConsumptionSkillAction(bool bNotification, ESkillActionPosition Position, int32_t SettingIndex);
		bool CanStartBallShootTypeSkill(bool bNotification, ESkillActionPosition Position, bool bCheckBoostCartridgeAmount, int32_t CartridgeConsumeSettingIndex);
		bool CanRevolution();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherSkillInfo
	 * Size -> 0x0098 (FullSize[0x0348] - InheritedSize[0x02B0])
	 */
	class USBSmasherSkillInfo : public USBSkillInfoClass
	{
	public:
		TArray<struct FSBSmasherBoostCartridgeAmountRequiredForCastSkillSetting> BoostCartridgeAmountRequiredForCastSkillSettingList;     // 0x02B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bCheckCartridgeAmountBeforeCastSkill;                    // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QINC[0x7];                                   // 0x02C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBSmasherSkillConsumeBoostCartridgeSetting> SkillConsumeBoostCartridgeSettingList;                   // 0x02C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bConsumeBoostCartridgeAtCastSkill;                       // 0x02D8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayShortageCartridgeSound;                             // 0x02D9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3VV6[0x6];                                   // 0x02DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ShortageCartridgeSound[0x28];                            // 0x02E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		struct FAkEventVariables                                   ShortageCartridgeSoundParam;                             // 0x0308(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherBallShootTypeSkillInfo
	 * Size -> 0x03B0 (FullSize[0x06F8] - InheritedSize[0x0348])
	 */
	class USBSmasherBallShootTypeSkillInfo : public USBSmasherSkillInfo
	{
	public:
		float                                                      BallShootReturnMoveSpeed;                                // 0x0348(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            BallShootBallRotate;                                     // 0x034C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      BallReturnThreshold;                                     // 0x0358(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BallLocationShiftAmount;                                 // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowReturnBallEffect;                                   // 0x0360(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OSE3[0x7];                                   // 0x0361(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      ReturnBallEffectSetting;                                 // 0x0368(0x01A8) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bShowBeamEffectToBall;                                   // 0x0510(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ILBO[0x7];                                   // 0x0511(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              BeamEmitterTemplateToBall[0x28];                         // 0x0518(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FName                                                BeamStartSocketName;                                     // 0x0540(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowBallReturnTimingEffect;                             // 0x0548(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T48W[0x7];                                   // 0x0549(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      BallReturnTimingEffectSetting;                           // 0x0550(0x01A8) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherMainActionSkillInfo
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USBSmasherMainActionSkillInfo : public USBSmasherSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherSubActionSkillInfo
	 * Size -> 0x0068 (FullSize[0x0760] - InheritedSize[0x06F8])
	 */
	class USBSmasherSubActionSkillInfo : public USBSmasherBallShootTypeSkillInfo
	{
	public:
		unsigned char                                              UnknownData_TMZK[0x8];                                   // 0x06F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BallShootHitStatusAlimentApplyHitCount;                  // 0x0700(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KDXG[0x4];                                   // 0x0704(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         BallShootHitStatusAlimentHandleList;                     // 0x0708(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBPlayerSkillChargeSetting                         ChargeShotChargeSetting;                                 // 0x0718(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBSmasherSubActionChargeShotApplyStatusAlimentSetting> ChargeShotApplyStatusAlimentSettingList;                 // 0x0740(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBSmasherSubActionChargeShotFinalHitSpawnProjectileSetting> ChargeShottFinalHitSpawnProjectileSettingList;           // 0x0750(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherJumpingHammerSkillInfo
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USBSmasherJumpingHammerSkillInfo : public USBSmasherSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherRockNeedleSkillInfo
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USBSmasherRockNeedleSkillInfo : public USBSmasherSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherJudgementHammerSkillInfo
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USBSmasherJudgementHammerSkillInfo : public USBSmasherSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherPowerShotSkillInfo
	 * Size -> 0x0030 (FullSize[0x0728] - InheritedSize[0x06F8])
	 */
	class USBSmasherPowerShotSkillInfo : public USBSmasherBallShootTypeSkillInfo
	{
	public:
		unsigned char                                              UnknownData_I96C[0x8];                                   // 0x06F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillChargeSetting                         PowerShotChargeSetting;                                  // 0x0700(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherGravityDiveSkillInfo
	 * Size -> 0x0028 (FullSize[0x0720] - InheritedSize[0x06F8])
	 */
	class USBSmasherGravityDiveSkillInfo : public USBSmasherBallShootTypeSkillInfo
	{
	public:
		float                                                      DiveMoveSpeed;                                           // 0x06F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DiveMoveEndDistanceThreshold;                            // 0x06FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LimitDiveMoveTime;                                       // 0x0700(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LimitDiveMoveDistance;                                   // 0x0704(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CheckAdditionalInputTimeToDiveMove;                      // 0x0708(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IgnoreAdditionalInputTimeFromDiveMoveStart;              // 0x070C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        AdditionalInputCommandList;                              // 0x0710(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherGravityShotSkillInfo
	 * Size -> 0x0000 (FullSize[0x06F8] - InheritedSize[0x06F8])
	 */
	class USBSmasherGravityShotSkillInfo : public USBSmasherBallShootTypeSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherBoostSmashSkillInfo
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USBSmasherBoostSmashSkillInfo : public USBSmasherSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherSwingRushSkillInfo
	 * Size -> 0x0050 (FullSize[0x0748] - InheritedSize[0x06F8])
	 */
	class USBSmasherSwingRushSkillInfo : public USBSmasherBallShootTypeSkillInfo
	{
	public:
		TArray<float>                                              ConsumeStaminaAmountList;                                // 0x06F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBSmasherAttackLevelSetting>                AttackLevelSettingList;                                  // 0x0708(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AttackStartStaminaLowerLimit;                            // 0x0718(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBPassiveArtsID                                    ApplyConsumeStaminaScalePassiveArtsID;                   // 0x071C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ConsumeStaminaScaleByPassiveArts;                        // 0x0720(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TPBZ[0x4];                                   // 0x0724(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBSmasherMoveSpeedSetting>                  MoveSpeedRateSettingList;                                // 0x0728(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectAsset>                              LevelUpEffectList;                                       // 0x0738(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherDustStormSkillInfo
	 * Size -> 0x0058 (FullSize[0x03A0] - InheritedSize[0x0348])
	 */
	class USBSmasherDustStormSkillInfo : public USBSmasherSkillInfo
	{
	public:
		TArray<float>                                              ConsumeStaminaAmountList;                                // 0x0348(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBConsumeStaminaAmountSetting>              ConsumeStaminaAmountSettingList;                         // 0x0358(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBSmasherAttackLevelSetting>                AttackLevelSettingList;                                  // 0x0368(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      AttackStartStaminaLowerLimit;                            // 0x0378(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3UO1[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBSmasherMoveSpeedSetting>                  MoveSpeedRateSettingList;                                // 0x0380(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectAsset>                              LevelUpEffectList;                                       // 0x0390(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherPowerReloadSkillInfo
	 * Size -> 0x0200 (FullSize[0x0548] - InheritedSize[0x0348])
	 */
	class USBSmasherPowerReloadSkillInfo : public USBSmasherSkillInfo
	{
	public:
		int32_t                                                    DamageUpRate;                                            // 0x0348(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LJ90[0x4];                                   // 0x034C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBSmasherDamageUpRateModifyConditionSetting> DamageUpRateModifyConditionSettingList;                  // 0x0350(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBSmasherReloadSettingGroup                        ReloadSetting;                                           // 0x0360(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBSmasherBoostCartridgeDecreaseConsumptionSetting  DecreaseConsumeBoostCartridgeSetting;                    // 0x0380(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       bShowEffectOnWeaponBall;                                 // 0x0398(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QJX9[0x7];                                   // 0x0399(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBEffectAsset                                      EffectOnWeaponBallSetting;                               // 0x03A0(0x01A8) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherStoneBodySkillInfo
	 * Size -> 0x0038 (FullSize[0x0380] - InheritedSize[0x0348])
	 */
	class USBSmasherStoneBodySkillInfo : public USBSmasherSkillInfo
	{
	public:
		unsigned char                                              UnknownData_DF2T[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBDefenceGuardConfig                               DefenseGuardConfig;                                      // 0x0350(0x000C) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      HPToShieldDurabilityRate;                                // 0x035C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBConditionCheckFloatParam>                 HPToShieldDurabilityRateModifySettingList;               // 0x0360(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBGuardEffectSetting>                       GuardEffectSettingList;                                  // 0x0370(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherHealBulletSkillInfo
	 * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
	 */
	class USBSmasherHealBulletSkillInfo : public USBSmasherSkillInfo
	{
	public:
		TArray<struct FDataTableRowHandle>                         HealProjectileHandleList;                                // 0x0348(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBSmasherReloadSettingGroup                        ReloadSetting;                                           // 0x0358(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherQuickShotSkillInfo
	 * Size -> 0x0078 (FullSize[0x0770] - InheritedSize[0x06F8])
	 */
	class USBSmasherQuickShotSkillInfo : public USBSmasherBallShootTypeSkillInfo
	{
	public:
		unsigned char                                              UnknownData_XTW1[0x8];                                   // 0x06F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                QuickShotChargeSectionAnimTag;                           // 0x0700(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBPlayerSkillChargeSetting                         QuickShotChargeSetting;                                  // 0x0708(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FName                                                ApplySelfBuffChargeSectionAnimTag;                       // 0x0730(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBPlayerSkillChargeSetting                         ApplySelfBuffChargeSetting;                              // 0x0738(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBQuickShotChargeSendStatusAilmentSetting>  ApplySelfBuffSettingList;                                // 0x0760(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherEarthQuakeSkillInfo
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class USBSmasherEarthQuakeSkillInfo : public USBSmasherSkillInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherPassiveSkill
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBSmasherPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherBallShootReduceConsumeBoostCartridgePassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBSmasherBallShootReduceConsumeBoostCartridgePassiveSkill : public USBSmasherPassiveSkill
	{
	public:
		TArray<struct FSBPassiveBallShootReduceConsumeSetting>     ReduceConsumeSettingList;                                // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherSuperArmorReceiveDamageDownPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBSmasherSuperArmorReceiveDamageDownPassiveSkill : public USBSmasherPassiveSkill
	{
	public:
		TArray<struct FSBPassiveSuperArmorReceiveDamageDownSetting> ReceiveDamageDownSettingList;                            // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherBoostCartridgeMaxDownHPMaxUpPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBSmasherBoostCartridgeMaxDownHPMaxUpPassiveSkill : public USBSmasherPassiveSkill
	{
	public:
		TArray<struct FSmasherModifyMaxHPBoostCartridge>           ModifyMaxHPBoostCartridgeList;                           // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherBallShootFinalHitGiveMoveSpeedDownPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBSmasherBallShootFinalHitGiveMoveSpeedDownPassiveSkill : public USBSmasherPassiveSkill
	{
	public:
		TArray<struct FSmasherStatusAlimentSkillSetting>           GiveStatusAlimentSettingList;                            // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherBallShootFinalHitSpawnShockWaveSkillInfo
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBSmasherBallShootFinalHitSpawnShockWaveSkillInfo : public USBSmasherPassiveSkill
	{
	public:
		TArray<struct FSmasherShockWaveProjectileHandleSetting>    ShockWaveProjectileHandleSettingList;                    // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherRevolutionPassiveSkill
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class USBSmasherRevolutionPassiveSkill : public USBSmasherPassiveSkill
	{
	public:
		float                                                      IntervalTime;                                            // 0x0040(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P4EE[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSmasherRevolutionPassiveSkillSetting>       ReduceRecastTimeSettingList;                             // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectSetting>                            EffectSettingList;                                       // 0x0058(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBEffectSetting>                            IntervalEffectSettingList;                               // 0x0068(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherGiveScapeArmorPerkInterlockPassiveSkill
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class USBSmasherGiveScapeArmorPerkInterlockPassiveSkill : public USBPlayerGiveStatusAlimentValueSetPerkInterlockPassiveSkill
	{
	public:
		struct FDataTableRowHandle                                 ScapeArmorStatusHandle;                                  // 0x0290(0x0010) Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      IntervalSec;                                             // 0x02A0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YTO9[0x4];                                   // 0x02A4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSmasherForceCriticalOnQuickReloadProbabilityPerkInterlockPassiveSkill
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBSmasherForceCriticalOnQuickReloadProbabilityPerkInterlockPassiveSkill : public USBPlayerGiveStatusAlimentValueSetPerkInterlockPassiveSkill
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformanceCamera
	 * Size -> 0x0050 (FullSize[0x0A70] - InheritedSize[0x0A20])
	 */
	class ASBPerformanceCamera : public ASBAimCamera
	{
	public:
		unsigned char                                              UnknownData_GU2T[0x28];                                  // 0x0A20(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    m_SphereCollision;                                       // 0x0A48(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBSkeletalMeshComponent*                            MeshComp;                                                // 0x0A50(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A5VE[0x18];                                  // 0x0A58(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetupULTPerformance(bool bEnable);
		void SetupSceneCapture();
		void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnAttachActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
		bool IsPlayULT();
		bool IsApplyULT();
		bool IsApplySceneCapture();
		bool IsApplyCameraMotion();
		float GetBodyDifferenceCorrection();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformanceCheckCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPerformanceCheckCheatCommand : public UObject
	{
	public:
		void ShowServerFrameTime();
		void SetInfiniteSkill(bool Flag);
		void SetEnableUI(bool enable);
		void SetCameraRotation(float Pitch, float Yaw, float Roll);
		void PerformanceCheckStop();
		void PerformanceCheckStartHeight(int32_t Height);
		void PerformanceCheckStart();
		void PerformanceCheckSplitNum(int32_t Num);
		void PerformanceCheckShow();
		void PerformanceCheckSetTargetMap(const class FString& Map);
		void PerformanceCheckSetStartTime(float Time, int32_t diff);
		void PerformanceCheckSetSkillDelay(float Delay);
		void PerformanceCheckSetScreenShot(bool enable);
		void PerformanceCheckSetQuickTimer(bool enable);
		void PerformanceCheckSetOffset(float X, float Y, float Z);
		void PerformanceCheckSetMultiPlayerMode(bool enable);
		void PerformanceCheckSetLongLoopTime(float LoopTime);
		void PerformanceCheckSetLocationCheckOnly(bool enable);
		void PerformanceCheckSetCustomLocation(bool isCustomLocation);
		void PerformanceCheckSetCSVDelay(float csvDelay);
		void PerformanceCheckSetCenter(float X, float Y);
		void PerformanceCheckSetCameraWaitTime(float Time);
		void PerformanceCheckSetBotMode(bool isBotMode);
		void PerformanceCheckSetAction(const class FString& Action);
		void PerformanceCheckNo(int32_t No);
		void PerformanceCheckMultiInit();
		void PerformanceCheckFallWaitTime(int32_t WaitTime);
		void PerformanceCheckDistance(int32_t Distance);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformanceCheckComponent
	 * Size -> 0x0088 (FullSize[0x0140] - InheritedSize[0x00B8])
	 */
	class USBPerformanceCheckComponent : public USBPlayerControllerComponentBase
	{
	public:
		bool                                                       bRunning;                                                // 0x00B8(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PGP3[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    StartHeight;                                             // 0x00BC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Distance;                                                // 0x00C0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FallWaitTime;                                            // 0x00C4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    SplitNum;                                                // 0x00C8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    CurrentNo;                                               // 0x00CC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Center;                                                  // 0x00D0(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Location;                                                // 0x00DC(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              LevelName;                                               // 0x00E8(0x0010) BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              TargetMap;                                               // 0x00F8(0x0010) BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LoopTime;                                                // 0x0108(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EGameInput                                                 ActionInput;                                             // 0x010C(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1G36[0x3];                                   // 0x010D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SkillDelay;                                              // 0x0110(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBotMode;                                                // 0x0114(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCustomLocation;                                         // 0x0115(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJC0[0x2];                                   // 0x0116(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LocationOffset;                                          // 0x0118(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      csvDelay;                                                // 0x0124(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TimeDiff;                                                // 0x0128(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bScreenShot;                                             // 0x012C(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bQuickTimer;                                             // 0x012D(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLocationCheckOnly;                                      // 0x012E(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMultiPlayerMode;                                        // 0x012F(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ActionReleaseCount;                                      // 0x0130(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    StartTime;                                               // 0x0134(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LongLoopTime;                                            // 0x0138(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CameraWaitTime;                                          // 0x013C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void TeleportToOffsetLocation(float deg);
		void TeleportToLocation();
		void SaveGroundLocation();
		void PerformanceCheckAction();
		void OnPerformanceCheckStop();
		void OnPerformanceCheckStart();
		void CalcLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPerformerAmpExplodeSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPerformerAmpExplodeSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModeBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPhotoModeBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsPhotoModeImageUploadNumMax(class UObject* InWorldContextObject);
		bool IsPhotoModeImageLockNumMax(class UObject* InWorldContextObject);
		void GetPhotoModeUploadedImageURLList(TArray<struct FPhotoModeUploadedImageInfo> InImageInfos, TArray<class FString>* OutImageURLs);
		class FString GetPhotoModeUploadedImageURL(const class FString& InImagePath);
		void GetPhotoModeUploadedImageThumbnailURLList(TArray<struct FPhotoModeUploadedImageInfo> InImageInfos, TArray<class FString>* OutImageThumbURLs);
		class FString GetPhotoModeUploadedImageThumbnailURL(const class FString& InImagePath);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModePlayerControlData
	 * Size -> 0x00F8 (FullSize[0x0120] - InheritedSize[0x0028])
	 */
	class USBPhotoModePlayerControlData : public UObject
	{
	public:
		unsigned char                                              UnknownData_0RRU[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnUpdateToDetailDelegate;                                // 0x0048(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HR9O[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBPlayerState*                                      Target;                                                  // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IWJ0[0xA0];                                  // 0x0068(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBCharaCreateCharacter*                             __CloneCharacter;                                        // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6G8A[0x10];                                  // 0x0110(0x0010) MISSED OFFSET (PADDING)

	public:
		void ToggleLookAtEyeActive();
		void ToggleLookAtActive();
		void ToggleFixHead();
		void ToggleFixEye();
		void SetWeaponVisibility(bool bValue);
		void SetVisibility(bool bValue);
		void SetRotateSpeedInput(float Value);
		void SetPlayerVisibility(bool bValue);
		void SetPale(float Value);
		void SetOriginalLocation(const struct FVector& Value);
		void SetMoveRightSpeedInput(float Value);
		void SetMoveForwardSpeedInput(float Value);
		void SetMotionStop(bool bValue);
		void SetLookAtEyeActive(bool bValue);
		void SetLookAtActive(bool bValue);
		void SetLipSyncType(ESBLipSyncType Value);
		void SetLastEmoteName(const class FString& EmoteStateName);
		void SetFixHead(bool bValue);
		void SetFixEye(bool bValue);
		void SetFacialType(ESBFacialType Value);
		void SetEnableFacial(bool bValue);
		void SetCopyPose(bool bValue);
		void SetCloseEyes(bool bValue);
		void SetCloneCharacter(class ASBCharaCreateCharacter* Value);
		void SetBlush(float Value);
		void SBOnUpdateDelegate__DelegateSignature();
		void ResetLookAt();
		void RequestEmoteByEmoteName(const class FName& EmoteName);
		void RequestEmote(const class FName& EmoteId);
		bool IsVisible();
		bool IsValidRequestEmoteName();
		bool IsValidLastEmoteName();
		bool IsValidData();
		bool IsValidCloneCharacter();
		bool IsPlayerVisible();
		bool IsOriginalPlayerData();
		bool IsMotionStop();
		bool IsLookAtEyeActive();
		bool IsLookAtActive();
		bool IsFixHead();
		bool IsFixEye();
		bool IsEnableFacial();
		bool IsEnabledLookAtEyeActive();
		bool IsEnabledLookActive();
		bool IsCopyPose();
		bool IsCloseEyes();
		bool GetWeaponVisibility();
		class ASBCreationCharacter* GetTargetCharacter();
		class ASBPlayerState* GetTarget();
		class ASBPlayerCharacter* GetPlayerCharacter();
		struct FSBPlatformInfo GetPlatformInfo();
		float GetPale();
		ESBLipSyncType GetLipSyncType();
		class FName GetLastEmoteName();
		ESBFacialType GetFacialType();
		class ASBCharaCreateCharacter* GetCloneCharacter();
		class FString GetCharacterName();
		class FName GetCharacterId();
		float GetBlush();
		void DestroyCloneCharacter();
		void CreateOrDestroyCloneCharacter(bool bInCreate, class UObject* InParent, bool bInCopyPose);
		bool CanControlVisibility();
		bool CanControlMotionStop();
		bool CanControlClone();
		void BP_OnChangeWeaponVisibility();
		void BP_CreateCloneCharacter(class UObject* InParent, bool bInCopyPose);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModeController
	 * Size -> 0x0160 (FullSize[0x06D8] - InheritedSize[0x0578])
	 */
	class ASBPhotoModeController : public APlayerController
	{
	public:
		class UClass*                                              PhotoModePawnClassAsset;                                 // 0x0578(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              PlayerControlDatanClassAsset;                            // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBPlayerController*                                 OriginalControllerRef;                                   // 0x0588(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPlayer*                                             OriginalPlayer;                                          // 0x0590(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              OriginalPlayerCharacter;                                 // 0x0598(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBPlayerState*                                      OriginalPlayerState;                                     // 0x05A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class APlayerCameraManager*                                OriginalPlayerCameraManager;                             // 0x05A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H6EI[0x8];                                   // 0x05B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidget*                                             BgWidget;                                                // 0x05B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreQuitPhotoModeByDisableInput;                      // 0x05C0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NDCF[0x37];                                  // 0x05C1(0x0037) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBPlayerState*                                      SelectedPlayer;                                          // 0x05F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                SelectedCharacterId;                                     // 0x0600(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FName, class USBPhotoModePlayerControlData*>    PlayerControlDataMap;                                    // 0x0608(0x0050) NativeAccessSpecifierPrivate
		TArray<class USBPhotoModePlayerControlData*>               PlayerControlDataList;                                   // 0x0658(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class USBPhotoModePlayerControlData*>               PlayerControlInvalidDataList;                            // 0x0668(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class USBPhotoModePlayerControlData*>               PlayerControlValidDataList;                              // 0x0678(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    CloneCountMax;                                           // 0x0688(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsCloneCountMax;                                        // 0x068C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S732[0x1B];                                  // 0x068D(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FKey                                                MoveUpKey;                                               // 0x06A8(0x0018) BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FKey                                                MoveDownKey;                                             // 0x06C0(0x0018) BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdatePlayerControlDataList();
		float UiYawToCameraYaw(float UiYaw);
		void ToggleUiVisible();
		void ToggleTalkMode();
		void TogglePlayerControlView();
		void ToggleMotionStop();
		void ToggleControlMode();
		void ToggleCameraControlView();
		void ToggleAllLookAtEyeActive();
		void ToggleAllLookAtActive();
		void ToggleAllFixHead();
		void ToggleAllFixEye();
		void SetOverrideTime(float Value);
		void SetOtherPlayerVisibility(bool bValue);
		void SetLookAtPlayer(bool bValue);
		void SetFOV(float Value, bool bByUi);
		void SetEnableOverrideTime(bool bValue);
		void SetDebugValidAllPlayer(bool bValue);
		void SetAllWeaponVisibility(bool bValue);
		void SetAllVisibility(bool bValue);
		void SetAllMotionStop(bool bValue);
		void SetAllLookAtEyeActive(bool bValue);
		void SetAllLookAtActive(bool bValue);
		void SetAllFixHead(bool bValue);
		void SetAllFixEye(bool bValue);
		void SetAllClone(bool bValue);
		class USBPhotoModePlayerControlData* SelectPlayer(class ASBPlayerState* Target, const class FName& CharacterId);
		void ResetCamera();
		void ResetAllLookAt();
		void RequestQuitPhotoModeMain();
		void RequestQuitPhotoMode();
		void ReceiveOnPreDeactivate(class APlayerController* OriginalPC);
		void ReceiveOnPostActivate(class APlayerController* OriginalPC);
		void ReceiveOnDeactivate(class APlayerController* RestoredPC);
		void ReceiveOnActivate(class APlayerController* OriginalPC);
		void QuitPhotoModeMain();
		void QuitPhotoMode();
		void OnUpdatePlayerControlData();
		void OnReplicatedPlayerState(class UObject* Sender, class UObject* Param);
		void OnEndPlayerCharacter(class UObject* Sender, class UObject* Param);
		void OnCloseChatWindow(class UObject* Sender, class UObject* Param);
		void OnChangeTalkMode(bool bInTalkMode, bool bPreChange);
		void OnChangeLookAtPlayer(bool bValue);
		void OnChangeLastEmoteStateName(class UObject* Sender, class UObject* Param);
		void OnChangeFov(float Value, bool bByUi);
		void OnChangeControlMode(bool bInPlayerControlMode, bool bPreChange);
		void OnBeginPlayerCharacter(class UObject* Sender, class UObject* Param);
		bool IsShowDebugUi();
		bool IsShowConfirmQuitDialog();
		bool IsOtherPlayerVisibility();
		bool IsLookAtPlayer();
		bool IsEnableOverrideTime();
		bool IsDebugValidAllPlayer();
		bool IsAllVisible();
		bool IsAllMotionStop();
		bool IsAllLookAtEyeActive();
		bool IsAllLookAtActive();
		bool IsAllFixHead();
		bool IsAllFixEye();
		bool IsAllEnabledLookAtEyeActive();
		bool IsAllEnabledLookActive();
		bool IsAllClone();
		void InputSkillAction(ESkillActionPosition Position, bool bPressed);
		class USBPhotoModePlayerControlData* GetSelectedPlayerControlData();
		class USBPhotoModePlayerControlData* GetPlayerControlDataByCloneCharacter(class ASBCreationCharacter* Target);
		class USBPhotoModePlayerControlData* GetPlayerControlData(class ASBPlayerState* Target, const class FName& CharacterId, bool bMakeIfNotFound);
		float GetOverrideTime();
		struct FVector GetOriginLocation();
		void GetOriginalPlayerViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
		class USBPhotoModePlayerControlData* GetOriginalPlayerControlData();
		float GetFOV();
		int32_t GetCloneCount();
		void GetCameraResetViewPoint(float SphereRadius, struct FVector* OutLocation, struct FRotator* OutRotation);
		struct FVector GetCameraLocation();
		bool GetAllWeaponVisibility();
		bool CanControlAllVisibility();
		bool CanControlAllMotionStop();
		bool CanControlAllClone();
		void CancelPhotoModePadPressed();
		void CancelPhotoMode();
		float CameraYawToUiYaw(float CameraYaw);
		void BP_TogglePlayerControlView();
		void BP_ToggleCameraControlView();
		void BP_ResetCamera();
		void BP_OnUpdatePlayerControlData();
		void BP_OnRequestQuitPhotoMode();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModeImageComponent
	 * Size -> 0x0048 (FullSize[0x0100] - InheritedSize[0x00B8])
	 */
	class USBPhotoModeImageComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUploadPhotoModeImageDelegate;                          // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadUploadedImageInfoDelegate;                         // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetUploadedImageLockFlagDelegate;                      // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUploadImageEditInfoDelegate;                           // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TBT6[0x8];                                   // 0x00F8(0x0008) MISSED OFFSET (PADDING)

	public:
		bool UploadImageEditInfo_Request(const struct FPlayerProfileBgImageInfo& InImageInfos);
		bool UploadImage_Request(const class FString& InCharacterId, TArray<unsigned char> InPNGData);
		bool SetUploadedImageLockFlags_Request(const class FString& InCharacterId, TArray<struct FPhotoModeUploadedImageInfo> InImageInfos);
		void Server_UploadImageEditInfo(const struct FPlayerProfileBgImageInfo& InImageInfos);
		void Server_SetUploadedImageLockFlags(const class FString& InCharacterId, TArray<struct FPhotoModeUploadedImageInfo> InImageInfos);
		void Server_OnUploadImageEditInfo(bool Result);
		void Server_OnSetUploadedImageLockFlags(bool Result, TArray<struct FPhotoModeUploadedImageInfo> ImageInfos);
		void Server_OnLoadUploadedImageInfo(bool Result, TArray<struct FPhotoModeUploadedImageInfo> ImageInfos);
		void Server_LoadUploadedImageInfo(const class FString& InCharacterId);
		void OnUploadPhotoModeImageDelegate__DelegateSignature(bool bResult);
		void OnUploadImageEditInfoDelegate__DelegateSignature(bool Result);
		void OnSetUploadedImageLockFlagDelegate__DelegateSignature(bool Result);
		void OnLoadUploadedImageInfoDelegate__DelegateSignature(bool Result);
		bool LoadUploadedImageInfo_Request(const class FString& InCharacterId);
		bool IsPhotoModeUploadedImageLoadedFromDB();
		void Client_UploadImageEditInfo(bool Result);
		void Client_SetUploadedImageLockFlags(bool Result, TArray<struct FPhotoModeUploadedImageInfo> ImageInfos);
		void Client_LoadUploadedImageInfo(bool Result, TArray<struct FPhotoModeUploadedImageInfo> ImageInfos);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModeUploadWindowMenu
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBPhotoModeUploadWindowMenu : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_U7Y6[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetThumbnailTexture2D_Cpp();
		void SetThumbnailTexture2D_Bp();
		void Reset_Cpp();
		void Reset_Bp();
		int32_t GetDebugValue();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModeThumbnailData
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBPhotoModeThumbnailData : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     ThumbnailWidgetSwitcher;                                 // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RRC9[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		bool SetThumbnailTexture_Cpp(class UTexture2DDynamic* Texture, TArray<unsigned char> InImagePNGData);
		bool SetThumbnailTexture_Bp(class UTexture2DDynamic* Texture, TArray<unsigned char> InImagePNGData);
		void SetIsUpload_Cpp(bool bIsUpload);
		void SetIsUpload_Bp(bool bIsUpload);
		void Reset_Cpp();
		void Reset_Bp();
		class UTexture2DDynamic* GetThumbnailTexture_Internal();
		class UTexture2DDynamic* GetThumbnailTexture_Cpp();
		class UTexture2DDynamic* GetThumbnailTexture_Bp();
		bool GetIsUpload_Cpp();
		bool GetIsUpload_Bp();
		void GetImagePNGData_Cpp(TArray<unsigned char>* OutImagePngData);
		void GetImagePNGData_Bp(TArray<unsigned char>* OutImagePngData);
		int32_t GetDebugValue();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModeUploadList
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBPhotoModeUploadList : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_L9TG[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void UploadWidgetSwitcher_Cpp(unsigned char InMode);
		void UploadWidgetSwitcher_Bp(unsigned char InMode);
		void SetUploadThumbnail_Cpp(TArray<class UTexture2DDynamic*> InThumbnailImage);
		void SetUploadThumbnail_Bp(TArray<class UTexture2DDynamic*> InThumbnailImage);
		void ScreenshotCapturedEvent_Cpp(TArray<class UTexture2DDynamic*> InThumbnailImage);
		void ScreenshotCapturedEvent_Bp(TArray<class UTexture2DDynamic*> InThumbnailImage);
		int32_t GetDebugValue();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModeUploadListSlot
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBPhotoModeUploadListSlot : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_91FG[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetTexture_Cpp(class UTexture2DDynamic* InTexture);
		void SetTexture_Bp(class UTexture2DDynamic* InTexture);
		int32_t GetDebugValue();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModePawn
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class ASBPhotoModePawn : public ASpectatorPawn
	{
	public:
		bool                                                       bLookAtPlayer;                                           // 0x02B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPadFunc1Pressed;                                        // 0x02B1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPadFunc2Pressed;                                        // 0x02B2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHideCursor;                                             // 0x02B3(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z0P8[0x4];                                   // 0x02B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      HiddenActors;                                            // 0x02B8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void SetLookAtPlayer(bool bValue);
		void MoveUp_Local(float Val);
		void BP_ResetCamera();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModePawnMovementComponent
	 * Size -> 0x0040 (FullSize[0x01A0] - InheritedSize[0x0160])
	 */
	class USBPhotoModePawnMovementComponent : public USpectatorPawnMovement
	{
	public:
		class FScriptDelegate                                      OnOverLimitDistanceDelegate;                             // 0x0160(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		float                                                      DistanceLimitXY;                                         // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceLimitZ;                                          // 0x0174(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceOverLimitMagine;                                 // 0x0178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInitializedOwnerLocation;                               // 0x017C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_93E4[0x3];                                   // 0x017D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             PrevOwnerLocation;                                       // 0x0180(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SDZT[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSpeedOfAngleMove;                                     // 0x0190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDontOverOverhead;                                       // 0x0194(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDontPassThrough;                                        // 0x0195(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GE6F[0x2];                                   // 0x0196(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NearDistanceLimitOfLookAtPlayer;                         // 0x0198(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LFFQ[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetLookAtPlayer(bool bValue);
		void OnOverLimitDistanceDelegate__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModePlayerListItem
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBPhotoModePlayerListItem : public UUserWidget
	{
	public:
		class USBPhotoModePlayerList*                              Owner;                                                   // 0x0278(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBPhotoModePlayerControlData*                       Data;                                                    // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetHeaderData(class USBPhotoModePlayerControlData* InData);
		void OnUpdateData();
		void BP_SetData(class USBPhotoModePlayerControlData* InData);
		void BP_OnUpdateData();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhotoModePlayerList
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class USBPhotoModePlayerList : public UUserWidget
	{
	public:
		class UClass*                                              ListItemClass;                                           // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBPhotoModePlayerListItem*                          AllPlayerItem;                                           // 0x0280(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UVerticalBox*                                        PlayerList;                                              // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USBPhotoModePlayerListItem*>                  PlayerListItemList;                                      // 0x0290(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		void OnUpdatePlayerControlDataList();
		void OnUpdatePlayerControlData(class UObject* Sender, class UObject* Param);
		void BP_OnUpdatePlayerControlData();
		void BP_OnClickItemButton(class USBPhotoModePlayerListItem* Sender);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhysicsAnimInstance
	 * Size -> 0x0030 (FullSize[0x04A0] - InheritedSize[0x0470])
	 */
	class USBPhysicsAnimInstance : public USBAnimInstance
	{
	public:
		bool                                                       bActive;                                                 // 0x0470(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KP0S[0x3];                                   // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             Acceralation;                                            // 0x0474(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             AcceralationAngle;                                       // 0x0480(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StiffnessScale;                                          // 0x048C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DampingScale;                                            // 0x0490(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MassScale;                                               // 0x0494(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SkeletalControlAlpha;                                    // 0x0498(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_66RM[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhysicsWaterVolumeRenderComp
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBPhysicsWaterVolumeRenderComp : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_VL4S[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPhysicsWaterVolume
	 * Size -> 0x0018 (FullSize[0x0288] - InheritedSize[0x0270])
	 */
	class ASBPhysicsWaterVolume : public APhysicsVolume
	{
	public:
		TArray<class USplineMeshComponent*>                        PhyTrackSplineMeshComponents;                            // 0x0270(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		class ASBWaterMeshActor*                                   WaterMesh;                                               // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ResetBrushSetting();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPineVillageComponent
	 * Size -> 0x0118 (FullSize[0x01D0] - InheritedSize[0x00B8])
	 */
	class USBPineVillageComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnRequestRankingsCompleteDelegate;                       // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRequestLeagueCompleteDelegate;                         // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRequestRankingRewardsCompleteDelegate;                 // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRequestLeagueRewardsCompleteDelegate;                  // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V014[0xD8];                                  // 0x00F8(0x00D8) MISSED OFFSET (PADDING)

	public:
		void Server_RequestRankings(int32_t Page);
		void Server_RequestRankingRewards();
		void Server_RequestLeagueRewards();
		void Server_RequestLeague();
		void RequestRankings(int32_t Page);
		void RequestRankingRewards();
		void RequestLeagueRewards();
		void RequestLeague();
		void OnRankingsDelegate__DelegateSignature();
		void OnRankingRewardsDelegate__DelegateSignature();
		void OnLeagueRewardsDelegate__DelegateSignature();
		void OnLeagueDelegate__DelegateSignature();
		struct FSBPineVillageRankingsData GetRankingsData();
		struct FSBPineVillageLeagueData GetLeagueData();
		void Client_RequestRankingsComplete(int32_t RetCode, const struct FSBPineVillageRankingsData& Data);
		void Client_RequestRankingRewardsComplete(int32_t RetCode);
		void Client_RequestLeagueRewardsComplete(int32_t RetCode);
		void Client_RequestLeagueComplete(int32_t RetCode, const struct FSBPineVillageLeagueData& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBPlayerSkillController : public UObject
	{
	public:
		unsigned char                                              UnknownData_FZEZ[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAbsoluteDefenseSkillController
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBPlayerAbsoluteDefenseSkillController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_MNTI[0x20];                                  // 0x0040(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAchievementComponent
	 * Size -> 0x00A8 (FullSize[0x0160] - InheritedSize[0x00B8])
	 */
	class USBPlayerAchievementComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnLoadAchievementDelegate;                               // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveAchievementDelegate;                               // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveAchievementSelectedDelegate;                       // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAchievementGainedDelegate;                             // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadAchievementDataDelegate;                           // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetAchievementRewardsDelegate;                         // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LMV2[0x1];                                   // 0x0118(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bRunRequiredDataInfoList;                                // 0x0119(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bRequiredDataInfoListCache;                              // 0x011A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RZMG[0x5];                                   // 0x011B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCharacterAchievementDataInfo>             DataInfoListCache;                                       // 0x0120(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		struct FSBAchievementSelectCategory                        AchievementSelectCategory;                               // 0x0130(0x000C) NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DKI6[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            PopupNewGainedAchievement;                               // 0x0140(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class FString>                                      DisableMiddleCategory;                                   // 0x0150(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void SetCharacterAchievementData(int32_t InFindAchievementId, const struct FSBCharacterAchievementDataInfo& InInfo);
		void SetAchievementSelected(int32_t AchievementId);
		void SetAchievementId(int32_t InAchievementId);
		void SetAchievementCategory(int32_t InLargeCategory, int32_t InMidiumCategory);
		void Server_SaveAchievementSelected(int32_t AchievementId);
		void Server_SaveAchievement(TArray<struct FSBAchievementInfo> AchievementList);
		void Server_OnUpdateAchievementData(TArray<struct FSBCharacterAchievementDataInfo> InAchievementDataInfoList);
		void Server_OnSaveAchievementSelected(bool Result, int32_t AchievementId);
		void Server_OnSaveAchievement(bool Result, TArray<struct FSBAchievementInfo> AchievementList);
		void Server_OnLoadAchievementData(bool Result, int32_t InRetCode, TArray<struct FSBCharacterAchievementDataInfo> InAchievementDataInfoList);
		void Server_OnLoadAchievement(bool Result, TArray<struct FSBAchievementInfo> AchievementList);
		void Server_OnGetAchievementRewards(bool Result, int32_t InRetCode, const struct FSBAchievementRewardData& AchievementRewardData, bool InOpenCommandMenuFlag);
		void Server_OnAchievementGained(TArray<int32_t> GainedAchievementIdList);
		void Server_LoadAchievementData();
		void Server_LoadAchievement();
		void Server_GetAchievementRewards(TArray<int32_t> AchievementId, bool IsOverflowLimitDiscard, bool IsOverflowLimitSell);
		void Request_SaveAchievementSelected(int32_t AchievementId);
		void Request_SaveAchievement(TArray<struct FSBAchievementInfo> AchievementList);
		void Request_LoadAchievementData();
		void Request_LoadAchievement();
		void Request_GetAchievementRewards(TArray<int32_t> AchievementId, bool IsOverflowLimitDiscard, bool IsOverflowLimitSell);
		void OnSaveAchievementSelectedDelegate__DelegateSignature(bool Result);
		void OnSaveAchievementDelegate__DelegateSignature(bool Result);
		void OnLoadAchievementDelegate__DelegateSignature(bool Result, TArray<struct FSBAchievementInfo> AchievementList);
		void OnLoadAchievementDataDelegate__DelegateSignature(bool Result, int32_t RetCode);
		void OnGetAchievementRewardsDelegate__DelegateSignature(bool Result, int32_t RetCode, const struct FSBAchievementRewardData& AchievementRewardData);
		void OnAchievementGainedDelegate__DelegateSignature(TArray<int32_t> GainedAchievementIdList);
		void NotifyPopupNewAchievemet();
		bool IsValidCharacterAchievementID(int32_t InFindAchievementId);
		bool IsRunRequiredDataInfoList();
		bool IsRequiredDataInfoListCache();
		bool IsAchievementsLoadedFromDB();
		TArray<class FString> GetDisableMiddleCategoryList(class USBTextTableAsset* InTextTableAsset, bool IsHaveAchievmentOnly);
		TArray<struct FSBCharacterAchievementDataInfo> GetDataInfoListCache();
		void GetAdventureBoardCompleteAchievement(TArray<struct FSBCharacterAchievementDataInfo>* OutData);
		int32_t GetAchievemetProgress(int32_t InObjectNum, int32_t InProgressNum);
		struct FSBAchievementSelectCategory GetAchievementCategory();
		struct FSBCharacterAchievementDataInfo FindCharacterAchievementData(int32_t InFindAchievementId);
		void DisableSelectCategory();
		void Client_SetPopupNewAchievement(TArray<int32_t> GainedAchievementIdList);
		void Client_SaveAchievementSelected(bool Result, int32_t AchievementId);
		void Client_SaveAchievement(bool Result, TArray<struct FSBAchievementInfo> AchievementList);
		void Client_OnUpdateAchievementData(TArray<struct FSBCharacterAchievementDataInfo> InAchievementDataInfoList);
		void Client_LoadAchievementData(bool Result, int32_t InRetCode, TArray<struct FSBCharacterAchievementDataInfo> InAchievementDataInfoList);
		void Client_LoadAchievement(bool Result, TArray<struct FSBAchievementInfo> AchievementList);
		void Client_GetAchievementRewards(bool Result, int32_t InRetCode, const struct FSBAchievementRewardData& AchievementRewardData, bool InOpenCommandMenuFlag);
		void Client_AchievementGained(TArray<int32_t> GainedAchievementIdList);
		void CheckAdventureBoardCompleteAchievement(TArray<struct FSBCharacterAchievementDataInfo> InData, ESBAchievementAdventureBoardCompleteStatus* OutStatus, int32_t* OutNextCount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerActivityComponent
	 * Size -> 0x0060 (FullSize[0x0118] - InheritedSize[0x00B8])
	 */
	class USBPlayerActivityComponent : public USBPlayerPropertyComponent
	{
	public:
		TMap<class USBHttpQuery*, struct FSBActivityData>          SaveRequests;                                            // 0x00B8(0x0050) NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnGetActivityCompleteDelegate;                           // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SaveActivityRequest(const struct FSBActivityData& InActivityData);
		bool GetActivityRequest(const class FString& InCharacterId, int32_t InStart, int32_t InCount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAdminComponent
	 * Size -> 0x0098 (FullSize[0x0150] - InheritedSize[0x00B8])
	 */
	class USBPlayerAdminComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             AdminCommandCallbeck;                                    // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              GotoBookmarkWindowAsset;                                 // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      EnableCommandList;                                       // 0x00D0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1IRV[0x10];                                  // 0x00E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MacroFileName;                                           // 0x00F0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMacroRunningClient;                                     // 0x0100(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMacroRunningServer;                                     // 0x0101(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MCIH[0x6];                                   // 0x0102(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      MacroContents;                                           // 0x0108(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FString                                              MacroDebugFlag;                                          // 0x0118(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MacroProcessIntervalSetting;                             // 0x0128(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MacroProcessInterval;                                    // 0x012C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAdminBookmarkMisc*                                BookmarkMisc;                                            // 0x0130(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDebugForceEnable;                                       // 0x0138(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E6VC[0x8];                                   // 0x0139(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bNoLog;                                                  // 0x0141(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O3U1[0xE];                                   // 0x0142(0x000E) MISSED OFFSET (PADDING)

	public:
		void WarpPlayerByMapClick_Internal(const struct FVector& WorldLocation);
		void WarpPlayerByMapClick(const struct FVector2D& WorldLocation2d);
		void TravelMapToCharacter_Internal(const struct FPlayerProfileMenuDetailData& TargetProfileData);
		void TravelMapToCharacter(const class FString& CharacterId);
		void SetGotoPosCommandString(const struct FVector& WorldLocation, bool bSetToInputField);
		void SetConsoleOutputFieldText(const class FString& Text);
		void Server_StartMacro(TArray<class FString> InMacroContents, const class FString& DebugFlag);
		void Server_LogWarpPlayer(const struct FVector& WorldLocation, bool bSucceeded);
		void Server_ExecuteAdminCommandFromBeforeAuth(const class FString& InputText, class UObject* Param);
		void Server_ExecuteAdminCommand(const class FString& InputText, class UObject* Param);
		void Server_DirectApplyMoveSpeed(float Speed);
		void OutputPlayerInfo(const struct FVector& WorldLocation, const class FString& CharacterId, const class FString& CharacterShortId, const class FString& MapId, const class FString& CharacterName, const class FString& MapName);
		void OutputFoundPlayerInfoByScreenClick();
		void OutputFoundPlayerInfo(const class FString& CharacterId, const struct FVector& WorldLocation);
		bool IsAdminFuncUnlocked();
		class USBPlayerAdminComponent* GetSBPlayerAdminComponent(class UObject* WorldContextObject);
		class USBAdminBookmarkMisc* GetBookmarkMisc();
		class ASBPlayerCharacter* FindPlayerCharacter(const class FString& CharacterId);
		void ExecuteGotoBookmarkSub(class USBAdminGotoBookmarkItem* BookmarkData);
		void ExecuteAdminCommandFromBeforeAuth(const class FString& ChatMessage);
		void ExecuteAdminCommand(const class FString& InputText);
		void DisableAdminAuthority();
		void Client_WireFrame(bool bFlag);
		void Client_WarpToGatherPoint();
		void Client_WarpPlayer(const struct FVector& WorldLocation);
		void Client_VisibleNamePlate();
		void Client_VisibleDamageLog();
		void Client_VisibleBattleHud();
		void Client_VerifyAdminAuthority();
		void Client_TravelMapToCharacter(const class FString& CharacterId, const class FString& DebugFlag);
		void Client_TravelMapPlayer(const class FString& MapId, const class FString& SpawnPortal);
		void Client_TogglePlayerThrough(float DistanceLimit, const class FString& DebugFlag);
		void Client_TogglePlayerSHide(bool bFlag);
		void Client_TogglePlayerHide(bool bFlag);
		void Client_ShowHelp(TArray<class FString> HelpList);
		void Client_SetWorldTimeDilation(float NewTimeDilation);
		void Client_SetDebugForceEnable(bool bFlag);
		void Client_SetConsoleOutputFieldText(const class FString& Text);
		void Client_RunFile(const class FString& Filename, const class FString& DebugFlag);
		void Client_RemoveAuthority(TArray<class FString> RemovedAuthority);
		void Client_ReceiveRecall(const struct FVector& WorldLocation);
		void Client_ReceiveKick(const class FString& DebugFlag);
		void Client_RecallCharacter(bool bValid, const class FString& TargetCharacterId, const class FString& TargetCharacterName);
		void Client_PushSystemLogArray(TArray<class FString> MessageList);
		void Client_PushSystemLog(const class FString& Message);
		void Client_PushSystemDebugLog(const class FString& Message);
		void Client_PlayerList(TArray<class FString> PlayerInfoList, const class FString& DebugFlag);
		void Client_PlayerInvincible();
		void Client_PlayerInfiniteStamina();
		void Client_PlayerInfiniteSkill();
		void Client_PlayerInfiniteImagine();
		void Client_PlayerInfiniteHP();
		void Client_OutputCharacterLocation(const class FString& CharacterId, const struct FVector& WorldLocation, const class FString& DebugFlag);
		void Client_NoLog(bool bFlag);
		void Client_KillTarget(const struct FVector& KillTargetLocation, const class FString& DebugFlag);
		void Client_KillDist(TArray<struct FVector> KillTargetLocationList);
		void Client_Kill(const struct FVector& KillTargetLocation);
		void Client_Kick(const class FString& CharacterId, const class FString& DebugFlag);
		void Client_InteractionTargetList(TArray<class FString> PlayerInfoList, const class FString& DebugFlag);
		void Client_InteractionTargetAuthorList(TArray<class FString> InfoList, const class FString& DebugFlag);
		void Client_IdWarp(TArray<class FString> BookmarkStringDataList);
		void Client_FinishMacro(const class FString& DebugFlag);
		void Client_FinishForDontHaveAuthority();
		void Client_FinishCommand();
		void Client_FinishByUndefinedCommand(const class FString& Command);
		void Client_FinishByOutputMessage(const class FString& Text);
		void Client_EnemyInfo(const class FString& Info);
		void Client_DisableAdminAuthority();
		void Client_ConfirmAuthority(TArray<class FString> InEnableCommandList);
		void Client_CheckApplyPreviousAdminCommandParameter();
		void Client_ChangeMoveSpeed(float Speed);
		void Client_BookmarkList();
		void AdminCommandCallbeck__DelegateSignature(ESBAdminCommandCallbackRequest Request);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAdminBookmarkMisc
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USBAdminBookmarkMisc : public UObject
	{
	public:
		unsigned char                                              UnknownData_ISTI[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUserWidget*                                         GotoBookmarkWindow;                                      // 0x0030(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USBAdminGotoBookmarkItem*>                    GotoBookmarkList;                                        // 0x0038(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LFW6[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerAdminComponent*                             Owner;                                                   // 0x0050(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBPlayerController*                                 PlayerController;                                        // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void RegisterGotoBookmark(const class FString& MapId, const class FString& Description, const struct FVector& Position);
		class UUserWidget* OpenGotoBookmarkWindow(class UCanvasPanel* InParentPanel);
		void OnUpdateGotoBookmarkData(class USBAdminGotoBookmarkItem* UpdateData);
		void MoveGotoBookmarkData(class USBAdminGotoBookmarkItem* Data, bool bMoveToUp);
		bool IsIdWarp();
		class USBAdminBookmarkMisc* GetSBAdminBookmarkMisc(class UObject* WorldContextObject);
		TArray<class USBAdminGotoBookmarkItem*> GetGotoBookmarkList();
		void GetCurrentPosition(class FString* OutMapId, struct FVector* OutPos);
		void ExecuteGotoBookmarkSub(class USBAdminGotoBookmarkItem* BookmarkData);
		void ExecuteGotoBookmarkMain(class USBAdminGotoBookmarkItem* BookmarkData);
		void ExecuteGotoBookmark(class USBAdminGotoBookmarkItem* BookmarkData);
		void DeleteGotoBookmarkData(class USBAdminGotoBookmarkItem* Data);
		void CloseGotoBookmarkWindow();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAdminFuncComponent
	 * Size -> 0x0020 (FullSize[0x00F0] - InheritedSize[0x00D0])
	 */
	class USBPlayerAdminFuncComponent : public USBPlayerActorComponent
	{
	public:
		bool                                                       bHide : 1;                                               // 0x00D0(0x0001) BIT_FIELD Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSHide : 1;                                              // 0x00D0(0x0001) BIT_FIELD Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5HB2[0x1F];                                  // 0x00D1(0x001F) MISSED OFFSET (PADDING)

	public:
		void OnRep_Command_Hide();
		void Multicast_CommandSHide(bool Hide);
		void Multicast_CommandHide(bool Hide);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventParamAdventureBoardClear
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBEventParamAdventureBoardClear : public UObject
	{
	public:
		unsigned char                                              UnknownData_W9XT[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		ESBAdventureBoardClearStatus GetStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAdventureBoardComponent
	 * Size -> 0x00F8 (FullSize[0x01B0] - InheritedSize[0x00B8])
	 */
	class USBPlayerAdventureBoardComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUpdateAdventureBoardDelegete;                          // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearAdventureBoardDelegete;                           // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadAdventureBoardDelegete;                            // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAchievementedAdventureBoardPanelDelegete;              // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAchievementedAdventureBoardPanelListDelegete;          // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteAdventureBoardDelegete;                        // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteAdventureBoardNotificationDelegete;            // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeActiveAdventureBoardDelegete;                    // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeFavoriteAdventureBoardDelegete;                  // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeHudDrawAdventureBoardDelegete;                   // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetRewardAdventureBoardPanelDelegete;                  // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetRewardAdventureBoardAllPanelDelegete;               // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPopupNewVaildAdventureBoardCompleteDelegete;           // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSBAdventureBoardParam>                      BoardParamList;                                          // 0x0188(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            PopupNewValidBoardIdList;                                // 0x0198(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		bool                                                       ClearRequested;                                          // 0x01A8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DHY1[0x7];                                   // 0x01A9(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetNewClearPanelAll();
		void SetClearRequested(bool RequestFlag);
		void Server_UpdatePanelList_BoardParam(TArray<struct FSBAdventureBoardParam> InBoardParamList, int32_t RetCode, bool InForceNotifyNextMap);
		void Server_UpdatePanelList(TArray<struct FSBAdventureBoardUpdateData> InUpdateBoardDataList, TArray<struct FSBAdventureBoardPanelUpdateData> InUpdatePanelDataList, int32_t RetCode, bool InForceNotifyNextMap);
		void Server_UpdateBoardList(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t RetCode);
		void Server_SetFavoriteBoard(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t InRetCode);
		void Server_SetBoardList(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t RetCode);
		void Server_SetActiveBoard(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t InRetCode);
		void Server_SetAchievementedPanelList(TArray<struct FSBAdventureBoardPanelParam> InPanelList, int32_t InBoardId, int32_t InRetCode);
		void Server_SetAchievementedPanel(TArray<struct FSBAdventureBoardPanelParam> InPanelList, int32_t InBoardId, int32_t InPanelId, int32_t InRetCode);
		void Server_NotifyPopupNewVaildBoard();
		void Server_LoadBoardListSet(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t InRetCode);
		void Server_LoadBoardList();
		void Server_GetRewardBoardPanel(int32_t InBoardId, int32_t InPanelId, bool bOverflowDiscard, bool bOverflowSell);
		void Server_GetRewardBoardAllPanel(int32_t InBoardId, bool bOverflowDiscard, bool bOverflowSell);
		void Server_FreePanelCleared(int32_t InBoardId);
		void Server_DebugAdvanceAdventureBoard(int32_t InBoardId);
		void Server_CompleteBoard(int32_t InBoardId, bool bOverflowDiscard, bool bOverflowSell);
		void Server_Cleared(int32_t InBoardId, int32_t InPanelId);
		void Server_ChangeHudDraw(int32_t InBoardId, bool InHudDraw);
		void Server_ChangeFavoriteBoard(int32_t InBoardId, bool InFavorite);
		void Server_ChangeActiveBoard(int32_t InBoardId);
		void Request_NotifyPopupNewVaildBoard();
		void Request_LoadBoardList();
		void Request_GetRewardBoardPanel(int32_t InBoardId, int32_t InPanelId, bool bOverflowDiscard, bool bOverflowSell);
		void Request_GetRewardBoardAllPanel(int32_t InBoardId, bool bOverflowDiscard, bool bOverflowSell);
		void Request_FreePanelCleared(int32_t InBoardId);
		void Request_CompleteBoard(int32_t InBoardId, bool bOverflowDiscard, bool bOverflowSell);
		void Request_Cleared(int32_t InBoardId, int32_t InPanelId);
		void Request_ChangeHudDraw(int32_t InBoardId, bool InHudDraw);
		void Request_ChangeFavoriteBoard(int32_t InBoardId, bool InFavorite);
		void Request_ChangeActiveBoard(int32_t InBoardId);
		void RemovePopupNewValidBoardIdList();
		bool IsClearRequested();
		int32_t GetRewardCount(int32_t InBoardId);
		void GetReward_MailData(int32_t InBoardId, int32_t InPanelId, TArray<struct FSBMailData>* OutMailData, bool IsInit);
		TArray<int32_t> GetPopupNewValidBoardIdList();
		void GetConnectPanel(int32_t InBoardId, int32_t InPanelId, TArray<int32_t>* OutConnectPanelIdList, bool CheckRoute);
		void GetCompleteReward_MailData(int32_t InBoardId, TArray<struct FSBMailData>* OutMailData, bool IsInit);
		void GetClearFreePanelList(int32_t InBoardId, TArray<int32_t>* OutFreePanelIdList);
		void GetBoardParamList_VersionCheck(TArray<struct FSBAdventureBoardParam>* OutBoardList);
		TArray<struct FSBAdventureBoardParam> GetBoardParamList();
		void GetAllReward_MailData(int32_t InBoardId, TArray<struct FSBMailData>* OutMailData);
		void GetActiveBoardList(TArray<struct FSBAdventureBoardParam>* OutList);
		int32_t GetAcquiredRankupBoardId(TArray<int32_t> InBoardIdList);
		void Client_UpdatePanelList_BoardParam(TArray<struct FSBAdventureBoardParam> InBoardParamList, int32_t RetCode, bool InForceNotifyNextMap);
		void Client_UpdatePanelList(TArray<struct FSBAdventureBoardUpdateData> InUpdateBoardDataList, TArray<struct FSBAdventureBoardPanelUpdateData> InUpdatePanelDataList, int32_t RetCode, bool InForceNotifyNextMap);
		void Client_UpdateBoardList(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t InRetCode);
		void Client_SetPopupNewValidBoardIdList(TArray<int32_t> InBoardIdList);
		void Client_SetFavoriteBoard(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t InRetCode);
		void Client_SetBoardList(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t InRetCode);
		void Client_SetActiveBoard(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t InRetCode);
		void Client_SetAchievementedPanelList(TArray<struct FSBAdventureBoardPanelParam> InPanelList, int32_t InBoardId, int32_t RetCode);
		void Client_SetAchievementedPanel(TArray<struct FSBAdventureBoardPanelParam> InPanelList, int32_t InBoardId, int32_t InPanelId, int32_t RetCode);
		void Client_NotifyPopupNewVaildBoard(int32_t InRetCode);
		void Client_LoadBoardListSet(TArray<struct FSBAdventureBoardParam> InBoardList, int32_t InRetCode);
		void Client_GetRewardBoardPanel(TArray<struct FSBAdventureBoardParam> InBoardParamList, const struct FSBMailRewardData& InRewardData, int32_t InBoardId, int32_t InRetCode, bool InOpenCommandMenuFlag);
		void Client_GetRewardBoardAllPanel(TArray<struct FSBAdventureBoardParam> InBoardParamList, const struct FSBMailRewardData& InRewardData, int32_t InRetCode, bool InOpenCommandMenuFlag);
		void Client_DebugAdvanceAdventureBoard(int32_t InBoardId, int32_t InRetCode, const class FString& InErrorMsg);
		void Client_CompleteBoard(TArray<struct FSBAdventureBoardParam> InBoardParamList, const struct FSBMailRewardData& InRewardData, int32_t RetCode, bool InOpenCommandMenuFlag);
		void Client_ChangeHudDraw(int32_t InBoardId, bool InIsHudDraw, int32_t InRetCode);
		bool ChangeHudDraw(int32_t InBoardId, bool InHudDraw);
		void BP_GetBoardParamList(TArray<struct FSBAdventureBoardParam>* OutBoardList);
		bool BP_GetBoardParam(struct FSBAdventureBoardParam* OutOBoardParam, int32_t InBoardId);
		bool BP_GetBoardPanelParam(struct FSBAdventureBoardPanelParam* OutBoardPanelParam, int32_t InBoardId, int32_t InPanelId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAdventurerComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBPlayerAdventurerComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnAdventurerRankChangeDelegate;                          // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAdventurerRankupFlagChangeDelegate;                    // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAdventurerRankFlagChangeDelegate;                      // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AVVP[0x4];                                   // 0x00E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       AdventurerRankFlag;                                      // 0x00EC(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L35M[0x3];                                   // 0x00ED(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetAutoSelectBoardId(int32_t BoardId);
		void SetAdventurerRankFlag(bool Flag);
		void Server_SaveAdventurerRank(int32_t Rank);
		void Server_OnAdventurerRankCommon(int32_t InRetCode, int32_t Rank, bool InAdventurerRankFlag, bool OpenMenuFlag);
		void Server_AdventurerRankUp();
		void Server_AdventurerRankFlagUnlock();
		void Request_SaveAdventurerRank(int32_t Rank);
		void Request_AdventurerRankUp();
		void Request_AdventurerRankFlagUnlock();
		void OnRep_AdventurerRank();
		void OnAdventurerRankupFlagChangeDelegate__DelegateSignature(int32_t InRetCode);
		void OnAdventurerRankFlagChangeDelegate__DelegateSignature(int32_t InRetCode, ESBPlayerPassiveImagineSlotType Slot);
		void OnAdventurerRankChangeDelegate__DelegateSignature(int32_t InRetCode);
		bool IsSoloBattleStart();
		bool IsRankupBoardClear();
		void GetBoardGoalReward(TArray<struct FSBMasterReward>* OutRewardList, int32_t InBoardId);
		int32_t GetAutoSelectBoardId();
		bool GetAdventurerRankFlag();
		void Client_AdventurerRankCommon(int32_t InRetCode, int32_t Rank, bool InAdventurerRankFlag, bool OpenMenuFlag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAerialSkillController
	 * Size -> 0x00F8 (FullSize[0x0138] - InheritedSize[0x0040])
	 */
	class USBPlayerAerialSkillController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_KANA[0xF8];                                  // 0x0040(0x00F8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAimHUDComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBPlayerAimHUDComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAnimationSamplingLevelScriptActor
	 * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
	 */
	class ASBPlayerAnimationSamplingLevelScriptActor : public ASBAnimationSamplingLevelScriptActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAppearEffectComponent
	 * Size -> 0x0050 (FullSize[0x0120] - InheritedSize[0x00D0])
	 */
	class USBPlayerAppearEffectComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_ZLHY[0x28];                                  // 0x00D0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystemComponent*                            m_WarpSphere;                                            // 0x00F8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_KGFF[0x20];                                  // 0x0100(0x0020) MISSED OFFSET (PADDING)

	public:
		void ServerPlayDisappearEffect(ESBDisappearEffectType Type);
		void ServerPlayAppearEffectForLocalWarp(const struct FVector& NewLocation);
		void MulticastPlayDisappearEffect(ESBDisappearEffectType Type);
		void MulticastPlayAppearEffectForLocalWarp(const struct FVector& NewLocation);
		bool IsDispRespawnFadeInEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerArtsComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBPlayerArtsComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnSaveEquippedActiveArtsDelegate;                        // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveEquippedPassiveArtsDelegate;                       // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeEquippedArtsDelegate;                            // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_OnSaveEquipedArts_Passive(int32_t RetCode, TArray<struct FEquipedArtsInfo> EquipedArtsInfoList, bool InSetEquipped, int32_t UnequipArtsId);
		void Server_OnSaveEquipedArts_Active(int32_t RetCode, TArray<struct FEquipedArtsInfo> EquipedArtsInfoList, bool LoadAssetRequest);
		void OnSaveEquippedPassiveArtsDelegate__DelegateSignature(int32_t RetCode);
		void OnSaveEquippedActiveArtsDelegate__DelegateSignature(int32_t RetCode, bool IsArtsAssetLoadRequested);
		void OnChangeEquippedArtsDelegate__DelegateSignature();
		void Client_SaveEquipedArts_Passive(int32_t RetCode, TArray<struct FEquipedArtsInfo> EquipedArtsInfoList, bool InSetEquipped, int32_t UnequipArtsId);
		void Client_SaveEquipedArts_Active(int32_t RetCode, TArray<struct FEquipedArtsInfo> EquipedArtsInfoList, bool LoadAssetRequest);
		void Client_DoOnSaveEquipedArtsDelegate_Passive(int32_t RetCode);
		void Client_DoOnSaveEquipedArtsDelegate_Active(int32_t RetCode, bool IsAssetLoadRequested);
		void ApplyResult_Server(TArray<struct FEquipedArtsInfo> EquipArtsInfo);
		void ApplyResult_Client(TArray<struct FEquipedArtsInfo> EquipArtsInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAttackCollisionPassiveSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerAttackCollisionPassiveSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAutoDeliveryQuestComponent
	 * Size -> 0x00C0 (FullSize[0x0178] - InheritedSize[0x00B8])
	 */
	class USBPlayerAutoDeliveryQuestComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnAutoDeliveryQuestAllDataDelegete;                      // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateSeasonGeneralDataDelegete;                       // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReloadSeasonPassQuestDelegete;                         // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateAutoDeliveryQuestDataDelegete;                   // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteAutoDeliveryQuestDataDelegete;                 // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteAutoDeliveryEventQuestDataDelegete;            // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAchievementedAutoDeliveryQuestDelegete;                // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateAutoDeliveryQuest_DailyWeeklyDelegete;           // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateAutoDeliveryQuest_SeasonDelegete;                // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSBSeasonPassQuestInfo                              QuestInfo;                                               // 0x0148(0x0008) Transient, NoDestructor, NativeAccessSpecifierPrivate
		struct FSBSeasonPassQuestListManager                       QuestListManager;                                        // 0x0150(0x0010) Transient, NativeAccessSpecifierPrivate
		ESBAutoDeliveryQuestUpdateStatus                           UpdateStatus;                                            // 0x0160(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ARC5[0x7];                                   // 0x0161(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           BeginnerEventTermDate;                                   // 0x0168(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FDateTime                                           RestertEventTermDate;                                    // 0x0170(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetQuestListManager(const struct FSBSeasonPassQuestListManager& InQuestListManager);
		void SetQuestItemData(const struct FSBSeasonPassQuestItemData& InQuestItemData);
		void SetQuestInfo(const struct FSBSeasonPassQuestInfo& InQuestInfo);
		void Server_UpdateQuestListAll();
		void Server_UpdateEventQuest(const struct FSBSeasonPassQuestListData& InQuestList, ESBAutoDeliveryRewardStatus InRewardStatus, int32_t InReturnCode, const struct FSBAutoQuestComponentData& AutoQuestData, bool InOpenCommandMenuFlag, TArray<struct FSBNaEventInfo> InEventInfoList);
		void Server_SetQuestInfo(const struct FSBSeasonPassQuestInfo& InQuestInfo);
		void Server_ReloadSeasonPassQuest(const class FString& InQuestId, const class FString& InGroupId);
		void Server_FreeReloadSeasonPassQuest(const class FString& InQuestId, const class FString& InGroupId);
		void Server_CompleteQuest(const class FString& InQuestId, const class FString& InGroupId, bool IsPayUse);
		void Server_CompleteEventQuest(int32_t InEventId);
		void Server_AddQuest(const class FString& InQuestId);
		bool SearchItemDataBP_QuestId(const class FString& InQuestId, const class FString& InGroupId, struct FSBSeasonPassQuestItemData* OutQuestData);
		bool SearchItemDataBP(const class FString& InQuestId, struct FSBSeasonPassQuestItemData* OutQuestData);
		void ResetUpdateStatus();
		void Request_UpdateQuestListAll();
		void Request_SetQuestList(ESBSeasonPassQuestCycleType CycleType, const struct FSBSeasonPassQuestListData& InList);
		void Request_ReloadSeasonPassQuest(const class FString& InQuestId, const class FString& InGroupId);
		void Request_QuestUpdateLogPutParse(const struct FSBSeasonPassQuestListManager& InSeasonPassQuestListManager, const class FString& InMsg);
		void Request_FreeReloadSeasonPassQuest(const class FString& InQuestId, const class FString& InGroupId);
		void Request_CompleteQuest(const class FString& InQuestId, const class FString& InGroupId, bool IsPayUse);
		void Request_CompleteEventQuest(int32_t InEventId);
		void Request_AddQuest(const class FString& InQuestId);
		void QuestListReaded(TArray<struct FSBSeasonPassQuestItemData> InItemList);
		bool IsRestertEventActive();
		bool IsBeginnerEventActive();
		ESBAutoDeliveryQuestUpdateStatus GetUpdateStatus();
		struct FDateTime GetRestertEventTermDate();
		struct FSBSeasonPassQuestListManager GetQuestListManagerConst();
		struct FSBSeasonPassQuestListManager GetQuestListManager();
		struct FSBSeasonPassQuestInfo GetQuestInfoConst();
		struct FSBSeasonPassQuestInfo GetQuestInfo();
		void GetList_IsReward_Filting(TArray<struct FSBSeasonPassQuestItemData> InQuestItemList, TArray<struct FSBSeasonPassQuestItemData>* OutItemList);
		void GetEventQuestItemList(class UObject* InWorldContextObject, int32_t InEventId, TArray<struct FSBSeasonPassQuestItemData>* OutEventQuestList);
		struct FDateTime GetBeginnerEventTermDate();
		void Client_UpdateQuestListManagerToUpdateData(TArray<struct FSBSeasonPassQuestUpdateData> InQuestUpdateDataList, bool InIsNotifyProgressAchievemented, bool InIsBackup);
		void Client_UpdateQuestListManager(const struct FSBSeasonPassQuestListManager& InQuestListManager, bool InIsNotifyProgressAchievemented, bool InIsBackup);
		void Client_UpdateQuestListComplete(int32_t InRetCode);
		void Client_UpdateQuestListAll(const struct FSBSeasonPassQuestListManager& InQuestListManager, int32_t InType);
		void Client_UpdateQuestList(const struct FSBSeasonPassQuestListData& InQuestList);
		void Client_UpdateQuestAllData(const struct FSBSeasonPassQuestInfo& InQuestInfo, const struct FSBSeasonPassQuestListManager& InQuestListManager, int32_t InRetCode);
		void Client_UpdateEventQuest(const struct FSBSeasonPassQuestListData& InQuestList, ESBAutoDeliveryRewardStatus InRewardStatus, int32_t InReturnCode, const struct FSBAutoQuestComponentData& AutoQuestData, bool InOpenCommandMenuFlag, TArray<struct FSBNaEventInfo> InEventInfoList);
		void Client_SetQuestListManager(const struct FSBSeasonPassQuestListManager& InQuestInfo);
		void Client_SetQuestList(ESBSeasonPassQuestCycleType CycleType, const struct FSBSeasonPassQuestListData& InList);
		void Client_SetQuestInfo(const struct FSBSeasonPassQuestInfo& InQuestInfo);
		void Client_ResetQuestList();
		void Client_ReloadSeasonPassQuest(const class FString& InPrevQuestId, const class FString& InPrevGroupId, const struct FSBSeasonPassQuestItemData& InNewQuestData, ESBAutoDeliveryQuestReloadType InReloadType, bool InSuccess, int32_t ReturnCode, const struct FSBSeasonPassQuestInfo& InQuestInfo);
		void Client_QuestUpdateLogPutParse(const struct FSBSeasonPassQuestListManager& InSeasonPassQuestListManager, const class FString& InMsg);
		void Client_QuestAchievemented(ESBSeasonPassQuestCycleType CycleType, TArray<struct FSBTextTableHash> InQuestListData);
		void Client_CompleteQuest(const struct FSBSeasonPassQuestListManager& InQuestManager, ESBAutoDeliveryRewardStatus RewardStatus, int32_t ReturnCode, const struct FSBAutoQuestComponentData& AutoQuestData, bool InOpenCommandMenuFlag);
		void Client_AddQuestItemData(ESBSeasonPassQuestCycleType CycleType, TArray<struct FSBSeasonPassQuestItemData> InItemList, int32_t InListMax);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAutoDeliveryQuestFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBAutoDeliveryQuestFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void QuestReadedCycleType(class UObject* InWorldContextObject, ESBSeasonPassQuestCycleType InCycleType);
		void QuestReadedAll(class UObject* InWorldContextObject);
		void QuestListReaded(class UObject* InWorldContextObject, TArray<struct FSBSeasonPassQuestItemData> InItemList);
		bool IsUpdatePointQuest(class UObject* InWorldContextObject);
		bool IsUpdateAutoDeliveryQuestCycleType(class UObject* InWorldContextObject, ESBSeasonPassQuestCycleType InCycleType);
		bool IsUpdateAutoDeliveryQuest(class UObject* InWorldContextObject);
		bool IsUpdateAutoDeliveryEventQuestStackAll(class UObject* InWorldContextObject);
		bool IsUpdateAutoDeliveryEventQuest(class UObject* InWorldContextObject, int32_t InEventId);
		bool IsNewQuestStockCycleType(class UObject* InWorldContextObject, ESBSeasonPassQuestCycleType InCycleType);
		bool IsNewQuestStockAll(class UObject* InWorldContextObject);
		bool IsNewPointQuestStockAll(class UObject* InWorldContextObject);
		bool IsNewEventQuestStockAll(class UObject* InWorldContextObject);
		bool IsNewEventQuest(class UObject* InWorldContextObject, int32_t InEventId);
		bool IsAutoDeliveryQuestUIQuestIdDraw();
		int32_t GetProgressCount(const struct FSBSeasonPassQuestItemData& InItemData);
		void GetNowSeasonWeekStartDate(class UObject* InWorldContextObject, const struct FDateTime& InSeasonStartDate, struct FDateTime* OutWeekStartDate);
		int32_t GetNowSeasonWeekCount(class UObject* InWorldContextObject);
		int32_t GetEventUnlockDays(class UObject* InWorldContextObject, const struct FSBSeasonPassQuestItemData& QuestItem);
		bool GetEventQuestProgressEndDate(class UObject* InWorldContextObject, int32_t InEventId, struct FDateTime* OutProgressEndTime);
		bool GetEventQuestEndDate(class UObject* InWorldContextObject, int32_t InEventId, struct FDateTime* OutQuestEndTime);
		int32_t GetCompleteCount(const struct FSBSeasonPassQuestItemData& InItemData);
		void CreateNewMarkDataId(class FString* OutMarkId, const struct FSBSeasonPassQuestItemData& InItem);
		bool AutoDeliveryQuest_IsOneWeekOver(class UObject* InWorldContextObject, const struct FSBSeasonPassQuestItemData& InItemData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAwardComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBPlayerAwardComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnAwardsDelegate;                                        // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetSortData(TArray<struct FPlayerAwardData>* InAwardData, ESBAwardSortType InSortType);
		void Server_AddAwardIdList(TArray<int32_t> InAwardIdList);
		void Request_LoadAwardList();
		void OnAwardsDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FPlayerAwardData> AwardIdList);
		void Client_SetAwardIdList(TArray<int32_t> AwardIdList);
		void Client_AddAwardIdList(TArray<int32_t> InAwardIdList);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerBehaviorHistoryLogComponent
	 * Size -> 0x0098 (FullSize[0x0168] - InheritedSize[0x00D0])
	 */
	class USBPlayerBehaviorHistoryLogComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_4Q01[0x98];                                  // 0x00D0(0x0098) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerBPFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerBPFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool SetRouteGuideDestination(class UObject* WorldContextObject, const class FName& DestinationId);
		void SetHideSpawnEffect(bool IsHideSpwanEffect, bool IsHideFadeInEffect);
		bool SetDefaultPlayCharacter(class UObject* WorldContextObject, const class FString& CharacterId);
		void PlayerCharcterAutoMoveStop(class UObject* WorldContextObject);
		bool IsPlayerClassRedistered(ESBClassType ClassType);
		bool IsPlayAnimationSit(class ASBPlayerCharacter* PlayerCharacter);
		bool IsGlitterModeActive(class AActor* OwnerActor);
		bool IsBlockResponseWithPlayerPawn(class UPrimitiveComponent* HitComponent);
		float GetPointDistToCameraPlayerSegment(class UObject* WorldContextObject, const struct FVector& Point);
		class FString GetPlayerName(class UObject* WorldContextObject);
		class FString GetPlayerId(class UObject* WorldContextObject);
		float GetPlayerHeightScale(class ASBPlayerCharacter* PlayerCharacter, float StandardHeight);
		class FString GetLogedInPlayerName(class UObject* WorldContextObject);
		bool GetLogedInPlayerCharactersCharaCreateParameter(class UObject* WorldContextObject, TArray<struct FSBCharaCreateParameter>* OutCharaCreateParameters);
		bool GetLogedInPlayerCharacters(class UObject* WorldContextObject, TArray<struct FSBUserOnlineAccountCharacter>* OutCharacters, bool bUseScenarioData);
		ESBLoginBanType GetLogedInPlayerBanType(class UObject* WorldContextObject);
		struct FSBPlayerBanFinishedTimeInfo GetLogedInPlayerBanFinishedAt(class UObject* WorldContextObject);
		ESBLoginBanDurationType GetLogedInPlayerBanDurationType(class UObject* WorldContextObject);
		bool GetDefaultPlayCharacter(class UObject* WorldContextObject, struct FSBUserOnlineAccountCharacter* OutCharacter);
		bool GetContentLock(class UObject* WorldContextObject, ESBContentLockType InContentLockType);
		ESBRewardBoostStackBItemType ConvertRewardBoostType(EItemType ItemType, int32_t ItemId);
		void AddMovementInput(class ASBPlayerCharacter* PlayerCharacter, const struct FVector& WorldDirection, float ScaleValue, bool bForce);
		void AddActorWorldOffset(class ASBPlayerCharacter* PlayerCharacter, const struct FVector& DeltaLocation, bool bSweep, bool bTeleport);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerBreakSkillController
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPlayerBreakSkillController : public USBPlayerSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerBuddyVoiceComponent
	 * Size -> 0x0010 (FullSize[0x00E0] - InheritedSize[0x00D0])
	 */
	class USBPlayerBuddyVoiceComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_8642[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HitPointThresholdPar;                                    // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TreasureBoxDistance;                                     // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCacheComponent
	 * Size -> 0x0058 (FullSize[0x0110] - InheritedSize[0x00B8])
	 */
	class USBPlayerCacheComponent : public USBPlayerPropertyComponent
	{
	public:
		unsigned char                                              UnknownData_FRM9[0x58];                                  // 0x00B8(0x0058) MISSED OFFSET (PADDING)

	public:
		void ServerPushCacheProperty(const struct FSBClientManagedProperty& ClientProperty);
		void ClientPushCacheProperty();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSceneComponent
	 * Size -> 0x0018 (FullSize[0x0220] - InheritedSize[0x0208])
	 */
	class USBPlayerSceneComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_2MV7[0x8];                                   // 0x0208(0x0008) Fix Super Size
		unsigned char                                              UnknownData_HROX[0x10];                                  // 0x0210(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCameraComponent
	 * Size -> 0x08E0 (FullSize[0x0B00] - InheritedSize[0x0220])
	 */
	class USBPlayerCameraComponent : public USBPlayerSceneComponent
	{
	public:
		class USBSpringArmComponent*                               CameraArmComponent;                                      // 0x0220(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCameraComponent*                                    CameraComponent;                                         // 0x0228(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZVK1[0x28];                                  // 0x0230(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CameraArmSweepCollisionShapeSize;                        // 0x0258(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CameraArmImpactNormalScale;                              // 0x025C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CameraInWaterOffsetScale;                                // 0x0260(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ComponentLocationOffsetDeltaTime;                        // 0x0264(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I5K3[0x10];                                  // 0x0268(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDataTable*>                                  BaseGameplayCameraSettingsDataTable;                     // 0x0278(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UDataTable*>                                  ClassGameplayCameraSettingsDataTable;                    // 0x0288(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HIGD[0x10];                                  // 0x0298(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCameraDistanceTransparentParam                   CameraDistanceTransparentParam;                          // 0x02A8(0x000C) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N8SY[0x14];                                  // 0x02B4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPlayerCameraData                                   CurrentCameraData;                                       // 0x02C8(0x0178) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0LS2[0x534];                                 // 0x0440(0x0534) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ChangeCameraSpeedNearTarget;                             // 0x0974(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QUAS[0x3];                                   // 0x0975(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NearTargetCameraAngle;                                   // 0x0978(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V4RQ[0x4];                                   // 0x097C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              NearTargetCameraSpeedCurve[0x28];                        // 0x0980(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       CameraFollowTarget;                                      // 0x09A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5PD7[0x3];                                   // 0x09A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FollowTargetAngleRange;                                  // 0x09AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              NearTargetCameraFollowCurve[0x28];                       // 0x09B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_W758[0x8];                                   // 0x09D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      KeepAimNearLimitLength;                                  // 0x09E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DB6Y[0x2C];                                  // 0x09E4(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SwimCameraUpperLocationOffsetZ;                          // 0x0A10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SwimCameraPlayerHiddenPitch;                             // 0x0A14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          LockOnCameraSettingsDataTable;                           // 0x0A18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G5K5[0xB8];                                  // 0x0A20(0x00B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialParameterCollection*                        EnvironmentMaterialParameterCollection;                  // 0x0AD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OLZ8[0xC];                                   // 0x0AE0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             DebugSocketOffset;                                       // 0x0AEC(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsUseDebugSocketOffset;                                  // 0x0AF8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U298[0x7];                                   // 0x0AF9(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetZoomLevelByArmLength(float ArmLengthData);
		void SetDebugSocketOffsetEnable(bool IsEnable);
		void SetActorLocationToDebugCamreraLocation();
		void ResetCameraRotation(float BlendTime);
		bool RequestCameraQueue(const class FString& CameraID, bool IsAdd);
		struct FRotator GetPlayerControllerRotation();
		class ASBPlayerCharacter* GetOwnerPlayer();
		struct FRotator GetCameraRotation();
		float GetCameraFov();
		class UCameraComponent* GetCameraComponent();
		float GetCameraArmLength();
		class USBSpringArmComponent* GetCameraArmComponent();
		void DebugSetPlayerControllerRotation(bool isSetPitch, float Pitch, bool isSetYaw, float Yaw, bool isSetRoll, float Roll);
		void DebugSetMainCameraFov(float FOV);
		void DebugSetCurrentCameraRotationSpeed(bool isSetYaw, float Yaw, bool isSetPitch, float Pitch, bool isSetMouseYaw, float MouseYaw, bool isSetMousePitch, float MousePitch);
		void DebugSetCameraArmLength(float ArmLength);
		void DebugCameraReset();
		void DebugCameraMoveUp(float Val);
		void DebugCameraMoveRight(float Val);
		void DebugCameraMoveForward(float Val);
		void DebugCameraLookUp(float Val);
		void DebugCameraLookRight(float Val);
		void ClearCameraQueue();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCameraInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerCameraInterface : public UInterface
	{
	public:
		class USBPlayerCameraComponent* GetPlayerCameraComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSpringArmComponent
	 * Size -> 0x00B0 (FullSize[0x0340] - InheritedSize[0x0290])
	 */
	class USBSpringArmComponent : public USpringArmComponent
	{
	public:
		unsigned char                                              UnknownData_M76B[0xB0];                                  // 0x0290(0x00B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCharacter
	 * Size -> 0x2CD0 (FullSize[0x4110] - InheritedSize[0x1440])
	 */
	class ASBPlayerCharacter : public ASBCreationCharacter
	{
	public:
		unsigned char                                              UnknownData_11BK[0x140];                                 // 0x1440(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerMovementComponent*                          PlayerMovement;                                          // 0x1580(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBPlayerController*                                 SBPlayerController;                                      // 0x1588(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		class USBCharacterAnimationSamplingComponent*              AnimationSamplingComp;                                   // 0x1590(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCharacterTrackingComponent*                       CharacterTrackingComponent;                              // 0x1598(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7YV1[0x28];                                  // 0x15A0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerTakeAnyDamage;                                   // 0x15C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_74JC[0x10];                                  // 0x15D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCharacterStatus                                  m_ReplicateStatusParameter;                              // 0x15E8(0x0040) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_DO3Z[0x760];                                 // 0x1628(0x0760) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCalcEquipStatusDiffDelegate;                           // 0x1D88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStatusDiffAtRecalc2ndStatusDelegate;                   // 0x1D98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              DashStartFootprint[0x28];                                // 0x1DA8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class USBDhcBattleComponent*                               m_pDhcBattleComponent;                                   // 0x1DD0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class USBPlayerPresetEquipComponent*                       m_pPresetEquipComponent;                                 // 0x1DD8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBNetworkSmoothMoveComponent*                       m_NetworkSmoothMoveComponent;                            // 0x1DE0(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_XFUK[0x20];                                  // 0x1DE8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       TurnYawFlag;                                             // 0x1E08(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_J5S7[0x3];                                   // 0x1E09(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AcceleratorSpeedStart;                                   // 0x1E0C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AcceleratorSpeedEnd;                                     // 0x1E10(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AcceleratorInputRun;                                     // 0x1E14(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AcceleratorSlopeSpeedStart;                              // 0x1E18(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AcceleratorSlopeSpeedEnd;                                // 0x1E1C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A2T8[0x10];                                  // 0x1E20(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MarkerAutoRunEndDistance;                                // 0x1E30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XF2D[0xD0];                                  // 0x1E34(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FollowingDistance;                                       // 0x1F04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               FollowingActor;                                          // 0x1F08(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		class FString                                              FollowingCharacterId;                                    // 0x1F10(0x0010) Net, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		class USBPlayerCameraComponent*                            m_pPlayerCameraComponent;                                // 0x1F20(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_11J9[0x20];                                  // 0x1F28(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetRoughDirection                           m_ReplicatedAimDirection;                                // 0x1F48(0x000C) Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_TZ3V[0x1C];                                  // 0x1F54(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBMeshClimbingComponent*                            m_pMeshClimbingComponent;                                // 0x1F70(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class USBPlayerTargetingComponent*                         m_pPlayerTargetingComponent;                             // 0x1F78(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_MBKF[0x8];                                   // 0x1F80(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerInteractionComponent*                       m_pPlayerInteractionComponent;                           // 0x1F88(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_AVVT[0x8];                                   // 0x1F90(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnJankenUIDelegate;                                      // 0x1F98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBPlayerHoldHandComponent*                          m_HoldHandComponent;                                     // 0x1FA8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class USBAutoWordComponent*                                AutoWordComponent;                                       // 0x1FB0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBRoleType                                                RoleType;                                                // 0x1FB8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QGDZ[0x37];                                  // 0x1FB9(0x0037) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStaminaConsumeDelegate;                                // 0x1FF0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStaminaRecoveredDelegate;                              // 0x2000(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSBStaminaSettings                                  StaminaSettings;                                         // 0x2010(0x0010) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBStaminaSettings                                  m_UnsheatheStaminaSetting;                               // 0x2020(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      CarryingDecreaseStamina;                                 // 0x2030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarryingRunConsumeStamina;                               // 0x2034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarryingIncreaseStamina;                                 // 0x2038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CarryingStaminaDelay;                                    // 0x203C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZM72[0x20];                                  // 0x2040(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBRaidBattleComponent*                              m_pPlayerRaidBattleComponent;                            // 0x2060(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VVPS[0x68];                                  // 0x2068(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnServerReplicateStateInfoDelegate;                      // 0x20D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RCI3[0x50];                                  // 0x20E0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUnsheathe : 1;                                          // 0x2130(0x0001) BIT_FIELD Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_Q8UP[0xF];                                   // 0x2131(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerCliffComponent*                             CliffComponent;                                          // 0x2140(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnGiveDamageBattleLogDelegate;                           // 0x2148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeathDelegate;                                         // 0x2158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      CurrentDiedCountDown;                                    // 0x2168(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TickDeadDelay;                                           // 0x216C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<ESBAbilityFlags>                                    ChangeRespawnPointAbilityFlagList;                       // 0x2170(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class FString>                                      ChangeRespawnPointGameContentIdList;                     // 0x2180(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_29RS[0x200];                                 // 0x2190(0x0200) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FieldDeadDiedCountDown;                                  // 0x2390(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SBJ2[0x4];                                   // 0x2394(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerAppearEffectComponent*                      m_pPlayerAppearEffectComponent;                          // 0x2398(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class USBPlayerResurrectionComponent*                      m_pPlayerResurrectionComponent;                          // 0x23A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class FScriptMulticastDelegate                             OnResurrectionDelegate;                                  // 0x23A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBPlayerSkillActionComponent*                       SkillActionComponent;                                    // 0x23B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		struct FSBSkillAction                                      SkillAction;                                             // 0x23C0(0x0510) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FCharaSkillMasteryInfo>                      m_ReplicatedSkillMasteryList;                            // 0x28D0(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_ZEIA[0x18];                                  // 0x28E0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerSkillIDForReplicate                        m_SkillIDForReplication;                                 // 0x28F8(0x0070) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_82PU[0x68];                                  // 0x2968(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerSkillMarker*                                m_pSkillMarkerComponent;                                 // 0x29D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9RT5[0x10];                                  // 0x29D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESkillActionPosition                                       m_LastSetupSkillPosition;                                // 0x29E8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_86X1[0xBF];                                  // 0x29E9(0x00BF) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayerAttackHitRecastSetting>             AttackHitRecastSettingList;                              // 0x2AA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V9SW[0x14];                                  // 0x2AB8(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    HiddenSkillPaletteRecastModifyPercent;                   // 0x2ACC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B44L[0x54];                                  // 0x2AD0(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBAttackSettings                                   AttackLight;                                             // 0x2B24(0x000C) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBAttackSettings                                   AttackLightSpecial;                                      // 0x2B30(0x000C) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBAttackSettings                                   AttackHigh;                                              // 0x2B3C(0x000C) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBAttackSettings                                   AttackHighSpecial;                                       // 0x2B48(0x000C) Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q7MC[0x4];                                   // 0x2B54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSkillAnimationStartDelegate;                           // 0x2B58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSkillChangedDelegate;                                  // 0x2B68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnImagineArtsChangedDelegate;                            // 0x2B78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_285X[0x20];                                  // 0x2B88(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerSpecialSkill*                               m_pPlayerSpecialSkillComponent;                          // 0x2BA8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		TArray<struct FSBEffectAsset>                              m_SpecialSkillEffectList;                                // 0x2BB0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LOYK[0x8];                                   // 0x2BC0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayingEffect>                            m_PlayingSpecialSkillEffectList;                         // 0x2BC8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_6RA2[0x878];                                 // 0x2BD8(0x0878) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBInventoryWeapon>                          AdditionalInventoryWeapons;                              // 0x3450(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnSpawnInventoryWeaponDelegate;                          // 0x3460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSBPlayerEquipWeaponParameterCache                  EquipWeaponParamCache;                                   // 0x3470(0x0018) Net, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		class USBPlayerGuardComponent*                             m_pPlayerGuardComponent;                                 // 0x3488(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASBEnemyCharacter*>                           FindByEnemyList;                                         // 0x3490(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_NKWU[0x38];                                  // 0x34A0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TrainingAreaOverlapNum;                                  // 0x34D8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DE97[0x4];                                   // 0x34DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBEnemyCharacter*>                           BuddyList;                                               // 0x34E0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4SCW[0x1];                                   // 0x34F0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCountCombo;                                             // 0x34F1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P7XZ[0x2];                                   // 0x34F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_ComboCount;                                            // 0x34F4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_F0AE[0x8];                                   // 0x34F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBPlayerCharacter*                                  m_PartyLeaderPlayer;                                     // 0x3500(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ASBPlayerCharacter*>                          m_PartyMemberPlayerList;                                 // 0x3508(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    m_PartyChainComboCount;                                  // 0x3518(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_PartyChainComboKeepTimer;                              // 0x351C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_PartyChainComboCoolTimer;                              // 0x3520(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       m_bInPartyChainComboDistance;                            // 0x3524(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBPartyChainSettingType                                   m_PartyChainSettingType;                                 // 0x3525(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3PI2[0xA];                                   // 0x3526(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              AnimationSetMale[0x28];                                  // 0x3530(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnimationSetFemale[0x28];                                // 0x3558(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnimationSetMaleNoBattle[0x28];                          // 0x3580(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AnimationSetFemaleNoBattle[0x28];                        // 0x35A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              StateMachine[0x28];                                      // 0x35D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UpperBodyStateMachine[0x28];                             // 0x35F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AimOffsetStateMachine[0x28];                             // 0x3620(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AdditiveLandingStateMachine[0x28];                       // 0x3648(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AdditiveMeshSpaceStateMachine[0x28];                     // 0x3670(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AdditiveLocalSpaceStateMachine[0x28];                    // 0x3698(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_UZVY[0x28];                                  // 0x36C0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAimBodyBlendRateSetting>                  m_AimBodyBlendRateAdjustSettingList;                     // 0x36E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TNBI[0xB6];                                  // 0x36F8(0x00B6) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              m_TrainAnimationStep;                                    // 0x37AE(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_OQE4[0x26];                                  // 0x37AF(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerLoadCompleteParam                          m_LoadCompleteParam;                                     // 0x37D5(0x0001) Net, Transient, NoDestructor, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_RSHL[0x2];                                   // 0x37D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLoadCompletePlayerDelegate;                            // 0x37D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_INUK[0x2];                                   // 0x37E8(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPlayerInitialParametersLoadCompleted;                   // 0x37EA(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_FJ7C[0x25];                                  // 0x37EB(0x0025) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerWarpComponent*                              m_pWarpComponent;                                        // 0x3810(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class AActor*                                              WarpPointActor;                                          // 0x3818(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerFishingComponent*                           m_pPlayerFishingComponent;                               // 0x3820(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnActivateBuffToPlayerDelegate;                          // 0x3828(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LQ23[0x8];                                   // 0x3838(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_DefaultPlayerNetCullHiddenTimer;                       // 0x3840(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RPDX[0x5C];                                  // 0x3844(0x005C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_DefaultPlayerDisableUpdateProcessTimer;                // 0x38A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KLQI[0x8];                                   // 0x38A4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_SpecifyReasonHiddenPlayerWarpThreshold;                // 0x38AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OHGM[0x30];                                  // 0x38B0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBProjectileHitTargetLimitComponent*                ProjectileHitTargetLimitComponent;                       // 0x38E0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C1HD[0x2C];                                  // 0x38E8(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NowSummoningMountIndex;                                  // 0x3914(0x0004) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HAM5[0x78];                                  // 0x3918(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBEnemyCharacter*>                           MountOverlapEnemies;                                     // 0x3990(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2NX5[0x58];                                  // 0x39A0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              MountEnergyRecoverActor;                                 // 0x39F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LOJ9[0x40];                                  // 0x3A00(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MountingImagineMountIndex;                               // 0x3A40(0x0004) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5TH4[0x34];                                  // 0x3A44(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsAttachMountConditionRequest;                          // 0x3A78(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OSE8[0x5B];                                  // 0x3A79(0x005B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MountDisableAreaOverlapNum;                              // 0x3AD4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2HZN[0x88];                                  // 0x3AD8(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayerEquipPassiveImagine>                EquipPassiveImagineList;                                 // 0x3B60(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FSBPlayingEffect                                    m_PlayingLevelUpEffect;                                  // 0x3B70(0x00C8) Transient, Protected, NativeAccessSpecifierProtected
		struct FSBPlayingEffect                                    m_PlayingAdventurerRankUpEffect;                         // 0x3C38(0x00C8) Transient, Protected, NativeAccessSpecifierProtected
		struct FSBPlayerPassiveArtsReplication                     m_PassiveArtsReplication;                                // 0x3D00(0x0010) Net, Transient, RepNotify, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		ESBClassType                                               ClassType;                                               // 0x3D10(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              Level;                                                   // 0x3D11(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OK1M[0x6];                                   // 0x3D12(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPCClassComponentBase*                             PlayerCharacterClassComponent;                           // 0x3D18(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBPlayerCharacterLevelSyncComponent*                LevelSyncComponent;                                      // 0x3D20(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESBStackBEnableType                                        StackBEnableType;                                        // 0x3D28(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O10W[0x17];                                  // 0x3D29(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAtGatheringPopupDelegate;                              // 0x3D40(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UYBL[0x40];                                  // 0x3D50(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       m_bIsCarrying;                                           // 0x3D90(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       m_bIsFreeArranging;                                      // 0x3D91(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5LZY[0x6];                                   // 0x3D92(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerContentActionComponent*                     ContentActionComponent;                                  // 0x3D98(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_51BT[0x14];                                  // 0x3DA0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayerMiniMapInfo                                MiniMapInfo;                                             // 0x3DB4(0x000C) BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7MWM[0x30];                                  // 0x3DC0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBAIControllerBot*                                  SBAIControllerBot;                                       // 0x3DF0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PAD4[0x1];                                   // 0x3DF8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bCountdownUIActive;                                      // 0x3DF9(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HNXK[0x6];                                   // 0x3DFA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCountdownCancelDelegate;                               // 0x3E00(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCountdownInteractionDelegate;                          // 0x3E10(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H6OO[0x20];                                  // 0x3E20(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              LocalHitSE[0x28];                                        // 0x3E40(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EnemyDeadAttackSE[0x28];                                 // 0x3E68(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ResourceShortageSE[0x28];                                // 0x3E90(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UAkComponent*                                        VoiceComponent;                                          // 0x3EB8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_55HM[0x10];                                  // 0x3EC0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerBuddyVoiceComponent*                        m_pPlayerBuddyVoiceComponent;                            // 0x3ED0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class UStaticMeshComponent*                                FaceLODComp;                                             // 0x3ED8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    FaceLODLevel;                                            // 0x3EE0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FP4B[0x4];                                   // 0x3EE4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         FaceStaticMeshMale;                                      // 0x3EE8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         FaceStaticMeshFemale;                                    // 0x3EF0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3YR5[0x8];                                   // 0x3EF8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerAdminFuncComponent*                         AdminFuncComp;                                           // 0x3F00(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, struct FSBPlayerAttackInfoForEnemy>      PlayerAttackInfoForEnemy;                                // 0x3F08(0x0050) Deprecated, NativeAccessSpecifierPublic
		int32_t                                                    CampCollisionCount;                                      // 0x3F58(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsCampFireUsed;                                          // 0x3F5C(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U4MC[0x3];                                   // 0x3F5D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StatusAlimentByDelayTime;                                // 0x3F60(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T6DF[0x6C];                                  // 0x3F64(0x006C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerEngramCannonComponent*                      m_pPlayerEngramCannonComponent;                          // 0x3FD0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		class USBPlayerCheerfulItemComponent*                      m_pPlayerCheerfulItemComponent;                          // 0x3FD8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnRequestTermCommandMenuDelegate;                        // 0x3FE0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZKIA[0x10];                                  // 0x3FF0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerBehaviorHistoryLogComponent*                m_pPlayerBehaviorHistoryLogComponent;                    // 0x4000(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_D30H[0x100];                                 // 0x4008(0x0100) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerDebugComponent*                             DebugComponent;                                          // 0x4108(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool WillClassChangeByEquipChange(const class FString& AddEquipUniqueID, bool InUseStorage);
		bool WasHitAttack();
		void TurnActorToAimDirectionConstant(float DeltaTime, float InterpSpeed, bool bIgnoreRange);
		void TurnActorToAimDirection(bool bIgnoreRange);
		void TrainingAreaOverlapStart();
		void TrainingAreaOverlapEnd();
		void TickMovingNoise(float DeltaTime);
		void TeleportWithDelay(const struct FVector& Location, const struct FRotator& Rotation, bool bWithFade, float DelayTime);
		bool TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation, bool bIsATest, bool bNoCheck);
		void StopMountEnergyRecoverOnServer();
		void StopMountEnergyRecover();
		void StartMountInterval();
		void StartMountGettingOff();
		void StartMountEnergyRecoverOnServer(class AActor* InCauserActor);
		void StartMountEnergyRecover(class AActor* InCauserActor);
		void SpawnWeapon(TArray<struct FSBSpawnWeaponLoadParam> RequestSpawnWeapons);
		void ShowHitIndicator(const struct FVector& InHitPosition, class AActor* InDamageCauser);
		void SetupSkillPreInputNextAttack();
		void SetupSkillAtPosition(ESkillActionPosition Position);
		void SetupLimitedKeyBind(TArray<ESBKeyConfigAction> ActionList);
		void SetupKeyBind();
		void SetUnsheathed();
		void SetSpecialGauge(float Value);
		void SetSheathed();
		void SetPlayerRespawnLocationInfo(const struct FVector& NewLocation, float NewYaw);
		void SetMountStartDashRate(float Rate);
		void SetMountLocomotionNotify(bool isNotify);
		void SetMountEnergyTimeDamageScale(float InMountEnergyTimeDamageScale);
		void SetMiniMapRouteVisibility(bool Visibility);
		void SetMiniMapId(const class FName& MiniMapId);
		void SetLevel(int32_t InLevel);
		void SetLastEmoteStateName(const class FString& Value);
		void SetIsRunMountImagine(bool IsRun);
		void SetIsHandIkActiveForMount(bool Active);
		void SetIsHandIkActiveForCarry(bool carry);
		void SetInCoinPubPrivateRoom(const class FString& TriggerName, bool bIsIn);
		void SetFreeArrangeFlag(bool InFlag);
		void SetFastRecoveryEmote(bool Flag);
		void SetFailedSummonMount();
		void SetEnableAvatarRandomWaitFlag(bool InFlag);
		void SetEditWholeMap(bool Flag);
		void SetDamageCollisionTransformType(ESBPlayerDamageCollisionTransformType TransformType);
		void SetChangePassiveImagineRequestFlag(bool bInIsFlagOn);
		void SetCarryFlag(bool carry);
		void SetCannotInput(ESBCannotInputType Type, bool bOn);
		void SetAimParam(ESBAimDirection DirectionType, const class FName& StateMachineName, float AimBodyPitchRangeMin, float AimBodyPitchRangeMax, float AimBodyYawRangeMin, float AimBodyYawRangeMax, bool bInterpolation, float AimBodyPitchSpeed, float AimBodyYawSpeed, bool bAutoEndInterpolation);
		void SetAcceleratorSlope(float Slope);
		void SetAbnormalRemoteMountState(bool isAbnormal);
		void ServerUpdateFreeArrangeLocation(class AActor* InActor, const struct FVector& InVector, const struct FRotator& InRotator);
		void ServerUpdateFreeArrangeFlag(bool InFlag);
		void ServerUpdateCarryLocation(class AActor* CarryObj, const struct FVector& Location, const struct FRotator& Rotation);
		void ServerUpdateCarryFlag(bool carry);
		void ServerStartMountDirect(int32_t InMountingImagineMountIndex);
		void ServerStartGather(class ASBFieldActorGatherPoint* GatherPoint, float GatherMotionLoopTime);
		void ServerSpawnImagineCharacterInstance(class UClass* AssetClass, int32_t ImagineIndex, const struct FTransform& InMountSpawnTransform);
		void ServerShowLogIsPushModelEnabled();
		void ServerSetupPlayerOnMount(bool InIsPlayerOnMount, float InTargetableCompHeightOffset, float InCapsuleCollisionHeightOffset);
		void ServerSetUnsheathed(bool which);
		void ServerSetTrainAnimationStep(int32_t TrainAnimationStep);
		void ServerSetSpecialGauge(float Value);
		void ServerSetReplicateMovement(bool bNewFlag);
		void ServerSetMountingImagineMountIndex(int32_t InMountingImagineMountIndex);
		void ServerSetMiniMapInfo(const struct FSBPlayerMiniMapInfo& Info);
		void ServerSetLoadCompleteParam(const struct FSBPlayerLoadCompleteParam& Param);
		void ServerSetLastSetupSkillID(ESkillActionPosition Position);
		void ServerSetIsRunMountImagine(bool IsRun);
		void ServerSetDebugMoveFlag(bool EnableDebugMove);
		void ServerSetDamageState(bool bEnable);
		void ServerSetCurrentMountEnergy(float SetMountEnergy);
		void ServerSetCurrentFightingStyle(int32_t FightingStyle);
		void ServerSetAimDirection(const struct FVector_NetRoughDirection& AimDirection);
		void ServerResetSkillSound();
		void ServerResetComboCount();
		void ServerResetCheatCheck_MoveOnServer_FlyingHistory();
		void ServerResetBattleStatus();
		void ServerRequestUnequipImagineData(ESBCharaEquipType ImagineCharaEquipType);
		void ServerRequestResetMountDirect(int32_t ImagineMountIndex);
		void ServerRequestLoadImagineMount(int32_t ImagineTableIndex);
		void ServerRequestLoadAsset();
		void ServerRequestChangePassiveImagine(ESBPlayerPassiveImagineSlotType Slot, const class FString& UniqueId);
		void ServerRequestChangeImagineData(ESBCharaEquipType ImagineCharaEquipType, const class FString& UniqueId);
		void ServerReplicateStateInfo_Unreliable(const struct FRepMovement& InReplicatedMovement, const struct FASReplicateStateInfo& InReplicateStateInfo, int8_t InMovementMode, const struct FSBPlayerRepStateCheatInfo& InCheatInfo);
		void ServerReplicateStateInfo_Reliable(const struct FRepMovement& InReplicatedMovement, const struct FASReplicateStateInfo& InReplicateStateInfo, int8_t InMovementMode, const struct FSBPlayerRepStateCheatInfo& InCheatInfo);
		void ServerReplicateStateInfo(bool bReliable);
		void ServerReplicateMovementInfo_Reliable(const struct FRepMovement& InReplicatedMovement, int8_t InMovementMode, bool bMulticast, bool bWarp);
		void ServerReplicateMovementInfo(bool bMulticast, bool bWarp);
		void ServerRemoveOverlapEmemy(class ASBEnemyCharacter* OverlapEnemy);
		void ServerRegisterMountingPlayerAttachTransform(const struct FVector& attachPlayerPos, const struct FRotator& attachPlayerRot);
		void ServerOutputLogMountRideAction(bool bIsStartMount, int32_t SummonMountID);
		void ServerOutputLogMountAttachState(bool bIsStartMount);
		void ServerNotifySkillAnimationStart(ESkillActionPosition Position, const struct FVector& AttackDir, uint16_t SamplingId);
		void ServerNotifySkillAnimationEnd(ESkillActionPosition Position);
		void ServerNotifyProjectileHitWithCompName(ESkillActionPosition Position, class AActor* OtherActor, const class FName& OtherCompName, const struct FHitResult& HitResult);
		void ServerNotifyProjectileHit(ESkillActionPosition Position, class AActor* OtherActor, const struct FHitResult& HitResult);
		void ServerNotifyMountAttachState(bool bIsAttach);
		void ServerNotifyDodgeAttackStart(bool bDodgeSucceeded);
		void ServerNotifyAerialAttackBonus(bool bBonus);
		void ServerMountAttachTiming();
		void ServerIntentionalDisconnection(const class FString& InReasonMessage, ESBCheatOshiokiType InCheatOshiokiType);
		void ServerExecMountJumpOnLaunch(const struct FVector& LaunchVelocity);
		void ServerExecMountFailedLaunch(const struct FVector& LaunchVelocity);
		void ServerEndGather(bool bSuccess);
		void ServerDetachMount(bool bIsDirect);
		void ServerDestroyImagineCharacterInstance(ESBImagineSummonCharacter ImagineType);
		void ServerDebugEnergyTireless(bool TirelessEnable);
		void ServerDebugEnergyRecovery(float EnergyRecoveryValue);
		void ServerCheckSatisfiedCondition(ESkillActionPosition Position, const struct FSBCheatCheckSendData_OnCastSkill& CheatCheckSendData);
		void ServerCheckMountEnergyIsIllegalValue(float ClientEnergy);
		void ServerChangeSkill(ESkillActionPosition Position, int32_t SkillId);
		void ServerChangeImagineArtsByName(int32_t ImagineArtsSlotIndex, const class FName& ImagineArtsName);
		void ServerCastSkill(ESkillActionPosition Position, const struct FSBPlayerCastSkillCheatInfo& CastSkillInfo, const struct FSBCheatCheckSendData_OnCastSkill& CheatCheckSendData);
		void ServerCalcEquipStatusDiff_PresetEquip(TArray<struct FSBPlayerPresetEquipItem> InEquipItemList);
		void ServerCalcEquipStatusDiff(const class FString& CurrentUniqueID, const class FString& NextUniqueID, bool InUseStorage);
		void ServerAddOverlapEmemy(class ASBEnemyCharacter* OverlapEnemy);
		void Server_SyncEnemyHitPoint(class ASBEnemyCharacter* InEnemy);
		void Server_SetFollow(class AActor* Followee, const class FString& CharacterId);
		void Server_RequestServerGiveDeactivateStatusGroupByInteraction(class ASBPlayerCharacter* DstPlayerCharacter);
		void Server_RequestNotifyHatedTargetTakeAction(float HateValue);
		void Server_ReqEnemyImportantBattleEffective(class ASBEnemyCharacter* InEnemy);
		void Server_OnSavePresetEquipment(int32_t InListIndex, const struct FSBPlayerPresetEquipList& InPresetEquipList, TArray<struct FSBPlayerPresetEquipItem> InPresetEquipItems, int32_t InRetCode);
		void Server_OnPlayerLevelUp();
		void Server_OnPlayerAdventurerRankUp();
		void Server_OnLoadPresetEquipmentList(TArray<struct FSBPlayerPresetEquipList> InPresetEquipLists, TArray<struct FSBPlayerPresetEquipItem> InPresetEquipItems, int32_t InRetCode);
		void Server_LoadPresetEquipmentParam(int32_t RetCode);
		void SelfRespawn_Server(bool Force);
		void SelfRespawn_Multicast(bool Success);
		void ResetRecastTime();
		void ResetMountLocalDirect(bool bIsAutoCallToRemote);
		void ResetImagineArtsRecastTime();
		void ResetForDemo();
		void ResetDodgeSucceededFlag();
		void RequestServerGiveDeactivateStatusGroupByInteraction(class ASBPlayerCharacter* DstPlayerCharacter);
		void RequestSelfRespawn(bool Force);
		void RequestNotifyHatedTargetTakeAction(float HateValue);
		void RequestJointGesture(bool bRequest);
		void RequestFinishMountDirect();
		void RequestFinishMount();
		void RequestChangePassiveImagine(ESBPlayerPassiveImagineSlotType Slot, const class FString& UniqueId);
		void RequestChangeImagineArts(int32_t ImagineArtsSlotIndex, const class FString& UniqueId);
		void RequestCalcEquipStatusDiff_BattleSet(TArray<struct FSBPlayerPresetEquipItem> InEquipItemList, bool InUseStorage);
		void RequestCalcEquipStatusDiff(const class FString& CurrentUniqueID, const class FString& NextUniqueID, bool InUseStorage);
		void Request_SwapPresetEquipmentList(int32_t InSrcListIndex, int32_t InDstListIndex);
		void Request_SavePresetEquipment(int32_t InListIndex, const struct FSBPlayerPresetEquipList& InPresetEquipList, TArray<struct FSBPlayerPresetEquipItem> InPresetEquipItems);
		void Request_SaveCharaCostumePresetEquip(int32_t listIndex, ESBClassType InClassType, TArray<struct FSBPlayerPresetEquipItem> EquipItem);
		void Request_SaveCharaBattlePresetEquip(int32_t InListIndex, bool bInIsClassChange);
		void Request_RenamePresetEquipmentList(int32_t InListIndex, const class FString& InName);
		void Request_LoadPresetEquipmentParam(int32_t listIndex);
		void Request_LoadPresetEquipmentList();
		void Request_DeletePresetEquipmentList(int32_t InListIndex);
		void RemoveAimParam(ESBAimDirection DirectionType, const class FName& StateMachineName);
		void ReceiveUnsheatheByEquipType(ESBWeaponEquipType EquipType);
		void ReceiveUnsheathe();
		void ReceiveSheathe();
		void Recalc2ndStatus();
		int32_t PlayVoice(class UAkAudioEvent* Event, ESBAkEventLOD LOD);
		int32_t PlaySkillVoice(ESBAkEventLOD LOD);
		void PlayResourceShortageSE();
		void PlayerTakeAnyDamageSignature__DelegateSignature(class ASBPlayerCharacter* DamagedActor, float Damage, const struct FSBDamageEvent& DamageEvent, class AController* InstigatedBy, class AActor* DamageCauser);
		void OnStatusDiffAtRecalc2ndStatusDelegate__DelegateSignature();
		void OnStaminaRecoveredDelegate__DelegateSignature();
		void OnStaminaConsumeDelegate__DelegateSignature();
		void OnSpawnInventoryWeaponDelegate__DelegateSignature(int32_t InventoryIndex, ESBWeaponEquipType WeaponEquipType);
		void OnSkillDataAvailable();
		void OnSkillChangedDelegate__DelegateSignature(ESkillActionPosition ChangedSAP);
		void OnSkillAnimationStartDelegate__DelegateSignature(ESkillActionPosition SkillPosition);
		void OnSetInitialMiniMapInfo(const struct FSBPlayerMiniMapInfo& Info);
		void OnServerReplicateStateInfoDelegate__DelegateSignature(class AActor* Actor, const struct FVector& Location);
		void OnResurrectionDelegate__DelegateSignature();
		void OnRequestTermCommandMenuDelegate__DelegateSignature(bool bForce);
		void OnRep_SkillActionForLoad();
		void OnRep_ReplicateStatusParameter();
		void OnRep_ReplicatedAimDirection();
		void OnRep_PassiveArtsReplication();
		void OnRep_MountingImagineMountIndex();
		void OnRep_Level();
		void OnRep_LastSetupSkillActionPosition();
		void OnRep_ComboCount();
		void OnRayHitForPlayerReticle(bool bHit, bool bProperDistance);
		void OnLossByEnemyLast();
		void OnLoadCompletePlayerDelegate__DelegateSignature(class ASBPlayerCharacter* PlayerCharacter);
		void OnLastHitActorInfo(class AActor* HitActor);
		void OnJankenUIDelegate__DelegateSignature();
		void OnJankenUI(class ASBPlayerCharacter* TargetPlayer);
		void OnInitialSkillDataFromNetworkDataCache(bool Result);
		void OnImagineArtsChangedDelegate__DelegateSignature(ESkillActionPosition ChangedSAP, const class FString& UniqueId);
		void OnHitForPlayerReticle(float Damage, bool bWeakHit);
		void OnGiveDamageBattleLogDelegate__DelegateSignature(float Damage, const struct FSBDamageEvent& DamageEvent, class ASBPlayerCharacter* CauserPlayer, class ASBCharacter* DstCharacter);
		void OnGetUserItemCompleted();
		void OnFindByEnemyFirst();
		void OnEndStartParticleOfPlayerTransform(class UParticleSystemComponent* ParticleSystemComponent);
		void OnDeathDelegate__DelegateSignature();
		void OnDeadNotifyMessage(const class FText& Name);
		void OnCountdownInteractionDelegate__DelegateSignature(bool bPress);
		void OnCountdownCancelDelegate__DelegateSignature();
		void OnClassLevelUp(class UObject* Sender, class UObject* Param);
		void OnCastSkill(ESkillActionPosition Position);
		void OnCapsuleComponentHitCallback(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalInpulse, const struct FHitResult& SweepResult);
		void OnCalcEquipStatusDiffDelegate__DelegateSignature();
		void OnAtGatheringPopupDelegate__DelegateSignature(bool bIsVisible);
		void OnAdventurerRankUp(class UObject* Sender, class UObject* Param);
		void OnActivateBuffToPlayerDelegate__DelegateSignature(class ASBPlayerCharacter* PlayerCharacter);
		void NotifyTrainAnimationStart(float AnimLength, float BasePlayRate, float PlayRateAdjustMax, float PlayRateAdjustMin, float EasingTimeRange, int32_t TrainStepNum);
		void NotifyTrainAnimationSetup(float SearchDistance, float SearchDegree);
		void NotifySyncAnimationStart(float AnimLength, float BasePlayRate, float PlayRateAdjustMax, float PlayRateAdjustMin, float EasingTimeRange, float SyncAnimTimeShiftTime, class UCurveFloat* SyncRateCurve);
		void NotifySyncAnimationEnd();
		void NotifySkillNextAnimationStart(class UObject* InstigatorObject);
		void NotifyReloadEnd();
		void NotifyMountAttachTiming();
		void NotifyLaunchEnemyStepJump();
		void NotifyEndDashByOutOfStamina();
		void NotifyCastLastSetupSkill(int32_t CastIndex, class UAnimSequenceBase* AnimSequence, class UAnimNotify* AnimNotify);
		void NotifyCastImagineSkill();
		void NotifyBattleAreaClear();
		void MulticastStartMountDirect(int32_t InMountingImagineMountIndex);
		void MulticastSpawnImagineCharacterInstance(class UClass* AssetClass, int32_t ImagineIndex, const struct FTransform& InMountSpawnTransform);
		void MulticastSkillMastery(TArray<struct FCharaSkillMasteryInfo> SkillMasteryList);
		void MulticastSetTrainAnimationStep(int32_t TrainAnimationStep);
		void MulticastSetLoadCompleteParam(const struct FSBPlayerLoadCompleteParam& Param);
		void MulticastSetInitialSkill1To4();
		void MulticastSetInitialCachedProperty(const struct FSBPlayerCachedProperty& PlayerCachedProperty, bool bResurrection);
		void MulticastResetSkillSound();
		void MulticastRequestResetMountDirect(int32_t ImagineMountIndex);
		void MulticastRequestLoadImagineMount(int32_t ImagineTableIndex);
		void MulticastRequestLoadAsset();
		void MulticastRequestFinishMountDirect();
		void MulticastRequestChangePassiveImagine(ESBPlayerPassiveImagineSlotType Slot, const class FString& UniqueId);
		void MulticastReplicateMovementInfo(const struct FRepMovement& InReplicatedMovement, int8_t InMovementMode, bool bWarp);
		void MulticastRegisterMountingPlayerAttachTransform(const struct FVector& attachPlayerPos, const struct FRotator& attachPlayerRot);
		void MulticastRecalcStatus();
		void MulticastRecalc2ndStatus(const struct FSBCharacterStatus& Status);
		void MulticastOnUnequipImagineCommon(ESBCharaEquipType ImagineCharaEquipType);
		void MulticastOnChangeImagineCommon(ESBCharaEquipType ImagineCharaEquipType, const class FString& UniqueId, const class FName& ImagineName);
		void MulticastNotifyProjectileHitWithCompName(ESkillActionPosition Position, class AActor* OtherActor, const class FName& OtherCompName, const struct FHitResult& HitResult);
		void MulticastNotifyProjectileHit(ESkillActionPosition Position, class AActor* OtherActor, const struct FHitResult& HitResult);
		void MulticastNotifyBattleAreaClear();
		void MulticastMountInterrupted();
		void MulticastMountAttachTiming();
		void MulticastIntentionalDisconnection(const class FString& InReasonMessage, ESBCheatOshiokiType InCheatOshiokiType);
		void MulticastExecMountJumpOnLaunch(const struct FVector& LaunchVelocity);
		void MulticastExecMountFailedLaunch(const struct FVector& LaunchVelocity);
		void MulticastEquipWeaponParamCache(const struct FSBPlayerEquipWeaponParameterCache& ParamCache);
		void MulticastEndPlayerInitialParameters();
		void MulticastDetachMount(bool bIsDirect);
		void MulticastDestroyImagineCharacterInstance(ESBImagineSummonCharacter ImagineType);
		void MulticastChangeImagineArtsByName(int32_t ImagineArtsSlotIndex, const class FName& ImagineArtsName);
		void MulticastCastSkill(ESkillActionPosition Position);
		void MulticastAerialAttackBonus(bool bBonus);
		void Multicast_UseItem(int32_t InItemID);
		void Multicast_SetRateHitPoint(float Percent);
		void Multicast_SetFullHitPoint();
		void Multicast_SetFollow(class AActor* Followee, const class FString& CharacterId);
		void Multicast_SetCurrentHitPoint();
		void Multicast_OnPlayerLevelUp();
		void Multicast_OnPlayerAdventurerRankUp();
		void MountDisableAreaOverlapStart();
		void MountDisableAreaOverlapEnd();
		void MakeMovingNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
		bool IsValidSpawningCacheImagineMount();
		bool IsValidMountIndex();
		bool IsUnsheathe();
		bool IsTrainingBattleState();
		bool IsSyncEnabled();
		bool IsSyncApplied();
		bool IsSyncAnimActive();
		bool IsSkillPressedTriggered();
		bool IsSkillPressed();
		bool IsSkillPositionPressedTriggered(ESkillActionPosition Position);
		bool IsSkillPositionPressed(ESkillActionPosition Position);
		bool IsSkillActive(ESkillActionPosition Position);
		bool IsSheathe();
		bool IsSetupImagineSkillArts2();
		bool IsRespawn();
		bool IsRequestedDirectMountStart();
		bool IsRequestedDirectMountEnd();
		bool IsRemoteMountSummonInst();
		bool IsQuestEventMode();
		bool IsPlayerInteraction();
		bool IsPlayerInitialParametersLoadCompleted();
		bool IsPlayerExtraFootHoldValid();
		bool IsPlayerBot();
		bool IsPassiveImagineEquipped(const class FString& UniqueId, ESBPlayerPassiveImagineSlotType* OutEquippedSlot);
		bool IsMovingByWarpAroundEffect();
		bool IsMountDash();
		bool IsMountAttachStartHeight(float InPlayerAttachSocketHeight);
		bool IsMountAssetLoaded();
		bool IsMasterySkill(int32_t SkillId);
		bool IsLevelSyncApplied();
		bool isLevelLimit();
		bool IsInvincible();
		bool IsInPartyChainComboDistance();
		bool IsInheritDeathFromPreviousMap();
		bool IsInCoinPubPrivateRoom();
		bool IsImagineArtsEquipped(const class FString& UniqueId, ESkillActionPosition* OutEquippedPosition);
		bool IsHpSyncApplied();
		bool IsHiddenBuddyNpc();
		bool IsGathering();
		bool IsGameInputReleaseTriggered(EGameInput inputLabel);
		bool IsGameInputPressTriggered(EGameInput inputLabel);
		bool IsGameInputPressed(EGameInput inputLabel);
		bool IsFreeArranging();
		bool IsFishingMode();
		bool IsFindByEnemy();
		bool IsFieldDead();
		bool IsFastRecoveryEmote();
		bool IsFallingByMountGetoffJump();
		bool IsFallingByEnemyStepJump();
		bool IsFailedSummonMount();
		bool IsExistImagineMount();
		bool IsEngramCannonAction();
		bool IsEnableSummonMount(bool IsDebugErrorPrintPut, bool IsEquipedCheck);
		bool IsEnableAvatarRandomWait();
		bool isEditWholeMap();
		bool IsDebugMoveMode();
		bool IsDamageState();
		bool IsClimbing();
		bool IsCheerfulItemActive();
		bool IsCarrying();
		bool IsCannotGameInput(EGameInput InputType);
		bool IsCampCollisionCount();
		bool IsAutoRunWalk();
		bool IsAutoRunDash();
		bool IsAutoRunActive();
		bool IsAimBlend();
		bool IsAdminHide();
		bool IsActionGameInputPressTriggered();
		void InitEquipWeaponStatus(TArray<int32_t>* OutEquipWeaponStatus);
		void IncrementPlaySkillSoundCount();
		void IncrementCampCollisionCount();
		bool HasForecastLocation();
		void GiveDamageBattleLogEvent(float fDamage, const struct FSBDamageEvent& DamageEvent, class ASBPlayerCharacter* InCauserPlayer, class ASBCharacter* InDstCharacter);
		struct FVector GetWorldMoveInput();
		float GetWalkSpeedTypeSpeedRate(ESBPlayerWalkSpeedType SpeedType);
		ESBPlayerWalkSpeedType GetWalkSpeedType();
		float GetWalkBSSampleValueXOnMount();
		float GetWaitBSSampleValueXOnMount();
		class UAkComponent* GetVoiceComponent();
		class ASBPlayerState* GetValidPlayerState();
		int32_t GetTeamNumber();
		struct FRotator GetTargetComponentDirection(bool bNeedLockon);
		class USBTargetableComponent* GetTargetableComponent();
		class AActor* GetTargetableActor();
		class UASStateMachine* GetStateMachine();
		ESBStackBEnableType GetStackBEnableType();
		class ASBMount* GetSpawningCacheImagineMount();
		int32_t GetSkillRemainingCount(ESkillActionPosition Position);
		float GetSkillRecastTime(ESkillActionPosition Position);
		struct FVector GetSkillPreInputMoveWorldDirection();
		struct FVector2D GetSkillPreInputMoveDirection();
		class USBPlayerSkillMarker* GetSkillMarkerComponent();
		class USBSkillInfoClass* GetSkillInfo(ESkillActionPosition Position);
		int32_t GetSkillID(ESkillActionPosition Position);
		class USBPlayerSkillActionComponent* GetSkillActionComponent();
		class USBSkillInfoClass* GetSkillActionBySkillName(const class FName& SkillName);
		class USBImagineSkillInfo* GetSetupImagineSkill();
		class USBRaidBattleComponent* GetSBRaidBattleComponent();
		float GetRunBSSampleValueXOnMount();
		struct FRotator GetReticleWorldRotation();
		class USBPlayerPresetEquipComponent* GetPresetEquipComponent();
		void GetPresetEquipBattleSetElementResistanceBP(TArray<struct FSBPlayerPresetEquipItem> InEquipItemList, TArray<ESBAttribute> InAttributeOrderList, TArray<float>* OutElementResistanceList);
		float GetPlayRateForAnimationSync(float AnimTime);
		class USBPlayerWarpComponent* GetPlayerWarpComponent();
		class USBPlayerTargetingComponent* GetPlayerTargetingComponent();
		class USBPlayerSpecialSkill* GetPlayerSpecialSkillComponent();
		class USBPlayerResurrectionComponent* GetPlayerResurrectionComponent();
		class USBPlayerMovementComponent* GetPlayerMovement();
		class USBPlayerInteractionComponent* GetPlayerInteractionComponent();
		class USBPlayerHoldHandComponent* GetPlayerHoldHandComponent();
		class USBPlayerFishingComponent* GetPlayerFishingComponent();
		class USBPlayerEngramCannonComponent* GetPlayerEngramCannonComponent();
		class USBPlayerCheerfulItemComponent* GetPlayerCheerfulItemComponent();
		class USBPlayerCameraComponent* GetPlayerCameraComponent();
		class USBPlayerBuddyVoiceComponent* GetPlayerBuddyVoiceComponent();
		class USBPlayerAppearEffectComponent* GetPlayerAppearEffectComponent();
		ESBAbilityValueUnitType GetPassiveSkillAbilityUnitType(int32_t SkillId);
		class FString GetPassiveImagineUniqueID(ESBPlayerPassiveImagineSlotType Slot);
		class FString GetPartyId();
		float GetPartyChainComboKeepTimerRate();
		float GetPartyChainComboKeepTimer();
		int32_t GetPartyChainComboCount();
		float GetPartyChainComboCoolTimerRate();
		float GetPartyChainComboCoolTimer();
		float GetPartyChainBonusDamageModifyRate();
		struct FSBCharacterStatus GetOriginalStatus();
		int32_t GetOriginalLevel();
		struct FVector GetMoveInput3D();
		struct FVector2D GetMoveInput2D();
		struct FVector GetMoveDestinationByWarpAroundEffect();
		float GetMountSummonPosOffsetFront();
		float GetMountStartDashRate();
		float GetMountSpeedRate();
		float GetMountPlayerAttachShiftZ();
		float GetMountPlayerAttachShiftY();
		bool GetMountLocomotionNotify();
		struct FVector GetMountJumpOnVelocity();
		struct FVector GetMountJumpOnStartFallVelocity(const struct FVector& AttachSocketLocation);
		struct FVector GetMountJumpOnLaunchVelocity();
		struct FVector GetMountJumpOffVelocity();
		float GetMountIntervalMax();
		float GetMountInterval();
		float GetMountEndLaunchRate();
		int32_t GetMountDisableAreaOverlapNum();
		class USBMeshClimbingComponent* GetMeshClimbingComponent();
		float GetMaxHitPointWithoutResurrectionAdjust();
		int32_t GetLevelSyncTarget();
		int32_t GetLevelLimit();
		int32_t GetLevel();
		struct FVector GetLastSkillPositionInputMoveWorldDirection(ESkillActionPosition Position);
		struct FVector2D GetLastSkillPositionInputMoveDirection(ESkillActionPosition Position);
		ESkillActionPosition GetLastSetupSkillPosition();
		struct FVector GetLastMoveInput3D();
		struct FVector2D GetLastMoveInput2D();
		struct FVector GetLastForecastLocation();
		class FString GetLastEmoteStateName();
		ESkillActionPosition GetLastCanceledSkillPosition();
		bool GetIsHandIkActiveForMount();
		class FString GetImagineUniqueID(ESkillActionPosition Position);
		class FName GetImagineName(ESkillActionPosition Position);
		class ASBMount* GetImagineMount();
		ESBHostility GetHostilityAt(class ASBPlayerCharacter* OtherPlayerCharacter);
		struct FVector GetGroundAssumeLocation();
		float GetGameInputPressTime(EGameInput inputLabel);
		int32_t GetExp(class UObject* WorldContextObject);
		int32_t GetEquipStatusDiffRequestResult(const class FString& FromUniqueID, const class FString& ToUniqueID);
		struct FSBCharacterStatus GetEquipStatusDiffBattleSet(TArray<struct FSBPlayerPresetEquipItem> InEquipItem, bool InUseStorage);
		struct FSBCharacterStatus GetEquipStatusDiff(const class FString& CurrentUniqueID, const class FString& NextUniqueID);
		class USphereComponent* GetEnemyStepJumpCollisionComponent();
		float GetEnableHealMaxHitPoint();
		bool GetEnableAvatarRandomWaitFlag();
		class USBDhcBattleComponent* GetDhcBattleComponent();
		float GetCurrentWalkSpeedTypeSpeedRate();
		ESBPlayerSkillPaletteSide GetCurrentSkillPaletteSide();
		float GetCurrentSkillChargeRatio();
		int32_t GetCurrentSkillChargeLevelMax();
		int32_t GetCurrentSkillChargeLevel();
		float GetCurrentMountEnergy();
		int32_t GetCurrentFightingStyle();
		float GetCurrentDiedCountDown();
		class USBPlayerContentActionComponent* GetContentActionComponent();
		int32_t GetComboCount();
		struct FVector GetCliffJumpVelocity();
		int32_t GetCampCollisionCount();
		class UASAnimationSet* GetAnimationSet();
		class UASStateMachine* GetAimStateMachine();
		struct FRotator GetAimRotation();
		class UASStateMachine* GetAimOffsetStateMachine();
		class UASStateMachine* GetAdditiveMeshSpaceStateMachine();
		class UASStateMachine* GetAdditiveLocalSpaceStateMachine();
		float GetActionPlayRate();
		float GetAcceleratorVector();
		float GetAcceleratorSlopeReverse();
		float GetAcceleratorSlope();
		bool GetAbnormalRemoteMountState();
		void FollowWithCharaId(class AActor* Followee, const class FString& CharacterId);
		void Follow(class AActor* Followee);
		void FieldDead_Server(ESBFieldDamageType FieldDamageType);
		void FieldDead_Multicast(ESBFieldDamageType FieldDamageType);
		void EndMountGettingOff();
		void EndClimbingDamage();
		void DebugServerStartMountToAllPlayer(const class FName& MountName);
		void DebugServerSendAnimCommandToSimulated(const class FName& Command);
		void DebugServerResetMountRemoteDirectToAllPlayer();
		void DebugServerEnableAnimationUpdateOnServer(bool bEnabled);
		void DebugServerBurdeningDummyRPC(int32_t dummySendMulticastNum, int32_t dummySendRepeatNum, float dummySendIntervalMsec);
		void DebugMulticastStartMountToAllPlayer(const class FName& MountName);
		void DebugMulticastSendAnimCommandToSimulated(const class FName& Command);
		void DebugMulticastResetMountRemoteDirect();
		void DebugMulticastBurdeningDummyRPC(const struct FSBBurderingDummyData& dummySendData);
		void DebugMenu();
		void ClientStartGather(class ASBFieldActorGatherPoint* GatherPoint, float GatherMotionLoopTime);
		void ClientSkillProjectilePlayer(ESkillActionPosition Position, const struct FDataTableRowHandle& Handle);
		void ClientShowPartyChainComboCountLog(ESBPartyChainComboCountLogType ShowLogType);
		void ClientShowLogIsPushModelEnabled(bool IsPushModelEnabled);
		void ClientSetMountEnergy(float MountEnergy);
		void ClientSetInitialMiniMapInfo(const struct FSBPlayerMiniMapInfo& Info);
		void ClientReturnEquipStatusDiff_PresetEquip(TArray<struct FSBPlayerPresetEquipItem> InEquipItemList, TArray<struct FSBCharacterStatus> InEquipStatusDiff);
		void ClientReturnEquipStatusDiff(const class FString& CurrentUniqueID, const class FString& NextUniqueID, const struct FSBCharacterStatus& EquipStatusDiff, bool InUseStorage);
		void ClientNotifyOtherPlayerRepTargetChange(class AActor* OtherActor, bool bIsRepTarget);
		void ClientNotifyOtherPlayerOutToNetCullDistance(class ASBPlayerCharacter* OtherPlayerCharacter);
		void ClientNotifyOtherPlayerIntoNetCullDistance(class ASBPlayerCharacter* OtherPlayerCharacter);
		void ClientModifyRateSkillRecastTime(unsigned char SkillPosition, int8_t ModifyPercent);
		void ClientEndGather(bool bSuccess);
		void ClientAttackHitRecastChange(int32_t Index, ESkillActionPosition Position);
		void Client_AnsEnemyImportantBattleEffective(class ASBEnemyCharacter* InEnemy, const struct FSBEffectiveImpotantStatusParam& Param);
		void ClearSkillAction();
		void ClearMountState_OnInstanceDelete();
		void ClearEquipStatusDiffCache();
		bool ClearEnemyDropTreasureBox();
		void ClearCampCollisionCount();
		void ClearActionForDemo();
		bool CheckWallHitBeforeGettingOffMount();
		bool CheckStaminaSkill(class USBSkillInfoClass* pSkillInfo, bool bNotifyFew);
		bool CheckStamina(float BaseStamina, bool bNotifyFew, EStaminaAdjustType StaminaAdjustType, class USBSkillInfoClass* pSkillInfo);
		void CheatCommand_OverrideEnemyDropRatio(ESBEnemyDropItemType DropItemType, float DropRatio);
		bool ChangeSkill(int32_t SkillIndex, int32_t SkillId);
		bool CanWalk();
		bool CanStartSkillAtPosition(ESkillActionPosition Position, bool bNotification, bool bForUI);
		bool CanStartImagineArts();
		bool CanPlayEmoteStatusByEmoteName(const class FName& EmoteName, bool bIsDebugRequest);
		bool CanPlayEmoteStatusByEmoteId(const class FName& EmoteId, bool bIsDebugRequest);
		bool CanPlayEmoteStatus(bool bIsDebugRequest);
		bool CanPartyChainCombo();
		bool CanChangeSkillPosition(ESkillActionPosition Position);
		void CancelWarp();
		bool CanAutoSheathe();
		struct FVector CalcMountJumpOnBallisticLaunchVelocity(const struct FVector& AttachSocketLocation);
		void CacheStatusMasterData();
		void BP_OnStopDemo();
		void BP_OnPlayDemo();
		void AdjustCurrentStaminaSkill(class USBSkillInfoClass* pSkillInfo);
		void AdjustCurrentStaminaDeltaTime(float AddValue, float DeltaTime, bool bNotify, EStaminaAdjustType StaminaAdjustType, class USBSkillInfoClass* pSkillInfo);
		void AdjustCurrentStamina(float AddValue, bool bNotify, EStaminaAdjustType StaminaAdjustType, class USBSkillInfoClass* pSkillInfo);
		void AddSkillRecastTime(float AddTime);
		void AddLastSetupSkillRecastTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCharacterAnimInstance
	 * Size -> 0x0088 (FullSize[0x1060] - InheritedSize[0x0FD8])
	 */
	class USBPlayerCharacterAnimInstance : public USBCharacterAnimInstance
	{
	public:
		unsigned char                                              UnknownData_NHA3[0x4];                                   // 0x0FD8(0x0004) Fix Super Size
		float                                                      AimBody_Yaw;                                             // 0x0FDC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		float                                                      AimBody_BlendRate;                                       // 0x0FE0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		float                                                      m_AimBodyBlendRateTime;                                  // 0x0FE4(0x0004) Edit, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		bool                                                       bFullAimBody;                                            // 0x0FE8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_840K[0x3];                                   // 0x0FE9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlendSpace_Air;                                          // 0x0FEC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_EPEG[0x1];                                   // 0x0FF0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bAdditiveLandingRequested;                               // 0x0FF1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_08CA[0x2E];                                  // 0x0FF2(0x002E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SlopeChange;                                             // 0x1020(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		float                                                      SlopeChangeThreshold;                                    // 0x1024(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         SlopeChangeCurve;                                        // 0x1028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         SlopeSpeedChangeCurve;                                   // 0x1030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         SlopeAngleChangeCurve;                                   // 0x1038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         DestinationSlopeAngleCurve;                              // 0x1040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7SEB[0x4];                                   // 0x1048(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlendSpace_Gender;                                       // 0x104C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		TArray<struct FSBLimbIKUpdateParam>                        LimbIKUpdateParamArray;                                  // 0x1050(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCharacterCommonComponent
	 * Size -> 0x00E8 (FullSize[0x01A0] - InheritedSize[0x00B8])
	 */
	class USBPlayerCharacterCommonComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCharacterJoinExtDelegate;                              // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveKeyValueDelegate;                                  // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetKeyValueDelegate;                                   // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetContentLockDelegate;                                // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveQuestCheckListDelegate;                            // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveMoneyDelegate;                                     // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZN8W[0x18];                                  // 0x0118(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChangeOpenCommandMenuFlagDelegate;                     // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharaSkillMasteryOthersInfoDelegate;                   // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAddTraverseDelegate;                                   // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveCommandMenuPlayerAvatarPoseIdDelegate;             // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveCharaCostumeMultipleEquipsDelegate;                // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCommandMenuGetDelegate;                                // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNotificationMenuListLoadedDelegete;                    // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void UpdateNotificationData(bool* IsValid);
		void TraverseSet_Server(TArray<class FString> TraversedList);
		void TraverseSet_Client(TArray<class FString> TraversedList);
		void Server_SetKeyValue(TArray<struct FSBKeyPair> InKeyValues);
		void Server_SaveAddMoneyDebug(int32_t AddMoney);
		void Server_RequestTraversePoint(const class FString& TraversedPoint);
		void Server_RequestSaveCommandMenuPlayerAvatarPoseId(int32_t InAvatarPoseId);
		void Server_RequestSaveCharaCostumeMultipleEquips(class ASBPlayerController* InPlayerController, TArray<struct FCharaEquipItemInfo> InEquipItemInfos, TArray<struct FCharaEquipItemCharaCreateInfo> InEquipItemCharaCreateInfos, TArray<ESBCharaEquipType> InEquipTypes);
		void Server_OnSetKeyValue(bool InResult, TArray<struct FSBKeyPair> InKeyValues);
		void Server_OnSaveCharaCostumeMultipleEquips(int32_t RetCode, TArray<ESBCharaEquipType> DirtyEquipTypes, TArray<struct FCharaEquipItemInfo> DirtyEquipItemInfos, TArray<ESBCharaEquipType> EquipTypes, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void Server_ClearKeyValue();
		void SBOnNotificationMenuListLoadedDelegete__DelegateSignature(bool Result);
		void RequestTraversePoint(const class FString& TraversedPoint);
		void RequestSaveCommandMenuPlayerAvatarPoseId(int32_t InAvatarPoseId);
		void RequestSaveCharaCostumeMultipleEquips(class ASBPlayerController* InPlayerController, TArray<struct FCharaEquipItemInfo> InEquipItemInfos, TArray<struct FCharaEquipItemCharaCreateInfo> InEquipItemCharaCreateInfos, TArray<ESBCharaEquipType> InEquipTypes);
		void RequestNotificationData();
		bool RequestCharaSkillMasteryOthers(ESBClassType InClassType);
		bool RequestCharacterJoinExt();
		bool Request_SetKeyValue(TArray<struct FSBKeyPair> InKeyValues);
		bool Request_SetContentLock(ESBContentLockType InContentLockType, bool bInLock);
		bool RemoveQuestCheckList(int32_t InQuestIndex);
		void OnSetKeyValueDelegate__DelegateSignature(bool Result);
		void OnSetContentLockDelegate__DelegateSignature(bool Result);
		void OnSaveQuestCheckListDelegate__DelegateSignature(bool bWasSuccessful);
		void OnSaveMoneyDelegate__DelegateSignature(bool Result);
		void OnSaveKeyValueDelegate__DelegateSignature(bool bWasSuccessful);
		void OnSaveCommandMenuPlayerAvatarPoseIdDelegate__DelegateSignature(int32_t InRetCode, int32_t AvatarPoseId);
		void OnSaveCharaCostumeMultipleEquipsDelegate__DelegateSignature(int32_t RetCode, const struct FSBExpiredEquipmentData& InExpiredEquipmentData);
		void OnCommandMenuGetDelegate__DelegateSignature(int32_t RetCode);
		void OnCharaSkillMasteryOthersInfoDelegate__DelegateSignature(int32_t RetCode);
		void OnCharacterJoinExtDelegate__DelegateSignature(int32_t InRetCode);
		void OnChangeTraverseDelegate__DelegateSignature(int32_t RetCode);
		void OnChangeOpenCommandMenuFlagDelegate__DelegateSignature(bool Result);
		bool IsTraverse(const class FString& TraversedPoint);
		bool CommandMenuGet();
		void ClientOnShowRetMessage(int32_t InRetCode);
		void Client_SetKeyValue(bool InResult, TArray<struct FSBKeyPair> InKeyValues);
		void Client_SetContentLock(bool InResult);
		void Client_SaveMoney(bool Result, int32_t Money);
		void Client_OnTraversePoint(int32_t RetCode, const class FString& TraversedPoint);
		void Client_OnSetCommandMenuPlayerAvatarPoseId(int32_t InAvatarPoseId);
		void Client_OnSaveCommandMenuPlayerAvatarPoseId(int32_t InRetCode, int32_t InAvatarPoseId);
		void Client_OnSaveCharaCostumeMultipleEquips(int32_t RetCode, TArray<ESBCharaEquipType> DirtyEquipTypes, TArray<struct FCharaEquipItemInfo> DirtyEquipItemInfos, TArray<ESBCharaEquipType> EquipTypes, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void Client_ClearKeyValue(bool bInWasSuccessful);
		bool ClearQuestCheckList();
		bool ClearKeyValue();
		void ApplyResult_Server(TArray<struct FCharaSkillMasteryInfo> InSkillMasteryInfo);
		void ApplyResult_Client(TArray<struct FCharaSkillMasteryInfo> InSkillMasteryInfo);
		bool AddQuestCheckList(int32_t InQuestIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCharacterLevelSyncComponent
	 * Size -> 0x07D0 (FullSize[0x0888] - InheritedSize[0x00B8])
	 */
	class USBPlayerCharacterLevelSyncComponent : public UActorComponent
	{
	public:
		int32_t                                                    LevelSyncTarget;                                         // 0x00B8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSBMapParameterSync                                 ParameterSync;                                           // 0x00BC(0x0018) Net, NoDestructor, NativeAccessSpecifierPrivate
		int32_t                                                    Level;                                                   // 0x00D4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UN8S[0x7B0];                                 // 0x00D8(0x07B0) MISSED OFFSET (PADDING)

	public:
		void Client_ReplicateStatusParameter(const struct FSBCharacterStatus& Status);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCharacterParameterComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBPlayerCharacterParameterComponent : public USBPlayerPropertyComponent
	{
	public:
		unsigned char                                              UnknownData_1QEW[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetQuantize                                 Location;                                                // 0x00C0(0x000C) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxHitPoint;                                             // 0x00CC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxHitPointWithoutResurrectionAdjust;                    // 0x00D0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CurrentHitPoint;                                         // 0x00D4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CurrentDiedCountDown;                                    // 0x00D8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxHitPointLoss;                                         // 0x00DC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSBPlayerNamedEnemyParam>                    NamedEnemyParamList;                                     // 0x00E0(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void UpdateNamedEnemyData();
		bool IsReplicateAfter();
		float GetMaxHitPointWithoutResurrectionAdjust();
		float GetMaxHitPointLoss();
		float GetCurrentDiedCountDown();
		struct FVector_NetQuantize GetCharacterLocation();
		TArray<struct FSBPlayerNamedEnemyParam> BP_GetNamedEnemyParamList();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerChargeSkillController
	 * Size -> 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
	 */
	class USBPlayerChargeSkillController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_D8M2[0x38];                                  // 0x0040(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayingEffect>                            m_PlayingSkillChargeLevelEffectList;                     // 0x0078(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerChargeSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerChargeSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerChatComponent
	 * Size -> 0x00B8 (FullSize[0x0170] - InheritedSize[0x00B8])
	 */
	class USBPlayerChatComponent : public USBPlayerPropertyComponent
	{
	public:
		unsigned char                                              UnknownData_NCPQ[0xB8];                                  // 0x00B8(0x00B8) MISSED OFFSET (PADDING)

	public:
		void SetSortType(EChatPropertyItemType Type, int32_t SortType);
		void SetFavoriteId(EChatPropertyItemType Type, int32_t ID, int32_t FavoriteId);
		void Server_Check(const class FString& MsgBody, ESBChatLogType ChatLogType, class ASBPlayerCharacter* OtherPlayerCharacter, bool IsPhotoMode);
		void RequestCheckOnlineStatus(const class FString& ToCharacterId);
		void Multicast_SendSystemMessage(const class FName& InSystemLogId);
		int32_t GetSortType(EChatPropertyItemType Type);
		struct FSBChatFavoriteData GetFavoriteId(EChatPropertyItemType Type, int32_t ID);
		void Client_SetSendRestrictionSec(float sec);
		void Client_CheckResult(const class FString& MsgBody, ESBChatLogType ChatLogType);
		void Client_CheckError(ESBSystemMessageFlag Flag);
		void Client_CheckEmoteResult(const class FString& MsgBody, ESBChatLogType ChatLogType, class ASBPlayerCharacter* OtherPlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCheatCommand
	 * Size -> 0x03C8 (FullSize[0x03F0] - InheritedSize[0x0028])
	 */
	class USBPlayerCheatCommand : public UObject
	{
	public:
		unsigned char                                              UnknownData_DPUE[0x3C8];                                 // 0x0028(0x03C8) MISSED OFFSET (PADDING)

	public:
		void UseCheerfulItem(ESBCheerfulItemType ItemType, int32_t ItemIndex, int32_t Time);
		void UnPossessPlayerCharacter();
		void UnequipClassPassiveSkillAll();
		void UnequipClassPassiveSkill(const class FName& SkillName);
		void TriggerAbility(int32_t ID, int32_t Parts1Value1, int32_t Parts1Value2, int32_t Parts2Value1, int32_t Parts2Value2, int32_t Time, bool Passive, ESBAbilityRequestSource RequestType);
		void TravelToWarpPoint(const class FName& InWarpPointId);
		void TravelToOffGame(const class FString& InGameContentId);
		void ToggleGameplayDebugger();
		void ToggleGamePauseSB();
		void TakeDamage(const class FString& CharacterName, float Damage);
		void SuspendPlayerClothing();
		void SubClassExp(int32_t Exp);
		void StartMountToAllPlayer(const class FName& MountName);
		void StartMountDirect(const class FName& ImagineName);
		void StartMount(const class FName& MountName);
		void SkipLevelStartSequence();
		void ShowPlayerClothing(bool Sw);
		void ShowLogIsPushModelEnabled();
		void ShowCharaCreateClothing(bool Sw, int32_t ID);
		void ShieldDamage(float DamageValue);
		void SetTargetHitPointPar(float HitPointPar);
		void SetTargetHitPoint(float HitPoint);
		void SetStamina(float Stamina);
		void SetSelfToDebugTargetActor();
		void SetSelfHitPointPar(float HitPointPar);
		void SetSelfHitPoint(float HitPoint);
		void SetRecastTimeZero();
		void SetPlayerStopMotion(bool bMotionStop);
		void SetPlayerMovementTick(bool bEnable);
		void SetPlayerForcedLOD(int32_t InLod);
		void SetPlayerDefaultElementValue(const class FName& ElementTypeName, int32_t Value);
		void SetPlayerDefaultElementDamage(const class FName& ElementTypeName, int32_t Damage);
		void SetPlayerAnimationTick(bool bEnable);
		void SetPlayerAlwaysRefreshBones(bool bEnable);
		void SetPlayerAbility(int32_t InAbilityID, int32_t InTime);
		void SetPartyMemberNum(int32_t InPersistentMemberNum, int32_t InInstantMemberNum);
		void SetMeshClimbingHandsOffset(float X, float Y, float Z);
		void SetFacial(ESBFacialType InFacialType);
		void SetClassSubActionGaugeValue(float SetValue);
		void SetClassLevel(int32_t Level);
		void SetClassExp(int32_t Exp);
		void SetClassExExp(int32_t Exp);
		void SetCharaPartsByPartsName(const class FString& InPartsName);
		void SetCharaPartsByCostumeID(int32_t InCostumeId);
		void SetCharaCreatePartsDivide(bool bDivide);
		void SetCharaCreateParameter(const class FString& InAssetName, int32_t CharaCreateParameterMode);
		void SessionTravelTo(const class FString& InSessionName);
		void SendMaterialParamAroundPlayer(const class FName& MaterialParamName, float Value, float Radius);
		void SendGatherPlayerStateMachine();
		void SendGatherPlayerParameter();
		void SendGatherAroundPlayerParameter(float Radius);
		void SendClientGatherPlayerParameter();
		void SendClientGatherAroundPlayerParameter(float Radius);
		void SendBurdeningDummyRPC(int32_t dummySendMulticastNum, int32_t dummySendRepeatNum, float dummySendIntervalMsec);
		void SendAnimCommandToAllSimulatedPlayer(const class FName& Command);
		void SendAnimCommand(const class FName& Command);
		void SelfStunDamage(float StunDamage, ESBStunDirection StunDirection);
		void SelfRespawn();
		void SelfElementDamage(ESBAttribute ElementType, float ElementDamage);
		void SelfDamage(float DamageValue);
		void ResumePlayerClothing();
		void ResponseChecker();
		void ResetPlayerDefaultElementDamage();
		void ResetMountRemoteDirectToAllPlayer();
		void ResetMountLocalDirect();
		void ResetGatherPointActor();
		void ResetGatherParam();
		void ResetForDemo();
		void ResetCharaParts();
		void RequestHoldHand();
		void RequestCameraQueue(const class FString& CameraID, bool IsAdd);
		void ReloadPlayerAssets();
		void ReloadCameraSettings();
		void RejoinGame();
		void RecreatePlayerClothing();
		void RecepiBroker();
		void PrintBattleEffective();
		void PrintAllPartyInfo();
		void PlayerRadiusDamage(float DamageValue, float Radius);
		void OutputDispPingCheckData();
		void OpenDbgMenu();
		void KillTarget();
		void KillPlayerController();
		void ItemSupplyer();
		void InitAnim();
		void GetStamp(int32_t StampId);
		TArray<struct FSBDebugRespawnPointData> GetRespawnPointList();
		void GetEmote(const class FName& EmoteName);
		void ForceSyncInitialParametersLoadCompleted();
		void ForceSyncClientReady();
		void ForceExcludePlayerFromReplication(const class FString& InPlayerName, bool bExclude);
		void ForceAFKKick();
		void Follow();
		void FinishMountDirect();
		void FinishMount();
		void FieldTravelTo(const class FString& TravelFieldMapName, const class FString& SpawnPortal);
		void EquipPassiveImagine(const class FString& UniqueId, ESBPlayerPassiveImagineSlotType Slot);
		void EquipClassPassiveSkill(const class FName& SkillName);
		void EnableAnimationUpdateOnServer(bool bEnabled);
		void DumpFacialList();
		void DumpEmoteList();
		void DumpDisableInput();
		void DoEmote(const class FName& EmoteName);
		void DispPartyState();
		void DelayConfigSave(float DelayTime);
		void Debug_SetMailRestrictFlags(bool bIsSendRestriction, bool bIsOrganize);
		void Debug_SetMailAlertFlag(bool bIsAleat);
		void CharacterList();
		void CharaCreateCompDebugPrint(int32_t I);
		void ChangePlayerSkillByID(int32_t SkillIndex, int32_t SkillId);
		void ChangePlayerSkill(int32_t SkillIndex, const class FName& SkillName);
		void ChangePlayerFaction(const class FName& NewFaction);
		void ChangePingCheckMode(bool bIsEnable);
		void ChangeImagineArts2(const class FName& ImagineName);
		void ChangeImagineArts1(const class FName& ImagineName);
		void ChangeContentActionBySkillID(int32_t ContentActionIndex, int32_t ContentActionSkillID);
		void ChangeContentActionByGameContentID(const class FName& GameContentId);
		void CauseInfiniteLoopFreeze();
		void CallSpecialAtSame(float DelayTime, unsigned char LimitType);
		void CallSkillArtsAtSame(int32_t SkillIndex, float DelayTime, unsigned char LimitType);
		void CallImagineArtsAtSame(int32_t imagineArtsIndex, float DelayTime, unsigned char LimitType);
		void BeforeNextLevelClassExp();
		void AttackMasterClearServerOnlyParameter();
		void AddVoltageGauge(float Amount);
		void AddSlashGauge(float Amount);
		void AddMeshClimbingHandsOffset(float X, float Y, float Z);
		void AddComboGauge(int32_t Amount);
		void AddClassExpLocal(int32_t AddExp);
		void AddClassExp(int32_t AddExp);
		void AddBuffShotGauge(float Amount);
		void AddAbsoluteDefenseGauge(float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCheerfulItemComponent
	 * Size -> 0x0088 (FullSize[0x0158] - InheritedSize[0x00D0])
	 */
	class USBPlayerCheerfulItemComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_RZ0R[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CheerfulItemDataTable[0x28];                             // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_K1M4[0x20];                                  // 0x0100(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBCheerfulItemBase*>                         m_SpawnedAttachmentTypeItemActorList;                    // 0x0120(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V4E1[0x4];                                   // 0x0130(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    m_ReplicatedApplyingAttachmentTypeItemId;                // 0x0134(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_N609[0x8];                                   // 0x0138(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBCheerfulItemBase*>                         m_SpawnedOneMotionTypeItemActorList;                     // 0x0140(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Q5L4[0x8];                                   // 0x0150(0x0008) MISSED OFFSET (PADDING)

	public:
		void ServerStartUseCheerfulItem(bool bMulticast);
		void ServerStartAdditionalEffectCheerfulItem(bool bMulticast);
		void ServerNotifyCheerfulItemConsumeTiming();
		void ServerNotifyApplyCheerfulItemEfficacy(int32_t ItemId, EItemEfficacyType EfficacyType, int32_t EfficacyIndex, float EfficacyTime, bool bImmediately);
		void ServerEndUseCheerfulItem(bool bMulticast);
		void OnRep_ApplyingAttachmentTypeItemId();
		void NotifyToServerAndStartUseCheerfulItem();
		void NotifyToServerAndStartAdditionalEffectCheerfulItem();
		void NotifyToServerAndEndUseCheerfulItem();
		void NotifyCheerfulItemConsumeTiming();
		void MulticastStartUseCheerfulItem();
		void MulticastStartAdditionalEffectCheerfulItem();
		void MulticastNotifyApplyCheerfulItemEfficacy(int32_t ItemId, EItemEfficacyType EfficacyType, int32_t EfficacyIndex, float EfficacyTime, bool bImmediately);
		void MulticastEndUseCheerfulItem();
		void DebugUseCheerfulItem(ESBCheerfulItemType ItemType, int32_t ItemIndex, int32_t Time);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCliffComponent
	 * Size -> 0x0110 (FullSize[0x01E0] - InheritedSize[0x00D0])
	 */
	class USBPlayerCliffComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_8Z9C[0x4];                                   // 0x00D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CliffStopDetectionLength;                                // 0x00D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CliffStopDetectionHeight;                                // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CliffStopCapsuleHalfHeight;                              // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CliffStopCapsuleRadius;                                  // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CliffStopSearchLength;                                   // 0x00E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CliffStopDebugDrawCapsule;                               // 0x00E8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JJ5P[0x3];                                   // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CliffJumpDetectionLength;                                // 0x00EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CliffJumpDetectionHeight;                                // 0x00F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CliffJumpCapsuleHalfHeight;                              // 0x00F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CliffJumpCapsuleRadius;                                  // 0x00F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       CliffJumpDebugDrawCapsule;                               // 0x00FC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T6SX[0x3];                                   // 0x00FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CliffJumpLength;                                         // 0x0100(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CliffJumpHeight;                                         // 0x0104(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B1YB[0xC4];                                  // 0x0108(0x00C4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ClimbFrontWallCheckDistance;                             // 0x01CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClimbJumpUpCheckDistance;                                // 0x01D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClimbJumpFrontCheckDistance;                             // 0x01D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ClimbJumpFloorOffset;                                    // 0x01D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WDZ2[0x4];                                   // 0x01DC(0x0004) MISSED OFFSET (PADDING)

	public:
		struct FVector GetCliffJumpVelocity();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCommunicateSettingsComponent
	 * Size -> 0x0078 (FullSize[0x0130] - InheritedSize[0x00B8])
	 */
	class USBPlayerCommunicateSettingsComponent : public USBPlayerPropertyComponent
	{
	public:
		ESBTensionTagType                                          TensionTagId;                                            // 0x00B8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_301C[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTensionTagChanged;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadedCommunicateSettings;                             // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSavedCommunicateSettings;                              // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnResetPhotoImageDelegate;                               // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdatePhotoImageDelegate;                              // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAlbumAllImageDelegate;                                 // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSavedCharacterCardSettings;                            // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		struct FCommunicateSettingInfo SetPhotoDataChange(const struct FCommunicateSettingInfo& CommunicateSettingInfo, TArray<struct FPlayerProfilePhotoTrimmingInfo> InPhotoTrimmingInfo);
		struct FCommunicateSettingInfo SetDataChange(const struct FCommunicateSettingInfo& CommunicateSettingInfo, const class FString& InChangeComment, TArray<int32_t> InAwardIdList, ESBTensionTagType InTensionTagType, int32_t InAdventureCardFrameId, int32_t InFaceFrameId, int32_t InBackGroundColorFrameId, bool InIsAwardChange);
		void SetAchievementSelected(int32_t AchievementId);
		void Server_UpdatePhotoImage(class ASBPlayerState* InPlayerState, EPhotoType Type, const class FString& PhotoModeImageId, float Scale, const struct FVector2D& TrimmingCoordinate);
		void Server_SetTensionTag(ESBTensionTagType TensionTag);
		void Server_SaveCommunicateSetting(const struct FCommunicateSettingInfo& CommunicateSettingInfo);
		void Server_SaveCharacterCardSetting(int32_t InFrameId);
		void Server_ResetPhotoImage(class ASBPlayerState* InPlayerState, EPhotoType Type);
		void Server_OnUpdatePhotoImage(bool Result);
		void Server_OnSaveCommunicateSetting(bool Result, int32_t Reason);
		void Server_OnSaveCharacterCardSetting(bool Result, int32_t RetCode);
		void Server_OnResetPhotoImage(bool Result);
		void Request_UpdatePhotoImage(EPhotoType Type, const class FString& PhotoModeImageId, float Scale, const struct FVector2D& TrimmingCoordinate);
		void Request_SaveCommunicateSetting(const struct FCommunicateSettingInfo& CommunicateSettingInfo);
		void Request_SaveCharacterCardSetting(int32_t InFrameId);
		void Request_ResetPhotoImage(EPhotoType Type);
		void Request_LoadCommunicateSetting();
		void Request_AlbumAllImage();
		void OnUpdatePhotoImageDelegate__DelegateSignature(bool Result);
		void OnTensionTagReplicated();
		void OnTensionTagChanged__DelegateSignature(ESBTensionTagType TensionTag);
		void OnSavedCommunicateSettingsDelegate__DelegateSignature(bool Result, int32_t Reason);
		void OnSavedCharacterCardSettingsDelegate__DelegateSignature(bool Result, int32_t RetCode);
		void OnResetPhotoImageDelegate__DelegateSignature(bool Result);
		void OnLoadedCommunicateSettingsDelegate__DelegateSignature(bool Result, const struct FCommunicateSettingInfo& Info);
		void OnAlbumAllImageDelegate__DelegateSignature(bool Result, TArray<struct FAlbumImageInfoData> AlbumAllImageData);
		ESBTensionTagType GetTensionTag();
		void Client_UpdatePhotoImage(bool Result);
		void Client_SetTensionTag(ESBTensionTagType TensionTag);
		void Client_SaveCommunicateSetting(bool Result, int32_t Reason);
		void Client_SaveCharacterCardSetting(bool Result, int32_t RetCode);
		void Client_ResetPhotoImage(bool Result);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerConcernedList
	 * Size -> 0x01A8 (FullSize[0x0260] - InheritedSize[0x00B8])
	 */
	class USBPlayerConcernedList : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnIsGetFriendListDelegate;                               // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetPlayerSearchListDelegate;                         // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetPlayerProfileDetailMenuDataDelegate;              // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetPlayerProfileDetailMenuDataDelegate_CheckIDToXUID; // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetPlayerShortIdDelegate;                            // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCheckTalkPermissionWebAPI;                             // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetContactListDelegate;                              // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetConsentListDelegate;                              // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharactersAdventurerCardSendDelegate;                  // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRemoveFriendDelegate;                                  // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSendLikeDelegate;                                      // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSendableLikeDelegate;                                  // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRequestCharactersAdventurerCardUpdateDelegate;         // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSendPhotoLikeDelegate;                                 // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsGetPlayerProfileSummaryDataListDelegate;             // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FPlayerProfileSummaryData>                   FriendList;                                              // 0x01A8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FSendableLikePlayer>                         SendablePlayerList;                                      // 0x01B8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		int32_t                                                    ConcentListNum;                                          // 0x01C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DDE4[0x4];                                   // 0x01CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SenderCharacterId;                                       // 0x01D0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnUpdateFriendListDelegate;                              // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetEquipItemsForCharactersDelegate;                    // 0x01F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetCharacterCardInfosDelegate;                         // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBHttpQuery*                                        LatestGetCharacterCardInfosWebApiQuery;                  // 0x0210(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FPlayerProfileSummaryData>                   PlayerSearchResultList;                                  // 0x0218(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       isOver;                                                  // 0x0228(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       isSearchResult;                                          // 0x0229(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BNUG[0x6];                                   // 0x022A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSendPhotoLike                                      SendPhotoLikeData;                                       // 0x0230(0x0030) NativeAccessSpecifierPrivate

	public:
		void UpdateAdventurerCardWebAPI(const struct FUpdateCardData& UpdateCardData);
		struct FCommunicateSettingInfo UpdateAdventureCardChange(const struct FUpdateCardData& InUpdateCardData, const struct FCommunicateSettingInfo& InCommunicateSettingInfo);
		TArray<struct FPlayerProfileSummaryData> SortFriendList(TArray<struct FPlayerProfileSummaryData>* FriendList, ESBFriendListSortType SortType);
		TArray<struct FContactListData> SortContactList(TArray<struct FContactListData>* ContactList, ESBContactListSortType SortType, bool IsAOrder);
		TArray<struct FContactListData> SortConsentList(TArray<struct FContactListData>* ContactList, ESBConsentListSortType SortType);
		void SetSendableLikePlayerList(const class FString& CharacterId);
		void SetPlayerSearchResultData(TArray<struct FPlayerProfileSummaryData> InPlayerSearchResultData, bool inIsOver);
		void SetFriendList(TArray<struct FPlayerProfileSummaryData> ArrayFriendList);
		void ServerUpdateAdventurerCardWebAPI(const struct FUpdateCardData& UpdateCardData);
		void ServerRemoveFriendSend(const class FString& ToPlayerId, const class FString& ToCharacterId);
		void ServerCharactersAdventurerCardSend(const class FString& ToPlayerId, const class FString& ToCharacterId);
		void Server_SendPhotoLike(const struct FSendPhotoLike& InSendPhotoLike);
		void Server_SendLike(TArray<struct FLikeSend> SendLikeList);
		void Server_OnSendPhotoLike(bool bWasSuccessful, int32_t RetCode);
		void Server_OnSendLike(bool bWasSuccessful, int32_t RetCode, const class FString& CharacterName, int32_t Warning);
		void Server_OnIsSendLike(bool bWasSuccessful, int32_t RetCode, TArray<struct FSendableLikePlayer> SendableLikePlayerList, bool IsSendableLike);
		void Server_OnGetEquipItemsForCharacters(bool bWasSuccessful, int32_t RetCode, TArray<struct FBattleMemberLevelSyncInfo> BattleMemberLevelSyncInfos);
		void Server_IsSendLike(TArray<struct FSendableLikePlayer> SendableLikePlayerList);
		void Server_GetEquipItemsForCharacters(TArray<struct FBattleMemberInfoSend> BattleMemberInfoSendList);
		void Server_AddAdventurerCardDecorationIdList(TArray<struct FDecorationData> InAdventurerCardDecorationIdList);
		void RequestRemoveFriend(const class FString& ToPlayerId, const class FString& ToCharacterId);
		bool RequestGetCharacterCardInfos(TArray<class FString> InTargetCharacterIds);
		void RequestCharactersAdventurerCardSend(const class FString& ToPlayerId, const class FString& ToCharacterId);
		void Request_SendPhotoLike(const struct FSendPhotoLike& InSendPhotoLike);
		void Request_SendLike(TArray<struct FLikeSend> SendLikeList);
		void Request_IsSendLike(TArray<struct FSendableLikePlayer> SendableLikePlayerList);
		void PlayerSearchResultDelete();
		void OnUpdateFriendListDelegate__DelegateSignature(TArray<struct FPlayerProfileSummaryData> PlayerProfileSummaryData);
		void OnSendPhotoLikeDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode, const struct FSendPhotoLike& outSendPhotoLike);
		void OnSendLikeDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode, int32_t Warning);
		void OnSendableLikeDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode, bool IsSendableLike);
		void OnRequestCharactersAdventurerCardUpdateDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode);
		void OnRemoveFriendDelegate__DelegateSignature(bool bWasSuccessful);
		void OnIsGetPlayerShortIdDelegate__DelegateSignature(bool bWasSuccessful, const class FString& shortId, int32_t RetCode);
		void OnIsGetPlayerSearchListDelegate__DelegateSignature(bool bWasSuccessful, TArray<struct FPlayerProfileSummaryData> PlayerSearchListData, bool bIsOver, int32_t RetCode);
		void OnIsGetPlayerProfileSummaryDataListDelegate__DelegateSignature(bool bWasSuccessful, TArray<struct FPlayerProfileSummaryData> PlayerProfileSummaryData);
		void OnIsGetPlayerProfileDetailMenuDataDelegate_CheckIDToXUID__DelegateSignature(bool bWasSuccessful, const struct FPlayerProfileMenuDetailData& PlayerProfileDetailMenuData, int32_t RetCode);
		void OnIsGetPlayerProfileDetailMenuDataDelegate__DelegateSignature(bool bWasSuccessful, const struct FPlayerProfileMenuDetailData& PlayerProfileDetailMenuData, int32_t RetCode);
		void OnIsGetFriendListDelegate__DelegateSignature(bool bWasSuccessful, TArray<struct FPlayerProfileSummaryData> FriendListData, int32_t MaxCount);
		void OnIsGetContactListDelegate__DelegateSignature(bool bWasSuccessful, TArray<struct FContactListData> ItemListData, int32_t totalPageNum, int32_t currentPageNum);
		void OnIsGetConsentListDelegate__DelegateSignature(bool bWasSuccessful, int32_t ApprovalMax, bool bNoOverride, TArray<struct FContactListData> ItemListData, int32_t RetCode);
		void OnGetEquipItemsForCharactersDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode, TArray<struct FBattleMemberLevelSyncInfo> BattleMemberLevelSyncInfos);
		void OnGetCharacterCardInfosDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode, TArray<struct FSBPlayerCharacterCardData> PlayerCharacterCardDatas);
		void OnCheckTalkPermissionWebAPI__DelegateSignature(bool bWasSuccessful, int32_t RetCode, bool TalkSuccess);
		void OnCharactersAdventurerCardSendDelegate__DelegateSignature(bool bWasSuccessful, const struct FSendAdventureCardResult& SendAdventureCardResult);
		bool IsFriendsToCharacterId(const class FString& CharacterId, TArray<struct FPlayerProfileSummaryData> InFriendList);
		bool IsConcentList();
		TArray<struct FSendableLikePlayer> GetSendableLikePlayerList();
		void GetPlayerShortIdWebAPI(class ASBPlayerController* InPlayerController, const class FString& InTargetCharacterId);
		TArray<struct FPlayerProfileSummaryData> GetPlayerSearchResultData_PlayerList();
		bool GetPlayerSearchResultData_IsOver();
		bool GetPlayerSearchResultData();
		void GetPlayerSearchListWebAPI(class ASBPlayerController* InPlayerController, const class FString& PlayerName, const class FString& TargetCharacterShortId, bool IsOnlineOnly, TArray<ESBClassType> ClassTypeList, TArray<int32_t> TensionTagList);
		void GetPlayerProfileSummaryDataList(class ASBPlayerController* InPlayerController, TArray<class FString> InTargetCharacterId);
		void GetPlayerProfileDetailMenuDataWebAPI(class ASBPlayerController* InPlayerController, const class FString& InTargetCharacterId, bool bIgnorePlatform, bool CheckIDToXUID);
		struct FPlayerProfileClassData GetPlayerProfileClassData(const struct FPlayerProfileClassListData& ClassListData, ESBClassType Type);
		bool GetFriendListWebAPI(class ASBPlayerController* InPlayerController);
		TArray<struct FPlayerProfileSummaryData> GetFriendList();
		void GetEquipItemsForCharacters(TArray<struct FBattleMemberInfoSend> BattleMemberInfoSendList);
		bool GetContactListWebAPI(class ASBPlayerController* InPlayerController, int32_t Page);
		void GetConsentListWebAPI(class ASBPlayerController* InPlayerController);
		ESBCharaEquipType FindPlayerProfileMenuDetailEquipItemInfo(const struct FPlayerProfileMenuDetailCharaEquipInfo& InCharaEquipInfo, const class FString& InUniqueId, bool* IsValid);
		void ClientUpdateAdventurerCardComplete(bool bWasSuccessful, int32_t RetCode);
		void ClientRemoveFriendSend(bool bResult);
		void ClientCharactersAdventurerCardSendComplete(bool bResult, TArray<struct FPlayerProfileSummaryData> InFriendList, const struct FSendAdventureCardResult& InSendAdventureCardResult);
		void Client_SendPhotoLike(bool bWasSuccessful, int32_t RetCode);
		void Client_SendLike(bool bWasSuccessful, int32_t RetCode, const class FString& CharacterName, int32_t Warning);
		void Client_IsSendLike(bool bWasSuccessful, int32_t RetCode, TArray<struct FSendableLikePlayer> outSendableLikePlayerList, bool IsSendableLike);
		void Client_GetEquipItemsForCharacters(bool bWasSuccessful, int32_t RetCode, TArray<struct FBattleMemberLevelSyncInfo> BattleMemberLevelSyncInfos);
		void Client_AddAdventurerCardDecorationIdList(TArray<struct FDecorationData> InAdventurerCardDecorationIdList);
		void CheckTalkPermissionWebAPI(class ASBPlayerController* InPlayerController, const class FString& InTargetUserId, const class FString& InTargetCharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerConsumeComboAttackSkillController
	 * Size -> 0x0078 (FullSize[0x00B8] - InheritedSize[0x0040])
	 */
	class USBPlayerConsumeComboAttackSkillController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_8MF3[0x78];                                  // 0x0040(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerContentActionComponent
	 * Size -> 0x0020 (FullSize[0x00F0] - InheritedSize[0x00D0])
	 */
	class USBPlayerContentActionComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_SEXK[0x20];                                  // 0x00D0(0x0020) MISSED OFFSET (PADDING)

	public:
		void ServerSetKeepContentActionGaugeMax(bool bEnabled, ESBPlayerContentActionType ContentActionType);
		void ServerSetContentActionBreakRecastZero(bool bEnabled);
		void ServerChangeContentActionBySkillID(int32_t ContentActionIndex, int32_t ContentActionSkillID);
		void ServerChangeContentActionByGameContentID(const class FName& GameContentId);
		void ServerAddContentActionGaugeAmount(float Amount, ESBPlayerContentActionType ContentActionType);
		void OnMapLevelInfoInitialized();
		void OnAbsoluteDefenseSuccessAuthorityFirstTimeSinceCast(class ASBPlayerCharacter* PlayerCharacter, int32_t AttackID);
		void MulticastChangeContentActionBySkillID(int32_t ContentActionIndex, int32_t ContentActionSkillID);
		void ClientSetContentActionBreakRecastZero(bool bEnabled);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerControllerBase
	 * Size -> 0x00F8 (FullSize[0x0670] - InheritedSize[0x0578])
	 */
	class ASBPlayerControllerBase : public APlayerController
	{
	public:
		unsigned char                                              UnknownData_DNBY[0xC0];                                  // 0x0578(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSaveKeyConfigDelegate;                                 // 0x0638(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5I1X[0x18];                                  // 0x0648(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBNgWordComponent*                                  NgWordComponent;                                         // 0x0660(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ASBUIController*                                     UIController;                                            // 0x0668(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetReturnLocation_Server(const struct FVector& Location, float Yaw);
		void SetReturnLocation(const struct FVector& Location, float Yaw);
		bool Request_SaveKeyConfig();
		bool Request_ClientTravel(const class FString& URL, const struct FSBTravelOption& InTravelOption);
		void OnUpdateDecideButton__DelegateSignature();
		void OnSaveKeyConfigDelegate__DelegateSignature(bool Result);
		bool GetReturnLocation(struct FVector* Location, float* Yaw);
		class USBNgWordComponent* GetNGWordComponent();
		void ClientGameStarted();
		void ClearReturnLocation_Server();
		void ClearReturnLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerController
	 * Size -> 0x1138 (FullSize[0x17A8] - InheritedSize[0x0670])
	 */
	class ASBPlayerController : public ASBPlayerControllerBase
	{
	public:
		class ASBPlayerCharacter*                                  SBPlayerCharacter;                                       // 0x0670(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XXQ4[0x18];                                  // 0x0678(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ClassId;                                                 // 0x0690(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GPWO[0xB8];                                  // 0x0694(0x00B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_GamePadCameraZoomInOutScale;                           // 0x074C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_650K[0x758];                                 // 0x0750(0x0758) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PerformanceCameraActor;                                  // 0x0EA8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_51PX[0x8];                                   // 0x0EB0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBReticleComponent*                                 ReticleComponent;                                        // 0x0EB8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FDataTableRowHandle                                 GodModeGameModeHandle;                                   // 0x0EC0(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 GodModeUserHandle;                                       // 0x0ED0(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 GodModeAdminHandle;                                      // 0x0EE0(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 ReverberationGodModeHandle;                              // 0x0EF0(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 SksBattleGodModeHandle;                                  // 0x0F00(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnPlayerActivateGodModeResultDelegate;                   // 0x0F10(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnPlayerDeactivateGodModeResultDelegate;                 // 0x0F20(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnPlayerDeactivateReverberationGodModeResultDelegate;    // 0x0F30(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0J48[0x28];                                  // 0x0F40(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerGatherPointComponent*                       PlayerGatherPointComponent;                              // 0x0F68(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerFieldActorPickupComponent*                  PlayerFieldActorPickupComponent;                         // 0x0F70(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerAutoDeliveryQuestComponent*                 PlayerAutoDeliveryQuestComponent;                        // 0x0F78(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QHFD[0x8];                                   // 0x0F80(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGetUserItemCompletedDelegate;                          // 0x0F88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBQuestComponent*                                   QuestComponent;                                          // 0x0F98(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnWeaponEquipDelegate;                                   // 0x0FA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSBStatusAilmentWhenRespawnIfAbilityFlagWhenDead> StatusAilmentWhenRespawnIfAbilityFlagWhenDead;           // 0x0FB0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetMyCharacterInfoDelegate;                            // 0x0FC0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KZ53[0x3C8];                                 // 0x0FD0(0x03C8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSaveCharaCostumeEquipDelegate;                         // 0x1398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveCharaImagineEquipsDelegate;                        // 0x13A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharaEquipPassiveImagineChangedDelegate;               // 0x13B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveCharaConfigDelegate;                               // 0x13C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8IGC[0x20];                                  // 0x13D8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBUserImageComponent*                               UserImageComponent;                                      // 0x13F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPhotoModeImageComponent*                          PhotoModeImageComponent;                                 // 0x1400(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBSerialCodeComponent*                              SerialCodeComponent;                                     // 0x1408(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBEventShopComponent*                               EventShopComponent;                                      // 0x1410(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBCashExchangeShopComponent*                        CashExchangeShopComponent;                               // 0x1418(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBRmShopComponent*                                  RmShopComponent;                                         // 0x1420(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBGashaComponent*                                   GashaComponent;                                          // 0x1428(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBExchangeItemComponent*                            ExchangeItemComponent;                                   // 0x1430(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerShopComponent*                              PlayerShopComponent;                                     // 0x1438(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBNetworkDataCache*                                 NetworkDataCache;                                        // 0x1440(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsMainMenuOpen;                                         // 0x1448(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsShopMenuOpen;                                         // 0x1449(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsTextWindowOpen;                                       // 0x144A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsQuestMenuOpen;                                        // 0x144B(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EK6R[0x15];                                  // 0x144C(0x0015) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsLockQuickAccess;                                      // 0x1461(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZSYQ[0x6];                                   // 0x1462(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerUIComponent*                                UIComponent;                                             // 0x1468(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsWarpMoveStart;                                         // 0x1470(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WBWG[0x7];                                   // 0x1471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCheatCommandPlayerComponent*                      PlayerCheatComponent;                                    // 0x1478(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBCheatCommandProjectileComponent*                  ProjectileCheatComponent;                                // 0x1480(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBCheatCommandUtilityComponent*                     UtilityCheatComponent;                                   // 0x1488(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ASBStreamingVolume*>                          CurrentStreamingVolumes;                                 // 0x1490(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClientRestart;                                         // 0x14A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSBTravelOption                                     TravelRetryOption;                                       // 0x14B0(0x0098) NativeAccessSpecifierPrivate
		int32_t                                                    TravelRetryCnt;                                          // 0x1548(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       TravelRetryWait;                                         // 0x154C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R4C8[0x3];                                   // 0x154D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TravelRetryTimer;                                        // 0x1550(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      TravelRetryInterval;                                     // 0x1554(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ClassChangeNotify;                                       // 0x1558(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAttachedClientPlayerStateDelegate;                     // 0x1568(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1G6I[0x8];                                   // 0x1578(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerConcernedList*                              PlayerConcernedList;                                     // 0x1580(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnSaveMapPinInfosDelegate;                               // 0x1588(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRecoverRewardPlusCountDelegate;                        // 0x1598(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBPlayerCharacterCommonComponent*                   PlayerCharacterCommonComponent;                          // 0x15A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnChangePlayerCharacterDelegate;                         // 0x15B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBGrassSoundComponent*                              GrassSoundComponent;                                     // 0x15C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerMailComponent*                              MailComponent;                                           // 0x15C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1PC5[0x20];                                  // 0x15D0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharactersLogComponent*                           CharacterLogComponent;                                   // 0x15F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerAchievementComponent*                       PlayerAchievementComponent;                              // 0x15F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerAwardComponent*                             PlayerAwardComponent;                                    // 0x1600(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerCraftComponent*                             PlayerCraftComponent;                                    // 0x1608(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBImagineLabComponent*                              ImaginLabComp;                                           // 0x1610(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerWeaponEnhancementComponent*                 PlayerWeaponEnhanceComp;                                 // 0x1618(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerDecorationComponent*                        PlayerDecorationComponent;                               // 0x1620(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerTreasureBoxComponent*                       PlayerTreasureBoxComponent;                              // 0x1628(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerArtsComponent*                              PlayerArtsComponent;                                     // 0x1630(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerLiquidMemoryComponent*                      PlayerLiquidMemoryComponent;                             // 0x1638(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBTheaterComponent*                                 TheaterComponent;                                        // 0x1640(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPartyRecruitComponent*                            PartyRecruitComponent;                                   // 0x1648(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerNaEventComponent*                           NaEventComponent;                                        // 0x1650(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerSeasonPassComponent*                        SeasonPassComponent;                                     // 0x1658(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerFmComponent*                                FmComponent;                                             // 0x1660(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerRewardBoostComponent*                       RewardBoostComponent;                                    // 0x1668(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBReportComponent*                                  ReportComponent;                                         // 0x1670(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBOutGameBuffComponent*                             OutGameBuffComponent;                                    // 0x1678(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerAdventureBoardComponent*                    AdventureBoardComponent;                                 // 0x1680(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerElQuestComponent*                           ElQuestComponent;                                        // 0x1688(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBCharacterCampFireComponent*                       CharacterCampFireComponent;                              // 0x1690(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPlayerPhotoModeComponent*                         PhotoModeComponent;                                      // 0x1698(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnRenameCompleteDelegate;                                // 0x16A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AY4N[0x4];                                   // 0x16B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MouseCursorAreaMargin;                                   // 0x16B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BUKG[0x8];                                   // 0x16B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnUseSupplyDelegate;                                     // 0x16C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FDateTime                                           LevelInDate;                                             // 0x16D0(0x0008) Net, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    LevelInDateStatus;                                       // 0x16D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3FIV[0x4];                                   // 0x16DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBDungeonSupply>                            SupplyList;                                              // 0x16E0(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XWX6[0x8];                                   // 0x16F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerFreeBuffPointComponent*                     PlayerFreeBuffPointComponent;                            // 0x16F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBWarehouseAbilityComponent*                        WarehouseAbilityComponent;                               // 0x1700(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBResearchTeamComponent*                            ResearchTeamComponent;                                   // 0x1708(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBPlayerLoginBonusComponent*                        LoginBonusComponent;                                     // 0x1710(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBHappyNappoComponent*                              HappyNappoComponent;                                     // 0x1718(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBStackBComponent*                                  StackBComponent;                                         // 0x1720(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MDMH[0x8];                                   // 0x1728(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerDxBattleComponent*                          PlayerDxBattleComponent;                                 // 0x1730(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBPineVillageComponent*                             PineVillageComponent;                                    // 0x1738(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBHelpMatchingComponent*                            HelpMatchingComponent;                                   // 0x1740(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZU6C[0x28];                                  // 0x1748(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDebugCustomInputToServerDelegate;                      // 0x1770(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndActionBindingsDelegate;                             // 0x1780(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bSimplycityPartyKeyPress;                                // 0x1790(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SPF5[0x7];                                   // 0x1791(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           SimplycityPartyKeyPressStartTime;                        // 0x1798(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SimplycityPartyKeyPressTime;                             // 0x17A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MVIR[0x4];                                   // 0x17A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void WaitNeedInitialParameterLoadAsset();
		void Try_DirectOpen_Theater();
		void TravelToSessionsWithPartyMemberParticipatingInMission(const class FName& GameContentId);
		void TravelToOnlinePlayerSessionForPartyMigration();
		void TravelToOnlinePlayerSessionByFriendCharacterId(const class FString& FriendCharacterId);
		void TravelToOnlinePlayerSession();
		void TravelToAnyMap(const struct FSBTravelOption& InTravelOption);
		void ToggleLookUpRelease();
		void ToggleLookUp();
		void ToggleLookRightRelease();
		void ToggleLookRight();
		void ToggleLookLeftRelease();
		void ToggleLookLeft();
		void ToggleLookDownRelease();
		void ToggleLookDown();
		void StopPlayingPerformanceCamera();
		void StartPlayerInitialParameters();
		void StartGather(class ASBFieldActorGatherPoint* GatherPoint, float GatherMotionLoopTime);
		void ShowRetCode(int32_t RetCode, const class FString& Desc);
		void ShowMatchingMenu(const class FName& InitDungeonId, bool bInteract);
		void ShowCommandMenu(ESBCommandMenuType InType, const class FString& BookmarkType, const class FName& ParamName);
		void SetupLogout(bool bReserveLogout, float TimeToLogout, bool bEnableReversion, EClientExitStatus ClientExitStatus);
		void SetupActionBindings(ESBClassType ClassType);
		void SetTextWindowStatus(bool bIsOpen);
		void SetSimplycityPartyKeyPress(bool bFlag);
		void SetShowMouseCursor(bool bShow);
		void SetShowAccessRestrictDialogEvent();
		void SetShopMenuMode(bool bIsOpen);
		void SetQuickAccessLock(bool bIsLock);
		void SetQuestMenuMode(bool bIsOpen);
		void SetNotificationSimplycityPartyStatus(ENotificationDialogStatus eStatus);
		void SetNotificationPartyStatus(ENotificationDialogStatus eStatus);
		void SetNotificationGuildStatus(ENotificationDialogStatus eStatus);
		void SetMainMenuMode(bool bIsOpen);
		void SetHudVisible(bool bIsVisible);
		void SetCursorMode(bool Flag);
		void SetConnectToServerFailureDebugCode(int32_t InDebugCode);
		void SetChatWindowVisible(bool bIsVisible);
		void ServerSetPingCheckMode(bool bIsEnable);
		void ServerSeamlessTravel(const class FString& MapName, const class FString& GameMode);
		void ServerRestart(const struct FVector& LastLocation);
		void ServerRequestClassChange(ESBClassType InClassType, const class FString& InNewWeaponUniqueId, int32_t InPresetListIndex);
		void ServerRemoveFromReplicationExcludedPlayerIdList(TArray<class FString> TargetIdList);
		void ServerPreSeamlessTravel();
		void ServerPreLogout(bool bEnableReversion, EClientExitStatus ClientExitStatus);
		void ServerPreClientTravel(const struct FSBTravelOption& Option);
		void ServerPingCheck(float sendIntervalFromBefore);
		void ServerNotifyMapLoadedAtRestart();
		void ServerNotifyMapLoaded();
		void ServerDebugOutputDispPingCheckData();
		void ServerChangeClass(ESBClassType Type);
		void ServerAddToReplicationExcludedPlayerIdList(TArray<class FString> TargetIdList);
		void Server_WeaponRemove(const class FString& InWeaponUniqueId, bool IsUpdateDB);
		void Server_WeaponEquip(const class FString& InNewWeaponUniqueId, const class FString& InOldWeaponUniqueId, bool IsUpdateDB);
		void Server_UseSupply(int32_t ItemIndex, int32_t ListNum);
		void Server_SaveMapPinInfos(TArray<struct FMapPinInfo> MapPinInfoList);
		void Server_SaveKeyConfig(TArray<struct FSBPlayerClassKeyConfigDataDiff> KeyConfigDiffList);
		void Server_SaveCharaCostumeEquip(const struct FCharaEquipItemInfo& EquipItemInfo, const struct FCharaEquipItemCharaCreateInfo& EquipItemCharaCreateInfo, ESBCharaEquipType EquipType);
		void Server_SaveCharaConfig(const struct FCharaConfigInfo& ConfigInfo);
		void Server_RequestSpawnAsBuddy(int32_t BuddyIndex, const struct FVector& OffsetLocation);
		void Server_RequestKickedLog();
		void Server_RequestCharacterRename(class ASBPlayerController* InPlayerController, const class FString& NewName);
		void Server_RecoverRewardPlusCount();
		void Server_PlayerEnterBattleArea(class ASBBattleArea* Area);
		void Server_PlayerDeactivateReverberationGodMode();
		void Server_PlayerDeactivateGodMode(ESBGodModeType GodModeType, bool bReverberation);
		void Server_PlayerCountdownBattleArea(class ASBBattleArea* Area, float Time);
		void Server_PlayerActivateGodMode(ESBGodModeType GodModeType, bool bIsRequestPermitEternalGodMode);
		void Server_OnWeaponEquip(int32_t RetCode, const class FString& InNewWeaponUniqueId, const class FString& InOldWeaponUniqueId, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void Server_OnSaveMapPinInfos(bool Result, TArray<struct FMapPinInfo> MapPinInfoList, ESBMapErrorCode ErrorCode);
		void Server_OnSaveKeyConfig(bool Result);
		void Server_OnSaveCharaImagineEquips(int32_t RetCode, const struct FCharaEquipItemInfo& InEquipItemInfo, ESBCharaEquipType InEquipType, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void Server_OnSaveCharaCostumeEquip(int32_t RetCode, TArray<ESBCharaEquipType> DirtyEquipTypes, TArray<struct FCharaEquipItemInfo> DirtyEquipItemInfos, ESBCharaEquipType EquipType, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void Server_OnSaveCharaConfig(bool Result);
		void Server_OnRecoverRewardPlusCount(int32_t RetCode, int32_t Count, int32_t Ticket);
		void Server_OnCharaEquipPassiveImagineChanged();
		void Server_KickThis();
		void Server_InitSupplyList();
		void Server_GetMyCharacterInfo();
		void Server_EraseSpawnedBuddy(int32_t BuddyIndex);
		void Server_DefaultWeaponEquip(class ASBPlayerCharacter* PlayerCharacter);
		void Server_DebugCallCustomInputEvent(const class FName& ActionName);
		void Server_AnswerCheckBuildInitialWeapon(bool bRet);
		void Server_AnswerCheckBuildInitialParameter(bool bRet);
		void Server_AddSupply(int32_t ItemIndex, int32_t Amount);
		void SendCommand(const class FName& Command, bool Force);
		void ReturnToPreviousMap();
		void RequestSeamlessTravel(const class FString& MapName, const class FString& GameMode);
		void RequestRestart();
		void RequestPerformanceCamera(const struct FDataTableRowHandle& RowHandle, class AActor* WatchTarget, float InputCancelTimer);
		void RequestClassChange(ESBClassType Type, const class FString& InWeaponUniqueId, int32_t InEquipSetId);
		void Request_WeaponRemove();
		void Request_WeaponEquip(const class FString& InNewWeaponUniqueId, const class FString& InOldWeaponUniqueId);
		void Request_UseSupply(int32_t ItemIndex);
		bool Request_SaveMapPinInfos(TArray<struct FMapPinInfo> MapPinInfoList);
		void Request_SaveCharaCostumeEquip(const struct FCharaEquipItemInfo& EquipItemInfo, const struct FCharaEquipItemCharaCreateInfo& EquipItemCharaCreateInfo, ESBCharaEquipType EquipType);
		bool Request_SaveCharaConfig(const struct FCharaConfigInfo& ConfigInfo);
		bool Request_RecoverRewardPlusCount();
		bool Request_GetMyCharacterInfo();
		void Request_CharacterRename(const class FString& NewName);
		void ReceiveJoinAchievement(TArray<int32_t> recvAchievement);
		void QuitPhotoMode();
		void QuickAccess_SeasonPass();
		void QuickAccess_RmShop();
		void QuickAccess_Quest_WishList();
		void QuickAccess_Quest_Network();
		void QuickAccess_Quest_AdventureBoard();
		void QuickAccess_Quest();
		void QuickAccess_Photo();
		void QuickAccess_Party_OfferList();
		void QuickAccess_Party();
		void QuickAccess_Option();
		void QuickAccess_MyCharacter_SkillBoard();
		void QuickAccess_MyCharacter_Effect();
		void QuickAccess_MyCharacter_Costume();
		void QuickAccess_MyCharacter_AdventureRank();
		void QuickAccess_MyCharacter();
		void QuickAccess_Map();
		void QuickAccess_Mail();
		void QuickAccess_Library_PictureBook();
		void QuickAccess_Library_Movie();
		void QuickAccess_Library_LoginBonus();
		void QuickAccess_Library_Achievement();
		void QuickAccess_Library();
		void QuickAccess_Inventory_Wallet();
		void QuickAccess_Inventory_LiquidMemory();
		void QuickAccess_Inventory_Depository();
		void QuickAccess_Inventory();
		void QuickAccess_HudPad();
		void QuickAccess_Hud();
		void QuickAccess_Guild_Rank();
		void QuickAccess_Guild_Member();
		void QuickAccess_Guild_Log();
		void QuickAccess_Guild_Card();
		void QuickAccess_Guild();
		void QuickAccess_Gacha();
		void QuickAccess_Event();
		void QuickAccess_Contents();
		void QuickAccess_Communicate_Talk();
		void QuickAccess_Communicate_Friend();
		void QuickAccess_Communicate_CharacterSearch();
		void QuickAccess_Communicate_Album();
		void QuickAccess_Communicate();
		void PushSupplyEmptyLog();
		void PushInitSupplyLog();
		void OnWeaponEquipDelegate__DelegateSignature(int32_t RetCode, bool bInIsExpiredStickerWeapons, TArray<class FString> InExpiredStickerWeaponUniqueIds, const struct FSBExpiredEquipmentData& InExpiredEquipmentData);
		void OnUseSupplyDelegate__DelegateSignature(bool Result);
		void OnSubPaletteRelease();
		void OnShortcutRightRepeat();
		void OnShortcutRightPressed();
		void OnShortcutLeftRepeat();
		void OnShortcutLeftPressed();
		void OnShortcutExecPressed();
		void OnSCRUp(int32_t InCurrentRank, int32_t InCurrentRankMax);
		void OnSaveMapPinInfosDelegate__DelegateSignature(bool Result, ESBMapErrorCode ErrorCode);
		void OnSaveCharaImagineEquipsDelegate__DelegateSignature(int32_t RetCode, ESBCharaEquipType EquipType, const class FString& UniqueId, bool IsEquip, bool bInIsExpiredStickerWeapons, TArray<class FString> InExpiredStickerWeaponUniqueIds, const struct FSBExpiredEquipmentData& InExpiredEquipmentData);
		void OnSaveCharaCostumeEquipDelegate__DelegateSignature(int32_t RetCode, const struct FSBExpiredEquipmentData& InExpiredEquipmentData);
		void OnSaveCharaConfigDelegate__DelegateSignature(bool Result);
		void OnReleasedShortcutRing_Normal_Pad();
		void OnReleasedShortcutRing_Normal_Keyboard();
		void OnReleasedMiniMap();
		void OnReleased_Pushpin();
		void OnReleased_NowPartyPadReleased();
		void OnReleased_NowPartyKbReleased();
		void OnRecoverRewardPlusCountDelegate__DelegateSignature(ESBRecoverRewardPlusCountResult Result);
		void OnPressMainMenu();
		void OnPressedShortcutRingExecuteF12();
		void OnPressedShortcutRingExecuteF11();
		void OnPressedShortcutRingExecuteF10();
		void OnPressedShortcutRingExecuteF09();
		void OnPressedShortcutRingExecuteF08();
		void OnPressedShortcutRingExecuteF07();
		void OnPressedShortcutRingExecuteF06();
		void OnPressedShortcutRingExecuteF05();
		void OnPressedShortcutRing_Normal_Pad();
		void OnPressedShortcutRing_Normal_Keyboard();
		void OnPressedQuestHUDChange();
		void OnPressedMiniMap();
		void OnPressed_QuickAccess_SeasonPass();
		void OnPressed_QuickAccess_RmShop();
		void OnPressed_QuickAccess_Quest_WishList();
		void OnPressed_QuickAccess_Quest_Network();
		void OnPressed_QuickAccess_Quest_AdventureBoard();
		void OnPressed_QuickAccess_Quest();
		void OnPressed_QuickAccess_Photo();
		void OnPressed_QuickAccess_Party_OfferList();
		void OnPressed_QuickAccess_Party();
		void OnPressed_QuickAccess_Option();
		void OnPressed_QuickAccess_MyCharacter_SkillBoard();
		void OnPressed_QuickAccess_MyCharacter_Effect();
		void OnPressed_QuickAccess_MyCharacter_Costume();
		void OnPressed_QuickAccess_MyCharacter_AdventureRank();
		void OnPressed_QuickAccess_MyCharacter();
		void OnPressed_QuickAccess_Map();
		void OnPressed_QuickAccess_Mail();
		void OnPressed_QuickAccess_Library_PictureBook();
		void OnPressed_QuickAccess_Library_Movie();
		void OnPressed_QuickAccess_Library_LoginBonus();
		void OnPressed_QuickAccess_Library_Achievement();
		void OnPressed_QuickAccess_Library();
		void OnPressed_QuickAccess_Inventory_Wallet();
		void OnPressed_QuickAccess_Inventory_LiquidMemory();
		void OnPressed_QuickAccess_Inventory_Depository();
		void OnPressed_QuickAccess_Inventory();
		void OnPressed_QuickAccess_Guild_Rank();
		void OnPressed_QuickAccess_Guild_Member();
		void OnPressed_QuickAccess_Guild_Log();
		void OnPressed_QuickAccess_Guild_Card();
		void OnPressed_QuickAccess_Guild();
		void OnPressed_QuickAccess_Gacha();
		void OnPressed_QuickAccess_Event();
		void OnPressed_QuickAccess_Contents();
		void OnPressed_QuickAccess_Communicate_Talk();
		void OnPressed_QuickAccess_Communicate_Friend();
		void OnPressed_QuickAccess_Communicate_CharacterSearch();
		void OnPressed_QuickAccess_Communicate_Album();
		void OnPressed_QuickAccess_Communicate();
		void OnPressed_Pushpin();
		void OnPressed_NowPartyPad();
		void OnPressed_NowPartyKb();
		void OnPressed_BookMarkRegist();
		void OnPressed_BookMark9();
		void OnPressed_BookMark8();
		void OnPressed_BookMark7();
		void OnPressed_BookMark6();
		void OnPressed_BookMark5();
		void OnPressed_BookMark4();
		void OnPressed_BookMark3();
		void OnPressed_BookMark24();
		void OnPressed_BookMark23();
		void OnPressed_BookMark22();
		void OnPressed_BookMark21();
		void OnPressed_BookMark20();
		void OnPressed_BookMark2();
		void OnPressed_BookMark19();
		void OnPressed_BookMark18();
		void OnPressed_BookMark17();
		void OnPressed_BookMark16();
		void OnPressed_BookMark15();
		void OnPressed_BookMark14();
		void OnPressed_BookMark13();
		void OnPressed_BookMark12();
		void OnPressed_BookMark11();
		void OnPressed_BookMark10();
		void OnPressed_BookMark1();
		void OnPressDebugMenu();
		void OnPressDebugLevelDesignMenu();
		void OnPressChatWindow();
		void OnPlayerDeactivateReverberationGodModeResultDelegate__DelegateSignature(bool Result);
		void OnPlayerDeactivateGodModeResultDelegate__DelegateSignature(bool Result);
		void OnPlayerActivateGodModeResultDelegate__DelegateSignature(bool Result);
		void OnLevelLoadedAtRestart();
		void OnLevelLoaded();
		void OnLearningSkill(TArray<struct FCharaSkillMasteryInfo> SkillList);
		void OnGetUserItemCompletedDelegate__DelegateSignature();
		void OnGetUserItemCompleted();
		void OnGetMyCharacterInfoDelegate__DelegateSignature(bool Result);
		void OnExec_DirectOpen_Theater();
		void OnEndActionBindings__DelegateSignature();
		void OnDebugCustomInputToServerDelegate__DelegateSignature(const class FName& ActionName);
		void OnCompletedCharacterName__DelegateSignature(int32_t RetCode);
		void OnCompleteClientRestart__DelegateSignature();
		void OnClassLevelUp(int32_t InPrevLevel, int32_t InCurrentLevel, const struct FSBExtraExpParse& InExtraExpParse);
		void OnClassChangeNotify__DelegateSignature(int32_t InRetCode, bool bInIsExpiredStickerWeapons, TArray<class FString> InExpiredStickerWeaponUniqueIds, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void OnChatWindowClose();
		void OnCharaEquipPassiveImagineChangedDelegate__DelegateSignature();
		void OnChangePlayerCharacterDelegate__DelegateSignature(class APawn* InPawn);
		void OnChangedSessionOwner(class ASBPlayerState* NewOwnerPlayer);
		void OnAttachedClientPlayerState__DelegateSignature(class ASBPlayerController* PlayerController);
		void MulticastSetPingCheckMode(bool bIsEnable);
		void MulticastDebugNotifyClientMessage(const class FString& InMessage);
		void Multicast_DefaultWeaponEquip(class ASBPlayerCharacter* PlayerCharacter);
		void MouseInteractionTargetVisible(bool InVisible);
		void MouseInteractionRelease();
		void MouseInteraction();
		bool IsToggleDash();
		bool IsTextWindowOpen();
		bool IsSupplyList();
		bool IsSimplycityPartyKeyPress();
		bool IsShopMenuOpen();
		bool IsQuestMenuOpen();
		bool IsPhotoMode();
		bool IsPhotoCameraControlMode();
		bool IsOpenDebugMenu();
		bool IsMoveByKeyboard();
		bool IsMainMenuOpen();
		bool IskQuickAccessLocked();
		bool IsInitSupplyList();
		bool IsInitializeClientMyCharacterInfo();
		bool IsHudVisible();
		bool IsEnableShortcutKey();
		bool IsEnableInput();
		bool IsDeleteSupplyList();
		bool IsCursorMode();
		bool IsChatWindowVisible();
		bool IsCameraInputByMouse();
		void InitSupplyList();
		class USBPlayerWeaponEnhancementComponent* GetWeaponEnhancementComponent();
		class USBWarehouseAbilityComponent* GetWarehouseAbilityComponent();
		class USBUserImageComponent* GetUserImageComponent();
		class USBPlayerUIComponent* GetUIComponent();
		class USBTheaterComponent* GetTheaterComponent();
		TArray<struct FSBDungeonSupply> GetSupplyList();
		class USBStackBComponent* GetStackBComponent();
		float GetSimplycityPartyKeyPressTime();
		class USBSerialCodeComponent* GetSerialCodeComponent();
		class USBPlayerSeasonPassComponent* GetSeasonPassComponent();
		class USBRmShopComponent* GetRmShopComponent();
		class USBPlayerRewardBoostComponent* GetRewardBoostComponent();
		class USBResearchTeamComponent* GetResearchTeamComponent();
		class USBReportComponent* GetReportComponent();
		class USBQuestComponent* GetQuestComponent();
		class USBPlayerTreasureBoxComponent* GetPlayerTreasureBoxComponent();
		class USBPlayerShopComponent* GetPlayerShopComponent();
		class USBPlayerLiquidMemoryComponent* GetPlayerLiquidMemoryComponent();
		class USBPlayerGatherPointComponent* GetPlayerGatherPointComponent();
		class USBPlayerFreeBuffPointComponent* GetPlayerFreeBuffPointComponent();
		class USBPlayerFieldActorPickupComponent* GetPlayerFieldActorPickupComponent();
		class USBPlayerDxBattleComponent* GetPlayerDxBattleComponent();
		class USBPlayerDecorationComponent* GetPlayerDecorationComponent();
		class USBPlayerCharacterCommonComponent* GetPlayerCharacterCommonComponent();
		class ASBPlayerCharacter* GetPlayerCharacter();
		class USBPlayerAwardComponent* GetPlayerAwardComponent();
		class USBPlayerAutoDeliveryQuestComponent* GetPlayerAutoDeliveryQuestComponent();
		class USBPlayerArtsComponent* GetPlayerArtsComponent();
		class USBPlayerAchievementComponent* GetPlayerAchievementComponent();
		class USBPineVillageComponent* GetPineVillageComponent();
		class USBPhotoModeImageComponent* GetPhotoModeImageComponent();
		class USBPlayerPhotoModeComponent* GetPhotoModeComponent();
		class USBPartyRecruitComponent* GetPartyRecruitComponent();
		class USBOutGameBuffComponent* GetOutGameBuffComponent();
		ENotificationDialogStatus GetNotificationSimplycityPartyStatus();
		ENotificationDialogStatus GetNotificationPartyStatus();
		ENotificationDialogStatus GetNotificationGuildStatus();
		class USBNetworkDataCache* GetNetworkDataCache();
		class USBPlayerNaEventComponent* GetNaEventComponent();
		class USBPlayerMailComponent* GetMailComponent();
		class USBPlayerLoginBonusComponent* GetLoginBonusComponent();
		class USBImagineLabComponent* GetImaginLabComp();
		class USBHelpMatchingComponent* GetHelpMatchingComponent();
		class USBHappyNappoComponent* GetHappyNappoComponent();
		class USBPlayerGuildComponent* GetGuildComponent();
		class USBGashaComponent* GetGashaComponent();
		class USBPlayerFmComponent* GetFmComponent();
		class USBPlayerExpeditionComponent* GetFang_expeditionComponent();
		class USBExchangeItemComponent* GetExchangeItemComponent();
		class USBEventShopComponent* GetEventShopComponent();
		class USBPlayerElQuestComponent* GetElQuestComponent();
		class USBPlayerCraftComponent* GetCraftComponent();
		class USBPlayerConcernedList* GetConcernedList();
		class USBCharactersLogComponent* GetCharacterLogComponent();
		class USBCharacterCampFireComponent* GetCharacterCampFireComponent();
		class USBCashExchangeShopComponent* GetCashExchangeShopComponent();
		class USBPlayerAdventureBoardComponent* GetAdventureBoardComponent();
		void DeleteSupply();
		void DebugServerSkillButtonPressAtSame(EGameInput gameInput, float DelayTime, unsigned char LimitType);
		void DebugMulticastSkillButtonPressAtSame(EGameInput gameInput);
		void DebugBindCustomInputToServer(const class FName& ActionName);
		void ClientTravelToSession(const class FString& SessionId, const class FString& MapName, const class FString& GameType, const struct FSBTravelOption& InTravelOption);
		void ClientTravelToAnyMap(const class FString& MapName, const class FString& GameType, const struct FSBTravelOption& InTravelOption);
		void ClientStartInstanceContent(const struct FSBMapInfo& ContentInfo);
		void ClientShowMatchingMenu(const class FName& InitDungeonId, bool bInteract);
		void ClientSetControlRotation(const struct FRotator& NewRotation);
		void ClientReturnToPreviousMap();
		void ClientReturnDisconnectedParty(const class FString& CharacterId);
		void ClientPreSeamlessTravel();
		void ClientPreClientTravelRetryMessage(int32_t RetCode);
		void ClientPreClientTravelOpt(bool bWasSuccessful, const struct FSBTravelOption& InTravelOption, int32_t RetCode);
		void ClientPreClientTravel(bool bWasSuccessful, const class FString& InSessionId, int32_t RetCode);
		void ClientOnCompleteChangeClass(int32_t RetCode, const struct FSBClassChangeSyncData& InData, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void ClientNotifySessionOwnerChanged(class ASBPlayerState* NewOwnerPlayer);
		void ClientGmJumper(bool bJumper);
		void ClientCheckMapLoadedAtRestart(const struct FVector& NewLocation, const struct FRotator& NewRotation);
		void ClientApprovedJoinInstantParty(const class FString& PartyJoinInfoJson);
		void Client_WeaponRemove(int32_t RetCode, int32_t ClientLogRetCode, const class FString& InWeaponUniqueId);
		void Client_WeaponEquip(int32_t RetCode, int32_t ClientLogRetCode, const class FString& InNewWeaponUniqueId, const class FString& InOldWeaponUniqueId, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void Client_UseSupply(bool bResult, int32_t ListNum, const struct FSBRecastTimeInfo& NewRecastTime);
		void Client_SendShowSpawnedEnemyNum(int32_t SpawnedEnemyNum, int32_t EmptySlotNum);
		void Client_SendEnemyStateMachineLog(const class FString& DumpFileName, int32_t Cursor, TArray<class FString> DumpStates);
		void Client_SendEnemySpawnInfo(const struct FSBEnemySpawnInfo& SpawnInfo);
		void Client_SaveMapPinInfos(bool Result, TArray<struct FMapPinInfo> MapPinInfoList, ESBMapErrorCode ErrorCode);
		void Client_SaveCharaImagineEquips(int32_t RetCode, const struct FCharaEquipItemInfo& InEquipItemInfo, ESBCharaEquipType InEquipType, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void Client_SaveCharaCostumeEquip(int32_t RetCode, TArray<ESBCharaEquipType> DirtyEquipTypes, TArray<struct FCharaEquipItemInfo> DirtyEquipItemInfos, ESBCharaEquipType EquipType, const struct FSBExpiredEquipmentData& InDirtyExpiredEquipmentData);
		void Client_SaveCharaConfig(bool Result);
		void Client_RecoverRewardPlusCount(int32_t RetCode, int32_t Count, int32_t Ticket);
		void Client_PlayerDeactivateReverberationGodModeResult(bool bResult);
		void Client_PlayerDeactivateGodModeResult(bool bResult);
		void Client_PlayerActivateGodModeResult(bool bResult);
		void Client_OnSpawnedBuddy(int32_t BuddyIndex, ESpawnedBuddyResult Result);
		void Client_OnSaveKeyConfig(bool Result);
		void Client_OnErasedSpawnedBuddy(int32_t BuddyIndex, ESpawnedBuddyResult Result);
		void Client_OnCompletedRename(bool bWasSuccessful, const class FString& NewName, int32_t RetCode);
		void Client_InitSupplyList(TArray<struct FSBDungeonSupply> MasterSupplyList);
		void Client_GetMyCharacterInfo(bool Result, const struct FSBCharacterMisc& CharacterMisc);
		void Client_EndPlayerInitialParameters(bool bResult);
		void Client_ConsumeItem_SkillRecastReset();
		void Client_CheckBuildInitialWeapon();
		void Client_CheckBuildInitialParameter();
		void Client_CharaEquipPassiveImagineChanged();
		void ClearInputParam(bool bExecuteReleaseEvent);
		void ClearEnemyDropTreasureBox();
		void CheatCommand_SwitchEnemyTacticalSkillDebugMode(class ASBEnemyCharacter* Enemy, int32_t Mode);
		void CheatCommand_SwitchEnemyTacticalSkillActivation(class ASBEnemyCharacter* Enemy, const class FString& Command, bool bEnable);
		void CheatCommand_SpawnEnemy(const class FString& EnemyId, int32_t Level, const class FName& Specifier, const struct FVector& Location, const struct FRotator& Rotation);
		void CheatCommand_ShowSpawnedEnemyNum();
		void CheatCommand_ServerGatherEnemyParam();
		void CheatCommand_ServerDumpGameSessionState();
		void CheatCommand_ReviveSelf();
		void CheatCommand_RestartGame(uint32_t ConnectWait);
		void CheatCommand_RequestSendEnemySpawnInfo();
		void CheatCommand_PauseEnemyBehavior(class ASBEnemyCharacter* Enemy);
		void CheatCommand_PartsBreak(const class FName& PartsName, bool bSoon);
		void CheatCommand_KillSelf();
		void CheatCommand_KillAllEnemyInBattleArea();
		void CheatCommand_KillAllEnemyAndPlayerInBattleArea(bool bKillPlayerFirst);
		void CheatCommand_GiveAllEnemyParalyze();
		void CheatCommand_ForceSetLocationAndMovementModeFallingEnemy(class ASBEnemyCharacter* EnemyCharacter, const struct FVector& Location);
		void CheatCommand_EnemyPhaseProgress(int8_t AddPhaseProgress);
		void CheatCommand_EnemyHitPointForceSync();
		void CheatCommand_DumpEnemyStateMachineLog(class ASBEnemyCharacter* Enemy);
		void CheatCommand_ClientGatherEnemyParam(const class FString& OutputStr);
		void CheatCommand_ClientDumpGameSessionState(const class FString& OutputStr);
		void CheatCommand_ChangePlayerFaction(const class FName& NewFaction);
		void CheatCommand_BDFObjectSpawnSelfDamageProjectile(float Rate);
		bool CanOpenNotificationSimplycityPartyDialog();
		bool CanOpenNotificationPartyDialog();
		bool CanOpenNotificationGuildDialog();
		bool CanOpenMenu(bool IsShowSystemMessage);
		void CancelCursorMode();
		void BookMark9();
		void BookMark8();
		void BookMark7();
		void BookMark6();
		void BookMark5();
		void BookMark4();
		void BookMark3();
		void BookMark24();
		void BookMark23();
		void BookMark22();
		void BookMark21();
		void BookMark20();
		void BookMark2();
		void BookMark19();
		void BookMark18();
		void BookMark17();
		void BookMark16();
		void BookMark15();
		void BookMark14();
		void BookMark13();
		void BookMark12();
		void BookMark11();
		void BookMark10();
		void BookMark1();
		class FString AFKDataToString();
		void AddSupply(int32_t ItemIndex, int32_t Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerController_PawnControl
	 * Size -> 0x0008 (FullSize[0x0580] - InheritedSize[0x0578])
	 */
	class ASBPlayerController_PawnControl : public APlayerController
	{
	public:
		class USBPawnControlSettings*                              ControlSettings;                                         // 0x0578(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCraftComponent
	 * Size -> 0x0060 (FullSize[0x0118] - InheritedSize[0x00B8])
	 */
	class USBPlayerCraftComponent : public USBPlayerRecepiComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnCompleted_PlayerCraftRequest;                          // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_MultiCraftRequest;                           // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_RecepiUpdate;                                // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_RecepiUnlocked;                              // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IGC3[0x20];                                  // 0x00F8(0x0020) MISSED OFFSET (PADDING)

	public:
		void SyncUnlockRecipeSet();
		void SyncUnlockRecepi();
		void Server_UnLockRecepis(class ASBPlayerController* InPlayerController, TArray<int32_t> recepiIds);
		void Server_UnLockRecepi(class ASBPlayerController* InPlayerController, int32_t RecepiId);
		void Server_RequestMultiCraft(class ASBPlayerController* InPlayerController, int32_t InRecepiId, int32_t ConstructionNum, TArray<int32_t> UseToken, int32_t StorageNo);
		void Server_PlayerCraftRequest(class ASBPlayerController* InPlayerController, int32_t InRecepiId, TArray<int32_t> UseToken, int32_t StorageNo);
		void Server_OnCompleteUnlockRecipeSet(int32_t ErrorCode, TArray<int32_t> InAddRecipeSets);
		void Server_OnCompleteUnlockRecepi(int32_t ErrorCode, TArray<struct FCharacterCraftRecepi> InAddRecepi);
		void Server_OnCompletedPlayerCraft(int32_t ErrorCode, int32_t InRecepiId, TArray<struct FOwnItemInfo> InOutItems, TArray<struct FOwnItemInfo> UsedMaterials, bool IsCritical, int32_t Money, int32_t TotalAmount, TArray<struct FSBCharacterToken> ConsumedTokens, const struct FOwnItemInfo& SallItem, int32_t SaleProfits);
		void Server_OnCompleted_MultiCraft(int32_t ErrorCode, int32_t InRecepiId, TArray<struct FMultiCraftData> CraftData, int32_t CriticalNum, bool isFail, int32_t Money, int32_t TotalAmount, TArray<struct FSBCharacterToken> ConsumedTokens, TArray<struct FOwnItemInfo> SallItems, int32_t SaleProfits);
		void Recepis_UnlockRequest(TArray<int32_t> InRecepiIds);
		void Recepi_UnlockRequest(int32_t InRecepiId);
		void OnCompleted_UnlockRecepi__DelegateSignature(int32_t ErrorCode, TArray<struct FCharacterCraftRecepi> UnlockedRecepis);
		void OnCompleted_RecepiUpdate__DelegateSignature(int32_t RecepiId);
		void OnCompleted_PCCraftRequest__DelegateSignature(int32_t ErrorCode, bool IsSuccess, bool IsCritical, const class FString& ItemUniqueId, int32_t TotalAmount, int32_t SaleAmount, int32_t SaleProfits);
		void OnCompleted_MultiCraft__DelegateSignature(int32_t ErrorCode, bool IsCritical, TArray<class FString> ItemUniqueids, int32_t CriticalNum, bool isFail, int32_t TotalAmount, TArray<bool> Criticals, int32_t SaleAmount, int32_t SaleProfits);
		bool IsLearnedRecipeSet(int32_t InId);
		bool IsLearned(int32_t InId);
		TArray<int32_t> GetPlayerRecipeSetList();
		TArray<struct FCharacterCraftRecepi> GetPlayerRecepi();
		struct FCharacterCraftRecepi FindPlayerRecepi(bool* IsExist, int32_t InRecepiId);
		void Craft_RequestPlayerCraft(int32_t InRecepiId, TArray<int32_t> UseToken, int32_t StorageNo);
		void Craft_RequestMultiCraft(int32_t InRecepiId, int32_t InConstructionNum, TArray<int32_t> UseToken, int32_t StorageNo);
		void Client_SyncRecipeSet(TArray<int32_t> InAddRecipeSet);
		void Client_SyncRecepi(TArray<struct FCharacterCraftRecepi> InAddRecepi);
		void Client_OnCompleteUnlockRecipeSet(int32_t ErrorCode, TArray<int32_t> InAddRecipeSets);
		void Client_OnCompleteUnlockRecepi(int32_t ErrorCode, TArray<struct FCharacterCraftRecepi> InAddRecepi);
		void Client_OnCompletedPlayerCraft(int32_t ErrorCode, int32_t InRecepiId, TArray<struct FOwnItemInfo> InOutItems, TArray<struct FOwnItemInfo> UsedMaterials, bool IsCritical, int32_t Money, int32_t TotalAmount, TArray<struct FSBCharacterToken> ConsumedTokens, const struct FOwnItemInfo& SallItem, int32_t SaleProfits);
		void Client_OnCompleted_MultiCraft(int32_t ErrorCode, int32_t InRecepiId, TArray<struct FMultiCraftData> CraftData, int32_t CriticalNum, bool isFail, int32_t Money, int32_t TotalAmount, TArray<struct FSBCharacterToken> ConsumedTokens, TArray<struct FOwnItemInfo> SallItems, int32_t SaleProfits);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerCurveMoveSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerCurveMoveSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerDamageUpPassiveSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerDamageUpPassiveSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerDebugComponent
	 * Size -> 0x0080 (FullSize[0x0150] - InheritedSize[0x00D0])
	 */
	class USBPlayerDebugComponent : public USBPlayerActorComponent
	{
	public:
		TWeakObjectPtr<class AActor>                               Firework;                                                // 0x00D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDebugDraw;                                              // 0x00D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SEL1[0x5F];                                  // 0x00D9(0x005F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBDxBattleGameScore>                        DebugPlayerTotalScoreList;                               // 0x0138(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		int32_t                                                    EnemyGateDestructNum;                                    // 0x0148(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    EnemyBufferDestructNum;                                  // 0x014C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetFirework(class AActor* FireworkPtr);
		void ServerUpdateDebugParam(unsigned char ParamType, const struct FSBBattleDebugParam& Value);
		void ServerSetDefaultAttackElement(ESBAttribute ElementType, int32_t ElementValue, int32_t ElementDamage);
		void ServerSendBuildTime(int64_t BuildTime);
		void SendClientServerPlayerCollision(TArray<struct FVector_NetQuantize> VecList);
		void SendClientAroundPlayerAndEnemyLocation(TArray<struct FVector_NetQuantize> VecList);
		void RequestSendServerPlayerCollision(TArray<class FName> SocketNameList);
		void RequestSendServerAroundPlayerAndEnemyLocation(float Radius);
		void RequestPrintBattleEffective();
		class AActor* GetFirework();
		void DbgSendClientServerPlayerStateChange(const class FString& STR);
		void ClientUpdateDebugParam(unsigned char ParamType, const struct FSBBattleDebugParam& Value);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerDecorationComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBPlayerDecorationComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnDecorationDelegate;                                    // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		TArray<struct FDecorationData> SortIds(TArray<struct FDecorationData> DecorationDataList, ESBDecorationListSortType SortType);
		void Request_LoadDecorationList();
		void OnDecorationDelegate__DelegateSignature(bool Result, int32_t RetCode);
		TArray<struct FDecorationData> GetDecorationList(ESBAdventureCardDecorationType InDecorationType, TArray<struct FDecorationData> InHaveList, ESBDecorationListSortType SortType);
		void Client_SetDecorationDataList(TArray<struct FDecorationData> InDecorationDataList);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerDefeatEnemyComponent
	 * Size -> 0x0038 (FullSize[0x00F0] - InheritedSize[0x00B8])
	 */
	class USBPlayerDefeatEnemyComponent : public USBPlayerPropertyComponent
	{
	public:
		unsigned char                                              UnknownData_KTH2[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBHttpQuery*                                        HttpQuery;                                               // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TIIO[0x18];                                  // 0x00C8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSendDefeatEnemyCompleteDelegate;                       // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate

	public:
		void NotifyDefeatEnemy(const struct FEnemyDeadNotifyInfo& InInfo);
		void ClientOnDefeatEnemy(TArray<struct FEnemyDeadNotifyInfo> InInfos, TArray<struct FSBLiquidMemoryInfo> InLiquidMemoryInfos, bool InIsLiquidMemoryInfoValid, const struct FSBExtraExpParse& ClassExtraExp, bool InOpenCommandMenuFlag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerDodgeSkillController
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerDodgeSkillController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_QKW8[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerDodgeSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerDodgeSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerDungeonComponent
	 * Size -> 0x0108 (FullSize[0x01C0] - InheritedSize[0x00B8])
	 */
	class USBPlayerDungeonComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnGetActivateDungeonsDelegate;                           // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetActivatedPublicDungeonsDelegate;                    // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAddActivatedPublicDungeonsDelegate;                    // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VBEJ[0x18];                                  // 0x00E8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAddActivate;                                           // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDungeonClearDelegate;                                  // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDungeonFailedDelegate;                                 // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectPendingRewardsDelegate;                          // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseTokenTreasureBoxDrawItemsDelegate;                  // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAutoLikeSendDelegate;                                  // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G3PQ[0x60];                                  // 0x0160(0x0060) MISSED OFFSET (PADDING)

	public:
		void SetNeedNotifyDungeonActivated();
		void ServerUseTokenTreasureBoxDrawItems(bool bInIsAccept);
		void ServerSelectPendingRewards(bool acceptBoostReward);
		void ServerOnUseTokenTreasureBoxDrawItems(int32_t InRetCode, const struct FSBTokenTreasureBoxRewardInfo& InRewardInfo);
		void ServerOnSelectPendingRewards(int32_t InRetCode, bool isAccept, const struct FSBDungeonClearRewardInfo& DungeonClearRewardInfo, bool InOpenCommandMenuFlag);
		void ServerOnResponseLog(const class FString& Response);
		void ServerOnDungeonFailedComplete(int32_t InRetCode, const struct FSBDungeonClearRewardInfo& DungeonClearRewardInfo, ESBGameOver InGameOverType, bool InOpenCommandMenuFlag);
		void ServerOnDungeonClearComplete(int32_t InRetCode, const struct FSBDungeonClearRewardInfo& DungeonClearRewardInfo, bool InOpenCommandMenuFlag);
		void ServerOnAutoLikeSend(int32_t InRetCode);
		void ServerDungeonFailed(ESBGameOver InGameOverType);
		void ServerDungeonClear();
		void ServerAddComplete(const class FName& DungeonId, bool bIncomplete);
		void ServerAddActivatedPublicDungeons(TArray<class FString> ActivatedDungeonIds);
		void ServerAddActivate(TArray<class FName> DungeonIds, bool bRemove);
		void ServerActivateFromInstanceBattleProvider(class ASBInstanceBattleProvider* InProvider);
		void ServerActivateDungeons();
		void ServerActivatedPublicDungeons();
		void RequestUseTokenTreasureBoxDrawItems(bool bInIsAccept);
		void RequestSelectPendingRewards(bool acceptBoostReward);
		void RequestDungeonFailed(ESBGameOver InGameOverType);
		void RequestDungeonClear();
		void RequestActivateDungeon(TArray<class FName> DungeonIds, bool bRemove);
		void OnUseTokenTreasureBoxDrawItemsDelegate__DelegateSignature(int32_t RetCode);
		void OnSelectPendingRewardsDelegate__DelegateSignature(int32_t RetCode, bool isAccept);
		void OnGetActivateDungeonsDelegate__DelegateSignature(TArray<class FName> OutArray);
		void OnGetActivatedPublicDungeonsDelegate__DelegateSignature(int32_t RetCode, TArray<class FString> OutArray);
		void OnDungeonFailedDelegate__DelegateSignature(int32_t RetCode, ESBGameOver InGameOverType);
		void OnDungeonClearDelegate__DelegateSignature(int32_t RetCode);
		void OnClearConditionComplete(const class FName& InDungeonName);
		void OnClearConditionChangeStep(int32_t InStepNum);
		void OnAutoLikeSendDelegate__DelegateSignature(int32_t RetCode);
		void OnAddActivatedPublicDungeonsDelegate__DelegateSignature(int32_t RetCode, bool Result);
		void OnAddActivate__DelegateSignature(const class FName& DungeonId);
		bool IsCompletedDungeon(const class FName& DungeonId);
		bool IsActivatedDungeon(const class FName& DungeonId);
		int32_t GetPassageStep(const class FName& DungeonId);
		ESBDungeonCompleteType GetCompleteStateType(const class FName& DungeonId);
		int32_t GetCompleteNum(const class FName& DungeonId);
		void GetActivateMapsOnDungeonComplete(const class FName& MapId, TArray<class FName>* MapIdList);
		void GetActivateDungeonList(TArray<class FName>* OutArray);
		void GetActivatedPublicDungeons();
		void ClientOnUseTokenTreasureBoxDrawItems(int32_t InRetCode, const struct FSBTokenTreasureBoxRewardInfo& InRewardInfo);
		void ClientOnSelectPendingRewards(int32_t InRetCode, bool isAccept, const struct FSBDungeonClearRewardInfo& DungeonClearRewardInfo, bool InOpenCommandMenuFlag);
		void ClientOnSaveComplete(TArray<struct FSBDungeonCompleteState> InCompleteStates);
		void ClientOnResponseLog(const class FString& Response);
		void ClientOnDungeonFailedComplete(int32_t InRetCode, const struct FSBDungeonClearRewardInfo& DungeonClearRewardInfo, ESBGameOver InGameOverType, bool InOpenCommandMenuFlag);
		void ClientOnDungeonClearComplete(int32_t InRetCode, const struct FSBDungeonClearRewardInfo& DungeonClearRewardInfo, bool InOpenCommandMenuFlag);
		void ClientOnAutoLikeSend(int32_t InRetCode);
		void ClientGetActivatedPublicDungeons(int32_t RetCode, TArray<class FString> DngIds);
		void ClientAddActivatedPublicDungeons(int32_t RetCode, bool Result);
		void ClientActivateDungeons(TArray<class FName> DungeonIds);
		void AddActivatedPublicDungeons(TArray<class FString> ActivatedDungeonIds);
		void ActivateDungeons();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerDxBattleComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBPlayerDxBattleComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPlayerDxBattleOccurringDelegete;                       // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Request_DxBattleOccurringInfo(const class FString& InMapId, const class FString& InQuestName);
		void OnPlayerDxBattleOccurringDelegete__DelegateSignature(const class FString& InMapId, const class FString& InQuestName);
		void Client_DxBattleOccurringInfo(const class FString& InMapId, const class FString& InQuestName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerElQuestComponent
	 * Size -> 0x0080 (FullSize[0x0138] - InheritedSize[0x00B8])
	 */
	class USBPlayerElQuestComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnElQuestDataAllDataDelegete;                            // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateElQuestDataDelegete;                             // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteElQuestDataDelegete;                           // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAchievementedElQuestDataDelegete;                      // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSBElQuestManager                                   QuestManager;                                            // 0x00F8(0x0040) Transient, NativeAccessSpecifierPublic

	public:
		void SetQuestManager(const struct FSBElQuestManager& InQuestManager);
		void SetQuestItemList(TArray<struct FSBElQuestItemData> InItemList);
		void SetQuestItemData(const struct FSBElQuestItemData& InQuestItemData);
		void Server_UpdateQuestItemAll(TArray<struct FSBElQuestItemData> InQuestItemList, int32_t InRetCode, bool InForceNotifyNextMap);
		void Server_CompleteQuest(const class FString& InQuestId, const class FString& InGroupId, bool IsPayUse);
		bool SearchItemDataBP_QuestId(const class FString& InQuestId, const class FString& InGroupId, struct FSBElQuestItemData* OutQuestData);
		bool SearchItemDataBP(const class FString& InQuestId, struct FSBElQuestItemData* OutQuestData);
		void Request_QuestUpdateLogPutParse(const struct FSBElQuestManager& InSeasonPassQuestManager, const class FString& InMsg);
		void Request_CompleteQuest(const class FString& InQuestId, const class FString& InGroupId, bool IsPayUse);
		struct FSBElQuestManager GetQuestManagerConst();
		struct FSBElQuestManager GetQuestManager();
		void Client_UpdateQuestItemAll(TArray<struct FSBElQuestItemData> InQuestItemList, int32_t InRetCode, bool InIsNotifyProgressAchievemented, bool InIsBackup);
		void Client_UpdateQuestItem(const struct FSBElQuestItemData& InQuestItem, int32_t InRetCode);
		void Client_SetQuestManager(const struct FSBElQuestManager& InQuestManager, int32_t InRetCode);
		void Client_ResetQuestBoard();
		void Client_QuestUpdateLogPutParse(const struct FSBElQuestManager& InSeasonPassQuestManager, const class FString& InMsg);
		void Client_QuestAchievemented(TArray<struct FSBTextTableHash> InQuestBoardData);
		void Client_CompleteQuest(const struct FSBElQuestManager& InQuestManager, ESBElQuestRewardStatus RewardStatus, int32_t ReturnCode, const struct FSBElQuestComponentData& AutoQuestData, bool InOpenCommandMenuFlag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNotifyElQuestManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBNotifyElQuestManager : public UObject
	{
	public:
		TArray<struct FSBElQuestItemData>                          NotifyProgressAchievementedList;                         // 0x0028(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBElQuestFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBElQuestFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void QuestReadedAll(class UObject* InWorldContextObject);
		void QuestReaded(class UObject* InWorldContextObject, const struct FSBElQuestItemData& InItem);
		bool IsUpdateElQuestData(class UObject* InWorldContextObject);
		bool IsNewQuestStockAll(class UObject* InWorldContextObject);
		bool IsElQuestDataUIQuestIdDraw();
		int32_t GetProgressCount(const struct FSBElQuestItemData& InItemData);
		int32_t GetCompleteCount(const struct FSBElQuestItemData& InItemData);
		void CreateNewMarkDataId(class FString* OutMarkId, const struct FSBElQuestItemData& InItem);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerEmoteComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBPlayerEmoteComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUnlockEmoteDelegate;                                   // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnValidEmoteDelegate;                                    // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSBOwnEmoteData>                             UnlockEmoteList;                                         // 0x00D8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate

	public:
		void SortUnlockEmoteList(int32_t SortType);
		void Server_RequestUnlockEmote(TArray<int32_t> EmoteIds);
		void Server_CheckValidEmote(int32_t EmoteId);
		void RequestUnlockEmote(TArray<int32_t> EmoteIds);
		void OnValidEmoteDelegate__DelegateSignature(bool bValid, int32_t EmoteId);
		void OnUnlockEmoteDelegate__DelegateSignature(bool bWasSuccessful);
		void OnRep_UnlockEmoteData();
		bool IsPlayerEmotePossession(int32_t EmoteId);
		bool IsLimitedTimeEmote(int32_t EmoteId);
		TArray<struct FSBOwnEmoteData> GetUnlockEmoteDataList();
		TArray<class FString> GetUnlockEmoteData_LimitedTimeOnly(int32_t GroupId);
		TArray<class FString> GetUnlockEmoteData_LimitedTimeExcluding();
		TArray<class FString> GetUnlockEmoteData();
		TArray<struct FSBLimitedTimeGroupInfo> GetLimitedTimeGroupInfo();
		TArray<int32_t> GetEmoteHistoryIdsData(int32_t SortType);
		TArray<int32_t> GetEmoteFavoriteIdsData(int32_t SortType);
		void Client_CheckValidEmoteResult(bool IsValid, int32_t EmoteId);
		void CheckValidEmote(int32_t EmoteId);
		bool CheckTermIdByList(TArray<int32_t> InEmoteIds, TArray<int32_t>* OutEmoteIds);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerEnemyStepJumpSkillController
	 * Size -> 0x0068 (FullSize[0x00A8] - InheritedSize[0x0040])
	 */
	class USBPlayerEnemyStepJumpSkillController : public USBPlayerSkillController
	{
	public:
		class USphereComponent*                                    m_PlayerEnemyStepJumpCollison;                           // 0x0040(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VDYN[0x60];                                  // 0x0048(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerEngramCannonComponent
	 * Size -> 0x0090 (FullSize[0x0160] - InheritedSize[0x00D0])
	 */
	class USBPlayerEngramCannonComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_HMC9[0x4];                                   // 0x00D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             GetOnLocationOffset;                                     // 0x00D4(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             GetOffLocation;                                          // 0x00E0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MouseInputThreshold;                                     // 0x00EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EngramCannonRotateThreshold;                             // 0x00F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IHDW[0x14];                                  // 0x00F4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlayGetOnEffectWait;                                     // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayGetOffEffectWait_Shot;                               // 0x010C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayGetOffEffectWait_NonShot;                            // 0x0110(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GetOnEffectTime;                                         // 0x0114(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GetOffEffectTime;                                        // 0x0118(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3E7A[0xC];                                   // 0x011C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DamageCameraShake;                                       // 0x0128(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnTakeDamageDelegate;                                    // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShotDelegate;                                          // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FVector                                             NamePlateRelativeLocation;                               // 0x0150(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PW9U[0x4];                                   // 0x015C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetEngramCannonRotate_Server(const struct FRotator& InEngramCannonRotate);
		void SetEngramCannonRotate_Multicast(const struct FRotator& InEngramCannonRotate);
		void RequestShot_Server(const struct FRotator& InEngramCannonRotate);
		void RequestShot_Multicast(const struct FRotator& InEngramCannonRotate);
		void RequestGetOn_Server(class ASBEngramCannon* InEngramCannonActor);
		void RequestGetOn_Multicast(class ASBEngramCannon* InEngramCannonActor);
		void RequestGetOn(class ASBEngramCannon* InEngramCannonActor);
		void RequestGetOff_Server(bool bSuccessed);
		void RequestGetOff_Multicast(bool bSuccessed, ESBEngramCannonStatus EngramCannonStatus);
		void RequestGetOff(bool bSuccessed);
		void OnTakeDamageDelegate__DelegateSignature();
		void OnShotDelegate__DelegateSignature();
		void OnDelegated_RequestGetOff();
		bool IsShot();
		bool IsRotateLimit(ESBEngramCannonRotateDirection Direction, float Tolerance);
		void InitOnBoard_BP();
		void InitGetOff_BP();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerExpeditionComponent
	 * Size -> 0x00A8 (FullSize[0x0160] - InheritedSize[0x00B8])
	 */
	class USBPlayerExpeditionComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCompleted_GetListRequest;                              // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_ExpeditionStartRequest;                      // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_ExpeditionImmediateRequest;                  // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_ExpeditionGetRewardRequest;                  // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_ExpeditionOpenRareRequest;                   // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_ExpeditionCheckRewardRequest;                // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_ExpeditionEndCheckRequest;                   // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class FString>                                      TempIdList;                                              // 0x0128(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class FString>                                      TempNameList;                                            // 0x0138(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		int32_t                                                    AreaDataSplitCount;                                      // 0x0148(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IHMR[0x4];                                   // 0x014C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBFang_expeditionSplitData>                 AreaDataSplitData;                                       // 0x0150(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void UpdateUsingFangList();
		void Server_OnCompleted_GetListRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, TArray<struct FSBFang_expeditionSplitData> SplitData);
		void Server_OnCompleted_ExpeditionStartRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, TArray<int32_t> UseTokenIds);
		void Server_OnCompleted_ExpeditionOpenRareRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, TArray<struct FSBFang_expeditionSplitData> SplitData);
		void Server_OnCompleted_ExpeditionImmediateRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, const class FString& AreaId);
		void Server_OnCompleted_ExpeditionGetRewardRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, const struct FSBMailRewardData& RewardData, TArray<struct FSBFang_expeditionSplitData> SplitData);
		void Server_OnCompleted_ExpeditionEndCheckRequest(int32_t ReturnCode, bool bWasSuccessful, TArray<class FString> IDList, TArray<class FString> NameList);
		void Server_OnCompleted_ExpeditionCheckRewardRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, TArray<struct FSBFang_expeditionSplitData> SplitData);
		void Server_GetListRequest(class ASBPlayerController* InPlayerController);
		void Server_ExpeditionStartRequest(class ASBPlayerController* InPlayerController, const class FString& AreaId, TArray<class FString> MountUniqueIds, const class FString& TimeId, TArray<int32_t> UseTokenIds);
		void Server_ExpeditionOpenRareRequest(class ASBPlayerController* InPlayerController);
		void Server_ExpeditionImmediateRequest(class ASBPlayerController* InPlayerController, const class FString& AreaId, bool UseToken);
		void Server_ExpeditionGetRewardRequest(class ASBPlayerController* InPlayerController, const class FString& AreaId);
		void Server_ExpeditionEndCheckRequest(class ASBPlayerController* InPlayerController);
		void Server_ExpeditionCheckRewardRequest(class ASBPlayerController* InPlayerController, const class FString& ExpeditionId);
		void PushLogMessage(const class FText& Message);
		void OnCompleted_EndCheck__DelegateSignature(bool WasSuccessful, int32_t ErrorCode, int32_t IdCount);
		void OnCompleted_Default__DelegateSignature(bool WasSuccessful, int32_t ErrorCode);
		void GetListRequestExt();
		void GetListRequest();
		void GetExpeditionRewardData(struct FSBMailRewardData* RewardData);
		void GetExpeditionData(struct FSBFang_expeditionData* OutData);
		void GetEndCheckData(TArray<class FString>* IDList, TArray<class FString>* NameList);
		void ExpeditionStartRequest(const class FString& AreaId, TArray<class FString> MountUniqueIds, const class FString& TimeId, TArray<int32_t> UseTokenIds);
		void ExpeditionOpenRareRequest();
		void ExpeditionImmediateRequest(const class FString& AreaId, bool UseToken);
		void ExpeditionGetRewardRequest(const class FString& AreaId);
		void ExpeditionEndCheckRequest();
		void ExpeditionCheckRewardRequest(const class FString& ExpeditionId);
		void Common_OnCompleted_GetListRequestExt(int32_t RetCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData);
		void Client_OnCompleted_GetListRequest_Split(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionSplitData& SplitData);
		void Client_OnCompleted_GetListRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, int32_t SplitCount);
		void Client_OnCompleted_ExpeditionStartRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, TArray<int32_t> UseTokenIds);
		void Client_OnCompleted_ExpeditionOpenRareRequest_Split(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionSplitData& SplitData);
		void Client_OnCompleted_ExpeditionOpenRareRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, int32_t SplitCount);
		void Client_OnCompleted_ExpeditionImmediateRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, const class FString& AreaId);
		void Client_OnCompleted_ExpeditionGetRewardRequest_Split(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionSplitData& SplitData);
		void Client_OnCompleted_ExpeditionGetRewardRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, const struct FSBMailRewardData& RewardData, int32_t SplitCount);
		void Client_OnCompleted_ExpeditionEndCheckRequest(int32_t ReturnCode, bool bWasSuccessful, TArray<class FString> IDList, TArray<class FString> NameList);
		void Client_OnCompleted_ExpeditionCheckRewardRequest_Split(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionSplitData& SplitData);
		void Client_OnCompleted_ExpeditionCheckRewardRequest(int32_t ReturnCode, bool bWasSuccessful, const struct FSBFang_expeditionData& Fang_expeditionData, int32_t SplitCount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNotifyCompletionExpeditionEventParam
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBNotifyCompletionExpeditionEventParam : public UObject
	{
	public:
		class FString                                              AreaName;                                                // 0x0028(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerFacialAnimInstance
	 * Size -> 0x0218 (FullSize[0x0850] - InheritedSize[0x0638])
	 */
	class USBPlayerFacialAnimInstance : public USBFacialAnimInstance
	{
	public:
		class UASAnimationSet*                                     AST_M000;                                                // 0x0638(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UASAnimationSet*                                     AST_F000;                                                // 0x0640(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FName, class UPoseAsset*>                       PA_M000_Mouth;                                           // 0x0648(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class UPoseAsset*>                       PA_M000_Brow;                                            // 0x0698(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class UPoseAsset*>                       PA_M000_Eye;                                             // 0x06E8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class UPoseAsset*>                       PA_F000_Mouth;                                           // 0x0738(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class UPoseAsset*>                       PA_F000_Brow;                                            // 0x0788(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class UPoseAsset*>                       PA_F000_Eye;                                             // 0x07D8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UPoseAsset*>                                  PA_Adj;                                                  // 0x0828(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UPoseAsset*>                                  PA_Eyelid;                                               // 0x0838(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VPG7[0x8];                                   // 0x0848(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerFieldActorPickupComponent
	 * Size -> 0x00B8 (FullSize[0x0170] - InheritedSize[0x00B8])
	 */
	class USBPlayerFieldActorPickupComponent : public USBPlayerPropertyComponent
	{
	public:
		unsigned char                                              UnknownData_I8E3[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBHttpQuery*                                        HttpQuery;                                               // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R5X3[0x80];                                  // 0x00C8(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSendFieldActorPickupCompleteDelegate;                  // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSendSaveBuffPointCompleteDelegate;                     // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JZXS[0x8];                                   // 0x0168(0x0008) MISSED OFFSET (PADDING)

	public:
		void NotifyResultSetFlagFieldActor(TArray<class FString> TagLists);
		void NotifyInteractedFreeBuffPoint(TArray<struct FFieldActorBuffPointNotifyInfo> InInfo, ESBFieldActorInteractPoint InInteractPoint);
		void NotifyInteractedFieldActor(TArray<struct FFieldActorPickupNotifyInfo> InInfo, ESBFieldActorInteractPoint InInteractPoint, bool InIsEmoteGimmick);
		int32_t GetStackableNum(class ASBPlayerController* PlayerController, EItemType InItemType, int32_t InItemIndex, bool bInInventory);
		void ClientInteractedFreeBuffPoint(const struct FFieldActorBuffPointNotifyInfo& InInfo);
		void ClientInteractedFieldActor(const struct FFieldActorPickupNotifyInfo& InInfo, ESBFieldActorInteractPoint OnInteractPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerFishingComponent
	 * Size -> 0x0068 (FullSize[0x0138] - InheritedSize[0x00D0])
	 */
	class USBPlayerFishingComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_JDMV[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPlayerFishingState                                        PlayerFishingState;                                      // 0x00D8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsBigFish;                                               // 0x00D9(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UOQF[0x6];                                   // 0x00DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       PlayReelEvent;                                           // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       StopReelEvent;                                           // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_P3F1[0x8];                                   // 0x00F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FishingRodTension;                                       // 0x00F8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5GJ9[0x3C];                                  // 0x00FC(0x003C) MISSED OFFSET (PADDING)

	public:
		void SetPlayerFishingState(EPlayerFishingState State);
		void SetFishingRodParam(float Direction, float Tension, const struct FVector& FishLocaion);
		void SetFishingGame(class ASBFishingGame* InFishingGame);
		void ServerSetPlayerFishingState(EPlayerFishingState State);
		void ServerSetFishingRodParam(int8_t Tension);
		void ServerSetFishingDebugParam(class ASBFishingGame* InFishingGame, const struct FSBFishDebugParam& FishDebugParam);
		void ServerChangeFishingState(class ASBFishingGame* InFishingGame, ESBFishingGameState InNewState, const class FString& InOption);
		void RequestSpawnFishingRod(const class FName& AssetName);
		void MulticastSetPlayerFishingSuccess(bool InIsBigFish);
		void MulticastSetPlayerFishingState(EPlayerFishingState State);
		void MulticastSetFishingRodParam(int8_t Tension);
		class USBWeaponFishingRodComponent* GetWeaponFishingRodComponent();
		bool GetIsBigFish();
		struct FVector GetFishLocaion();
		class ASBWeapon* GetFishingRodWeapon();
		float GetFishingRodTension();
		float GetFishingRodDirection();
		EPlayerFishingState GetFishingPlayerState();
		class ASBFishingGame* GetFishingGame();
		void ClientStartFishing(class ASBFishingGame* InFishingGame, int32_t InPositionId);
		void ClientShowResult(bool Success, const class FName& FishId, int32_t FishItemId, float FishLength, int32_t ItemAmount, bool NewFish, bool NewRecord, int32_t RetCode);
		void ClientNoVacantEnd(class ASBFishingGame* InFishingGame);
		void ClientInitFish(const class FName& InFishId, float InsRarity);
		void Client_FishingResultItemUpdate(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerFmComponent
	 * Size -> 0x0148 (FullSize[0x0200] - InheritedSize[0x00B8])
	 */
	class USBPlayerFmComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptDelegate                                      OnPlantCompletedDelegate;                                // 0x00B8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnHarvestCompletedDelegate;                              // 0x00C8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnAllHarvestCompletedDelegate;                           // 0x00D8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnSendPresentCompletedDelegate;                          // 0x00E8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnUseItemCompletedDelegate;                              // 0x00F8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnReceivePresentCompletedDelegate;                       // 0x0108(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnReceiveAllPresentCompletedDelegate;                    // 0x0118(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnDisposePresentCompletedDelegate;                       // 0x0128(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnShowFriendFmCompletedDelegate;                         // 0x0138(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnUnfriendCompletedDelegate;                             // 0x0148(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnAutoFriendCompletedDelegate;                           // 0x0158(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		int32_t                                                    Level;                                                   // 0x0168(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XFSQ[0x4];                                   // 0x016C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBFmFieldData*                                      FieldData;                                               // 0x0170(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBFmPossessiveSeedData*                             PossessiveSeedData;                                      // 0x0178(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBFmPossessiveUseItemData*                          PossessiveUseItemData;                                   // 0x0180(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBFmHarvestItemInfo>                        HarvestItemInfoList;                                     // 0x0188(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USBFmSendPresentItemData*>                    SendPresentItemDataList;                                 // 0x0198(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USBFmPresentFriendData*>                      SendPresentFriendDataList;                               // 0x01A8(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBFmPresentItemInfo>                        PresentItemInfoList;                                     // 0x01B8(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    PresentItemCountMax;                                     // 0x01C8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2PUH[0x4];                                   // 0x01CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBFmPresentItemInfo>                        ReceivedPresentItemInfoList;                             // 0x01D0(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBFmFriendInfo>                             FriendInfoList;                                          // 0x01E0(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    FriendCountMax;                                          // 0x01F0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoFriend;                                             // 0x01F4(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowFriendFm;                                           // 0x01F5(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NEJH[0x2];                                   // 0x01F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBFmFieldData*                                      FriendFieldData;                                         // 0x01F8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ServerUseItem(int32_t SelectedCellDataId, int32_t SelectedUseItemDataId);
		void ServerUnfriend(int32_t SelectedId);
		void ServerShowFriendFm(int32_t SelectedId);
		void ServerSendPresent(TArray<struct FSBFmSendPresentItemInfo> ItemInfoList, TArray<struct FSBFmPresentFriendInfo> PresentFriendInfoList);
		void ServerReceivePresent(int32_t SelectedIndex);
		void ServerReceiveAllPresent();
		void ServerPlant(int32_t SelectedSeedDataId, int32_t SelectedCellDataId, int32_t Direction);
		void ServerHarvest(int32_t SelectedCellDataId);
		void ServerDisposePresent(int32_t SelectedIndex);
		void ServerCreateDummyData(int32_t InLevel, TArray<struct FSBFmCellInfo> CellInfoArray, TArray<struct FSBFmPresentItemInfo> InPresentItemInfoList, TArray<struct FSBFmFriendInfo> InFriendInfoList);
		void ServerAutoFriend(bool bInAutoFriend);
		void ServerAllHarvest();
		void SendPresent(class USBFmSendPresentItemData* SelectedItemData, class USBFmPresentFriendData* SelectedFriend);
		void RequestUseItem(class USBFmCellData* SelectedCellData, class USBFmUseItemData* SelectedUseItemData, const class FScriptDelegate& OnCompleted);
		void RequestUnfriend(int32_t SelectedId, const class FScriptDelegate& OnCompleted);
		void RequestShowFriendFm(int32_t SelectedId, const class FScriptDelegate& OnCompleted);
		void RequestSendPresent(const class FScriptDelegate& OnCompleted);
		void RequestReceivePresent(int32_t SelectedIndex, const class FScriptDelegate& OnCompleted);
		void RequestReceiveAllPresent(const class FScriptDelegate& OnCompleted);
		void RequestPlant(class USBFmSeedData* SelectedSeedData, class USBFmCellData* SelectedCellData, int32_t Direction, const class FScriptDelegate& OnCompleted);
		void RequestHarvest(class USBFmCellData* SelectedCellData, const class FScriptDelegate& OnCompleted);
		void RequestDisposePresent(int32_t SelectedIndex, const class FScriptDelegate& OnCompleted);
		void RequestAutoFriend(bool bInAutoFriend, const class FScriptDelegate& OnCompleted);
		void RequestAllHarvest(const class FScriptDelegate& OnCompleted);
		void OnRequestCompletedDelegate__DelegateSignature(int32_t InRetCode);
		bool IsSubscribed();
		bool IsShowFmDebugUi();
		bool IsPurchase();
		int32_t GetLevel();
		struct FSBFmFriendInfo FindFriendInfo(int32_t PlayerId, bool* bIsValid);
		void CreateDummyData();
		void ConstructSendPresentData();
		void ClientOnUseItemCompleted(int32_t RetCode, TArray<struct FSBFmCellInfo> CellInfoArray);
		void ClientOnUnfriendCompleted(int32_t RetCode, TArray<struct FSBFmFriendInfo> InFriendInfoList);
		void ClientOnShowFriendFmCompleted(int32_t RetCode, TArray<struct FSBFmCellInfo> CellInfoArray);
		void ClientOnSendPresentCompleted(int32_t RetCode);
		void ClientOnReceivePresentCompleted(int32_t RetCode, TArray<struct FSBFmPresentItemInfo> InPresentItemInfoList, TArray<struct FSBFmPresentItemInfo> InReceivedPresentItemInfoList);
		void ClientOnReceiveAllPresentCompleted(int32_t RetCode, TArray<struct FSBFmPresentItemInfo> InPresentItemInfoList, TArray<struct FSBFmPresentItemInfo> InReceivedPresentItemInfoList);
		void ClientOnPlantCompleted(int32_t RetCode, TArray<struct FSBFmCellInfo> CellInfoArray);
		void ClientOnHarvestCompleted(int32_t RetCode, TArray<struct FSBFmCellInfo> CellInfoArray, TArray<struct FSBFmHarvestItemInfo> HarvestItemInfoArray);
		void ClientOnDisposePresentCompleted(int32_t RetCode, TArray<struct FSBFmPresentItemInfo> InPresentItemInfoList);
		void ClientOnAutoFriendCompleted(int32_t RetCode, bool bInAutoFriend);
		void ClientOnAllHarvestCompleted(int32_t RetCode, TArray<struct FSBFmCellInfo> CellInfoArray, TArray<struct FSBFmHarvestItemInfo> HarvestItemInfoArray);
		void CancelSendPresent(class USBFmPresentFriendData* SelectedFriend, int32_t SelectedItemIndex);
		struct FSBMasterFmUseItem BP_FindMasterFmUseItem(int32_t Index, bool* bIsValid);
		struct FSBMasterFmSeed BP_FindMasterFmSeed(int32_t Index, bool* bIsValid);
		struct FSBMasterFmItem BP_FindMasterFmItem(int32_t Index, bool* bIsValid);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBFmComponenUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBFmComponenUtility : public UBlueprintFunctionLibrary
	{
	public:
		class USBPlayerFmComponent* GetFmComponent(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerFootprintComponent
	 * Size -> 0x0010 (FullSize[0x0488] - InheritedSize[0x0478])
	 */
	class USBPlayerFootprintComponent : public USBFootprintComponent
	{
	public:
		unsigned char                                              UnknownData_061C[0x8];                                   // 0x0478(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_FootprintParticleScaleFemale;                          // 0x0480(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_FootprintDecalSizeFemale;                              // 0x0484(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		float GetParticleScale();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerForecastSkillController
	 * Size -> 0x0070 (FullSize[0x00B0] - InheritedSize[0x0040])
	 */
	class USBPlayerForecastSkillController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_7P7D[0x50];                                  // 0x0040(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UASCollisionBoxComponent*                            m_ForecastCollision;                                     // 0x0090(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I817[0x18];                                  // 0x0098(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerForecastSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerForecastSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerFreeBuffPointComponent
	 * Size -> 0x00D0 (FullSize[0x0188] - InheritedSize[0x00B8])
	 */
	class USBPlayerFreeBuffPointComponent : public USBPlayerControllerComponentBase
	{
	public:
		unsigned char                                              UnknownData_UW9F[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFreeBuffPointChangeStateNPC;                           // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q5SI[0x28];                                  // 0x00E0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBFieldActorFreeBuffPoint*                          FieldFreeBuffPointActor;                                 // 0x0108(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ADFD[0x8];                                   // 0x0110(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           RequestTime;                                             // 0x0118(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7DMT[0x18];                                  // 0x0120(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ESBFreeBuffPointType>                               LotBuffTypes;                                            // 0x0138(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GSAB[0x18];                                  // 0x0148(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBFreeBuffPlayerBuffTimeInfo>               PlayerBuffTimeInfoLists;                                 // 0x0160(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		class USBHttpQuery*                                        HttpQuery;                                               // 0x0170(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable*                                          BuffCheckDataTable;                                      // 0x0178(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JESV[0x8];                                   // 0x0180(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnFreeBuffPoint(int32_t FreeBuffPointId, ESBFreeBuffPointType Type, ESBFreeBuffPointView BuffPointView);
		void SetRespawnBaseSecondTime(int32_t ChangeRespawnBaseSecondTime);
		void ServerWebAPIBuffForMap(bool bRemove);
		void ServerUpdateRespawnTime(const struct FSBFreeBuffPointRespawnInfo& RespawnInfo, TArray<class FString> FreeBuffPointTag, bool IsUpdateRespawn);
		void ServerUpdateActivateInfo(bool DebugView);
		void ServerSpawnFreeBuffPoint(const class FString& ClassName, int32_t FreeBuffPointId, ESBFreeBuffPointType Type, ESBFreeBuffPointView BuffPointView);
		void ServerSetBuffCheckDataTable(class UDataTable* DataTable);
		void ServerEntryFreeBuffPoint(const class FString& ObjectId, ESBFreeBuffPointView BuffPointView, class UDataTable* DataTable);
		void RequestRegistBuffTable(class UDataTable* DataTable);
		void RequestEntryFreeBuffPoint(class AActor* Actor, class UDataTable* DataTable);
		void OnWebAPIFinished(int32_t InRetCode, const struct FFieldActorBuffPointNotifyInfo& BuffPointInfo);
		void OnFreeBuffPointChangeStateNPC__DelegateSignature();
		TArray<struct FSBFreeBuffPlayerBuffTimeInfo> GetFreeBuffPlayerBuffTimeInfoLists();
		class UDataTable* GetBuffCheckDataTable();
		void DebugDrawFreeBuffPointInfo(bool bEnable);
		void DebugDrawFreeBuffActivateInfo(bool bEnable);
		void ClientRelocationFreeBuffPoint(TArray<struct FSBFreeBuffPointEntryInfo> ObjectIds);
		void ClientNotifyMessage(const class FString& Message, const class FString& FreeBuffPointTag, int32_t FreeBuffPointId);
		void ClientInteractFreeBuffPoint(ESBFreeBuffPointLotResult Result, const class FString& ObjectId, int32_t RetCode, TArray<ESBFreeBuffPointType> InLotBuffTypes);
		void ClientDebugDrawActivateInfo(TArray<struct FSBFreeBuffPlayerBuffTimeInfo> BuffTimeInfoLists);
		void ClientActivateInfo(TArray<struct FSBFreeBuffPlayerBuffTimeInfo> BuffTimeInfoLists);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerFriendComponent
	 * Size -> 0x0120 (FullSize[0x01D8] - InheritedSize[0x00B8])
	 */
	class USBPlayerFriendComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnFollowStateChanged;                                    // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAddFavoritePlayerDelegate;                             // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRemoveFavoritePlayerDelegate;                          // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAddBlackListPlayerDelegate;                            // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRemoveBlackListPlayerDelegate;                         // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetBlackListDataDelegate;                              // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HCFE[0xC0];                                  // 0x0118(0x00C0) MISSED OFFSET (PADDING)

	public:
		void ServerUnFollowPlayer(const class FString& CharacterId);
		void ServerRemoveBlackListPlayer(const class FString& CharacterId);
		void ServerFollowPlayer(const class FString& CharacterId);
		void ServerAddBlackListPlayer(const class FString& CharacterId);
		void RequestUnFollowPlayer(const class FString& CharacterId, const class FScriptDelegate& CompleteDelegate);
		void RequestRemoveFavoritePlayer(const class FString& CharacterId);
		void RequestRemoveBlackListPlayer(const class FString& CharacterId);
		void RequestGetBlackListData(int32_t Page);
		void RequestFollowPlayer(const class FString& CharacterId, const class FScriptDelegate& CompleteDelegate);
		void RequestAddFavoritePlayer(const class FString& CharacterId);
		void RequestAddBlackListPlayer(const class FString& CharacterId);
		void OnRemoveFavoritePlayerDelegate__DelegateSignature(bool bWasSuccessful);
		void OnRemoveBlackListPlayerDelegate__DelegateSignature(bool bWasSuccessful);
		void OnGetBlackListDataDelegate__DelegateSignature(bool bWasSuccessful, TArray<struct FPlayerProfileSummaryData> CharacterName, int32_t totalPageNum, int32_t currentPageNum);
		void OnAddFavoritePlayerDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode);
		void OnAddBlackListPlayerDelegate__DelegateSignature(bool bWasSuccessful);
		bool IsRemoveBlackListDelegate();
		bool IsFollowed(const class FString& CharacterId);
		bool IsFollow(const class FString& CharacterId);
		bool IsBlackListPlayer(const class FString& CharacterId);
		bool IsAddBlackListDelegate();
		ESBFollowStatusType GetFollowStatus(const class FString& CharacterId);
		void GetBlackListPlayer(TArray<class FString>* List);
		void ClientUnFollowPlayerComplete(const class FString& CharacterId, ESBFollowStatusType FollowStatus, bool bResult);
		void ClientRemoveBlackListPlayerComplete(const class FString& CharacterId, bool bResult);
		void ClientFollowPlayerComplete(const class FString& CharacterId, const class FString& CharacterName, ESBFollowStatusType FollowStatus, bool bResult, int32_t RetCode);
		void ClientAddBlackListPlayerComplete(const class FString& CharacterId, bool bResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGatherPointComponent
	 * Size -> 0x00A8 (FullSize[0x0160] - InheritedSize[0x00B8])
	 */
	class USBPlayerGatherPointComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnFiledGatherPointLotDelegete;                           // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGatherPointEnableDelegete;                             // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCRYShineResultEnableDelegete;                          // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0EZ8[0x58];                                  // 0x00E8(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           RequestTime;                                             // 0x0140(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6XU0[0x18];                                  // 0x0148(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateRespawnRequestTime();
		void SpawnGatherPoint(int32_t GatherPointId, ESBTreasureBoxRarity Rarity);
		void SimulateOpenGatherPoint(int32_t TreasureId, int32_t OpenCount);
		void SetRespawnBaseSecondTime(int32_t ChangeRespawnBaseSecondTime);
		void SetArrangementGatherPoint(int32_t DecisionDate, const class FString& CrystalTagName, TArray<struct FSBGatherPointEmoteInfo> Entries);
		void ServerUpdateRespawnTime(const struct FSBGatherPointRespawnInfo& RespawnInfo, TArray<class FString> GatherPointTag, bool IsUpdateRespawn);
		void ServerSpawnGatherPoint(const class FString& ClassName, int32_t GatherPointId, ESBTreasureBoxRarity Rarity);
		void ServerSimulateOpenGatherPoint(int32_t GatherPointId, int32_t OpenCount);
		void ServerEntryGatherPoint(const class FString& ObjectId, const class FString& GatherTag);
		void Server_SetArrangementGatherPoint(int32_t DecisionDate, const class FString& CrystalTagName, TArray<struct FSBGatherPointEmoteInfo> Entries);
		void Server_EmoteCheckCRYPicUpTagID(int32_t CheckDate, const class FString& CRYTagID);
		bool RequestSBGatherPointEntryList();
		void RequestEntryGatherPoint(class AActor* Actor);
		void OnGatherPointEnableDelegete__DelegateSignature(bool IsElable);
		void OnFiledGatherPointLotDelegete__DelegateSignature(ESBGatherPointLotResult Result, const class FString& ObjectId, TArray<struct FGatherPointLotResult> LotResults);
		void OnCRYShineResultEnableDelegete__DelegateSignature(bool Result, const class FString& TagID);
		void OnAddItemFinished(int32_t InRetCode, TArray<struct FSBDiffItemInfo> AddItemDatas, const struct FFieldActorPickupNotifyInfo& FieldActorPickupInfo);
		int32_t GetLotBonusProbabilityNum();
		float GetGatheringMotionReducedTime(class ASBFieldActorGatherPoint* GatherPointActor);
		int32_t GetGatheringDropUpNum(class ASBFieldActorGatherPoint* GatherPointActor);
		float GetGatherAddLottery(class ASBFieldActorGatherPoint* GatherPointActor);
		bool ExistingEmoteGatherPointTabID(const class FString& TagID);
		void EmoteCheckCRYPicUpTagID(int32_t CheckDate, const class FString& CRYTagID);
		void Emote_PicUpTagID_ToTagID_CRY(TArray<class FString> CrystalTagIDList, TArray<struct FSBGatherPointRespawnInfo>* CrystalInfoList);
		void Emote_PicUpTagID_CRY(TArray<struct FSBGatherPointRespawnInfo>* CrystalInfoList);
		bool Emote_GatherPointRepopCheck(const class FString& TagID);
		void Emote_GatherPointClear(const class FString& TagID);
		bool Emote_GatherPointAcquisitionCheck(const class FString& TagID);
		bool Emote_ChackGatherPoin_CRY(const class FString& CRYTagID, TArray<struct FSBGatherPointRespawnInfo> CrystalInfoList, int32_t AddMinutes);
		void DebugDrawGatherPointInfo(bool bEnable);
		void ClientSimulateOpenGatherPoint(ESBGatherPointLotResult Result, int32_t GatherPointId, TArray<struct FSBGatherPointLotSimulateResult> Results);
		void ClientRelocationGatherPoint(TArray<struct FSBGatherPointEntryInfo> ObjectIds);
		void ClientNotifyMessage(const class FString& Message, const class FString& GatherPointTag, int32_t GatherPointId);
		void ClientInteractGatherPoint(ESBGatherPointLotResult Result, const class FString& ObjectId, const class FString& GatherTag, TArray<struct FGatherPointLotResult> LotResults, int32_t RetCode, const struct FFieldActorPickupNotifyInfo& FieldActorPickupInfo, bool IsBonusAdd);
		void Client_EmoteCheckCRYPicUpTagID(int32_t CheckDate, bool Result, const class FString& TagID);
		bool CheckAppearEmoteGatherPoint(const class FString& TagID);
		bool AllCheckAppearEmoteGatherPoint(TArray<class FString> TagIDList);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGuardComponent
	 * Size -> 0x0098 (FullSize[0x04E0] - InheritedSize[0x0448])
	 */
	class USBPlayerGuardComponent : public USBGuardComponent
	{
	public:
		unsigned char                                              UnknownData_KQHE[0x8];                                   // 0x0448(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckIntParam>                   MaxShieldDurabilityModifyList;                           // 0x0450(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I82L[0x8];                                   // 0x0460(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bRenewDurabilityByTime;                                  // 0x0468(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_87Y0[0x3];                                   // 0x0469(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RenewDurabilityTime;                                     // 0x046C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSBConditionCheckIntParam>                   RenewTimeModifyList;                                     // 0x0470(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      RenewDurabilityBreakTime;                                // 0x0480(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P0Z9[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckIntParam>                   RenewBreakTimeModifyList;                                // 0x0488(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      RenewDurabilityStartTime;                                // 0x0498(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ECMG[0x14];                                  // 0x049C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetRoughDirection                           m_ReplicatedGuardDirection;                              // 0x04B0(0x000C) Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_4R7F[0x4];                                   // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_MinGuardTime;                                          // 0x04C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8H6F[0x4];                                   // 0x04C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayerEndGuardBreakStatusAilment>         EndGuardBreakStatusAilmentList;                          // 0x04C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R7T7[0x8];                                   // 0x04D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ServerSetGuardDirection(const struct FVector_NetRoughDirection& Direction);
		void ServerSetGuard(bool InIsGuardActive);
		bool IsGuardedMinTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGuardSkillController
	 * Size -> 0x0370 (FullSize[0x03B0] - InheritedSize[0x0040])
	 */
	class USBPlayerGuardSkillController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_RRU5[0x50];                                  // 0x0040(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayingEffect                                    m_PlayingGuardEffectList[0x4];                           // 0x0090(0x0320) Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGuardSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerGuardSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGuildComponent
	 * Size -> 0x0688 (FullSize[0x0740] - InheritedSize[0x00B8])
	 */
	class USBPlayerGuildComponent : public USBPlayerPropertyComponent
	{
	public:
		class FString                                              SearchKeyWord;                                           // 0x00B8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FGuildData>                                  GuildLists;                                              // 0x00C8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildEntryData>                             GuildEntryList;                                          // 0x00D8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildMemberData>                            GuildInviteMemberList;                                   // 0x00E8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildMemberData>                            GuildMemberList;                                         // 0x00F8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildMemberData_CS>                         GuildInviteMemberList_CS;                                // 0x0108(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildMemberData_CS>                         GuildMemberList_CS;                                      // 0x0118(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildActivity>                              GuildActivity;                                           // 0x0128(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildEntryData>                             PlayerEntryList;                                         // 0x0138(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildEntryData>                             PlayerInviteList;                                        // 0x0148(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildEntryData_CS>                          PlayerEntryList_CS;                                      // 0x0158(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FGuildEntryData_CS>                          PlayerInviteList_CS;                                     // 0x0168(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bHasEntries;                                             // 0x0178(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasInvitations;                                         // 0x0179(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasNewMember;                                           // 0x017A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K7PI[0x5];                                   // 0x017B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuildData                                          GuildData;                                               // 0x0180(0x00B8) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGuildData_CS                                       GuildData_CS;                                            // 0x0238(0x00A0) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGuildData                                          GuildDetailData;                                         // 0x02D8(0x00B8) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FGuildMemberData                                    MemberData;                                              // 0x0390(0x00D8) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FGuildRepData                                       RepData;                                                 // 0x0468(0x0080) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnCompletedGuildOrganized;                               // 0x04E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGuildEntry;                                   // 0x04F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedAcceptMember;                                 // 0x0508(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedDenyMember;                                   // 0x0518(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedWithDraw;                                     // 0x0528(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedChangeRoll;                                   // 0x0538(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedDissolution;                                  // 0x0548(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedChangeAcceptType;                             // 0x0558(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedChangeGuildName;                              // 0x0568(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedCancelEntry;                                  // 0x0578(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedInvite;                                       // 0x0588(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedInviteArraignment;                            // 0x0598(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedList;                                         // 0x05A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGGetEntryList;                                // 0x05B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGetInviteList;                                // 0x05C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGetEntries;                                   // 0x05D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGuildInviteMemberList;                        // 0x05E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteGuildCancelInvitation;                         // 0x05F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGuildMemberList;                              // 0x0608(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteGuildKicked;                                   // 0x0618(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteGuildActivity;                                 // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteExchangeRole;                                  // 0x0638(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnComplete_GetGuildData;                                 // 0x0648(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnComplete_GuildComment;                                 // 0x0658(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnComplete_ChangeActivityTime;                           // 0x0668(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnComplete_GuildDataChanged;                             // 0x0678(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteGuildAssumeLeader;                             // 0x0688(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetedGuildDatail;                                      // 0x0698(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInviteArrived;                                         // 0x06A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteNotifyKickedFromGuild;                         // 0x06B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAddedNewMember;                                        // 0x06C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteGuildNameCheck;                                // 0x06D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnComplete_SearchGuildDataShortID;                       // 0x06E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YQSD[0x48];                                  // 0x06F8(0x0048) MISSED OFFSET (PADDING)

	public:
		void SetSearchKeyWord(const class FString& InKeyWord);
		void SetHasNewMember(bool InHasNewMember);
		void SetGuildDetailDataIsEntryInfo(bool InIsEntry);
		void Server_SendInviteGuild(class ASBPlayerController* InPlayerController, const class FString& InInviteUserId, const class FString& InInviteCharacterId);
		void Server_RequestWithDraw(class ASBPlayerController* InPlayerController);
		void Server_RequestGuildOrganize(class ASBPlayerController* InPlayerController, const struct FGuildData& InGuildData);
		void Server_RequestGuildEntryAssociate(class ASBPlayerController* InPlayerController, const class FString& InGuildId, const class FString& InComment);
		void Server_RequestEntryAssociate(class ASBPlayerController* InPlayerController, const class FString& InEntryId, bool isAccept);
		void Server_RequestDissolution(class ASBPlayerController* InPlayerController, const class FString& InLastMessage);
		void Server_RequestChangeRole(class ASBPlayerController* InPlayerController, const class FString& InMemberUserId, const class FString& InMemberCharacterId, EGuildMemberRole Role);
		void Server_RequestAssumeLeader(class ASBPlayerController* InPlayerController, const class FString& InGuildId);
		void Server_KickMember(class ASBPlayerController* InPlayerController, const class FString& TargetUserId, const class FString& InCharacterId);
		void Server_InviteArraignment(class ASBPlayerController* InPlayerController, const class FString& InEntryId, bool isAccept);
		void Server_GetRequestGuildData();
		void Server_ExchangeRole(class ASBPlayerController* InPlayerController, const class FString& InTargetUserId, const class FString& InTargetCharacterId);
		void Server_CreateGuildChatRoom(const struct FGuildData& InGuildData, const struct FGuildMemberData& InMemberData, bool bInOrganize);
		void Server_ChangeGuildName(class ASBPlayerController* InPlayerController, const class FString& NewGuildName, const class FString& NewGuildShortName);
		void Server_ChangeGuildData(class ASBPlayerController* InPlayerController, const struct FGuildChangeData& ChangeData);
		void Server_ChangeActivityTime(class ASBPlayerController* InPlayerController, ESBGuildActivityTime InActivityTime);
		void Server_CancelInvitation(class ASBPlayerController* InPlayerController, const class FString& InEntryId);
		void Server_CancelEntry(class ASBPlayerController* InPlayerController, const class FString& InEntryId);
		void Send_InviteGuild(const class FString& InInviteUserId, const class FString& InviteCharacterId);
		bool Request_WithDraw();
		void Request_SearchGuildDataShortIds(TArray<class FString> InGuildShortIDs);
		void Request_SearchGuildDataShortId(const class FString& InGuildShortID);
		void Request_KickMember(const struct FGuildMemberData& InMemberData);
		bool Request_InviteData();
		void Request_InviteArraignment(const struct FGuildEntryData& InEntryData, bool isAccept);
		void Request_GuildOrganize(const struct FGuildData& InGuildData);
		void Request_GuildNameDuplicateCheck(const class FString& InGuildName);
		bool Request_GuildDissolution(const class FString& InLastMessage);
		void Request_GuildDetailData(const class FString& InGuildId);
		void Request_GuildDataRPC();
		void Request_GuildData();
		bool Request_GetSendedEntries();
		void Request_GetNewMemberAddedInfo();
		bool Request_GetGuildMemberList();
		bool Request_GetGuildList(int32_t Page);
		bool Request_GetGuildInviteMemberList();
		bool Request_GetEntryList();
		void Request_GetActivity();
		void Request_ExchangeRole(const struct FGuildMemberData& InMemberData);
		void Request_EntryAssociate(const class FString& InGuildId, const class FString& InComment);
		void Request_DenyEntry(const struct FGuildEntryData& EntryData);
		void Request_ChangeRole(const struct FGuildMemberData& TargetMemberData, EGuildMemberRole NewMemberRole);
		void Request_ChangeGuildName(const class FString& InNewGuildName, const class FString& InNewShortName);
		void Request_ChangeGuildActivityTime(ESBGuildActivityTime InActivityTime);
		void Request_ChangeData(const struct FGuildChangeData& InData);
		void Request_CancelInvitation(const struct FGuildMemberData& InMemberData);
		void Request_CancelEntry(const struct FGuildEntryData& InEntryData);
		void Request_AssumeLeader();
		void Request_AcceptEntry(const struct FGuildEntryData& EntryData);
		void OnRep_RepData();
		void OnRep_MemberData();
		void OnRep_GuildData();
		void OnInvited__DelegateSignature();
		void OnCompleteNotifyKickedFromGuild__DelegateSignature(const class FString& KickedGuildName);
		void OnCompleteGuildAssumeLeader__DelegateSignature(int32_t RetCode);
		void OnCompleteGetGuildDetail__DelegateSignature(int32_t RetCode, const struct FGuildData& InGuildData);
		void OnCompletedSearchGuildDataShortID__DelegateSignature(int32_t RetCode);
		void OnCompletedInviteAssignment__DelegateSignature(int32_t RetCode, bool isAccept, const class FString& InEntryId);
		void OnCompletedGuildRequest__DelegateSignature(int32_t RetCode);
		void OnCompletedGuildDataChanged__DelegateSignature(int32_t RetCode, const struct FGuildData& InGuildData);
		void OnCompletedGetGuildMemberList__DelegateSignature(int32_t RetCode);
		void OnCompletedGetGuildList__DelegateSignature(int32_t RetCode, int32_t MaxPage);
		void OnCompletedGetGuildInviteMemberList__DelegateSignature(int32_t RetCode);
		void OnCompletedGetGuildEntryList__DelegateSignature(int32_t RetCode);
		void OnCompletedGetGuildActivity__DelegateSignature(int32_t RetCode);
		void OnAddedNewMember__DelegateSignature();
		bool IsGuildPromoter();
		bool IsGuildMember();
		bool IsGuildMaster();
		bool IsGuildGrandMaster();
		bool IsActivateAssumeLeader();
		bool HasNewMember();
		bool HasInvites();
		bool HasEntryData(const class FString& InGuildId, bool IsInvite);
		bool HasEntries();
		struct FGuildRepData GetRepData();
		TArray<struct FGuildEntryData_CS> GetPlayerInviteList_CS();
		TArray<struct FGuildEntryData> GetPlayerInviteList();
		TArray<struct FGuildEntryData_CS> GetPlayerEntryList_CS();
		TArray<struct FGuildEntryData> GetPlayerEntryList();
		TArray<struct FGuildMemberData_CS> GetGuildMemberList_CS();
		TArray<struct FGuildMemberData> GetGuildMemberList();
		TArray<struct FGuildData> GetGuildList();
		TArray<struct FGuildMemberData_CS> GetGuildInviteMemberList_CS();
		TArray<struct FGuildMemberData> GetGuildInviteMemberList();
		class FString GetGuildId();
		TArray<struct FGuildEntryData> GetGuildEntryList();
		struct FGuildData GetGuildDetailData();
		struct FGuildData_CS GetGuildData_CS();
		struct FGuildData GetGuildData();
		class FString GetGuildComment();
		TArray<struct FGuildActivity> GetGuildActivity();
		ESBGuildErrorCode EncodeGuildErrorCode(int32_t ErrorCode);
		void Client_SendInviteGuild(int32_t RetCode);
		void Client_RequestWithDraw(int32_t RetCode);
		void Client_RequestGuildOrganize(int32_t RetCode, const struct FGuildData& InGuildData, const struct FGuildMemberData& InMemberData);
		void Client_RequestGuildEntryAssociate(int32_t RetCode, const struct FGuildEntryData& InGuildEntryData);
		void Client_RequestGuildDissolution(int32_t RetCode);
		void Client_RequestEntryAssociate(int32_t RetCode, const class FString& InEntryId, bool InIsAccept, TArray<struct FGuildEntryData> InGuildEntries);
		void Client_RequestChangeRole(int32_t RetCode, const struct FGuildMemberData& InMemberData);
		void Client_RequestAssumeLeader(int32_t RetCode, const struct FGuildData& InGuildData, TArray<struct FGuildMemberData> InMemberDatas);
		void Client_OnGetRequestGuildData(const struct FGuildData& InGuildData);
		void Client_KickMember(int32_t RetCode, const class FString& InUserId, const class FString& InMemberCharacterId);
		void Client_JoinGuildChatRoom(const struct FGuildData& InGuildData, const struct FGuildMemberData& InMemberData, bool bInOrganize, bool bRoomCreationResult);
		void Client_InviteArraignment(int32_t RetCode, const class FString& InEntryId, bool isAccept, const struct FGuildData& InGuildData, const struct FGuildMemberData& InMemberData);
		void Client_HasEntry(bool bInHasEntries);
		void Client_ExchangeRole(int32_t RetCode, const struct FGuildData& InGuildData, TArray<struct FGuildMemberData> InMemberData);
		void Client_ChangeGuildName(int32_t RetCode, const struct FGuildData& InGuildData);
		void Client_ChangeGuildData(int32_t RetCode, const struct FGuildData& InGuildData);
		void Client_ChangeActivityTime(int32_t RetCode, const struct FGuildData& InGuildData);
		void Client_CancelInvitation(int32_t RetCode, const class FString& InEntryId);
		void Client_CancelEntry(int32_t ErrorCode, const class FString& InEntryId);
		void CheckGuildNamed__DelegateSignature(int32_t RetCode, bool bIsDuplicate);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerHoldHandComponent
	 * Size -> 0x0058 (FullSize[0x0130] - InheritedSize[0x00D8])
	 */
	class USBPlayerHoldHandComponent : public USBHoldHandComponent
	{
	public:
		unsigned char                                              UnknownData_0ZYS[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBHoldHandParam                                    HoldHandParam_Default;                                   // 0x00E0(0x0020) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBHoldHandParam                                    HoldHandParam_Follow;                                    // 0x0100(0x0020) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9GFP[0x10];                                  // 0x0120(0x0010) MISSED OFFSET (PADDING)

	public:
		void ServerResponseHoldHandRequest(ESBHoldHandResponse Response);
		void ServerRequestHoldHand(class ASBPlayerCharacter* TargetPlayerCharacter);
		void ServerEndHoldHand();
		void MulticastStartHoldHandAsLead(class ASBPlayerCharacter* FollowerPlayerCharacter);
		void MulticastStartHoldHandAsFollower(class ASBPlayerCharacter* LeadPlayerCharacter);
		void MulticastEndHoldHand();
		class ASBPlayerCharacter* GetHoldHandTargetPlayer();
		void ClientSendHoldHandResponse(ESBHoldHandResponse Response);
		void ClientNotifyHoldHandFollowRequest(class ASBPlayerCharacter* LeadPlayerCharacter);
		void ClientLeadNotifyArbitration();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGaugeBaseWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBPlayerGaugeBaseWidget : public UUserWidget
	{
	public:
		bool                                                       bGaugeIn;                                                // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowAlwaysHUD;                                          // 0x0279(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsEditMode;                                              // 0x027A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GG2J[0x5];                                   // 0x027B(0x0005) MISSED OFFSET (PADDING)

	public:
		void OnInAnimation(bool bForward);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerHPGaugeWidget
	 * Size -> 0x0000 (FullSize[0x0280] - InheritedSize[0x0280])
	 */
	class USBPlayerHPGaugeWidget : public USBPlayerGaugeBaseWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSTGaugeWidget
	 * Size -> 0x0000 (FullSize[0x0280] - InheritedSize[0x0280])
	 */
	class USBPlayerSTGaugeWidget : public USBPlayerGaugeBaseWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerEGaugeWidget
	 * Size -> 0x0010 (FullSize[0x0290] - InheritedSize[0x0280])
	 */
	class USBPlayerEGaugeWidget : public USBPlayerGaugeBaseWidget
	{
	public:
		class UCanvasPanel*                                        CanvasPanel;                                             // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEGaugeWidget*                                     EGauge;                                                  // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetVisibleCanvas(bool IsVisible);
		bool IsVisibleCanvas();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerInteractionComponent
	 * Size -> 0x0098 (FullSize[0x0168] - InheritedSize[0x00D0])
	 */
	class USBPlayerInteractionComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_7OBR[0x28];                                  // 0x00D0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          InteractionSearchPriorityDataTable;                      // 0x00F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MO70[0x18];                                  // 0x0100(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreActionTimeOutMaxDeltaTime;                            // 0x0118(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_98SI[0x24];                                  // 0x011C(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class USBInteractionTargetComponent>        OccupiedTarget;                                          // 0x0140(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6TTG[0x4];                                   // 0x0148(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CureBadConditionSearchLength;                            // 0x014C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnSetInteractionDelegate;                                // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KLP4[0x8];                                   // 0x0160(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetOccupied_Server(class USBInteractionTargetComponent* TargetComponent);
		void SetOccupied_Multicast(class USBInteractionTargetComponent* TargetComponent, ESBOccupiedState ReturnOccupiedState);
		void SetInteractionUIActive(bool bActive);
		void SetCurrentInteractionInfoType(ESBInteractionType InType);
		void SetCurrentInteractionInfoTargetComponent(class USBInteractionTargetComponent* TargetComp);
		void SetCurrentInteractionInfoLocation(const struct FVector& InLocation);
		void Server_SetInteractionActive(class USBInteractionTargetComponent* InTarget, class UPrimitiveComponent* InMesh, bool InFlag);
		void ResetInteractionActionDeltaTime();
		void Request_SetInteractionActive(class USBInteractionTargetComponent* InTarget, class UPrimitiveComponent* InMesh, bool InFlag);
		void ReleaseOccupied_Server();
		void ReleaseOccupied_Multicast();
		void OnSetInteractionDelegate__DelegateSignature(bool IsOccupied);
		void OnChangeInteractionUI();
		bool IsPlayerInteractionEnable(ESBInteractionType InteractionType);
		bool IsInteractionUIActive();
		bool IsInteractionTargetMyOccupied();
		struct FVector GetPlayerInteractCriterionLocation(class ASBPlayerCharacter* OwnerPlayer);
		ESBJointGestureState GetJointGestureState();
		float GetIteractionInputGauge();
		ESBInteractionState GetCurrentInteractionState();
		struct FSBInteractionInfo GetCurrentInteractionInfo();
		void Client_SetInteractionActive(class USBInteractionTargetComponent* InTarget, class UPrimitiveComponent* InMesh, bool InFlag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerInterruptQuestComponent
	 * Size -> 0x0150 (FullSize[0x0208] - InheritedSize[0x00B8])
	 */
	class USBPlayerInterruptQuestComponent : public USBPlayerPropertyComponent
	{
	public:
		struct FSBInterruptQuestPlayInfo                           PlayInfo;                                                // 0x00B8(0x0018) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		struct FSBInterruptQuestResultInfo                         ResultInfo;                                              // 0x00D0(0x0018) Net, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FSBInterruptQuestNpcData>                    NpcDataDataList;                                         // 0x00E8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FSBInterruptQuestGimmickObjectData>          GimmickObjectDataList;                                   // 0x00F8(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FSBInterruptQuestDestructibleObjectData>     DestructibleObjectDataList;                              // 0x0108(0x0010) Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5LDU[0x30];                                  // 0x0118(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAwakeInterruptQuestDelegete;                           // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoinInterruptQuestDelegete;                            // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLeaveInterruptQuestDelegete;                           // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSuccessInterruptQuestDelegete;                         // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailedInterruptQuestDelegete;                          // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateProgressInterruptQuestDelegete;                  // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepInterruptQuestPlayInfoDelegete;                     // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepTeamMemberInterruptQuestDelegete;                   // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepResultInfoInterruptQuestDelegete;                   // 0x01C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepUpdateInterruptQuestNpcDelegete;                    // 0x01D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepUpdateInterruptQuestGimmickObjectDelegete;          // 0x01E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepUpdateInterruptQuesteDestructibleObjectDelgete;     // 0x01F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetStartNotifyFlag(bool Flag);
		void Server_SetFieldObjectVisibleFlag(const class FName& InQuestId, const class FName& InProfileId, bool InIsCondition, bool InIsQuestExect);
		void Server_ResetFieldObjectVisibleFlag();
		void Server_ObjectPopupLog(const class FString& ObjectId);
		void Server_NpcPopupLog(const class FString& QuestID, const class FString& NpcId);
		void Server_EnemyPopupLog(const class FString& EnemyId);
		void Server_DeleteGimmickObjectData(const class FString& InName, const class FName& InQuestId);
		void Server_DeleteFieldObjectVisibleFlag(const class FName& InQuestId);
		void Server_DeleteDestructibleObjectData(const class FString& InName, const class FName& InQuestId);
		void Server_DebugPrint(const class FString& Message, float Duration);
		void Server_AddGimmickObjectData(const class FString& InName, const class FName& InQuestId);
		void Server_AddDestructibleObjectData(const class FString& InName, const class FName& InQuestId, bool Inactive);
		void Server_ActionNotification_Recovery(float InRecoveryValue);
		void Server_ActionNotification_NpcTalk_Start(const class FString& InQuestId);
		void Server_ActionNotification_NpcTalk_Clear(const class FString& InQuestId);
		void Server_ActionNotification_ItemUse(int32_t ItemId);
		void Server_ActionNotification_Interact(const class FString& InProfileId);
		void Server_ActionNotification_Gather(int32_t GatherPointId);
		void Server_ActionNotification_Emote(const class FName& EmotName);
		void Request_UpdateDestructibleObjectInstallation();
		void Request_InterruptQuestGimmickObjectAppearLog(class ASBInterruptQuestGimmickActorBase* InGimmickActor, bool InIsAppear, bool IsVisibleFlag);
		void Request_InterruptQuestGimickObjectAppear(class ASBInterruptQuestGimmickActorBase* InGimmickActor, bool InIsAppear);
		void Request_DeleteGimmickObjectData(const class FString& InName, const class FName& InQuestId);
		void Request_DeleteDestructibleObjectData(const class FString& InId, const class FName& InQuestId);
		void Request_AddGimmickObjectData(const class FString& InName, const class FName& InQuestId);
		void Request_AddDestructibleObjectData(const class FString& InId, const class FName& InQuestId, bool Inactive);
		void OnRep_TeamMember();
		void OnRep_ResultInfo();
		void OnRep_PlayInfo();
		bool IsQuestJoined();
		bool IsInTeamMember(class ASBPlayerState* pState);
		int32_t GetTeamMemberNum();
		class ASBPlayerState* GetTeamMember(int32_t Index);
		struct FSBInterruptQuestResultInfo GetResultInfo();
		int32_t GetQuestInstanceId();
		class FName GetQuestId();
		struct FSBInterruptQuestProgressInfo GetProgressInfo();
		TArray<struct FSBInterruptQuestNpcData> GetNpcDataDataList();
		TArray<struct FSBInterruptQuestGimmickObjectData> GetGimmickObjectDataList();
		struct FDateTime GetEndTime();
		TArray<struct FSBInterruptQuestDestructibleObjectData> GetDestructibleObjectDataList();
		int32_t GetCurrentStep();
		bool GetActiveQuestName(class FString* OutQuestName);
		void DeleteNpcData(const class FName& Name, const class FName& InQuestId);
		void DeleteGimmickObjectData(const class FString& InObjectId, const class FName& InQuestId);
		void DeleteDestructibleObjectData(const class FString& InObjectId, const class FName& InQuestId);
		void Client_UpdateNpcInstallation();
		void Client_UpdateGimmickObjectInstallation();
		void Client_UpdateDestructibleObjectInstallation();
		void Client_SuccessInterruptQuest(const class FName& InQuestId, bool InSuccess, TArray<struct FSBMasterReward> RewardList, TArray<struct FSBCharacterToken> InToken);
		void Client_SetQuestProgress(int32_t InCurStep, const struct FSBInterruptQuestProgressInfo& InProgressInfo);
		void Client_SetFieldObjectVisibleFlag(const class FName& InQuestId, const class FName& InProfileId, bool InIsCondition, bool InIsQuestExect);
		void Client_ResetFieldObjectVisibleFlag();
		void Client_RandomEnemyPopLogPut(const class FString& InQuestId, int32_t InRandNum, int32_t InCheckNum);
		void Client_PutInterruptQuestStatus(const class FName& InQuestId, float InCoolTime, TArray<struct FSBInterruptQuestPointCounter> InCounter, class ASBInterruptQuestGimmickActor* InGimmickActor, class ASBInterruptQuestInteractionGimmickActor* InInteractionGimmickActor);
		void Client_ObjectPopupLog(const class FString& ObjectId);
		void Client_NpcPopupLog(const class FString& NpcId);
		void Client_NotifyLeaveInterruptQuest(const class FName& InQuestId);
		void Client_NotifyJoinInterruptQuest(const struct FSBInterruptQuestPlayInfo& InPlayInfo, bool bInFirst, int32_t InCurStep, const struct FSBInterruptQuestProgressInfo& InProgressInfo);
		void Client_NotifyIsStartQuest(bool IsStart);
		void Client_NotifyFailedInterruptQuest(const class FName& InQuestId);
		void Client_NotifyAwakeInterruptQuest(const class FName& InQuestId);
		void Client_InterruptQuestGimmickObjectAppearLog(class ASBInterruptQuestGimmickActorBase* InGimmickActor, bool InIsAppear, bool InIsServer, bool IsVisibleFlag);
		void Client_InterruptQuestGimickObjectAppear(class ASBInterruptQuestGimmickActorBase* InGimmickActor, bool isAppear);
		void Client_FieldObjectUpdate();
		void Client_ErrorMsgPut(const class FString& InMessage);
		void Client_EnemyPopupLog(const class FString& EnemyId);
		void Client_DeleteGimmickObjectData(const class FString& InName, const class FName& InQuestId);
		void Client_DeleteFieldObjectVisibleFlag(const class FName& InQuestId);
		void Client_DeleteDestructibleObjectData(const class FString& InId, const class FName& InQuestId);
		void Client_DebugPrint(const class FString& Message, float Duration);
		void Client_DebugLogPut(const class FString& InMsg);
		void Client_AddGimmickObjectData(const class FString& InName, const class FName& InQuestId);
		void Client_AddDestructibleObjectData(const class FString& InId, const class FName& InQuestId, bool Inactive);
		void AddNpcData(const class FName& InName, const class FName& InQuestId, const struct FVector& Location);
		void AddGimmickObjectData(const class FString& InName, const class FName& InQuestId);
		void AddDestructibleObjectData(const class FString& InId, const class FName& InQuestId, bool Inactive);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBPlayerLevelStartSequenceComponent : public UActorComponent
	{
	public:
		TArray<class USBPlayerLevelStartSequenceTaskBase*>         TaskLists;                                               // 0x00B8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z8SF[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SubDisableRequestResetInputLock(class UObject* WorldContextObject);
		bool CreateTaskList();
		void AddTask(class UClass* InTaskClass);
		void AddDisableRequestResetInputLock(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBPlayerLevelStartSequenceTaskBase : public UObject
	{
	public:
		bool                                                       bStart;                                                  // 0x0028(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFinished;                                               // 0x0029(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1YDS[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		void Tick(float fDeltaTime);
		void Start(class USBPlayerLevelStartSequenceComponent* Owner);
		void PreStart();
		class FString GetDescription();
		void Finish();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskWaitPlayerReady
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskWaitPlayerReady : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskWaitEnemyLoading
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskWaitEnemyLoading : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskCheckInitialEvent
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskCheckInitialEvent : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		unsigned char                                              UnknownData_SHV1[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskShowLoadingScreen
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskShowLoadingScreen : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskLockLoadingScreen
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskLockLoadingScreen : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskUnlockLoadingScreen
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskUnlockLoadingScreen : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskFadeout
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskFadeout : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskFadein
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskFadein : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskPerformanceFadein
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskPerformanceFadein : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceMapLevelInfoInitializedReady
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceMapLevelInfoInitializedReady : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskCallJingleForUpdatedQuests
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskCallJingleForUpdatedQuests : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskCallOtherNotifications
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskCallOtherNotifications : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskLoadBattleNpcAssets
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskLoadBattleNpcAssets : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		unsigned char                                              UnknownData_KZHR[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskReplicatGuildDataUpdated
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskReplicatGuildDataUpdated : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskEnablePlayerInput
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskEnablePlayerInput : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceTaskCheckTermUI
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceTaskCheckTermUI : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLevelStartSequenceAddTaskDelay
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class USBPlayerLevelStartSequenceAddTaskDelay : public USBPlayerLevelStartSequenceTaskBase
	{
	public:
		class USBPlayerLevelStartSequenceComponent*                OwnerPtr;                                                // 0x0030(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      DelayInsertTaskArray;                                    // 0x0038(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		void Insertask(class UClass* InTaskClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLiquidMemoryComponent
	 * Size -> 0x0078 (FullSize[0x0130] - InheritedSize[0x00B8])
	 */
	class USBPlayerLiquidMemoryComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnAccumulateLiquidMemoryDelegate;                        // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseLiquidMemoryDelegate;                               // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M177[0x20];                                  // 0x00D8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnOnMergeLiquidMemoryDelegate;                           // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetAccumulateLiquidMemoryTokenDelegate;                // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSBLiquidMemoryInfo>                         RepLiquidMemoryInfos;                                    // 0x0118(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TOSL[0x8];                                   // 0x0128(0x0008) MISSED OFFSET (PADDING)

	public:
		void Server_UseLiquidMemory(TArray<int32_t> InLiquidMemoryIdList, TArray<int32_t> InLiquidMemoryLevelList);
		void Server_UnlockLiquidMemoryLevel(int32_t InLiquidMemoryId, int32_t InLevel);
		void Server_OnUseLiquidMemory(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos, int32_t InRemainMoney);
		void Server_OnUnlockLiquidMemoryLevel(int32_t InRetCode);
		void Server_OnMergeLiquidMemory(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos);
		void Server_OnAddLiquidMemory(int32_t InRetCode);
		void Server_OnAccumulateLiquidMemoryWithToken(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos, TArray<int32_t> InTokenIdList, TArray<int32_t> InTokenAmountList);
		void Server_OnAccumulateLiquidMemory(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos);
		void Server_GetLatestTimeElapseAccumulateLiquidMemory();
		void Server_AddLiquidMemory(int32_t InLiquidMemoryId, int32_t InLevel, int32_t InAccumulatedAmount);
		void Server_AccumulateLiquidMemoryWithToken(int32_t InLiquidMemoryId, TArray<int32_t> InTokenIdList, TArray<int32_t> InTokenAmountList);
		void Server_AccumulateLiquidMemory(ESBLiquidMemoryAccumulateConditionType InAccumulateConditionType);
		void Request_UseLiquidMemory(TMap<int32_t, int32_t> InLiquidMemoryIdAndLevelList);
		bool Request_UnlockLiquidMemoryLevel(int32_t InLiquidMemoryId, int32_t InLevel);
		void Request_GetLiquidMemoryAccumulateTokens();
		void Request_GetLatestTimeElapseAccumulateLiquidMemory();
		bool Request_AddLiquidMemory(int32_t InLiquidMemoryId, bool IsMaxAccumulatedFlag, int32_t InLevel);
		void Request_AccumulateLiquidMemoryWithToken(int32_t InLiquidMemoryId, TMap<int32_t, int32_t> InTokenList);
		void Request_AccumulateLiquidMemory(ESBLiquidMemoryAccumulateConditionType InAccumulateConditionType);
		void OnUseLiquidMemoryDelegate__DelegateSignature(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InUpdatedLiquidMemoryInfos);
		void OnUnlockLiquidMemoryLevelDelegate__DelegateSignature(int32_t InRetCode);
		void OnRep_LiquidMemoryInfos();
		void OnMergeLiquidMemoryDelegate__DelegateSignature(int32_t InRetCode);
		void OnGetLiquidMemoryAccumulateTokens(bool InWasSuccessful, TArray<struct FSBLiquidMemoryAccumulateTokenInfo> InTokenList);
		void OnGetAccumulateLiquidMemoryTokenDelegate__DelegateSignature(bool InSuccess, TArray<struct FSBLiquidMemoryAccumulateTokenInfo> InTokenInfos);
		void OnAddLiquidMemoryDelegate__DelegateSignature(int32_t InRetCode);
		void OnAccumulateLiquidMemoryDelegate__DelegateSignature(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InUpdatedLiquidMemoryInfos);
		void Client_OnUseLiquidMemory(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos, int32_t InRemainMoney);
		void Client_OnUnlockLiquidMemoryLevel(int32_t InRetCode);
		void Client_OnMergeLiquidMemory(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos);
		void Client_OnAddLiquidMemory(int32_t InRetCode);
		void Client_OnAccumulateLiquidMemoryWithToken(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos, TArray<int32_t> InTokenIdList, TArray<int32_t> InTokenAmountList);
		void Client_OnAccumulateLiquidMemory(int32_t InRetCode, TArray<struct FSBLiquidMemoryInfo> InDirtyLiquidMemoryInfos);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerLoginBonusComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBPlayerLoginBonusComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnCheckComplete;                                         // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetActiveComplete;                                     // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetDetailComplete;                                     // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_OnLoginBonusCheck(TArray<struct FSBLoginBonus> DataList, TArray<int32_t> DayCount, bool bWasSuccessful, int32_t ErrorCode);
		void Server_OnGetLoginBonusDetail(TArray<struct FSBLoginBonus> DataList, TArray<int32_t> DayCount, bool bWasSuccessful, int32_t ErrorCode);
		void Server_OnGetActiveList(TArray<struct FSBLoginBonus> DataList, TArray<int32_t> DayCount, bool bWasSuccessful, int32_t ErrorCode);
		void Server_LoginBonusCheck();
		void Server_GetLoginBonusDetail(TArray<class FString> TargetIds);
		void Server_GetActiveList();
		void Request_LoginBonusCheck();
		void Request_GetLoginBonusDetail(TArray<class FString> TargetIds);
		void Request_GetActiveList();
		void OnLoginBonusQueryComplete__DelegateSignature(bool bWasSuccessful, int32_t ErrorCode);
		bool IsNeedLoginBonusWindow();
		void Client_OnLoginBonusCheck(TArray<struct FSBLoginBonus> DataList, TArray<int32_t> DayCount, bool bWasSuccessful, int32_t ErrorCode);
		void Client_OnGetLoginBonusDetail(TArray<struct FSBLoginBonus> DataList, TArray<int32_t> DayCount, bool bWasSuccessful, int32_t ErrorCode);
		void Client_OnGetActiveList(TArray<struct FSBLoginBonus> DataList, TArray<int32_t> DayCount, bool bWasSuccessful, int32_t ErrorCode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerMagicPointSkillController
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPlayerMagicPointSkillController : public USBPlayerSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerMagicPointSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerMagicPointSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerMailComponent
	 * Size -> 0x01A8 (FullSize[0x0260] - InheritedSize[0x00B8])
	 */
	class USBPlayerMailComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnMailListReceived;                                      // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAttachmentMailListReceived;                            // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMailStatusChanged;                                     // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMailTransed;                                           // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdatedUnreadCount;                                    // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObtainedItems;                                         // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMultiDeleteMail;                                       // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAleatUpdate;                                           // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLimitSyncd;                                            // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedSendMail;                                     // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGetTransableCharacters;                       // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRestrictUpdated;                                       // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPriorityUpdated;                                       // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetBulkRetrieval;                                      // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0YK3[0x80];                                  // 0x0198(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBMailLimitStatus                                  LimitStat;                                               // 0x0218(0x0010) NoDestructor, Protected, NativeAccessSpecifierProtected
		ESBMailType                                                LastMailType;                                            // 0x0228(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9GEX[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ESBMailFilterType>                                  LastUsedFilter;                                          // 0x0230(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		ESBMailSortType                                            LastUsedSort;                                            // 0x0240(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OR1F[0x3];                                   // 0x0241(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Page;                                                    // 0x0244(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    UnreadMailCount;                                         // 0x0248(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MailCountTotal;                                          // 0x024C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MailCountFiltered;                                       // 0x0250(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxMailCapacity;                                         // 0x0254(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FirstMailLimitCount;                                     // 0x0258(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KB3H[0x4];                                   // 0x025C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetBppIrredeemable(bool Flag);
		void SetAutoDeleteCheckmark(bool Flag);
		void Server_RPC_Request_UpdateMailRestrictedFlags(class ASBPlayerController* InPlayerController);
		void Server_RPC_Request_UnProtectMailList(class ASBPlayerController* InPlayerController, TArray<class FString> MailIds, int32_t Skip, int32_t take, TArray<ESBMailFilterType> Filter, ESBMailSortType SortType);
		void Server_RPC_Request_TransMail(class ASBPlayerController* InPlayerController, const struct FSBMailData& MailData, const class FString& InTargetPlayerId, const class FString& InTargetCharacterId);
		void Server_RPC_Request_TransableCharacterList(class ASBPlayerController* InPlayerController);
		void Server_RPC_Request_SendMail(class ASBPlayerController* InPlayerController, const class FName& MailId, const class FString& InPlayerId, const class FString& InCharacterId, const struct FDateTime& DateTime, int32_t ExpiredDate);
		void Server_RPC_Request_ReceiveMail(class ASBPlayerController* InPlayerController, int32_t Skip, int32_t take, TArray<ESBMailFilterType> Filter, ESBMailSortType SortType);
		void Server_RPC_Request_ReceiveAttachmentMails(class ASBPlayerController* InPlayerController, int32_t OrderNum, bool ReceivedExclusion);
		void Server_RPC_Request_ReadMailList(class ASBPlayerController* InPlayerController, TArray<class FString> MailIds, int32_t Skip, int32_t take, TArray<ESBMailFilterType> Filter, ESBMailSortType SortType);
		void Server_RPC_Request_ProtectMailList(class ASBPlayerController* InPlayerController, TArray<class FString> MailIds, int32_t Skip, int32_t take, TArray<ESBMailFilterType> Filter, ESBMailSortType SortType);
		void Server_RPC_Request_ProtectMail(class ASBPlayerController* InPlayerController, const class FString& MailId, bool protect, int32_t Skip, int32_t take, TArray<ESBMailFilterType> Filter, ESBMailSortType SortType);
		void Server_RPC_Request_ObtainMailAttachment(class ASBPlayerController* InPlayerController, TArray<class FString> MailIds, bool IsAutoDelete);
		void Server_RPC_Request_GetUnreadCount(class ASBPlayerController* InPlayerController);
		void Server_RPC_Request_GetBulkRetrieval(class ASBPlayerController* InPlayerController, int32_t MailCount);
		void Server_RPC_Request_DeleteMailMulti(class ASBPlayerController* InPlayerController, TArray<class FString> MailIds, int32_t Skip, int32_t take, TArray<ESBMailFilterType> Filter, ESBMailSortType SortType);
		void Server_RPC_Request_ChangeMailPriority(class ASBPlayerController* InPlayerController, const class FString& MailId);
		void Request_UpdateMailRestrictedFlag();
		void Request_UnProtectMailList(TArray<class FString> MailIds);
		void Request_TransMail(const struct FSBMailData& MailData, const class FString& TargetUserId, const class FString& TargetCharacterId);
		void Request_TransableCharacterList();
		void Request_SendMail(const class FName& MailId, const class FString& InPlayerId, const class FString& InCharacterId, const struct FDateTime& DateTime, int32_t ExpiredDate);
		void Request_ReceivedMailList(int32_t InPage, TArray<ESBMailFilterType> InFilterType, ESBMailSortType InSortType);
		void Request_ReceivedAttachmentMailList(int32_t OrderNum, bool ReceivedExclusion);
		void Request_ReadMailList(TArray<class FString> MailIds);
		void Request_ProtectMailList(TArray<class FString> MailIds);
		void Request_ProtectMail(const class FString& MailId);
		void Request_ObtainMailAttachmentsMulti(TArray<class FString> MailIds, bool IsAutoDelete);
		void Request_ObtainMailAttachments(const class FString& MailId, bool IsAutoDelete);
		void Request_GetUnreadCount();
		void Request_GetBulkRetrieval(int32_t MailCount);
		void Request_DeleteMailMulti(TArray<class FString> MailIds);
		void Request_DeleteMail(const class FString& MailId);
		void Request_ChangeMailPriority(const class FString& MailId);
		void OnCompleteRestrictUpdated__DelegateSignature();
		void OnCompletedUnreadCount__DelegateSignature(bool bWasSuccessful, int32_t ErrorCode, int32_t UnreadCount);
		void OnCompletedSendMail__DelegateSignature(bool bWasSuccessful, int32_t ErrorCode);
		void OnCompletedReadedMailList__DelegateSignature(bool bWasSuccessful, int32_t ErrorCode, TArray<struct FSBMailData> ReceivedMailList);
		void OnCompletedObtainItems__DelegateSignature(bool bWasSuccessful, int32_t ErrorCode, const struct FSBMailRewardData& RewardData);
		void OnCompletedMultiDeleteMail__DelegateSignature(bool bWasSuccessful);
		void OnCompletedLimitSyncd__DelegateSignature(bool bIsSyncd);
		void OnCompletedChangeStatus__DelegateSignature(bool bWasSuccessful, int32_t ErrorCode, const class FString& MailId);
		void OnCompletedAleatUpdate__DelegateSignature(bool bIsAleat);
		void OnCompleteChangeMailPriority__DelegateSignature(bool bWasSuccessful, int32_t ErrorCode);
		void OnComplete_UpdateMailRestrictedFlag(bool bWasSuccessful, int32_t ErrorCode, bool IsRestrictedUsage, bool IsEncourageOrganize);
		void OnComplete_TransMail(bool bWasSuccessful, int32_t ErrorCode, const class FString& MailId, int32_t Status, bool tranced);
		void OnComplete_TransableCharacterList(bool bWasSuccessful, int32_t ErrorCode, TArray<struct FSBTransableCharacterData> UserCharacter, TArray<struct FSBTransableCharacterData> Follower);
		void OnComplete_SendMail(bool bWasSuccessful, int32_t ErrorCode);
		void OnComplete_ReceivedMailList(bool bWasSuccessful, int32_t ErrorCode, const struct FSBMailParser& InMailParser);
		void OnComplete_ReceivedAttachmentMailList(bool bWasSuccessful, int32_t ErrorCode, const struct FSBMailParser& InMailParser);
		void OnComplete_ReadMailList(bool bWasSuccessful, int32_t ErrorCode, TArray<struct FSBMailData> InMailDataList, int32_t InUnreadCount);
		void OnComplete_ProtectMailList(bool bWasSuccessful);
		void OnComplete_GetUnreadCount(bool bWasSuccessful, int32_t ErrorCode, int32_t UnreadNum);
		void OnComplete_GetBulkRetrieval(bool bWasSuccessful, int32_t ErrorCode, TArray<struct FSBMailData> datas);
		void OnComplete_DeleteMailMulti(bool bWasSuccessful);
		void OnComplete_ChangeMailPriority(bool bWasSuccessful, int32_t ErrorCode, const struct FSBMailData& InMailData);
		bool IsRestrictedUsage();
		bool IsLimitSyncd();
		bool IsEncourageOrganization();
		bool IsAcceptAttachmentMailFlag();
		int32_t GetUnreadCount();
		TArray<struct FSBTransableCharacterData> GetTransableUserCharacter();
		TArray<struct FSBTransableCharacterData> GetTransableFollowCharacter();
		int32_t GetPageMax();
		int32_t GetPage();
		TArray<struct FSBMailData> GetMailList();
		bool GetMailLimitAleat();
		int32_t GetMailCount();
		int32_t GetMailCapacity();
		struct FSBMailLimitStatus GetLimitStatus();
		bool GetBppIrredeemable();
		bool FindMailData(const class FString& InMailId, struct FSBMailData* OutMailData);
		void Client_RPC_UpdateMailRestrictedFlags(bool bWasSuccessful, int32_t ErrorCode, bool InIsRestrictedUsage, bool InIsEncourageOrganize);
		void Client_RPC_TransMail(bool bWasSuccessful, int32_t ErrorCode, const class FString& MailId, int32_t Status, bool tranced);
		void Client_RPC_TransableCharacterList(bool bWasSuccessful, int32_t ErrorCode, TArray<struct FSBTransableCharacterData> UserCharacter, TArray<struct FSBTransableCharacterData> FolloMember);
		void Client_RPC_SyncMailStats(const struct FSBMailLimitStatus& Status, bool bLimitAleart);
		void Client_RPC_SyncMailLimit(const struct FSBMailLimitStatus& Stat);
		void Client_RPC_SyncMailCounts(int32_t totalCount, int32_t firstLimit);
		void Client_RPC_SetUnreadCount(int32_t InCount);
		void Client_RPC_SetRestrictFlags(bool Resctiction, bool Endcourage);
		void Client_RPC_SetAcceptAttachmentFlag(bool Flag);
		void Client_RPC_SendMail(bool bWasSuccessful, int32_t ErrorCode);
		void Client_RPC_ReceiveMail(bool bWasSuccessful, int32_t ErrorCode, const struct FSBMailParser& InMailParser);
		void Client_RPC_ReceiveAttachmentMails(bool bWasSuccessful, int32_t ErrorCode, const struct FSBMailParser& InMailParser);
		void Client_RPC_ReadMailList(bool bWasSuccessful, int32_t ErrorCode, TArray<struct FSBMailData> InMailDataList, int32_t InUnreadCount);
		void Client_RPC_ProtectMailList(bool bWasSuccessful);
		void Client_RPC_ObtainMailAttachment(bool bWasSuccessful, int32_t ErrorCode, const struct FSBMailRewardData& InRewardData, TArray<struct FSBMailData> MailData, bool IsAutoDelete, bool IsMultiData);
		void Client_RPC_GetUnreadCount(bool bWasSuccessful, int32_t ErrorCode, int32_t CountNum);
		void Client_RPC_GetBulkRetrieval(bool bWasSuccessful, int32_t ErrorCode, TArray<struct FSBMailData> datas);
		void Client_RPC_DeleteMailMulti(bool bWasSuccessful);
		void Client_RPC_ChangeMailPriority(bool bWasSuccessful, int32_t ErrorCode, const struct FSBMailData& InMailData);
		void Change_ReadMail(const class FString& MailId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerManager
	 * Size -> 0x05C8 (FullSize[0x05F0] - InheritedSize[0x0028])
	 */
	class USBPlayerManager : public UObject
	{
	public:
		TMap<ESBPlayerClassCommonParam, struct FSBMultiType>       m_ClassCommonDataList;                                   // 0x0028(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UDataTable*                                          m_ClassCommonSkillDataTable;                             // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable*                                          m_ClassCommonPassiveSkillDataTable;                      // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSBGamePadSettings                                  m_ClassCommonDefaultGamepadKeyConfig;                    // 0x0088(0x0090) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBKeyboardSettings                                 m_ClassCommonDefaultKeyboardKeyConfig;                   // 0x0118(0x0098) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBMouseSettings                                    m_ClassCommonDefaultMouseKeyConfig;                      // 0x01B0(0x0098) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8HO6[0x1D8];                                 // 0x0248(0x01D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayerClassKeyConfigData>                 m_ClassDefaultKeyConfigList;                             // 0x0420(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EANW[0x10];                                  // 0x0430(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnUpdateKeyConfig;                                       // 0x0440(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<ESBClassType, struct FSBPlayerCharacterParamInfo>     PlayerCharacterParams;                                   // 0x0450(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FSBPlayerSkillTagPreset>                     SkillTagPresetList;                                      // 0x04A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FSBPlayerSignificanceAnimUpdateRateSetting>  m_SignificanceAnimUpdateRateThresholdList;               // 0x04B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      m_ZeroSignificanceIdleTime;                              // 0x04C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PY8I[0x3C];                                  // 0x04C4(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCameraShieldingTransparentParam                  CameraShieldingTransparentParam_Player;                  // 0x0500(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBCameraShieldingTransparentParam                  CameraShieldingTransparentParam_Enemy;                   // 0x0508(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBCameraShieldingTransparentParam                  CameraShieldingTransparentParam_Npc;                     // 0x0510(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBCameraShieldingTransparentParam                  CameraShieldingTransparentParam_Mount;                   // 0x0518(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBCameraShieldingTransparentParam                  CameraShieldingTransparentParam_Other;                   // 0x0520(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBPlayerTransformSetting>                   TransformSettingList;                                    // 0x0528(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSBPlayerFollowParam                                PlayerFollowParam_Default;                               // 0x0538(0x001C) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBPlayerFollowParam                                PlayerFollowParam_Mount;                                 // 0x0554(0x001C) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBPlayerFollowParam                                PlayerFollowParam_HoldHand;                              // 0x0570(0x001C) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VLVA[0x4];                                   // 0x058C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          m_ContentActionDataTable;                                // 0x0590(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        ContentActionTutorialGameContentIDList;                  // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UObject*>                                     m_HoldingPlayerAssets;                                   // 0x05A8(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_MVMK[0x10];                                  // 0x05B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     m_HoldingResidentAssets;                                 // 0x05C8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		TArray<class UObject*>                                     m_LoadedResidentAssets;                                  // 0x05D8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization
		unsigned char                                              UnknownData_P0AA[0x8];                                   // 0x05E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetClassKeyConfig(class UObject* WorldContextObject, const struct FSBPlayerClassKeyConfigData& ConfigData);
		void SetClassCommonKeyConfig(class UObject* WorldContextObject, const struct FSBPlayerClassKeyConfigData& ConfigData);
		void ResetClassKeyConfigAsCommon(class UObject* WorldContextObject, ESBClassType ClassType);
		void ResetAllKeyConfig(class UObject* WorldContextObject);
		bool IsClassKeyConfigCustomized(ESBClassType ClassType);
		bool IsClassCommonKeyConfigCustomized();
		class FString GetSkillNameText(int32_t SkillId);
		class USBSkillInfoClass* GetSkillInfo_BP(int32_t SkillId, ESBClassType ClassType);
		class UTexture2D* GetSkillIconSmall(int32_t SkillId, class ASBPlayerCharacter* PlayerCharacter, bool bDefault);
		class UTexture2D* GetSkillIconLarge(int32_t SkillId, class ASBPlayerCharacter* PlayerCharacter, bool bDefault);
		ESBSkillElementIconType GetSkillIconElementType(int32_t SkillId, class ASBPlayerCharacter* PlayerCharacter);
		void GetSkillIconDetail(int32_t SkillId);
		ESBSkillIconBgType GetSkillIconBgType(int32_t SkillId, class ASBPlayerCharacter* PlayerCharacter, int32_t InSkillLevel);
		class FString GetSkillDescriptionText(int32_t SkillId, int32_t SkillLevel);
		class UDataTable* GetSkillDataTable(ESBClassType ClassType);
		TArray<class FName> GetSkillBufIconList(int32_t SkillId, int32_t SkillLV, ESBClassType ClassType);
		float GetResurrectionTime();
		class USBPlayerPassiveSkill* GetPassiveSkillInfo_BP(int32_t PassiveSkillID, ESBClassType ClassType);
		int32_t GetPassiveSkillID(const class FName& SkillName, ESBClassType ClassType);
		class UDataTable* GetPassiveSkillDataTable(ESBClassType ClassType);
		class USBImagineSkillInfo* GetImagineSkillInfo_BP(const class FName& ImagineName);
		TArray<class FName> GetEquippablePassiveSkillList(ESBClassType ClassType, int32_t CurrentLevel);
		class FString GetDefaultSkillNameText(ESBClassType ClassType, ESkillActionPosition SAP);
		class FString GetClassPassiveSkillNameText(int32_t PassiveSkillID);
		class UTexture2D* GetClassPassiveSkillLargeIcon(int32_t PassiveSkillID, ESBClassType ClassType);
		class UTexture2D* GetClassPassiveSkillIcon(int32_t PassiveSkillID, ESBClassType ClassType);
		class FString GetClassPassiveSkillDescriptionText(int32_t PassiveSkillID, int32_t SkillLevel);
		struct FSBPlayerClassKeyConfigData GetClassKeyConfig(ESBClassType ClassType);
		struct FSBPlayerClassKeyConfigData GetClassCommonKeyConfig();
		int32_t GetClassCommonDataInt32(ESBPlayerClassCommonParam ParamType, int32_t DefaultValue);
		float GetClassCommonDataFloat(ESBPlayerClassCommonParam ParamType, float DefaultValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerMarkerSkillController
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPlayerMarkerSkillController : public USBPlayerSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerMarkerSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerMarkerSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerMissionQuestComponent
	 * Size -> 0x0088 (FullSize[0x0140] - InheritedSize[0x00B8])
	 */
	class USBPlayerMissionQuestComponent : public UActorComponent
	{
	public:
		TArray<struct FSBMissionQuestRequestParam>                 RequestParamList;                                        // 0x00B8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		struct FSBMissionQuestMissionScore                         MissionScore;                                            // 0x00C8(0x0070) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KEDL[0x8];                                   // 0x0138(0x0008) MISSED OFFSET (PADDING)

	public:
		void Server_UpdateWishListEntryCondition();
		void Server_UpdateWeaponShopCheckCondition();
		void Server_UpdateStorageCheckCondition();
		void Server_UpdateStampCondition(int32_t InStampId);
		void Server_UpdateSkillEquipCondition(int32_t InSkillId);
		void Server_UpdateResuscitationCondition();
		void Server_UpdateRankingBoardCheckCondition();
		void Server_UpdatePartyJoinCondition();
		void Server_UpdateItemUseCondition(int32_t InItemID);
		void Server_UpdateItemShopCheckCondition();
		void Server_UpdateGestureCondition(const class FString& InGestureId);
		void Server_UpdateExchangeShopCheckCondition();
		void Server_TreasureGetCountCondition();
		void Server_TakeElementStatusCondition(ESBAttribute InElementId);
		void Server_TakeDamageCondition(float InDamgePoint);
		void Server_TakeBadStatusCondition(ESBAttribute InAttributeId);
		void Server_SupplierUseCondition();
		void Server_MountCondition(int32_t InMountId);
		void Server_MissionScoreLog(const class FString& InMsg);
		void Server_JustAvoidCountCondition();
		void Server_ElementalBurstCondition(ESBAttribute InElementId);
		void Server_DestructibleObjectBreakCondition(class ASBDestructible* InDestructibleObject);
		void Server_DeadCondition();
		void Server_DamegeCondition(int32_t InDamgePoint);
		void Server_CriticalDamegeCondition(int32_t InDamgePoint);
		void Server_BadStatusCondition(ESBAttribute InAttributeId);
		void Server_AutoMessageCondition();
		void Client_MissionScoreLog(const class FString& InMsg, const struct FSBMissionQuestMissionScore& InMissionScore);
		void Client_LogPut(const class FString& InMsg);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMissionQuestFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBMissionQuestFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void MissionQuestUpdateCond_TreasureGet(class ASBPlayerController* InPlayerController);
		void MissionQuestUpdateCond_SupplierUse(class ASBPlayerController* InPlayerController);
		void MissionQuest_UpdateWishListEntryCheck(class UObject* InWorldContextObject);
		void MissionQuest_UpdateWeaponShopCheck(class UObject* InWorldContextObject);
		void MissionQuest_UpdateStorageCheck(class UObject* InWorldContextObject);
		void MissionQuest_UpdateStamp(class UObject* InWorldContextObject, int32_t InStampId);
		void MissionQuest_UpdateRankingBoardCheck(class UObject* InWorldContextObject);
		void MissionQuest_UpdateItemUse(class UObject* InWorldContextObject, int32_t InItemID);
		void MissionQuest_UpdateItemShopCheck(class UObject* InWorldContextObject);
		void MissionQuest_UpdateExchangeShopCheck(class UObject* InWorldContextObject);
		void MissionQuest_ConditionCheck_String(class UObject* InWorldContextObject, ESBMissionQuestType ConditionId, int32_t InValue, const class FString& String, int32_t InCount);
		void MissionQuest_ConditionCheck(class UObject* InWorldContextObject, ESBMissionQuestType ConditionId, int32_t InValue_2, int32_t InValue_3, int32_t InCount);
		void MissionQuest_AutoMessageEntryCheck(class UObject* InWorldContextObject);
		bool IsMissionPlayCondition(ESBMissionQuestType InType);
		int32_t GetProgressCount(ESBMissionQuestType InType, int32_t InProgressCount, int32_t InCompleteCount, bool IsClear);
		int32_t GetEquipItemStackBNum_ServerSide(class ASBPlayerController* InPlayerController, ESBCharaEquipType InEquipType, const class FString& InItemUniqueId);
		int32_t GetEquipItemStackBNum(class UObject* InWorldContextObject, ESBCharaEquipType InEquipType);
		int32_t GetCompleteCount(ESBMissionQuestType InType, int32_t InProgressCount, int32_t InCompleteCount);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerModifyAutoTargetSkillController
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBPlayerModifyAutoTargetSkillController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_9A6Z[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerModifyAutoTargetSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerModifyAutoTargetSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerMovementComponent
	 * Size -> 0x0190 (FullSize[0x0FA0] - InheritedSize[0x0E10])
	 */
	class USBPlayerMovementComponent : public USBPlayerMovementComponentBase
	{
	public:
		float                                                      InitialMaxWalkSpeedUnsheathed;                           // 0x0E10(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            InitialRotationRate;                                     // 0x0E14(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            InitialRotationRateUnsheathed;                           // 0x0E20(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_95A0[0x4];                                   // 0x0E2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         NormalMoveCurve;                                         // 0x0E30(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SBWalkSpeed;                                             // 0x0E38(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDashSpeed;                                            // 0x0E3C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         RotationRateYawVelocityAdjust;                           // 0x0E40(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxWalkSpeedUnsheathed;                                  // 0x0E48(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnsheatheBackWalkSpeedRate;                              // 0x0E4C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationRateUnsheathed;                                  // 0x0E50(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      UnsheatheJumpZVelocity;                                  // 0x0E5C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxRunSpeedCarrying;                                     // 0x0E60(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDashSpeedCarrying;                                    // 0x0E64(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FSNA[0x58];                                  // 0x0E68(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_GoAroundRadiusMin;                                     // 0x0EC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_INNS[0xC];                                   // 0x0EC4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSwimmingBuoyancy;                                     // 0x0ED0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBSwimMeshOffsetParam_Gender                       SwimMeshOffsetParam;                                     // 0x0ED4(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DRQK[0x4];                                   // 0x0F04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         SwimmingAdjustBlendYCurve;                               // 0x0F08(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SwimmingTurnSlowDownCurve;                               // 0x0F10(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SwimmingTurnSlowRefRateToSpeed;                          // 0x0F18(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SwimmingStartSlowDownRotateDegree;                       // 0x0F20(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VB8H[0x5C];                                  // 0x0F24(0x005C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FallDamageMinPar;                                        // 0x0F80(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FallDamageMinHeight;                                     // 0x0F84(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FallDamageMaxHeight;                                     // 0x0F88(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FallDamageStunHeight;                                    // 0x0F8C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FallDamageStunLevel;                                     // 0x0F90(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CanFallingSkillActionHeight;                             // 0x0F94(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLandedWithFallDamageStun;                               // 0x0F98(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R1R9[0x7];                                   // 0x0F99(0x0007) MISSED OFFSET (PADDING)

	public:
		void StopCurveMove();
		void SetupCurveMove(const class FName& CurveName, bool bUseTSkillStepInput);
		void RestoreRotationRateUnsheathed();
		void RestoreRotationRate();
		void RestoreMaxWalkSpeedUnsheathed();
		void RequestSetVelocity(const struct FVector& SetVelocity);
		bool IsMeshClimbingMoveForward();
		bool GetPrevIsUseLeftClimbAnim();
		int32_t GetMeshClimbingTargetPointID();
		EMeshClimbingState GetMeshClimbingState();
		class USBClimbingPointsManagerComponent* GetMeshClimbingPointsManager();
		int32_t GetMeshClimbingCurrentPointID();
		struct FSBSwimMeshOffsetParam GetCurrentSwimMeshOffsetParam();
		void DebugUpdateSwimMeshOffset(const struct FSBSwimMeshOffsetParam& InSwimMeshOffsetParam);
		bool DebugIsSwimSpeedConstVelocity();
		bool DebugEnableQuicklyStopToDash();
		struct FVector CalcSwimMeshOffset();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerNaEventComponent
	 * Size -> 0x0090 (FullSize[0x0148] - InheritedSize[0x00B8])
	 */
	class USBPlayerNaEventComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptDelegate                                      OnGetInfoCompletedDelegate;                              // 0x00B8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnGetTeamInfoCompletedDelegate;                          // 0x00C8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnPersonAllReceiveCompletedDelegate;                     // 0x00D8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnTeamAllReceiveCompletedDelegate;                       // 0x00E8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnGetTeamMemberInfoCompletedDelegate;                    // 0x00F8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		TArray<class USBNaEventData*>                              EventDataList;                                           // 0x0108(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USBNaEventRewardData*>                        PersonRewardDataList;                                    // 0x0118(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USBNaEventRewardData*>                        TeamRewardDataList;                                      // 0x0128(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USBNaEventTeamMemberData*>                    TeamMemberDataList;                                      // 0x0138(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void ServerCreateDummyTeamMemberData(const struct FSBNaEventInfo& InEventInfo, TArray<struct FSBNaEventTeamMemberInfo> InTeamMemberInfoList);
		void ServerCreateDummyData(TArray<struct FSBNaEventInfo> InEventInfoList);
		void RequestTeamAllReceive(int32_t EventId, const class FScriptDelegate& OnCompleted);
		void RequestPersonAllReceive(int32_t EventId, const class FScriptDelegate& OnCompleted);
		void RequestGetTeamMemberInfo(const class FScriptDelegate& OnCompleted, int32_t EventId);
		void RequestGetTeamInfo(int32_t EventId, const class FScriptDelegate& OnCompleted);
		void RequestGetInfo(const class FScriptDelegate& OnCompleted);
		void OnRequestCompletedDelegate__DelegateSignature(int32_t InRetCode);
		bool IsShowNaEventDebugUi();
		bool IsReceivedTeamReward(int32_t ID);
		bool IsReceivedReward(int32_t ID, bool bIsTeamReward);
		bool IsReceivedPersonReward(int32_t ID);
		bool IsOnTeam();
		bool IsEventValid();
		TArray<class USBNaEventRewardData*> GetTeamRewardDataList(int32_t EventId);
		class USBNaEventTeamMemberData* GetPlayerData();
		TArray<class USBNaEventRewardData*> GetPersonRewardDataList(int32_t EventId);
		class FText GetMasterNaEventText(const struct FSBTextTableHash& InTextId);
		class USBNaEventData* GetEventData(int32_t EventId);
		void CreateDummyTeamMemberData(int32_t EventId);
		void CreateDummyData();
		void ConstructData();
		void ClientOnTeamAllReceiveCompleted(int32_t RetCode, const struct FSBNaEventInfo& InEventInfo);
		void ClientOnPersonAllReceiveCompleted(int32_t RetCode, int32_t EventId, TArray<int32_t> InReceivedPersonRewardIdList);
		void ClientOnGetTeamMemberInfoCompleted(int32_t RetCode, int32_t EventId, int32_t InTeamAcquiredPoint, TArray<struct FSBNaEventTeamMemberInfo> InTeamMemberInfoList);
		void ClientOnGetTeamInfoCompleted(int32_t RetCode, const struct FSBNaEventInfo& InEventInfo);
		void ClientOnGetInfoCompleted(int32_t RetCode, TArray<struct FSBNaEventInfo> InEventInfoList);
		bool CanAnyRewardReceive(int32_t EventId, bool bIsPersonReward, bool bIsTeamReward);
		struct FSBMasterNaEvent BP_GetPriorityMasterNaEvent(bool* bIsValid);
		struct FSBMasterNaEventReward BP_FindMasterNaEventTeamReward(int32_t ID, bool* bIsValid);
		struct FSBMasterNaEventReward BP_FindMasterNaEventPersonReward(int32_t ID, bool* bIsValid);
		struct FSBMasterNaEvent BP_FindMasterNaEvent(int32_t ID, bool* bIsValid);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNaEventComponentUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBNaEventComponentUtility : public UBlueprintFunctionLibrary
	{
	public:
		bool IsNaEventValid(class UObject* WorldContextObject);
		class USBPlayerNaEventComponent* GetNaEventComponent(class UObject* WorldContextObject);
		bool CanAnyNaEventRewardReceive(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerOrnamentComponent
	 * Size -> 0x0070 (FullSize[0x0128] - InheritedSize[0x00B8])
	 */
	class USBPlayerOrnamentComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCompleteRoomListDelegate;                              // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteRoomInfoDelegate;                              // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteRoomPutDelegate;                               // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteRoomClearDelegate;                             // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_73L1[0x30];                                  // 0x00F8(0x0030) MISSED OFFSET (PADDING)

	public:
		void SetOrnamentMode(bool bMode);
		void SetLookLocationListId(int32_t ID);
		void SetKeyDownHandle(bool bEnable);
		void ServerOnCompleteRoomPut(int32_t InRetCode, const struct FSBPlayerRoomPutData& InRoomPutData);
		void ServerOnCompleteRoomClear(int32_t InRetCode, const struct FSBPlayerRoomPutData& InRoomPutData);
		void Server_RequestRoomPut(class ASBPlayerController* InPlayerController, const struct FSBPlayerRoomPutData& InRoomPutData);
		void Server_RequestRoomClear(class ASBPlayerController* InPlayerController, int32_t InRoomPutId);
		void ResetEnableUIOk2ClickConvert();
		void RequestRoomPut(const struct FSBPlayerRoomPutData& InRoomPutData);
		void RequestRoomList();
		void RequestRoomInfo(int32_t RoomId);
		void RequestRoomClear(int32_t InRoomPutId);
		void OnCompleteRoomPutDelegate__DelegateSignature(int32_t RetCode);
		void OnCompleteRoomListDelegate__DelegateSignature(int32_t RetCode);
		void OnCompleteRoomInfoDelegate__DelegateSignature(int32_t RetCode);
		void OnCompleteRoomClearDelegate__DelegateSignature(int32_t RetCode);
		bool IsPutOrnament(const class FString& InUniqueId, int32_t* OutRoomPutId);
		bool IsOrnamentMode();
		bool GetPlayerRoomPutDataList(TArray<struct FSBPlayerRoomPutData>* OutData);
		bool GetPlayerRoomPutData(const class FString& PutLocationId, struct FSBPlayerRoomPutData* OutData);
		bool GetPlayerOwnedRoomDataList(TArray<struct FSBPlayerOwnedRoomData>* OutData);
		bool GetPlayerOwnedRoomData(int32_t RoomId, struct FSBPlayerOwnedRoomData* OutData);
		int32_t GetLookLocationListId();
		void EventKeyDown(const struct FKeyEvent& Event);
		void ClientCompleteRoomPut(int32_t InRetCode, const struct FSBPlayerRoomPutData& InRoomPutData);
		void ClientCompleteRoomList(int32_t InRetCode, TArray<struct FSBPlayerOwnedRoomData> InOwnedRoomList);
		void ClientCompleteRoomInfo(int32_t InRetCode, TArray<struct FSBPlayerRoomPutData> InRoomPutList);
		void ClientCompleteRoomClear(int32_t InRetCode, const struct FSBPlayerRoomPutData& InRoomPutData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPassiveParamModifySkill
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBPlayerPassiveParamModifySkill : public USBPlayerPassiveSkill
	{
	public:
		ESBPassiveArtsModifyCategory                               Category;                                                // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MUN5[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPassiveLevelParamModifySetting>           LevelParamModifySettingList;                             // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPassiveParamModifyConditionSkill
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class USBPlayerPassiveParamModifyConditionSkill : public USBPlayerPassiveSkill
	{
	public:
		ESBPassiveArtsModifyCategory                               Category;                                                // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9BNZ[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBConditionCheckParam>                      ConditionList;                                           // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FSBPassiveLevelParamModifySetting>           LevelParamModifySettingList;                             // 0x0058(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAttackCollisionPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerAttackCollisionPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_26AH[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CollisionScale;                                          // 0x0048(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GOYI[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAttackCollisionLevelPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBPlayerAttackCollisionLevelPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_OWUZ[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPassiveLevelAttackCollisionSetting>       SettingList;                                             // 0x0048(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSuperArmorPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerSuperArmorPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_5YCG[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DamageAdjust;                                            // 0x0048(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NONQ[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerConditionParamPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerConditionParamPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBConditionCheckFloatParam>                 ConditionParamList;                                      // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerModifyTakeDamageByDistancePassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerModifyTakeDamageByDistancePassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBConditionCheckFloatCurveParam>            DistanceRateCurveSettingList;                            // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillChargeSuperArmorPassiveSkill
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBPlayerSkillChargeSuperArmorPassiveSkill : public USBPlayerConditionParamPassiveSkill
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGutsPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerGutsPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBConditionCheckFloatParam>                 SettingList;                                             // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerHPRecoveryItemRemoveStatusPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerHPRecoveryItemRemoveStatusPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBPassiveHPRecoveryItemRemoveStatusSetting> SettingList;                                             // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerHPRecoveryItemRemoveStatusAndResetElementPassiveSkill
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBPlayerHPRecoveryItemRemoveStatusAndResetElementPassiveSkill : public USBPlayerHPRecoveryItemRemoveStatusPassiveSkill
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerResurrectionApplyBattleStatusParamModifyPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
	 */
	class USBPlayerResurrectionApplyBattleStatusParamModifyPassiveSkill : public USBPlayerPassiveParamModifySkill
	{
	public:
		TArray<struct FSBPassiveResurrectionApplyBattleStatusSetting> SettingList;                                             // 0x0058(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerBurstBonusAttackAndElementModifyPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerBurstBonusAttackAndElementModifyPassiveSkill : public USBPlayerPassiveSkill
	{
	public:
		TArray<struct FSBPlayerBurstBonusAttackAndElementModifySetting> ModifySettingList;                                       // 0x0040(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStatusValuePercentageModifyPassiveSkill
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class USBPlayerStatusValuePercentageModifyPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		ESBPassiveArtsModifyCategory                               ModifyCategory1;                                         // 0x0260(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBPassiveStatusParamCalcType                              CalcType1;                                               // 0x0261(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBPassiveArtsModifyCategory                               ModifyCategory2;                                         // 0x0262(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBPassiveStatusParamCalcType                              CalcType2;                                               // 0x0263(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LEHZ[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStatusFinalValuePercentageModifyPassiveSkill
	 * Size -> 0x0008 (FullSize[0x0268] - InheritedSize[0x0260])
	 */
	class USBPlayerStatusFinalValuePercentageModifyPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		ESBPassiveArtsModifyCategory                               ModifyCategory1;                                         // 0x0260(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBPassiveArtsModifyCategory                               ModifyCategory2;                                         // 0x0261(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5GBP[0x6];                                   // 0x0262(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPassiveAbilityPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class USBPlayerPassiveAbilityPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		TArray<int32_t>                                            AbilityIDList;                                           // 0x0260(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGiveStatusAlimentEffectiveTimeSetPerkInterlockPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBPlayerGiveStatusAlimentEffectiveTimeSetPerkInterlockPassiveSkill : public USBPlayerGiveStatusAlimentPerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_SCOM[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         EffectiveTimeSetStatusAlimentArray;                      // 0x0280(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerProjectilePerkInterlockPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class USBPlayerProjectilePerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		TArray<struct FDataTableRowHandle>                         DynamicConditionSatisfiedProjectileList;                 // 0x0260(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerProjectileValueSetPerkInterlockPassiveSkill
	 * Size -> 0x0018 (FullSize[0x0288] - InheritedSize[0x0270])
	 */
	class USBPlayerProjectileValueSetPerkInterlockPassiveSkill : public USBPlayerProjectilePerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_QJRQ[0x8];                                   // 0x0270(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDataTableRowHandle>                         ValueSetStatusAlimentArray;                              // 0x0278(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerProjectileDamageUpPerkInterlockPassiveSkill
	 * Size -> 0x0020 (FullSize[0x0290] - InheritedSize[0x0270])
	 */
	class USBPlayerProjectileDamageUpPerkInterlockPassiveSkill : public USBPlayerProjectilePerkInterlockPassiveSkill
	{
	public:
		unsigned char                                              UnknownData_AIU6[0x8];                                   // 0x0270(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBAttackID>                                 DamageUpAttackIDList;                                    // 0x0278(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		ESBPlayerDamageUpType                                      DamageUpType;                                            // 0x0288(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H1RF[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerGiveStatusAlimentOnAttackHitPerkInterlockPassiveSkill
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class USBPlayerGiveStatusAlimentOnAttackHitPerkInterlockPassiveSkill : public USBPlayerPerkInterlockPassiveSkill
	{
	public:
		TArray<struct FSBPlayerGiveStatusAlimentOnAttackHitPerkInterlockPassiveSkillSetting> StatusAlimentSettingList;                                // 0x0260(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void OnAttackHit(struct FSBServerDamageEvent* DamageEvent, class AActor* DamageCauser, class AActor* DamageDst, bool bInvincible);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPathFollowingComponent
	 * Size -> 0x0000 (FullSize[0x0268] - InheritedSize[0x0268])
	 */
	class USBPlayerPathFollowingComponent : public UPathFollowingComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPhotoModeComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBPlayerPhotoModeComponent : public USBPlayerControllerComponentBase
	{
	public:
		class UClass*                                              PhotoModeControllerClass;                                // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SKA8[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBPhotoModeController*                              PhotoModeController;                                     // 0x00C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AXL5[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void TogglePhotoMode();
		void SetPlayerControlMode(bool bValue);
		void OnSetMenuMode(class UObject* Sender, class UObject* Param);
		void OnRequestPlayerWarp(class UObject* Sender, class UObject* Param);
		void OnRequestPlayerRestart(class UObject* Sender, class UObject* Param);
		void OnBeginScript(class ASBScriptActor* InScriptActor);
		bool IsPlayerControlMode();
		bool IsPhotoModePlayerControlMode();
		bool IsPhotoMode();
		bool IsPhotoCameraControlMode();
		class ASBPhotoModeController* GetPhotoModeController();
		bool CanStartPhotoMode(ESBPhotoModeStartState* State);
		bool CanControlPhotoMode();
		void BP_OnCantStartPhotoMode(ESBPhotoModeStartState State);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPnQuestComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBPlayerPnQuestComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnPQDataAllDataDelegete;                                 // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdatePnQuestDataDelegete;                             // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletePQDataDelegete;                                // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAchievementedPQDataDelegete;                           // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSBPnQuestBoardManager                              QuestBoardManager;                                       // 0x00F8(0x0010) Transient, NativeAccessSpecifierPrivate

	public:
		void SetQuestItemData(const struct FSBPnQuestItemData& InQuestItemData);
		void SetQuestBoardManager(const struct FSBPnQuestBoardManager& InQuestBoardManager);
		void Server_UpdateQuestBoardManager(const struct FSBPnQuestBoardManager& InQuestBoardManager, int32_t InRetCode, bool InIsNotifyProgressAchievemented, bool InIsBackup);
		void Server_CompleteQuest(const class FString& InQuestId, const class FString& InGroupId, bool IsPayUse);
		bool SearchItemDataBP_QuestId(const class FString& InQuestId, const class FString& InGroupId, struct FSBPnQuestItemData* OutQuestData);
		bool SearchItemDataBP(const class FString& InQuestId, struct FSBPnQuestItemData* OutQuestData);
		void Request_SetQuestBoard(const struct FSBPnQuestBoard& InList);
		void Request_QuestUpdateLogPutParse(const struct FSBPnQuestBoardManager& InSeasonPassQuestBoardManager, const class FString& InMsg);
		void Request_CompleteQuest(const class FString& InQuestId, const class FString& InGroupId, bool IsPayUse);
		struct FSBPnQuestBoardManager GetQuestBoardManagerConst();
		struct FSBPnQuestBoardManager GetQuestBoardManager();
		void Client_UpdateQuestBoardManager(const struct FSBPnQuestBoardManager& InQuestBoardManager, int32_t InRetCode, bool InIsNotifyProgressAchievemented, bool InIsBackup);
		void Client_UpdateQuestBoardComplete(int32_t InRetCode);
		void Client_UpdateQuestBoardAll(const struct FSBPnQuestBoardManager& InQuestBoardManager, int32_t InRetCode);
		void Client_UpdateQuestBoard(const struct FSBPnQuestBoard& InQuestBoard, int32_t InRetCode);
		void Client_UpdateQuestAllData(const struct FSBPnQuestBoardManager& InQuestBoardManager, int32_t InRetCode);
		void Client_SetQuestBoardManager(const struct FSBPnQuestBoardManager& InQuestBoardManager);
		void Client_SetQuestBoard(const struct FSBPnQuestBoard& InList);
		void Client_ResetQuestBoard();
		void Client_QuestUpdateLogPutParse(const struct FSBPnQuestBoardManager& InSeasonPassQuestBoardManager, const class FString& InMsg);
		void Client_QuestAchievemented(TArray<struct FSBTextTableHash> InQuestBoardData);
		void Client_CompleteQuest(const struct FSBPnQuestBoardManager& InQuestManager, ESBPnQuestRewardStatus RewardStatus, int32_t ReturnCode, const struct FSBPnQuestComponentData& AutoQuestData, bool InOpenCommandMenuFlag);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBNotifyPQManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBNotifyPQManager : public UObject
	{
	public:
		struct FSBPnQuestBoardManager                              NotifyProgressAchievementedList;                         // 0x0028(0x0010) Transient, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPnQuestFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPnQuestFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void QuestReadedAll(class UObject* InWorldContextObject);
		void QuestReaded(class UObject* InWorldContextObject, const struct FSBPnQuestItemData& InItem);
		bool IsUpdatePQData(class UObject* InWorldContextObject);
		bool IsPQDataUIQuestIdDraw();
		bool IsNewQuestStockAll(class UObject* InWorldContextObject);
		int32_t GetProgressCount(const struct FSBPnQuestItemData& InItemData);
		int32_t GetCompleteCount(const struct FSBPnQuestItemData& InItemData);
		void CreateNewMarkDataId(class FString* OutMarkId, const struct FSBPnQuestItemData& InItem);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPresetEquipFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerPresetEquipFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsPresetEquipListItemAllIn(class ASBPlayerCharacter* InPlayerCharacterPtr, int32_t ItemListIndex);
		bool isImagineByBattleEquipItem(int32_t Index);
		bool isEquipArtsByEquipItem(int32_t Index);
		bool isEquipArtsByBattleEquipItem(int32_t Index);
		int32_t GetPresetEquipListMax();
		int32_t GetPresetEquipListBlankDataIndex(class ASBPlayerCharacter* pPlayerCharacter);
		int32_t GetPassiveImagineSlotIdByBattleEquipItem(int32_t Index);
		int32_t GetImagineArtsSlotIdByBattleEquipItem(int32_t Index);
		int32_t GetEquipTypeIndexByEquipItem(int32_t Type);
		int32_t GetEquipItemIndexByEquipType(int32_t Type);
		int32_t GetEquipItemIndexByCostumeEquipItem(int32_t Type);
		int32_t GetEquipItemIndexByBattleEquipItem(int32_t Type);
		int32_t GetEquipItemIndexByArtsSlotId(int32_t SlotId);
		int32_t GetEquipedImaginSlotIdByEquipItem(int32_t Type);
		int32_t GetEquipedArtsSlotIdByEquipItem(int32_t Type);
		bool GetCostumePresetEquipDataFormNowEquipItem(class ASBPlayerCharacter* InPlayerCharacterPtr, TArray<struct FSBPlayerPresetEquipItem>* OutItemList);
		int32_t GetCostumeEquipItemIndexByEquipType(int32_t Type);
		int32_t GetCostumeEquipItemIndexByEquipItem(int32_t Type);
		bool GetBattlePresetEquipItemArtsParam(ESBPlayerBattlePresetEquipItem Type, ESBPlayerArtsType* OutArtsType, int32_t* OutSlotId);
		bool GetBattlePresetEquipDataFormNowEquipItem(class ASBPlayerCharacter* InPlayerCharacterPtr, TArray<struct FSBPlayerPresetEquipItem>* OutItemList);
		int32_t GetBattleEquipItemIndexByEquipType(int32_t Type);
		int32_t GetBattleEquipItemIndexByEquipItem(int32_t Type);
		bool GetBattleEquipItemArtsParamByCharacterEquipedArts(class UObject* InWorldContextObject, ESBPlayerBattlePresetEquipItem EquipItemType, struct FSBPlayerPresetEquipItem* OutEquipItem);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerPresetEquipComponent
	 * Size -> 0x0060 (FullSize[0x0130] - InheritedSize[0x00D0])
	 */
	class USBPlayerPresetEquipComponent : public USBPlayerActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnLoadPresetEquipmentListDelegate;                       // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearPresetEquipmentListSlotDelegate;                  // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadPresetEquipmentParamDelegate;                      // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSwapPresetEquipmentListDelegate;                       // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSavePresetEquipmentDelegate;                           // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveCharaPresetEquipmentDelegate;                      // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_SwapPresetEquipmentList(int32_t InSrcListIndex, int32_t InDstListIndex);
		void Server_SavePresetEquipment(int32_t InListIndex, const struct FSBPlayerPresetEquipList& InPresetEquipList, TArray<struct FSBPlayerPresetEquipItem> InPresetEquipItems);
		void Server_SaveCharaCostumePresetEquip(ESBClassType ClassType, int32_t listIndex, TArray<struct FSBPlayerPresetEquipItem> EquipItem);
		void Server_SaveCharaBattlePresetEquip(int32_t InListIndex, class ASBPlayerState* InSBPlayerState, bool bInIsClassChange);
		void Server_RenamePresetEquipmentList(int32_t InListIndex, const class FString& InName);
		void Server_OnSwapPresetEquipmentList(int32_t InRetCode, int32_t InSrcListIndex, int32_t InDstListIndex);
		void Server_OnRenamePresetEquipmentList(int32_t InListIndex, const class FString& InName, int32_t InRetCode);
		void Server_OnClearPresetEquipmentList(int32_t InRetCode);
		void Server_LoadPresetEquipmentParam(int32_t RetCode);
		void Server_LoadPresetEquipmentList();
		void Server_ClearPresetEquipmentListSlot();
		void Server_ClearPresetEquipmentList(int32_t listIndex);
		void Request_SwapPresetEquipmentList(int32_t InSrcListIndex, int32_t InDstListIndex);
		void Request_SavePresetEquipment(int32_t InListIndex, const struct FSBPlayerPresetEquipList& InPresetEquipList, TArray<struct FSBPlayerPresetEquipItem> InPresetEquipItems);
		void Request_SaveCharaCostumePresetEquip(ESBClassType ClassType, int32_t listIndex, TArray<struct FSBPlayerPresetEquipItem> EquipItem);
		void Request_SaveCharaBattlePresetEquip(int32_t InListIndex, class ASBPlayerState* InSBPlayerState, bool bInIsClassChange);
		void Request_RenamePresetEquipmentList(int32_t InListIndex, const class FString& InName);
		void Request_LoadPresetEquipmentList();
		void Request_ClearPresetEquipmentList(int32_t listIndex);
		void OnSwapPresetEquipmentListDelegate__DelegateSignature(int32_t RetCode, int32_t DstListIndex);
		void OnSavePresetEquipmentDelegate__DelegateSignature(int32_t RetCode);
		void OnSaveCharaPresetEquipmentDelegate__DelegateSignature(int32_t RetCode);
		void OnLoadPresetEquipmentParamDelegate__DelegateSignature(int32_t RetCode);
		void OnLoadPresetEquipmentListDelegate__DelegateSignature(int32_t RetCode);
		void OnClearPresetEquipmentListSlotDelegate__DelegateSignature();
		void Client_SavePresetEquipment(int32_t InListIndex, const struct FSBPlayerPresetEquipList& InPresetEquipList, TArray<struct FSBPlayerPresetEquipItem> InPresetEquipItems, int32_t InRetCode);
		void Client_SaveCharaCostumePresetEquip(int32_t RetCode, int32_t listIndex, TArray<struct FSBPlayerPresetEquipItem> EquipItem);
		void Client_SaveCharaBattlePresetEquip(int32_t RetCode, int32_t listIndex, TArray<struct FSBPlayerPresetEquipItem> EquipItem);
		void Client_RenamePresetEquipmentList(int32_t InListIndex, const class FString& InName, int32_t InRetCode);
		void Client_OnSwapPresetEquipmentList(int32_t InRetCode, int32_t InSrcListIndex, int32_t InDstListIndex);
		void Client_OnClearPresetEquipmentList(int32_t InRetCode, const struct FSBPlayerPresetEquipSet& InPresetEquipSet);
		void Client_LoadPresetEquipmentParam(int32_t RetCode);
		void Client_LoadPresetEquipmentList(TArray<struct FSBPlayerPresetEquipList> InPresetEquipLists, TArray<struct FSBPlayerPresetEquipItem> InPresetEquipItems, int32_t RetCode);
		void Client_ClearPresetEquipmentListSlot();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerRecastTimePassiveSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerRecastTimePassiveSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerResurrectionComponent
	 * Size -> 0x0128 (FullSize[0x01F8] - InheritedSize[0x00D0])
	 */
	class USBPlayerResurrectionComponent : public USBPlayerActorComponent
	{
	public:
		float                                                      ResurrectionSearchAngle;                                 // 0x00D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResurrectionSearchLength;                                // 0x00D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ER93[0x28];                                  // 0x00D8(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ResurrectionAttackID;                                    // 0x0100(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CurrentResurrectionTime;                                 // 0x0104(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_IKJB[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayingEffect                                    m_PlayingResurrectionEffect;                             // 0x0110(0x00C8) Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_L9QR[0x20];                                  // 0x01D8(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetResurrectionSkillPlayerCharacter_Server(TArray<class ASBPlayerCharacter*> NewResurrectionSkillTargetList, bool bIsExecLocally);
		void SetResurrectionSkillPlayerCharacter_Multicast(TArray<class ASBPlayerCharacter*> NewResurrectionSkillTargetList, bool bIsExecLocally);
		void SetResurrectionSkillForcePlayerCharacter_Server(TArray<class ASBPlayerCharacter*> ResurrectionSkillTargetList, float OverwriteHPRate);
		void SetResurrectionInteractState_Server(ESBResurrectionInteractState InState);
		void SetResurrectionInteractPlayerCharacter_Server(class ASBPlayerCharacter* PlayerCharacter, bool bIsExecLocally);
		void SetResurrectionInteractPlayerCharacter_Multicast(class ASBPlayerCharacter* PlayerCharacter, bool bIsExecLocally);
		void MulticastSetResurrectionPenalty(float Penalty);
		bool IsResurrected();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerRewardBoostComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBPlayerRewardBoostComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptDelegate                                      OnGetRewardBoostCompletedDelegate;                       // 0x00B8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		TArray<struct FSBRewardBoostInfo>                          RewardBoostInfoList;                                     // 0x00C8(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void ServerGetRewardBoost();
		void RequestGetRewardBoost(const class FScriptDelegate& OnCompleted);
		void OnRequestCompletedDelegate__DelegateSignature(int32_t InRetCode);
		bool IsEffectiveWeaponRefining(int32_t ItemId);
		bool IsEffectiveToken(int32_t TokenID);
		bool IsEffectiveStackBByUniqueIdAndContainer(const class FString& UniqueId, class USBOwnItemListContainer* Container);
		bool IsEffectiveStackB(ESBRewardBoostStackBItemType ItemType, int32_t ItemId, int32_t StackBNum, int32_t SupportItemId);
		bool IsEffectiveSeasonPassQuestQuest(int32_t QuestID);
		bool IsEffectiveMissionByMapId(const class FName& MapId);
		bool IsEffectiveMission(const class FName& DungeonRewardId);
		bool IsEffectiveLiquidMemory(int32_t LiquidMemoryId);
		bool IsEffectiveImagineRefining(int32_t ItemId);
		bool IsEffectiveImagineCraft(int32_t CraftRecipeId);
		bool IsEffectiveGetBootyItem(const class FName& EnemyId, int32_t ItemId);
		bool IsEffectiveFusion(int32_t ItemId);
		bool IsEffectiveFangExpedition();
		bool IsEffectiveDefeatEnemy(const class FName& EnemyId);
		bool IsEffectiveCraft(int32_t CraftRecipeId);
		bool IsEffectiveAutoDeliveryQuest();
		bool IsEffectiveAdventureBoardBonus(const class FString& MissionId, int32_t* OutBonusCount, bool* bOutLimited, class FString* OutEventTerm);
		void GetWeaponRefiningTooltipText(int32_t ItemId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		bool GetWeaponRefiningExpBonus(int32_t ItemId, float* ExpBonus);
		bool GetWeaponRefiningCostReduction(int32_t ItemId, float* CostReduction);
		void GetTokenTooltipText(int32_t TokenID, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		void GetStackBToolTipText(ESBRewardBoostStackBItemType ItemType, int32_t ItemId, int32_t StackBNum, int32_t SupportItemId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		bool GetStackBSuccessRate(ESBRewardBoostStackBItemType ItemType, int32_t ItemId, int32_t StackBNum, int32_t SupportItemId, float* SuccessRateBonus);
		bool GetStackBMoneyDiscount(ESBRewardBoostStackBItemType ItemType, int32_t ItemId, int32_t StackBNum, int32_t SupportItemId, float* DiscountRate);
		bool GetStackBEconomyItemRate(ESBRewardBoostStackBItemType ItemType, int32_t ItemId, int32_t StackBNum, int32_t SupportItemId, float* EconomyRate);
		bool GetStackBEconomyItemNum(ESBRewardBoostStackBItemType ItemType, int32_t ItemId, int32_t StackBNum, int32_t SupportItemId, int32_t* EconomyNum);
		void GetSeasonPassQuestTooltipText(int32_t QuestID, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		void GetMissionTooltipTextByMapId(const class FName& MapId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		void GetMissionTooltipText(const class FName& DungeonRewardId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		void GetLiquidMemoryTooltipText(int32_t LiquidMemoryId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		void GetImagineRefiningTooltipText(int32_t ItemId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		bool GetImagineRefiningExpBonus(int32_t ItemId, float* ExpBonus);
		bool GetImagineRefiningCostReduction(int32_t ItemId, float* CostReduction);
		void GetImagineCraftTooltipText(int32_t CraftRecipeId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		bool GetImagineCraftCostReduction(int32_t CraftRecipeId, float* CostReduction);
		void GetFusionTooltipText(int32_t ItemId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		void GetFangExpeditionToolTipText(TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		bool GetEffectiveRewardBoostMissionData(const class FName& DungeonRewardId, struct FSBRewardBoostMissionMasterData* RewardBoostMissionData);
		void GetCraftTooltipText(int32_t CraftRecipeId, TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		bool GetCraftSuccessRateBonus(int32_t CraftRecipeId, float* SuccessRateBonus);
		bool GetCraftCostReduction(int32_t CraftRecipeId, float* CostReduction);
		void GetAutoDeliveryQuestTooltipText(TArray<struct FSBRewardBoostTooltipData>* TooltipDataList);
		void ClientOnGetRewardBoostCompleted(int32_t RetCode, TArray<struct FSBRewardBoostInfo> InNewData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerRootCollisionComponent
	 * Size -> 0x0018 (FullSize[0x04A0] - InheritedSize[0x0488])
	 */
	class USBPlayerRootCollisionComponent : public UCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_NXIP[0x8];                                   // 0x0488(0x0008) Fix Super Size
		unsigned char                                              UnknownData_5XCA[0x10];                                  // 0x0490(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSeasonPassComponent
	 * Size -> 0x0090 (FullSize[0x0148] - InheritedSize[0x00B8])
	 */
	class USBPlayerSeasonPassComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptDelegate                                      OnBuySeasonPassCompletedDelegate;                        // 0x00B8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnSeasonPassRankUpCompletedDelegate;                     // 0x00C8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnSeasonPassBuyRankUpCompletedDelegate;                  // 0x00D8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnGetSeasonPassRewardCompletedDelegate;                  // 0x00E8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnGetSeasonPassRewardAllCompletedDelegate;               // 0x00F8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		class FScriptDelegate                                      OnGetSeasonPassInfoCompletedDelegate;                    // 0x0108(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate
		struct FSBSeasonPassInfo                                   SeasonPassInfo;                                          // 0x0118(0x001C) Net, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8Z9Y[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBSeasonPassReceivedRewardInfo>             ReceivedRewardInfoList;                                  // 0x0138(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void ServerSeasonPassRankUp(int32_t UpRank);
		void ServerSeasonPassBuyRankUp(int32_t UpRank);
		void ServerGetSeasonPassRewardAll();
		void ServerGetSeasonPassReward(const class FName& RewardId);
		void ServerGetSeasonPassInfo();
		void ServerBuySeasonPass(ESBSeasonPassPlanState InSeasonPassType);
		void RequestSeasonPassRankUp(int32_t UpRank, const class FScriptDelegate& OnCompleted);
		void RequestSeasonPassBuyRankUp(int32_t UpRank, const class FScriptDelegate& OnCompleted);
		void RequestGetSeasonPassRewardAll(const class FScriptDelegate& OnCompleted);
		void RequestGetSeasonPassReward(const class FName& RewardId, const class FScriptDelegate& OnCompleted);
		void RequestGetSeasonPassInfo(const class FScriptDelegate& OnCompleted);
		void RequestBuySeasonPass(ESBSeasonPassPlanState InSeasonPassType, const class FScriptDelegate& OnCompleted);
		void OnRequestCompletedDelegate__DelegateSignature(int32_t InRetCode);
		void OnRequestCompletedAmountOfMoneyDelegate__DelegateSignature(int32_t InRetCode, int32_t InFreeMoney, int32_t InPaidMoney);
		bool IsValidNextSeasonPoint();
		bool IsValidNextSeasonDiscount();
		bool IsValidDiscount();
		bool IsShowSeasonPassDebugUi();
		bool IsSeasonValid();
		bool IsSeasonShopOpened();
		bool IsSeasonProgressValid();
		bool IsRewardReceived(const class FName& RewardId);
		bool IsPaidPlanSubscribed();
		bool IsMaxRank();
		bool IsCorrespondPlan(ESBSeasonPassRewardType PlanType);
		bool IsAutoRankupEnabled();
		bool IsAnyRewardCanReceived();
		int32_t GetUpRankAtAutoRankup();
		int32_t GetShopEmancipationRank();
		ESBSeasonPassPlanState GetSeasonPassType();
		struct FSBSeasonPassQuestInfo GetSeasonPassQuestInfo();
		struct FSBSeasonPassInfo GetSeasonPassInfo();
		int32_t GetSeasonId();
		int32_t GetRequiredRankupPoint();
		TArray<struct FSBSeasonPassReceivedRewardInfo> GetReceivedRewardInfoList();
		int32_t GetRank();
		int32_t GetQuestReloadCountMax();
		int32_t GetQuestReloadCount();
		int32_t GetPoint();
		int32_t GetPickupUnit();
		int32_t GetPaidRankupPrice();
		int32_t GetNextSeasonPoint();
		int32_t GetNextSeasonDiscount();
		int32_t GetMaxRank();
		class FString GetGuidePaidPlanText();
		int32_t GetDiscount();
		struct FDateTime GetCurrentSeasonStartDate();
		TArray<class FName> GetCurrentSeasonReceivedRewardIdList();
		struct FDateTime GetCurrentSeasonProgressEndDate();
		class FString GetCurrentSeasonPassName();
		class FString GetCurrentSeasonName();
		struct FDateTime GetCurrentSeasonEndDate();
		int32_t GetCurrentPaidPlanIndex();
		void ClientOnUpdateSeasonPassInfoByQuestReward(const struct FSBSeasonPassInfo& InSeasonPassInfo);
		void ClientOnSeasonPassRankUpCompleted(int32_t RetCode, const struct FSBSeasonPassInfo& InSeasonPassInfo);
		void ClientOnSeasonPassBuyRankUpCompleted(int32_t RetCode, const struct FSBSeasonPassInfo& InSeasonPassInfo, int32_t InFreeMoney, int32_t InPaidMoney);
		void ClientOnGetSeasonPassRewardCompleted(int32_t RetCode, TArray<struct FSBSeasonPassReceivedRewardInfo> InReceivedRewardInfoList);
		void ClientOnGetSeasonPassRewardAllCompleted(int32_t RetCode, const struct FSBSeasonPassInfo& InSeasonPassInfo, TArray<struct FSBSeasonPassReceivedRewardInfo> InReceivedRewardInfoList);
		void ClientOnGetSeasonPassInfoCompleted(int32_t RetCode, const struct FSBSeasonPassInfo& InSeasonPassInfo, TArray<struct FSBSeasonPassReceivedRewardInfo> InReceivedRewardInfoList);
		void ClientOnBuySeasonPassCompleted(int32_t RetCode, const struct FSBSeasonPassInfo& InSeasonPassInfo, int32_t InFreeMoney, int32_t InPaidMoney);
		bool CanRankup();
		bool CanAutoRankup();
		struct FSBMasterSeasonPass BP_GetCurrentSeasonMasterSeasonPass(ESBSeasonPassPlanState PassType, bool* bIsExists);
		struct FSBMasterSeasonPass BP_GetCurrentMasterSeasonPass(bool* bIsExists);
		struct FSBMasterSeason BP_GetCurrentMasterSeason(bool* bIsExists);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSessionState
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class USBPlayerSessionState : public UObject
	{
	public:
		unsigned char                                              UnknownData_2MSN[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FUniqueNetIdRepl                                    UniqueId;                                                // 0x0030(0x0028) Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CFJD[0x70];                                  // 0x0058(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerShieldSkillController
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPlayerShieldSkillController : public USBPlayerSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerShopComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBPlayerShopComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnSellOwnItemDelegate;                                   // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_SellOwnItem(TArray<class FString> UniqueIdList, TArray<int32_t> ItemAmountList);
		void Server_OnSellOwnItem(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems, int32_t RemainMoney);
		void Request_SellOwnItem(TArray<class FString> UniqueIdList, TArray<int32_t> ItemAmountList);
		void OnSellOwnItemDelegate__DelegateSignature(int32_t InRetCode);
		void Client_SellOwnItem(int32_t InRetCode, TArray<struct FOwnItemInfo> DiffOwnItemList, int32_t RemainMoney);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerShortPinComponent
	 * Size -> 0x0028 (FullSize[0x00E0] - InheritedSize[0x00B8])
	 */
	class USBPlayerShortPinComponent : public USBPlayerPropertyComponent
	{
	public:
		TArray<struct FSBShortPinInfo>                             PinInfo;                                                 // 0x00B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       IsChangePinInfo;                                         // 0x00C8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_26S2[0x7];                                   // 0x00C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHitResult>                                  Hits;                                                    // 0x00D0(0x0010) ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		TArray<struct FHitResult> ShortPin_LineTraceObjects(class ASBPlayerController* InPlayerController);
		void Server_SharePinInfo(const struct FSBShortPinInfo& InPinInfo, TArray<class FString> inMemberIdList);
		void Server_GetTargetLocation(const class FString& inPinId);
		void Request_GetTargetLocation(const struct FSBShortPinInfo& InPinInfo);
		void Request_AddPin(const struct FSBShortPinInfo& InPinInfo);
		void RemovePin(const struct FSBShortPinInfo& InPinInfo);
		struct FVector_NetQuantize GetPinLocation(const class FString& inPinId);
		class ASBEnemyCharacter* GetOrderEnemy();
		TArray<class ASBEnemyCharacter*> GetOrderEnemies(class AActor* inPlayerActor, TArray<class ASBEnemyCharacter*> inEnemyArray);
		void Client_GetTargetLocation(const class FString& inPinId, const struct FVector& InTargetLocation);
		void Client_AddPin(const struct FSBShortPinInfo& InPinInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillActionComponent
	 * Size -> 0x0060 (FullSize[0x0130] - InheritedSize[0x00D0])
	 */
	class USBPlayerSkillActionComponent : public USBPlayerActorComponent
	{
	public:
		TArray<ESBCommunicatePlayerSkillFlag>                      m_SkillParamFlagOnList;                                  // 0x00D0(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IYEM[0x4];                                   // 0x00E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetQuantize                                 m_LargeShieldLocation;                                   // 0x00E4(0x000C) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector_NetRoughDirection                           m_LargeShieldDirection;                                  // 0x00F0(0x000C) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CI8C[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTakeDamageDownAmpBuffArea;                             // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGiveDamageUpAmpBuffArea;                               // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealUpAmpBuffArea;                                     // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void ServerSetSkillFlag(ESBCommunicatePlayerSkillFlag SkillFlag, bool bEnable, bool bMulticast);
		void ServerSetLargeShieldSpawnInfo(const struct FVector_NetQuantize& Location, const struct FVector_NetRoughDirection& Direction, int32_t InSkillId, float InWidth, float InHeight, float InThickness, float InMaxTime);
		void ServerNotifySkillParamFloat(ESBCommunicatePlayerSkillParam SkillParam, float Value, bool bMulticast);
		void ServerNotifySkillEvent(ESBCommunicatePlayerSkillEvent SkillEvent, bool bMulticast);
		void OnRequestAmpBuffArea__DelegateSignature();
		void MulticastSkillParamFloat(ESBCommunicatePlayerSkillParam SkillParam, float Value);
		void MulticastSkillFlag(ESBCommunicatePlayerSkillFlag SkillFlag, bool bEnable);
		void MulticastSkillEvent(ESBCommunicatePlayerSkillEvent SkillEvent);
		void MulticastSetLargeShieldSpawnInfo(const struct FVector_NetQuantize& Location, const struct FVector_NetRoughDirection& Direction);
		bool IsStoneBodyActive();
		bool IsPrepareStyleActive();
		bool IsGlitterModeActive();
		bool IsBloodAxeActive();
		bool IsAttackUp(ESkillActionPosition Position);
		float GetStoneBodyDurabilityRate();
		float GetRegularBuffArrowMaxGaugeAmount();
		int32_t GetRegularBuffArrowMaxChargeLevel();
		float GetRegularBuffArrowGaugeAmount();
		int32_t GetRegularBuffArrowChargeLevel();
		int32_t GetGlitterModeLevel();
		float GetGlitterModeGaugeRatio();
		int32_t GetErasedMarkNum();
		class USBPCSmasherComponent* GetClassComponentAsSmasher();
		float GetBloodAxeDrainUpRate();
		void GetBerserkModePowerupSkillArray(TArray<struct FSBActiveArtsID>* OutPowerupSkillArray);
		int32_t GetAttackUpRank(ESkillActionPosition Position);
		int32_t GetAmpBuffAreaCount();
		void ClientSetStoneBodyDurability(float Durability);
		void ClientSetNextSkillRecastZero(bool bNextRecastZero);
		void ClientNotifyetErasedMarkNum(int32_t MarkEraseCount);
		void ClientNotifyEndMarkCountStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillChargeSuperArmorController
	 * Size -> 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillChargeSuperArmorController : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_FFM9[0x48];                                  // 0x0040(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_Attract
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_Attract : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_A6BV[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_BallShootBase
	 * Size -> 0x0620 (FullSize[0x0660] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_BallShootBase : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_ICZ3[0x620];                                 // 0x0040(0x0620) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_BloodAxe
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_BloodAxe : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_KU8I[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_DustStorm
	 * Size -> 0x00C0 (FullSize[0x0100] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_DustStorm : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_9JJV[0xC0];                                  // 0x0040(0x00C0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_ElementAmp
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_ElementAmp : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_WQ2K[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCreatedElementAmpOption>                  m_ElementAmpOptionList;                                  // 0x0048(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_3VZ4[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_ElementSpreadShot
	 * Size -> 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_ElementSpreadShot : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_BC0L[0x58];                                  // 0x0040(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_FireBurner
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_FireBurner : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_M3XR[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBFireBurnerFireShot>                       m_FireBurnerFireShotList;                                // 0x0058(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_CCVG[0x18];                                  // 0x0068(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_GlitterMode
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_GlitterMode : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_MUOU[0x28];                                  // 0x0040(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_GravityDive
	 * Size -> 0x0148 (FullSize[0x07A8] - InheritedSize[0x0660])
	 */
	class USBPlayerSkillController_GravityDive : public USBPlayerSkillController_BallShootBase
	{
	public:
		unsigned char                                              UnknownData_6V4H[0x148];                                 // 0x0660(0x0148) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_GravityShot
	 * Size -> 0x0000 (FullSize[0x0660] - InheritedSize[0x0660])
	 */
	class USBPlayerSkillController_GravityShot : public USBPlayerSkillController_BallShootBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_GrindHummer
	 * Size -> 0x0278 (FullSize[0x02B8] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_GrindHummer : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_JNRL[0x278];                                 // 0x0040(0x0278) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_HateCollect
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_HateCollect : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_NXB0[0x30];                                  // 0x0040(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_HatTrick
	 * Size -> 0x0068 (FullSize[0x00A8] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_HatTrick : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_PXR7[0x68];                                  // 0x0040(0x0068) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_HealBullet
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_HealBullet : public USBPlayerSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_LancerMainAction
	 * Size -> 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_LancerMainAction : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_N2KR[0x80];                                  // 0x0040(0x0080) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_LargeShield
	 * Size -> 0x0138 (FullSize[0x04E8] - InheritedSize[0x03B0])
	 */
	class USBPlayerSkillController_LargeShield : public USBPlayerGuardSkillController
	{
	public:
		unsigned char                                              UnknownData_XX7E[0x28];                                  // 0x03B0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayingEffect                                    m_ShieldEffect;                                          // 0x03D8(0x00C8) Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_LR0W[0x48];                                  // 0x04A0(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLargeShieldCollisionComponent
	 * Size -> 0x0000 (FullSize[0x04B0] - InheritedSize[0x04B0])
	 */
	class USBLargeShieldCollisionComponent : public UASCollisionBoxComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_MultiShot
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_MultiShot : public USBPlayerSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_PerformerGenerateSpeaker
	 * Size -> 0x0088 (FullSize[0x00C8] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_PerformerGenerateSpeaker : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_E4W9[0x88];                                  // 0x0040(0x0088) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_PerformerLoopAction
	 * Size -> 0x0090 (FullSize[0x00D0] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_PerformerLoopAction : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_PEEW[0x90];                                  // 0x0040(0x0090) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_PerformerMainAction
	 * Size -> 0x0068 (FullSize[0x00A8] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_PerformerMainAction : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_JSGH[0x68];                                  // 0x0040(0x0068) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_PerformerSpecialSpeaker
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_PerformerSpecialSpeaker : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_0WGC[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_PowerReload
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_PowerReload : public USBPlayerSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_PowerShot
	 * Size -> 0x0030 (FullSize[0x0690] - InheritedSize[0x0660])
	 */
	class USBPlayerSkillController_PowerShot : public USBPlayerSkillController_BallShootBase
	{
	public:
		unsigned char                                              UnknownData_DTRB[0x30];                                  // 0x0660(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_PrepareStyle
	 * Size -> 0x00A0 (FullSize[0x00E0] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_PrepareStyle : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_8ZVE[0xA0];                                  // 0x0040(0x00A0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_Protection
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_Protection : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_9I6W[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_QuickShot
	 * Size -> 0x0018 (FullSize[0x0678] - InheritedSize[0x0660])
	 */
	class USBPlayerSkillController_QuickShot : public USBPlayerSkillController_BallShootBase
	{
	public:
		unsigned char                                              UnknownData_VSDO[0x18];                                  // 0x0660(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_RegularBallShoot
	 * Size -> 0x0028 (FullSize[0x0688] - InheritedSize[0x0660])
	 */
	class USBPlayerSkillController_RegularBallShoot : public USBPlayerSkillController_BallShootBase
	{
	public:
		unsigned char                                              UnknownData_5DMX[0x28];                                  // 0x0660(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_RegularBuffArrow
	 * Size -> 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_RegularBuffArrow : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_CJUX[0x60];                                  // 0x0040(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_ResonanceSpear
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_ResonanceSpear : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_A871[0x38];                                  // 0x0040(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_ShieldDash
	 * Size -> 0x0040 (FullSize[0x03F0] - InheritedSize[0x03B0])
	 */
	class USBPlayerSkillController_ShieldDash : public USBPlayerGuardSkillController
	{
	public:
		unsigned char                                              UnknownData_Y3VS[0x40];                                  // 0x03B0(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_SpearVisibility
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_SpearVisibility : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_SFNS[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_StoneBody
	 * Size -> 0x0000 (FullSize[0x03B0] - InheritedSize[0x03B0])
	 */
	class USBPlayerSkillController_StoneBody : public USBPlayerGuardSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_SwingRush
	 * Size -> 0x0090 (FullSize[0x06F0] - InheritedSize[0x0660])
	 */
	class USBPlayerSkillController_SwingRush : public USBPlayerSkillController_BallShootBase
	{
	public:
		unsigned char                                              UnknownData_B6KX[0x90];                                  // 0x0660(0x0090) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_Taunt
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_Taunt : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_XD3P[0x40];                                  // 0x0040(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_ThunderBeam
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_ThunderBeam : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_Y8GR[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_TnunderCloud
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_TnunderCloud : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_5OYB[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCreatedThunderCloudOption>                m_ThunderCloudOptionList;                                // 0x0048(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_IO01[0x20];                                  // 0x0058(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillController_ThunderMine
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillController_ThunderMine : public USBPlayerSkillController
	{
	public:
		unsigned char                                              UnknownData_UNFV[0x38];                                  // 0x0040(0x0038) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillInActionEffectController
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBPlayerSkillInActionEffectController : public USBPlayerSkillController
	{
	public:
		TArray<struct FSBPlayingEffect>                            m_PlayingEffectList;                                     // 0x0040(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected, CPF_SkipSerialization

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSkillMarker
	 * Size -> 0x0040 (FullSize[0x0110] - InheritedSize[0x00D0])
	 */
	class USBPlayerSkillMarker : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_H1KD[0x28];                                  // 0x00D0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  m_SpawnedMarkerDefaultDecalMaterial;                     // 0x00F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IM1F[0x10];                                  // 0x0100(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetAimLocation(const struct FVector& Location);
		void NotifyMarkerOverlapped(bool bOverlapped);
		bool IsMarkerShown();
		bool IsFoundLocation();
		struct FVector GetAimLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSpecialSkill
	 * Size -> 0x0030 (FullSize[0x0100] - InheritedSize[0x00D0])
	 */
	class USBPlayerSpecialSkill : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_Y0F3[0x1C];                                  // 0x00D0(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GaugeSyncTime;                                           // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XN9Y[0x10];                                  // 0x00F0(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetSpecialAnimState(ESBSpecialAnimState State);
		void ServerSetGauge(float Value);
		void ServerRequestSpecialSkillStart();
		void ServerNotifyCastSpecialSkill();
		void RequestSpecialSkillStart();
		bool IsSpecialAnimState(ESBSpecialAnimState State);
		bool IsGaugeFull();
		bool HasSpecialSkillRequestResult();
		float GetMaxGaugeDefault();
		float GetMaxGauge();
		float GetGaugeTimeChargeAmount();
		float GetCurrentGauge();
		void ClientSetGaugeAmountUnreliable(float GaugeAmount, unsigned char ChargeID);
		void ClientSetGaugeAmount(float GaugeAmount, unsigned char ChargeID);
		void ClientRespondSpecialSkillStart(bool bCanStart, ESBRequestSpecialSkillReason Reason);
		bool CanStartSpecialSkill();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStackBComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBStackBComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnLoadedTicketData;                                      // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStackWeaponCompleted;                                  // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStackImagineCompleted;                                 // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStackMountImagineCompleted;                            // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SV_StackB_Weapon(class ASBPlayerController* InPlayerController, const class FString& WeaponUID, TArray<class FString> MaterialUIDs, TArray<struct FSBStackBUseTicket> Tickets, TArray<struct FSBStackBSelect> Perks, const struct FSBStackBSelect& MainAbility, const struct FSBStackBSelect& SubAbility);
		void SV_StackB_Mount(class ASBPlayerController* InPlayerController, const class FString& MountUID, TArray<class FString> MaterialUIDs, TArray<struct FSBStackBUseTicket> Tickets);
		void SV_StackB_Imagine(class ASBPlayerController* InPlayerController, const class FString& ImagineUID, TArray<class FString> MaterialUIDs, TArray<struct FSBStackBUseTicket> Tickets, const class FString& Perk_Id);
		void Request_TicketData();
		void Request_StackB_Weapon(const class FString& WeaponUID, TArray<class FString> MaterialUIDs, TArray<struct FSBStackBUseTicket> Tickets, TArray<struct FSBStackBSelect> Perks, const struct FSBStackBSelect& Vital, const struct FSBStackBSelect& SubAbility);
		void Request_StackB_MountImagine(const class FString& MountUID, TArray<class FString> MaterialUIDs, TArray<struct FSBStackBUseTicket> Tickets);
		void Request_StackB_Imagine(const class FString& ImagineUID, TArray<class FString> MaterialUIDs, TArray<struct FSBStackBUseTicket> Tickets, const class FString& Perk_Id);
		void OnLoadedTicketData__DelegateSignature(int32_t RetCode);
		void OnCompleteStackWeapon__DelegateSignature(int32_t RetCode, const struct FOwnItemInfo& Weapon, bool bSuccess);
		void OnCompleteStackImagine__DelegateSignature(int32_t RetCode, const struct FOwnItemInfo& Imagine, bool bSuccess);
		bool IsTicketLoaded();
		void GetTicketDatas(ESBStackBTicketType Type, TArray<struct FSBStackBTicketData>* Data);
		void GetAllTicketData(TArray<struct FSBStackBTicketData>* Data);
		struct FSBStackBTicketData FindTicketDataByTypeLevel(ESBStackBTicketType Type, ESBStackBItemType ItemType, int32_t Level);
		struct FSBStackBTicketData FindTicketData(int32_t token_id);
		void CL_StackB_Weapon(int32_t RetCode, const struct FOwnItemInfo& Weapon, TArray<struct FOwnItemInfo> Items, TArray<struct FSBCharacterToken> Tokens, int32_t Money, bool bSuccess);
		void CL_StackB_Mount(int32_t RetCode, const struct FOwnItemInfo& Mount, TArray<struct FOwnItemInfo> Items, TArray<struct FSBCharacterToken> Tokens, int32_t Money, bool bSuccess);
		void CL_StackB_Imagine(int32_t RetCode, const struct FOwnItemInfo& Imagine, TArray<struct FOwnItemInfo> Items, TArray<struct FSBCharacterToken> Tokens, int32_t Money, bool bSuccess);
		bool checkFullyMaterial(const struct FOwnItemInfo& Target, TArray<struct FOwnItemInfo> Materials, bool bUseTicket);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStaminaSkillController
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPlayerStaminaSkillController : public USBPlayerSkillController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStaminaSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerStaminaSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStampComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBPlayerStampComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCompletedGetStampList;                                 // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnValidStampDelegate;                                    // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnValidStampListDelegate;                                // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DR6K[0x10];                                  // 0x00E8(0x0010) MISSED OFFSET (PADDING)

	public:
		void Server_UnlockStamp(TArray<int32_t> StampIds);
		void Server_OnComplete(TArray<struct FSBUnlockStampCategoryData> InStampData, bool IsGetList, int32_t InRetCode);
		void Server_CheckValidStampList(TArray<int32_t> StampIds);
		void Server_CheckValidStamp(int32_t StampId);
		void Server_CheckUnlockStampData(TArray<struct FSBUnlockStampCategoryData> InClientStampData, bool IsGetList, int32_t InRetCode);
		bool RequestGetStampList(class ASBPlayerController* InPlayerController);
		void OnValidStampListDelegate__DelegateSignature(bool bValid, TArray<int32_t> StampIds);
		void OnValidStampDelegate__DelegateSignature(bool bValid, int32_t StampId);
		void OnCompletedGetStampList__DelegateSignature(int32_t InRetCode, TArray<struct FSBUnlockStampCategoryData> StampList);
		bool IsPlayerStampPossession(int32_t StampId);
		bool IsLimitedTimeStamp(int32_t StampId);
		void GetUnlockTermStampDataList(TArray<struct FSBStampMasterData>* OutMasterDataList);
		TArray<struct FSBUnlockStampCategoryData> GetUnlockStampData();
		bool GetTermCategoryList(TArray<struct FSBStampCategoryMasterData>* OutTermCategoryDataList, TArray<int32_t> StampIds);
		bool GetStampTerm(int32_t StampId, struct FDateTime* OutStartTime, struct FDateTime* OutEndTime);
		void GetStampSort(int32_t InSortType, const struct FSBStampCategoryMasterData& InCategoryMasterData, struct FSBStampCategoryMasterData* OutCategoryMasterData);
		TArray<int32_t> GetStampHistoryIdsData();
		TArray<int32_t> GetStampFavoriteIdsData();
		void Client_OnComplete(TArray<struct FSBUnlockStampCategoryData> InStampData, bool IsGetList, int32_t InRetCode);
		void Client_CheckValidStampResult(bool IsValid, int32_t StampId);
		void Client_CheckValidStampListResult(bool IsValid, TArray<int32_t> ValidStampIds);
		void Client_CheckUnlockStampData(TArray<struct FSBUnlockStampCategoryData> InServerStampData, bool IsGetList, int32_t InRetCode);
		void CheckValidStampList(TArray<int32_t> StampIds);
		void CheckValidStamp(int32_t StampId);
		bool CheckTermIdByList(TArray<int32_t> InStampIds, TArray<int32_t>* OutStampIds);
		bool CheckCategoryStampComplete(int32_t CategoryId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStart
	 * Size -> 0x0018 (FullSize[0x0270] - InheritedSize[0x0258])
	 */
	class ASBPlayerStart : public APlayerStart
	{
	public:
		bool                                                       bIsAvailableForSearchStartPoint;                         // 0x0258(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBPlayerStartType                                         Type;                                                    // 0x0259(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WP1G[0x6];                                   // 0x025A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBFieldActorWarpPoint*                              OwnerWarpPoint;                                          // 0x0260(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UShapeComponent*                                     CollisionComponent;                                      // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetPlayerRespawnPoint(class ASBPlayerCharacter* PlayerCharacter);
		void SetOwnerWarpPoint(class ASBFieldActorWarpPoint* NewOwner);
		ESBPlayerStartType GetPlayerStartType();
		class ASBFieldActorWarpPoint* GetOwnerWarpPoint();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState
	 * Size -> 0x03B8 (FullSize[0x06E0] - InheritedSize[0x0328])
	 */
	class ASBPlayerState : public APlayerState
	{
	public:
		unsigned char                                              UnknownData_XVC1[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsClientReady;                                          // 0x0330(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasAnnouncedAdd;                                        // 0x0331(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bSimplycityPartyJoinRequested;                           // 0x0332(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_N0PQ[0x65];                                  // 0x0333(0x0065) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBPlayerTag>                                PlayerTagList;                                           // 0x0398(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            AdditionalTensionTagList;                                // 0x03A8(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnCharacterNameChangeDelegate;                           // 0x03B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAchievementSelectedChangeDelegate;                     // 0x03C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    ClassIndex;                                              // 0x03D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ClassLevel;                                              // 0x03DC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TotalPower;                                              // 0x03E0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A9MU[0x4];                                   // 0x03E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CharacterName;                                           // 0x03E8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_55SU[0x18];                                  // 0x03F8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CharacterId;                                             // 0x0410(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AchievementSelected;                                     // 0x0420(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EQ9P[0x2A];                                  // 0x0424(0x002A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSimplycityPartyOn;                                      // 0x044E(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AFZW[0x1];                                   // 0x044F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SimplycityPartyMatchingRange;                            // 0x0450(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CD4D[0x4];                                   // 0x0454(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBPlayerState*>                              SimplicityInRangePlayers;                                // 0x0458(0x0010) Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		int32_t                                                    Birthday;                                                // 0x0468(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Birthday_CertCount;                                      // 0x046C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsMainMenuOpen;                                         // 0x0470(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PUED[0x3];                                   // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    OnlineStatus;                                            // 0x0474(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              PartyIdString;                                           // 0x0478(0x0010) Net, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E9N9[0x40];                                  // 0x0488(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, struct FSBGameServerPartyInfo>         PartyInfoMap;                                            // 0x04C8(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5UBV[0x68];                                  // 0x0518(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlatformInfo                                     PlatformInfo;                                            // 0x0580(0x0020) Net, Transient, NativeAccessSpecifierPublic
		class FName                                                PlayingDungeonId;                                        // 0x05A0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DeadCount;                                               // 0x05A8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FRPJ[0x1C];                                  // 0x05AC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_ImagineArtsRecastTimePast;                             // 0x05C8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      m_ImagineArtsRecastTimePast2;                            // 0x05CC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0F9T[0x4];                                   // 0x05D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bInvalidPlayerStart : 1;                                 // 0x05D4(0x0001) BIT_FIELD Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XDW7[0x3];                                   // 0x05D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NoMapDisplayCnt;                                         // 0x05D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsInTemple;                                             // 0x05DC(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_41XK[0x3];                                   // 0x05DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBPlayerWarpPointComponent*                         WarpPointPropertyComponent;                              // 0x05E0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerDungeonComponent*                           DungeonComponent;                                        // 0x05E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerCacheComponent*                             CachedPropertyComponent;                                 // 0x05F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerGatherPointComponent*                       GatherPointPropertyComponent;                            // 0x05F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerCharacterParameterComponent*                CharacterParameterComponent;                             // 0x0600(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerInterruptQuestComponent*                    InterruptQuestComponent;                                 // 0x0608(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerFriendComponent*                            FriendComponent;                                         // 0x0610(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerActivityComponent*                          ActivityComponent;                                       // 0x0618(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerCommunicateSettingsComponent*               PlayerCommunicateSettingsComponent;                      // 0x0620(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerStampComponent*                             PlayerStampComponent;                                    // 0x0628(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerEmoteComponent*                             PlayerEmoteComponent;                                    // 0x0630(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerAdventurerComponent*                        PlayerAdventurerComponent;                               // 0x0638(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerStorageComponent*                           PlayerStorageComponent;                                  // 0x0640(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerMissionQuestComponent*                      PlayerMissionQuestComponent;                             // 0x0648(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerDefeatEnemyComponent*                       DefeatEnemyComponent;                                    // 0x0650(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerGuildComponent*                             GuildComponent;                                          // 0x0658(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerFieldActorPickupComponent*                  FieldActorPickupComponent;                               // 0x0660(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBlackListComponent*                               BlackListComponent;                                      // 0x0668(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerVirtualDateTimeComponent*                   VirtualDateTimeComponent;                                // 0x0670(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBJointGestureComponent*                            JointGestureComponent;                                   // 0x0678(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerWeaponComponent*                            PlayerWeaponComponent;                                   // 0x0680(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerShortPinComponent*                          PlayerShortPinComponent;                                 // 0x0688(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBGeneralPurposeCounterComponent*                   GeneralPurposeCounterComponent;                          // 0x0690(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerChatComponent*                              PlayerChatComponent;                                     // 0x0698(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerExpeditionComponent*                        PlayerExpeditionComponent;                               // 0x06A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBUncheaterComponent*                               UncheaterComponent;                                      // 0x06A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerAwardComponent*                             PlayerAwardComponent;                                    // 0x06B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerDecorationComponent*                        PlayerDecorationComponent;                               // 0x06B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBPlayerOrnamentComponent*                          PlayerOrnamentComponent;                                 // 0x06C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              PlayerLevelStartLog;                                     // 0x06C8(0x0010) Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MNRW[0x8];                                   // 0x06D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetSimplycityPartyOn(bool InSimplycityPartyOn, bool bResetWaitTime);
		void SetIsInTempleMode(bool bIsIn);
		void SetIsInTemple(bool bIsIn);
		void SetCharacterId(const class FString& InCharacterId);
		void ServerUpdateSimplycityPartyOnPlayerState(bool InSimplycityPartyOn);
		void ServerUpdateSimplycityPartyMatchingRange(float InSimplycityPartyMatchingRange);
		void ServerUpdateShowPrintServerString(bool Sw);
		void ServerUpdatePartyInfo(const struct FSBGameServerPartyInfo& InPartyInfo);
		void ServerSimplycityPartyJoinRequestRejected(class ASBPlayerState* SBPlayerState);
		void ServerSimplycityPartyJoinRequest(int32_t existPartyLeaderIndex);
		void ServerSetMainMenuOpen(bool InMainMenuOpen);
		void ServerSetImagineArtsRecastTimePastFull(ESkillActionPosition Position);
		void ServerSetImagineArtsRecastTimePast(ESkillActionPosition Position, float Value);
		void ServerSetCurrentMapInitialSpawnedInfo(const struct FVector& NewLocation, float NewYaw);
		void ServerSetClientReady(bool bReady);
		void ServerSetAppearEffectType(ESBAppearEffectType Type);
		void ServerResetPartyInfo();
		void ServerRemoveOnlineStatus(ESBOnlineStatus InOnlineStatus);
		void ServerRemoveMultiOnlineStatus(TArray<ESBOnlineStatus> InOnlineStatus);
		void ServerLeaveParty(const class FString& TargetPartyId);
		void ServerAddOnlineStatus(ESBOnlineStatus InOnlineStatus);
		void ServerAddMultiOnlineStatus(TArray<ESBOnlineStatus> InOnlineStatus);
		void ServerAddDeadCount();
		void Server_ChangePrivilegeType(ESBPrivilegeType InPrivilegeType);
		void ResetNoMapDisplay();
		void PrintServerMsgToClient(const class FString& Msg, const struct FLinearColor& Col, float Timer, bool ToScreen);
		void OnRep_PlayerLevelStartLog();
		void OnRep_OnlineStatus();
		void OnRep_ImagineArtsRecastTimePast2();
		void OnRep_ImagineArtsRecastTimePast();
		void OnRep_CharacterName();
		void OnRep_CharacterId();
		void OnRep_AchievementSelected();
		void OnDebugParamChanged(ESBDebugMenuType MenuType, const class FName& DataName);
		void MulticastSetClientReady(bool bReady);
		void MulticastSetAppearEffectType(ESBAppearEffectType Type);
		void Multicast_ChangePrivilegeType(ESBPrivilegeType InPrivilegeType);
		bool IsPartyPlay();
		bool IsPartyLeader();
		bool IsPartyBuilding();
		bool IsOnline();
		bool IsNoMapDisplay();
		bool IsMainMenuOpen();
		bool IsJoinedGameServerPartyByType(ESBPartyType Type);
		bool IsInTemple();
		bool IsClientReady();
		bool IsActive();
		void InOutNoMapDisplayArea(bool bIsIn);
		bool HasPlayerTag(int32_t InPlayerTag);
		bool HasOnlineStatus(ESBOnlineStatus InOnlineStatus);
		int32_t GetTotalPower();
		bool GetSimplycityPartyOn();
		bool GetSelfRespawnFromDeath();
		int32_t GetRealPartySize();
		class FName GetPlayingDungeonId(bool* IsExists);
		class USBPlayerWeaponComponent* GetPlayerWeaponComponent();
		TArray<struct FSBPlayerTag> GetPlayerTagList();
		class USBPlayerStorageComponent* GetPlayerStorageComponent();
		class USBPlayerStampComponent* GetPlayerStampComponent();
		class USBPlayerShortPinComponent* GetPlayerShortPinComponent();
		class USBPlayerOrnamentComponent* GetPlayerOrnamentComponent();
		class USBPlayerDecorationComponent* GetPlayerDecorationComponent();
		class USBPlayerCommunicateSettingsComponent* GetPlayerCommunicateComponent();
		class USBPlayerAwardComponent* GetPlayerAwardComponent();
		struct FSBPlatformInfo GetPlatformInfo();
		int32_t GetPartySize();
		class FString GetPartyId();
		class ASBPlayerController* GetOwnerPlayerController();
		class USBPlayerInterruptQuestComponent* GetInterruptQuestComponent();
		ESBHostility GetHostilityAt(class ASBPlayerState* OtherPlayer);
		class USBPlayerGuildComponent* GetGuildComponent();
		class USBGeneralPurposeCounterComponent* GetGeneralPurposeCounterComponent();
		class USBPlayerGatherPointComponent* GetGatherPointPropertyComponent();
		bool GetGameServerPartyInfoByType(ESBPartyType Type, struct FSBGameServerPartyInfo* OutInfo);
		bool GetGameServerPartyInfo(struct FSBGameServerPartyInfo* OutInfo);
		int32_t GetDeadCount();
		ESBClassType GetClassType();
		int32_t GetClassLevel();
		int32_t GetClassIndex();
		class USBPlayerCharacterParameterComponent* GetCharacterParameterComponent();
		class FString GetCharacterId();
		int32_t GetBirthdayCertCount();
		int32_t GetBirthday();
		TArray<int32_t> GetAdditionalTensionTagList();
		void CountNoMapDisplay(bool bIsIn);
		void ClientSimplycityPartyMatchingStop();
		void ClientSimplycityPartyMatchingSend(class ASBPlayerState* TargetPlayerState);
		void ClientSimplycityPartyMatchingInfoReset();
		void ClientSimplycityPartyMatching();
		void ClientSetImagineArtsRecastTimePastFull(ESkillActionPosition Position);
		void ClientSetImagineArtsRecastTimePast(ESkillActionPosition Position, float Value);
		void ClientSetFieldRespawnPointTag(const class FName& NewTag, const class FName& OldTag);
		void BP_SetBirthdayInfo(int32_t birth, int32_t Count);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_Dungeon
	 * Size -> 0x00E0 (FullSize[0x07C0] - InheritedSize[0x06E0])
	 */
	class ASBPlayerState_Dungeon : public ASBPlayerState
	{
	public:
		unsigned char                                              UnknownData_B356[0x10];                                  // 0x06E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRequestEndResultMenuDelegate;                          // 0x06F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XBQO[0x18];                                  // 0x0700(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpawnCount;                                              // 0x0718(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DeadRespawnCount;                                        // 0x071C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASBDungeonStandbyArea*                               StandbyArea;                                             // 0x0720(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRetireDungeon;                                          // 0x0728(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1RBZ[0x3];                                   // 0x0729(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DungeonPID;                                              // 0x072C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInitialLoaded;                                          // 0x0730(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KH8G[0x17];                                  // 0x0731(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFavoriteCountDelegate;                                 // 0x0748(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PTRQ[0x68];                                  // 0x0758(0x0068) MISSED OFFSET (PADDING)

	public:
		void SetDungeonStandbyArea(class ASBDungeonStandbyArea* Area);
		void ServerRequestRescue();
		void ServerNotifyRetireDungeon();
		void ServerFavoriteCount(const class FString& InCharacterId);
		void Server_EndInitialLoad();
		void Server_EndDungeonScript();
		void Server_EndCheckPlayDungeonScript(int32_t ScriptNumber);
		void RequestEndSkipResultMenu();
		void ReceiveEndDungeon();
		void OnRequestEndResultMenu__DelegateSignature();
		void OnRep_RetireDungeon();
		void OnFavoriteCountDelegate__DelegateSignature(const class FString& InCharacterId);
		void OnEndInitialLoad();
		void OnEndGameOverMenu__DelegateSignature();
		void MulticastFavoriteCount(const class FString& InCharacterId);
		bool IsStartResultMenu();
		bool IsSkipResultMenu();
		bool IsRetireDungeon();
		bool IsEndResultMenu();
		bool IsEndGameOverMenu();
		bool IsDungeonResultFixed();
		int32_t GetRewardMoney();
		TArray<struct FSBDungeonRewardItem> GetRewardItems();
		void GetRewardItemAndMoney(struct FSBDungeonRewardInfo* DungeonRewardInfo);
		int32_t GetResurrectCount();
		int32_t GetRescueCount();
		ESBDungeonEvaluation GetPlayerEvaluation();
		bool GetFirstSpawn();
		class ASBDungeonStandbyArea* GetDungeonStandbyArea();
		int32_t GetDungeonResultScore();
		bool GetDungeonResultCleared();
		int32_t GetDungeonPID();
		int32_t GetDeadRespawnCount();
		void GetClearTimeAndLapTime(int64_t* ClearTime, TArray<int32_t>* LapTime);
		float GetClearRaidRatio();
		int32_t GetClassExp();
		int32_t GetBravePoint();
		void EndResultMenu();
		void EndGameOverMenu();
		void DemoEndWaitFadeInWaitDemoStart();
		void DemoEndWaitFadeInWaitDemoEnd();
		void DemoEndWaitFadeInStart();
		void ClientDemoEndWaitFadeIn(const class FName& DemoName, float FadeTime, float DelayTime, int32_t LimitCount);
		void Client_StartDungeonScript(ESBDungeonScriptType ScriptType, int32_t ScriptNumber);
		void Client_SetLockLoadingScreen(bool LockScreen);
		void Client_SetFadeScreen(bool FadeOut, float Duration);
		void Client_CoolDownPlayerSkill(const class FString& Mode);
		void Client_CheckPlayDungeonScript(ESBDungeonScriptType ScriptType, bool SkipScript);
		void AddFavoriteCount(const class FString& InCharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_DungeonNormal
	 * Size -> 0x0098 (FullSize[0x0858] - InheritedSize[0x07C0])
	 */
	class ASBPlayerState_DungeonNormal : public ASBPlayerState_Dungeon
	{
	public:
		TArray<class FName>                                        DungeonScriptQueue;                                      // 0x07C0(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		int32_t                                                    RequestedDungeonScriptId;                                // 0x07D0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    EndDungeonScriptId;                                      // 0x07D4(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5NSN[0x80];                                  // 0x07D8(0x0080) MISSED OFFSET (PADDING)

	public:
		void StartExitDungeon();
		void SpawnExitPortal(const class FName& Tag);
		void SetDeadLocation(const struct FVector& Location);
		void Server_NotifyDungeonScriptStart(int32_t SatrtId);
		void Server_NotifyDungeonScriptEnd(int32_t EndId);
		void OnGameOverEnd();
		void OnAllActivatedMessageShown();
		void MulticastSetRewardInfo(const struct FSBDungeonRewardInfo& RewardInfo);
		void MulticastClearTimeAndLapTime(int64_t ClearTime, TArray<int32_t> LapTime);
		bool IsStartScriptOnClient(const class FName& ScriptId);
		bool IsEndScriptOnClient(const class FName& ScriptId);
		void ExitDungeonCore();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_BattleArena
	 * Size -> 0x0000 (FullSize[0x0858] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_BattleArena : public ASBPlayerState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_CATutorial
	 * Size -> 0x0000 (FullSize[0x0858] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_CATutorial : public ASBPlayerState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_DungeonOffline
	 * Size -> 0x0000 (FullSize[0x0858] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_DungeonOffline : public ASBPlayerState_DungeonNormal
	{
	public:
		void RetireOfflineDungeon();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_DungeonScenario
	 * Size -> 0x0000 (FullSize[0x0858] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_DungeonScenario : public ASBPlayerState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_DungeonScoreAttack
	 * Size -> 0x0000 (FullSize[0x0858] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_DungeonScoreAttack : public ASBPlayerState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_DungeonTimeAttack
	 * Size -> 0x0000 (FullSize[0x0858] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_DungeonTimeAttack : public ASBPlayerState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_DxBattle
	 * Size -> 0x00A0 (FullSize[0x08F8] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_DxBattle : public ASBPlayerState_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_RYE1[0x8];                                   // 0x0858(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBDxBattleResult                                   m_DxBattleResult;                                        // 0x0860(0x0070) NativeAccessSpecifierPublic
		int32_t                                                    m_PlayerCount;                                           // 0x08D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GXIS[0x24];                                  // 0x08D4(0x0024) MISSED OFFSET (PADDING)

	public:
		void SetDxBattleResult(const struct FSBDxBattleResult& InDxBattleResult, int32_t InPlayerCount);
		bool IsAwarded(ESBDxBattleScore Index);
		struct FSBDxBattleResult GetDxBattleResult();
		void Client_SetDxBattleResult(const struct FSBDxBattleResult& InDxBattleResult, int32_t InPlayerCount);
		void Client_DebugPrintMasterDataErrorLog(const class FString& DefenseName, const class FString& ContentId);
		void Client_DebugPlayerRewardLog(const class FString& InRaidId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_InstanceArea
	 * Size -> 0x0000 (FullSize[0x0858] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_InstanceArea : public ASBPlayerState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_Lobby
	 * Size -> 0x0008 (FullSize[0x06E8] - InheritedSize[0x06E0])
	 */
	class ASBPlayerState_Lobby : public ASBPlayerState
	{
	public:
		int32_t                                                    TeamNumber;                                              // 0x06E0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsRoomOwner;                                            // 0x06E4(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DNCZ[0x3];                                   // 0x06E5(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetTeamNumber(int32_t InTeamNumber);
		void SetDungeonId(const class FName& InDungeonId);
		void ServerSetTeamNumber(int32_t InTeamNumber);
		void ServerSetDungeonId(const class FName& InDungeonId);
		void ServerSetCharacter(int32_t InClassIndex, const class FString& InCharacterId, const class FString& InCharacterName);
		void RequestSetDefaultPlayCharacter(const class FString& InCharacterId);
		void OnRep_TeamNumber();
		bool IsRoomOwner();
		int32_t GetTeamNumber();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_MzBattle
	 * Size -> 0x0000 (FullSize[0x0858] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_MzBattle : public ASBPlayerState_DungeonNormal
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_PublicDungeon
	 * Size -> 0x0000 (FullSize[0x06E0] - InheritedSize[0x06E0])
	 */
	class ASBPlayerState_PublicDungeon : public ASBPlayerState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_RaidBattle
	 * Size -> 0x0088 (FullSize[0x08E0] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_RaidBattle : public ASBPlayerState_DungeonNormal
	{
	public:
		struct FSBRaidBattleResult                                 m_RaidBattleResult;                                      // 0x0858(0x0058) NativeAccessSpecifierPublic
		int32_t                                                    m_PlayerCount;                                           // 0x08B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0CJY[0x15];                                  // 0x08B4(0x0015) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       DebugViewContributionValue;                              // 0x08C9(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7RE3[0x6];                                   // 0x08CA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBRaidBattleGameScore>                      OutScoreList;                                            // 0x08D0(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate

	public:
		void SetRaidBattleResult(const struct FSBRaidBattleResult& InRaidBattleResult, int32_t InPlayerCount);
		void Server_SetDebugViewContributionValue(bool Value);
		void MulticastRaidName(const class FString& Name);
		bool IsAwarded(ERAID_BATTLE_SCORE Index);
		class FString GetRaidName();
		struct FSBRaidBattleResult GetRaidBattleResult();
		void Client_SetRaidBattleResult(const struct FSBRaidBattleResult& InRaidBattleResult, int32_t InPlayerCount);
		void Client_DebugStackLogPrint(TArray<class FString> InLogList);
		void Client_DebugScreenPrint(const class FString& InPrintLog);
		void Client_DebugPrintMasterDataErrorLog(const class FString& RaidName, const class FString& ContentId);
		void Client_DebugPlayerRewardLog(const class FString& InGameContentId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_RankUpExam
	 * Size -> 0x0008 (FullSize[0x0860] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_RankUpExam : public ASBPlayerState_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_QA8X[0x8];                                   // 0x0858(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRankUpExamStart();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_Theater
	 * Size -> 0x0008 (FullSize[0x0860] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_Theater : public ASBPlayerState_DungeonOffline
	{
	public:
		unsigned char                                              UnknownData_0X2O[0x8];                                   // 0x0858(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_TowerSurvival
	 * Size -> 0x0008 (FullSize[0x0860] - InheritedSize[0x0858])
	 */
	class ASBPlayerState_TowerSurvival : public ASBPlayerState_DungeonNormal
	{
	public:
		unsigned char                                              UnknownData_4FKE[0x8];                                   // 0x0858(0x0008) MISSED OFFSET (PADDING)

	public:
		void ExecTeleportForJoin(class AActor* InTeleportTarget);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerState_Tutorial
	 * Size -> 0x0008 (FullSize[0x07C8] - InheritedSize[0x07C0])
	 */
	class ASBPlayerState_Tutorial : public ASBPlayerState_Dungeon
	{
	public:
		unsigned char                                              UnknownData_YL2M[0x8];                                   // 0x07C0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStatusAilmentPassiveSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerStatusAilmentPassiveSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStatusAlimentEffectiveTimeSetPassiveSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerStatusAlimentEffectiveTimeSetPassiveSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStatusAlimentValueSetPassiveSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerStatusAlimentValueSetPassiveSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerStorageComponent
	 * Size -> 0x0290 (FullSize[0x0348] - InheritedSize[0x00B8])
	 */
	class USBPlayerStorageComponent : public USBPlayerPropertyComponent
	{
	public:
		unsigned char                                              UnknownData_X9WR[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSaveItemLockDelegate;                                  // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAddItemDelegate;                                       // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveItemStorageDelegate;                               // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveItemBoxStorageDelegate;                            // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSaveTakeApartDelegate;                                 // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCancelActiveItemDelegate;                              // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGetBagItemList;                               // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedGetStorageItemList;                           // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangeCostumeDataDelegate;                             // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3KXV[0x8];                                   // 0x0150(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCompletedGetRestoreItems;                              // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    RestoreMaxPage;                                          // 0x0168(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    RestoreCurrentPage;                                      // 0x016C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bRequestItemNow;                                         // 0x0170(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bRequestCheerfulItemNow;                                 // 0x0171(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NE0Q[0x6];                                   // 0x0172(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCompleted_MoveItemRequest;                             // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleted_ReleaseMovedItems;                           // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetExpiredEquipmentDataGettedAtJoinDelegate;           // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0C5S[0x130];                                 // 0x01A8(0x0130) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBRecipeCondition>                          RepReleasedRecipes;                                      // 0x02D8(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1DL6[0x10];                                  // 0x02E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBActiveItemData>                           ActiveItems;                                             // 0x02F8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FOwnItemInfo>                                DelayConsumeItems;                                       // 0x0308(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FSBActiveItemData>                           ExpiryItems;                                             // 0x0318(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnActiveItemaUpdateDelegate;                             // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompletedRankingRewardDataListDelegate;                // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_SaveTakeApart(TArray<struct FSBStorageItemData> InStorageItemData);
		void Server_SaveReleasedRecipes(int32_t RetCode, TArray<struct FSBRecipeCondition> InReleasedRecipes, bool bImmediateNotification);
		void Server_SaveLevelIncreaseStorage(TArray<struct FSBStorageItemData> InStorageItemData);
		void Server_SaveItemStorage(EStorageApiType InApiType, TArray<struct FSBStorageItemData> InStorageItemData, int32_t InToStorageNo);
		void Server_SaveItemLock(TArray<struct FSBLockItemData> InLockItemData);
		void Server_SaveItemBoxStorage(const struct FSBStorageItemBoxData& InStorageItemData);
		void Server_SaveExpIncreaseStorage(TArray<struct FSBStorageItemData> InStorageItemData);
		void Server_RequestRankingRewardDataList();
		void Server_RequestMovedItemList();
		void Server_Request_ReleaseMovedItemList();
		void Server_ParseStorageCapacity(int32_t Type, int32_t Capacity);
		void Server_OnSaveTakeApart(int32_t InRetCode, const struct FSBStorageItemBoxResultData& InItemBoxResultData);
		void Server_OnSaveRankingRewardDataList(int32_t InRetCode, TArray<struct FSBRankingRewardData> InRankingRewardDataList);
		void Server_OnSaveItemStorage(int32_t InRetCode, EStorageApiType InApiType, const struct FSBStorageItemAPIResponseData& InResponseData, bool InOpenCommandMenuFlag);
		void Server_OnSaveItemLock(int32_t InRetCode, TArray<struct FSBLockItemData> InLockItemData);
		void Server_OnSaveItemBoxStorage(int32_t InRetCode, const struct FSBStorageItemBoxResultData& InItemBoxResultData);
		void Server_OnRequest_Restoreitems(class ASBPlayerController* InPlayerController, int32_t Page);
		void Server_OnChangeCostumeData(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems);
		void Server_OnAddItem(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems);
		void Server_GetExpiredEquipmentDataGettedAtJoin();
		void Server_ChangeCostumeData(TArray<struct FSBChangeCostumeData> InChangeCostumeDataArray, TArray<struct FSBStorageItemData> InUseStorageItemDataArray, TArray<struct FCharaEquipItemCharaCreateInfo> InChangeCostumeCharaCreateInfos);
		void Server_CancelActiveItem(const class FString& InId);
		void Server_AddItem(TArray<struct FSBAddItemData> InAddItemData, bool ForceAdd);
		void SaveReleasedRecipes(TArray<struct FSBRecipeCondition> InReleasedRecipes);
		void RequestRankingRewardDataList();
		void Request_TakeApart(TArray<struct FSBStorageItemData> InStorageItemDatas);
		bool Request_SaveItemUse(const struct FSBStorageItemData& InStorageItemData);
		void Request_SaveItemsMove(TArray<struct FSBStorageItemData> InStorageItemData, int32_t ToStorageNo);
		void Request_SaveItemsDrop(TArray<struct FSBStorageItemData> InStorageItemData);
		bool Request_SaveItemMove(const struct FSBStorageItemData& InStorageItemData, int32_t ToStorageNo);
		void Request_SaveItemLock(TArray<struct FSBLockItemData> InLockItemData);
		bool Request_SaveItemDrop(const struct FSBStorageItemData& InStorageItemData);
		void Request_SaveItemBoxUse(const struct FSBStorageItemBoxData& InStorageItemData);
		void Request_ReleaseMovedItemList();
		void Request_MovedItemList();
		void Request_LevelIncreaseUse(const struct FSBStorageItemData& InStorageItemData);
		bool Request_GetStorageItemList(int32_t StorageNo);
		void Request_GetRestoreItems(int32_t Page);
		void Request_GetExpiredEquipmentDataGettedAtJoin();
		bool Request_GetBagItemList();
		void Request_ExpIncreaseUse(const struct FSBStorageItemData& InStorageItemData);
		void Request_ExpIncreasesUse(TArray<struct FSBStorageItemData> InStorageItemDatas);
		bool Request_ChangeCostumeData(class UObject* WorldContextObject, class USBEventScheduler* InEventScheduler, class USBColoringShopComponent* InColoringShopComp, TArray<struct FSBChangeCostumeData> InChangeCostumeDataArray, TArray<struct FSBStorageItemData> InUseStorageItemDataArray, TArray<struct FCharaEquipItemCharaCreateInfo> InChangeCostumeCharaCreateInfos);
		void Request_CancelActiveItem(const class FString& InId);
		void Request_AddItems(TArray<struct FSBAddItemData> InAddItemData, bool ForceAdd);
		void Request_AddItem(const struct FSBAddItemData& InAddItemData, bool ForceAdd);
		void OnSaveTakeApartDelegate__DelegateSignature(int32_t InRetCode, const struct FSBStorageItemBoxResultData& InItemBoxResultData);
		void OnSaveItemStorageDelegate__DelegateSignature(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems);
		void OnSaveItemLockDelegate__DelegateSignature(bool Result, TArray<struct FSBLockItemData> LockItemData, int32_t InRetCode);
		void OnSaveItemBoxStorageDelegate__DelegateSignature(int32_t InRetCode, const struct FSBStorageItemBoxResultData& InItemBoxResultData);
		void OnRep_ReleasedRecipesData();
		void OnGetStorageItemList(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas);
		void OnGetExpiredEquipmentDataGettedAtJoinDelegate__DelegateSignature(const struct FSBExpiredEquipmentData& InExpiredEquipmentData);
		void OnGetBagItemList(int32_t InRetCode, TArray<struct FOwnItemInfo> InItems, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas);
		void OnCompletedRankingRewardDataListDelegate__DelegateSignature(int32_t InRetCode, TArray<struct FSBRankingRewardData> RankingRewardDataList);
		void OnCompletedGetStorageItemList__DelegateSignature(bool bWasSuccessful, TArray<struct FOwnItemInfo> InDirtyItems, bool bInIsExpiredStickerWeapons, TArray<class FString> InExpiredStickerWeaponUniqueIds);
		void OnCompletedGetRestoreItems__DelegateSignature(int32_t RetCode, int32_t MaxPage, TArray<struct FOwnItemInfo> Items);
		void OnCompletedGetBagItemList__DelegateSignature(int32_t InRetCode, bool bInIsExpiredStickerWeapons, TArray<class FString> InExpiredStickerWeaponUniqueIds);
		void OnCompleted_MoveList__DelegateSignature(bool IsSuccessed);
		void OnChangeCostumeDataDelegate__DelegateSignature(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems);
		void OnCancelActiveItemDelegate__DelegateSignature(int32_t InRetCode, const class FString& InId);
		void OnAddItemDelegate__DelegateSignature(int32_t InRetCode, TArray<struct FSBDiffItemInfo> AddItemData, TArray<struct FSBMasterReward> OutRewardList, const struct FFieldActorPickupNotifyInfo& FieldActorPickupInfo);
		void OnActiveItemaUpdateDelegate__DelegateSignature();
		void ItemExpiryNotification(int32_t InItemID);
		bool IsThereExpiredEquipment(const struct FSBExpiredEquipmentData& InExpiredEquipmentData);
		bool IsRecastTime();
		bool IsActiveEfficacyType(EItemEfficacyType InEfficacyType);
		bool IsActiveCheerfulItem();
		float GetRemainingRecastTime();
		TArray<struct FSBRecipeCondition> GetReleasedRecipes();
		float GetRecastTimeMax();
		int32_t GetRecastItemIndex();
		void GetPrevPageRestoreItems();
		void GetNextPageRestoreItems();
		TArray<struct FSBActiveItemData> GetExpiryItems_BP();
		TArray<struct FSBActiveItemData> GetActiveItems_BP();
		void EmptyExpiryItems();
		int32_t ConvertStorageNumberEquipmentBagToInt32();
		void Client_UpdateExpiryItems(TArray<struct FSBActiveItemData> InExpiryItems);
		void Client_UpdateActiveItems(TArray<struct FSBActiveItemData> InDirtyItems);
		void Client_SaveTakeApart(int32_t InRetCode, const struct FSBStorageItemBoxResultData& InItemBoxResultData);
		void Client_SaveReleasedRecipes(TArray<struct FSBRecipeCondition> InReleasedRecipes, bool bImmediateNotification);
		void Client_SaveItemStorage(int32_t InRetCode, EStorageApiType InApiType, const struct FSBStorageItemAPIResponseData& InResponseData, const struct FSBRecastTimeInfo& NewRecastTime, bool InOpenCommandMenuFlag);
		void Client_SaveItemLock(int32_t InRetCode, TArray<struct FSBLockItemData> InLockItemData);
		void Client_SaveItemBoxStorage(int32_t InRetCode, const struct FSBStorageItemBoxResultData& InItemBoxResultData);
		void Client_Request_ReleaseMovedItemList();
		void Client_Request_MovedItemList(const struct FSBOwnItemListContainerData& IdentifiedData_Appraised, const struct FSBOwnItemListContainerData& IdentifiedData_Unidentified, const struct FSBOwnItemListContainerData& DeletedData_Appraised, const struct FSBOwnItemListContainerData& DeletedData_Unidentified, int32_t InSaleProfits);
		void Client_RankingRewardDataList(int32_t InRetCode, TArray<struct FSBRankingRewardData> InRankingRewardDataList);
		void Client_ParseStorageCapacity(int32_t Type, int32_t Capacity);
		void Client_OnCompleted_Restoreitems(int32_t RetCode, int32_t MaxPage, TArray<struct FOwnItemInfo> Items);
		void Client_OnCancelActiveItem(int32_t InRetCode, const class FString& InId, TArray<struct FOwnItemInfo> InResumeItems);
		void Client_GetExpiredEquipmentDataGettedAtJoin(const struct FSBExpiredEquipmentData& InExpiredEquipmentData);
		void Client_ChangeCostumeData(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems);
		void Client_AddItem(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems);
		void CallNotifyMessageReleasedRecipes();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerSuperArmorPassiveSkillInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPlayerSuperArmorPassiveSkillInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerTargetingComponent
	 * Size -> 0x0140 (FullSize[0x0210] - InheritedSize[0x00D0])
	 */
	class USBPlayerTargetingComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_FY7T[0x18];                                  // 0x00D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTargetingInfo                                      TargetingInfo;                                           // 0x00E8(0x0038) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D2ME[0x50];                                  // 0x0120(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          LockOnRangeInfoDataTable;                                // 0x0170(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QDIJ[0x98];                                  // 0x0178(0x0098) MISSED OFFSET (PADDING)

	public:
		void SetFrontFacing(bool InFrontFacing);
		void OnDelegated_UpdateAutoTargetSightFocus(bool bSightFocus);
		void OnDelegated_UpdateAutoTargetEnable(bool bEnable);
		bool IsTargetMulti();
		bool IsTargetLockOnSuspend();
		bool IsTargetLockOn();
		bool IsTargetAuto();
		bool IsEnableAutoTargetCursor();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerTransformCharacter
	 * Size -> 0x0070 (FullSize[0x05F0] - InheritedSize[0x0580])
	 */
	class ASBPlayerTransformCharacter : public AASCharacter
	{
	public:
		unsigned char                                              UnknownData_0QR2[0x28];                                  // 0x0580(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlendValueX;                                             // 0x05A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlendValueY;                                             // 0x05AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideJumpConsumeStamina;                             // 0x05B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bCalcJumpConsumeStaminaByMaxStaminaRate;                 // 0x05B1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QMTN[0x2];                                   // 0x05B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OverrideJumpConsumeStamina;                              // 0x05B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBActorVisibilityComponent*                         ActorVisibilityComponent;                                // 0x05B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBFootprintComponent*                               FootprintComponent;                                      // 0x05C0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5HZ4[0x28];                                  // 0x05C8(0x0028) MISSED OFFSET (PADDING)

	public:
		class USBPlayerMovementComponent* GetOwnerPlayerMovement();
		class ASBPlayerController* GetOwnerPlayerController();
		class ASBPlayerCharacter* GetOwnerPlayerCharacter();
		class UCharacterMovementComponent* GetOwnerCharacterMovement();
		class ASBCharacter* GetOwnerCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerTreasureBoxComponent
	 * Size -> 0x00F0 (FullSize[0x01A8] - InheritedSize[0x00B8])
	 */
	class USBPlayerTreasureBoxComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnAddDirectRewardItemDelegate;                           // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MRFX[0x78];                                  // 0x00C8(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           RequestTime;                                             // 0x0140(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsInitRelocationTreasureBox;                             // 0x0148(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MK7V[0x47];                                  // 0x0149(0x0047) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       IsAutoAllOpenTreasureBox;                                // 0x0190(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BETF[0x3];                                   // 0x0191(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   TreasureBoxNumFromEnemyDrop;                             // 0x0194(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HROU[0x8];                                   // 0x0198(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBFieldActorTreasureBox*                            FieldTreasureBoxActor;                                   // 0x01A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateRespawnRequestTime();
		void SpawnTreasureBox(int32_t TreasureId, ESBTreasureBoxRarity Rarity);
		void SpawnDestructibleObjectDrop(const class FString& ClassName, int32_t TreasureId, const struct FVector& SpawnLocation, int32_t MinMoney, int32_t MaxMoney, ESBTreasureBoxRewardType DropTreasureReward);
		void SimulateOpenTreasureBox(int32_t TreasureId, int32_t OpenCount);
		void ServerUpdateRespawnTime(const struct FSBTreasureBoxRespawnInfo& RespawnInfo);
		void ServerSpawnTreasureBox(const class FString& ClassName, int32_t TreasureBoxId, ESBTreasureBoxRarity Silver);
		void ServerSpawnDestructibleObjectDrop(const class FString& ClassName, int32_t TreasureBoxId, const struct FVector& SpawnLocation, int32_t MinMoney, int32_t MaxMoney, ESBTreasureBoxRewardType DropTreasureReward);
		void ServerSimulateOpenTreasureBox(int32_t TreasureBoxId, int32_t OpenCount);
		void ServerSetAutoAllOpenTreasureBoxFlag(bool SetFlag);
		void ServerOpenTreasureBox(const class FString& ObjectId, bool InIsRequestAutoOpen);
		void ServerForceSpawnRandomTreasureBox();
		void ServerDirectTreasureBox(const class FString& Tag, int32_t TreasureBoxId, ESBTreasureBoxRarity TreasureBoxRarity, int32_t MinMoney, int32_t MaxMoney);
		void RequestSetAutoAllOpenTreasureBoxFlag(bool SetFlag);
		void OnAddMoneyFinished(bool Result, int32_t AddMoney);
		void OnAddItemFinishedByDB(int32_t InRetCode, TArray<struct FSBDiffItemInfo> AddItemDatas, const struct FFieldActorPickupNotifyInfo& FieldActorPickupInfo);
		void OnAddItemFinished(int32_t InRetCode, TArray<struct FSBDiffItemInfo> AddItemData, TArray<struct FSBMasterReward> OutRewardList, const struct FFieldActorPickupNotifyInfo& FieldActorPickupInfo);
		void OnAddDirectRewardItemDelegate__DelegateSignature(int32_t InRetCode, TArray<struct FSBDiffItemInfo> AddItemData, TArray<struct FSBMasterReward> OutRewardList, const struct FFieldActorPickupNotifyInfo& FieldActorPickupInfo);
		bool GetIsAutoAllOpenTreasureBox();
		void ForceSpawnRandomTreasureBox();
		void ForceOpenGetTreasureBox();
		void DestroyTreasureBoxByEnemyDrop();
		void DebugDrawTreasureBoxInfo(bool bEnable, int32_t nCategory);
		void ClientSimulateOpenTreasureBox(ESBTreasureBoxLotResult Result, int32_t TreasureBoxId, TArray<struct FSBTreasureBoxLotSimulateResult> Results);
		void ClientSetAutoAllOpenTreasureBoxFlag(bool SetFlag);
		void ClientRelocationTreasureBox(TArray<struct FSBTreasureBoxEntryInfo> ObjectIds, int32_t TreasureSpotNum, int32_t TreasureSpotNum2, ESBTreasureBoxRewardType DropTreasureReward, uint32_t TreasureBoxNum);
		void ClientOpenTreasureBox(ESBTreasureBoxLotResult Result, const class FString& ObjectId, TArray<struct FSBTreasureBoxLotResult> LotResults, const class FString& Tag, int32_t RetCode, const struct FFieldActorPickupNotifyInfo& FieldActorPickupInfo, bool IsAutoOpening, uint32_t TreasureBoxNum, bool InIsRequestAutoOpen);
		void ClientNotifyMessage(const class FString& Message, const class FString& TreasureBoxTag, int32_t TreasureId);
		void ClientNotifyAutoAllOpenTreasureBoxFinished();
		void ClientDestroyTreasureBox();
		void ClientAutoAllOpenTreasureBoxByEnemyDrop(TArray<class FString> ObjectIds, int32_t CheckTreasureBoxNum);
		void AutoAllOpenTreasureBoxByEnemyDrop();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerUIComponent
	 * Size -> 0x0008 (FullSize[0x0210] - InheritedSize[0x0208])
	 */
	class USBPlayerUIComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_5FJS[0x8];                                   // 0x0208(0x0008) Fix Super Size

	public:
		void SetEndEscapeConfirmation(bool IsEnd);
		void Server_RaidBattleGateStatusPut(const class FString& GateName);
		void NotifyCastSkill(ESkillActionPosition InSkillPosition);
		void EndRespawnMenu();
		void DebugPlayGashaSpecialCut(ESBRarity InDemoRarity, ESBRarity InActualRarity);
		void DebugPlayGashaDemo(const struct FSBGashaResultData& InResultData, bool bInSkip);
		void Client_RaidBattleGateStatusPut(bool Hit, const class FString& GateName, const class FString& ServerDungeonId, const class FString& ServerTermId, bool IsInitialize);
		void BP_UpdateRespawnGauge();
		void BP_ShowSerialKillMessage(int32_t InKillCount);
		void BP_ShowRespawnBattleArea();
		void BP_ShowRespawn(float RespawnTime);
		void BP_ShowKillMessage(class AActor* InOtherActor);
		void BP_ShowKillMark();
		void BP_ShowJankenWindow();
		void BP_ShowCombo(int32_t InComboNum);
		void BP_EscapeConfirmation();
		void BP_DisableRespawn();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerVirtualDateTimeComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBPlayerVirtualDateTimeComponent : public UActorComponent
	{
	public:
		ESBEventTermVirtualDateType                                Type;                                                    // 0x00B8(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_B095[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           NowTime;                                                 // 0x00C0(0x0008) Net, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FDateTime                                           StartTime;                                               // 0x00C8(0x0008) Net, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		ESBEventTermVirtualDateType GetType();
		struct FDateTime GetStartTime();
		int32_t GetParam(ESBVirtualDateTimeParam Param);
		struct FDateTime GetNowTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerWarpComponent
	 * Size -> 0x02D8 (FullSize[0x03A8] - InheritedSize[0x00D0])
	 */
	class USBPlayerWarpComponent : public USBPlayerActorComponent
	{
	public:
		unsigned char                                              UnknownData_SLPR[0x8];                                   // 0x00D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultWarpLoopMotionTime;                               // 0x00D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultWarpStartToFadeOutTime;                           // 0x00DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         WarpInCameraDistanceCurve;                               // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        WarpInCameraLocationCurve;                               // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        WarpInCameraRotationCurve;                               // 0x00F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WarpInCameraFadeInTime;                                  // 0x00F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WarpInCameraFadeInDelayTime;                             // 0x00FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WarpInCameraEndBlendDurationTIme;                        // 0x0100(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LGA2[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         WarpOutCameraDistanceCurve;                              // 0x0108(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        WarpOutCameraLocationCurve;                              // 0x0110(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        WarpOutCameraRotationCurve;                              // 0x0118(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WarpOutCameraFadeOutTime;                                // 0x0120(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WarpOutCameraFadeOutDelayTime;                           // 0x0124(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WarpOutDisappearEffectDelayTime;                         // 0x0128(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AVCT[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         CityExitCameraDistanceCurve;                             // 0x0130(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        CityExitCameraLocationCurve;                             // 0x0138(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        CityExitCameraRotationCurve;                             // 0x0140(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CityExitCameraFadeOutTime;                               // 0x0148(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CityExitCameraFadeOutDelayTime;                          // 0x014C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CityExitCameraFadeInTime;                                // 0x0150(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CityExitCameraFadeInDelayTime;                           // 0x0154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FieldSheatheCameraFadeOutTime;                           // 0x0158(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1E25[0x4];                                   // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         CityEnterCameraDistanceCurve;                            // 0x0160(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        CityEnterCameraLocationCurve;                            // 0x0168(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveVector*                                        CityEnterCameraRotationCurve;                            // 0x0170(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CityEnterCameraFadeInTime;                               // 0x0178(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CityEnterCameraFadeInDelayTime;                          // 0x017C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CityEnterCameraEndBlendDurationTIme;                     // 0x0180(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LocalWarpInEffectDelayTime;                              // 0x0184(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LocalWarpInCanInputDelayTime;                            // 0x0188(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LoginCameraFadeInTime;                                   // 0x018C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LoginCameraFadeInDelayTime;                              // 0x0190(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LogoutCameraFadeOutTime;                                 // 0x0194(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LogoutCameraFadeOutDelayTime;                            // 0x0198(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LocalWarpEffectSimpleTimeScale;                          // 0x019C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WorldWarpWaitTime;                                       // 0x01A0(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WarpLoopMotionTime;                                      // 0x01A4(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WarpStartToFadeOutTime;                                  // 0x01A8(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KMXI[0x1C];                                  // 0x01AC(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBPlayingEffect                                    m_WarpShowEffect;                                        // 0x01C8(0x00C8) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VCNJ[0xF8];                                  // 0x0290(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLocalWarpEndDelegate;                                  // 0x0388(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWarpFailedDelegate;                                    // 0x0398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void ShowCountDownUI();
		void SetUIVisibilityByWarpAroundEffect(bool bIsVisible);
		void SetPlayerGodModeByWarpAroundEffect(bool bIsModeActive, bool bReverberation);
		void SetCannotInputByWarpAroundEffect(bool bIsCannotInput);
		void ServerNotifyRequestWarp(int64_t startGameTime, float WarpWaitTime);
		void ServerNotifyCancelWarp(bool bForceCancel);
		void ResetWarpFlags(class ASBPlayerController* PlayerController);
		bool RequestWarpDisapearFlagSet(bool Sw, float DelayTime);
		bool RequestWarp(const class FName& InDestWarpPointId, int32_t InPassageCost, class ASBFieldActorWarpPoint* WarpPoint);
		bool RequestTravelToOnlinePlayerSessionByWarpType(ESBPlayerWarpType InWarpType);
		bool RequestTravelToOnlinePlayerSessionByFriendCharacterId(const class FString& FriendCharacterId, ESBPlayerWarpType InWarpType);
		bool RequestTravelToOnlinePlayerSession();
		bool RequestLocalWarpToLocation(const struct FVector& ToWarpLocation, const struct FRotator& ToWarpRotation, const struct FRotator& AfterCameraRotation, float AppearRandomDistanceX, float AppearRandomDistanceY, bool bShowCountDown, bool bNoWarpAroundEffect, bool bWarpEffectSimple, class ASBFieldActorWarpPoint* WarpPoint);
		bool RequestFieldTravelFullStatus(const class FName& InTravelFieldId, const class FString& InTravelMapName, const class FString& InTravelPortal, bool InIsKeepLocationTravel, bool InIsSpawnEffect, bool InIsDisappearEffect, bool InIsCityEntrance, const struct FVector& InDemoTargetLocation, const struct FVector& InTravelFailedReturnLocation);
		bool RequestFieldTravel(class ASBFieldTravelTrigger* FieldTravelTrigger);
		bool RequestDungeonResultWarp();
		void OnWarpFailedDelegate__DelegateSignature();
		void OnLocalWarpEndDelegate__DelegateSignature();
		void MovedWarpEffectAction();
		bool IsWaitTimeDone();
		bool IsCountDownUICancelPressed();
		void HideCountDownUI();
		unsigned char GetWarpState();
		bool GetWarpCancelFlag();
		bool GetTravelWarpFlag();
		float GetRemainWarpWaitTime();
		bool GetLocalWarpFlag();
		void FieldTravelFailedAfterProcess();
		void FadeInOutByWarpAroundEffect(float FadeInOutTime, bool bIsFadeIn);
		void EndLoadCompletePlayerToVillageFunction();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerWarpPointComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBPlayerWarpPointComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnChangedDataDelegate;                                   // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E9XP[0x30];                                  // 0x00C8(0x0030) MISSED OFFSET (PADDING)

	public:
		void ServerAddActivate(const class FString& WarpPointId, bool bRemove);
		void ServerActivateWarpPoint(class ASBFieldActorWarpPoint* WarpPoint);
		bool RequestAddActivate(const class FName& WarpPointId);
		void OnChangedDataDelegate__DelegateSignature();
		bool IsActivatedWarpPoint(const class FName& WarpPointId);
		bool IsActivatedMap(const class FName& ZoneId);
		void GetWarpPoints(TArray<class FName>* OutArray);
		void Client_OnSaveWarpPointComplete(TArray<class FName> InActivates, bool bInWasSuccessful);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerWeaponComponent
	 * Size -> 0x0048 (FullSize[0x0100] - InheritedSize[0x00B8])
	 */
	class USBPlayerWeaponComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUseAppearanceWeaponStickerDelegate;                    // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRemoveAppearanceWeaponStickerDelegate;                 // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class FString>                                      RepExpiredStickerWeaponUniqueIdInfos;                    // 0x00D8(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EPJK[0x18];                                  // 0x00E8(0x0018) MISSED OFFSET (PADDING)

	public:
		void Server_UseAppearanceWeaponSticker(const class FString& InWeaponUniqueId, const class FString& InStickerUniqueId, bool InIsUsingToEquippedWeapon);
		void Server_RemoveAppearanceWeaponSticker(const class FString& InWeaponUniqueId, const class FString& InRemoveItemUniqueId, bool InIsUsingRemoveItem, bool InIsRemovingFromEquippedWeapon);
		void Server_OnUseAppearanceWeaponSticker(int32_t InRetCode, const class FString& InDirtyStickerUsedWeaponUniqueId, const struct FSBWeaponItemData& InDirtyStickerUsedWeaponItemData, TArray<struct FOwnItemInfo> InDirtyUsedItemInfos, TArray<struct FOwnItemInfo> InExpiredItemInfos, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, bool InIsUsingToEquippedWeapon);
		void Server_OnRemoveAppearanceWeaponSticker(int32_t InRetCode, const class FString& InDirtyStickerUsedWeaponUniqueId, const struct FSBWeaponItemData& InDirtyStickerRemovedWeaponItemData, TArray<struct FOwnItemInfo> InDirtyUsedItemInfos, TArray<struct FOwnItemInfo> InDirtyAddedItemInfos, TArray<struct FOwnItemInfo> InExpiredItemInfos, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, bool InIsRemovingFromEquippedWeapon);
		void Request_UseAppearanceWeaponSticker(const class FString& InWeaponUniqueId, const class FString& InStickerUniqueId, bool InIsUsingToEquippedWeapon);
		void Request_RemoveAppearanceWeaponSticker(const class FString& InWeaponUniqueId, const class FString& InRemoveItemUniqueId, bool InIsUsingRemoveItem, bool InIsRemovingFromEquippedWeapon);
		void OnUseAppearanceWeaponStickerDelegate__DelegateSignature(int32_t InRetCode, const class FString& InStickerUsedWeaponUniqueId, bool InIsExpiredStickerWeapons, TArray<class FString> InExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InExpiredStickerWeaponItemDatas);
		void OnRep_ExpiredStickerWeaponUniqueIdInfos();
		void OnRemoveAppearanceWeaponStickerDelegate__DelegateSignature(int32_t InRetCode, const class FString& InStickerRemovedWeaponUniqueId, bool InIsExpiredStickerWeapons, TArray<class FString> InExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InExpiredStickerWeaponItemDatas);
		TArray<class FString> GetExpiredWeaponStickerInfosGettedAtJoin();
		void Client_OnUseAppearanceWeaponSticker(int32_t InRetCode, const class FString& InDirtyStickerUsedWeaponUniqueId, const struct FSBWeaponItemData& InDirtyStickerUsedWeaponItemData, TArray<struct FOwnItemInfo> InDirtyUsedItemInfos, TArray<struct FOwnItemInfo> InExpiredItemInfos, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, bool InIsUsingToEquippedWeapon);
		void Client_OnRemoveAppearanceWeaponSticker(int32_t InRetCode, const class FString& InDirtyStickerRemovedWeaponUniqueId, const struct FSBWeaponItemData& InDirtyStickerRemovedWeaponItemData, TArray<struct FOwnItemInfo> InDirtyUsedItemInfos, TArray<struct FOwnItemInfo> InDirtyAddedItemInfos, TArray<struct FOwnItemInfo> InExpiredItemInfos, TArray<class FString> InDirtyExpiredStickerWeaponUniqueIds, TArray<struct FSBWeaponItemData> InDirtyExpiredStickerWeaponItemDatas, bool InIsRemovingFromEquippedWeapon);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerWeaponEnhancementComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBPlayerWeaponEnhancementComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             WeaponMergeCallback;                                     // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             WeaponPerkSlotUnlockCallback;                            // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             WeaponAbilityRemovedCallback;                            // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             WeaponTuningCallback;                                    // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             AbilityBuildupCallback;                                  // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate

	public:
		void Server_WeaponTuning(class ASBPlayerController* InPlayerController, const class FString& WeaponUID, int32_t TuningTokenID, int32_t ProtectTokenID, TArray<int32_t> Slots);
		void Server_WeaponAbilityRemove(class ASBPlayerController* InPlayerController, const class FString& WeaponUID, int32_t TokenID, TArray<int32_t> Slots);
		void Server_UnlockWeaponPerkSlot(class ASBPlayerController* InPlayerController, const class FString& WeaponUID, int32_t TokenID);
		void Server_FusionWeapon(class ASBPlayerController* InPlayerController, const class FString& WeaponUID, TArray<int32_t> FusionItemIds);
		void Server_AbilityBuildup(class ASBPlayerController* InPlayerController, const class FString& WeaponUID, int32_t TokenID);
		void Request_WeaponTuning(const class FString& WeaponUID, int32_t TuningTokenID, int32_t ProtectTokenID, TArray<int32_t> Slots);
		void Request_WeaponAbilitryRemove(const class FString& WeaponUID, int32_t TokenID, TArray<int32_t> Slots);
		void Request_UnlockWeaponPerkSlot(const class FString& WeaponUID, int32_t TokenID);
		void Request_FusionWeapon(const class FString& WeaponUID, TArray<int32_t> FusionItemIds);
		void Request_AbilityBuildup(const class FString& WeaponUID, int32_t TokenID);
		void OnFinished_WeaponCustom__DelegateSignature(int32_t ErrorCode, bool bWasSuccessful, const struct FOwnItemInfo& Info);
		bool IsLoadedMasterFusionCost();
		struct FSBFusionTicketMasterData GetTickets(ESBFusionTicketType Type, int32_t WeaponLevel);
		struct FSBFusionCostMasterData GetCost(int32_t Level);
		void Client_OnFinished_WeaponTuning(int32_t RetCode, bool bWasSuccessful, const struct FOwnItemInfo& Weapon, TArray<struct FSBCharacterToken> Tokens);
		void Client_OnFinished_WeaponPerkSlotUnlock(int32_t RetCode, bool bWasSuccessful, const struct FOwnItemInfo& Weapon, TArray<struct FSBCharacterToken> Token);
		void Client_OnFinished_WeaponAbilityRemove(int32_t RetCode, bool bWasSuccessful, const struct FOwnItemInfo& Weapon, TArray<struct FOwnItemInfo> RecycleItems, TArray<struct FSBCharacterToken> Tokens);
		void Client_OnFinished_FusionWeapon(int32_t ErrorCode, bool bWasSuccessful, const struct FOwnItemInfo& Weapon, TArray<struct FOwnItemInfo> Items, int32_t Money);
		void Client_OnFinished_AbilityBuildup(int32_t RetCode, bool bWasSuccessful, const struct FOwnItemInfo& Weapon, TArray<struct FSBCharacterToken> Tokens);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlaylog
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBPlaylog : public UObject
	{
	public:
		unsigned char                                              UnknownData_Y3JL[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayRateTransmission
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class USBPlayRateTransmission : public UObject
	{
	public:
		unsigned char                                              UnknownData_JVOS[0xB0];                                  // 0x0028(0x00B0) MISSED OFFSET (PADDING)

	public:
		float UpdateCurrent(float InDeltaTime);
		bool SwitchTarget(ESBPlayRateSwitch InTarget);
		bool SetVariableTarget(float InVariableTarget);
		void SetStateTarget(const class FString& InState, ESBPlayRateSwitch InTarget, float InAnimRate);
		bool SetAcceleration(float InAcceleration);
		bool IsVariableTarget();
		bool Initialize(float InCurrent, float InVariableTarget, bool InEnableVariable, float InAcceleration);
		float GetVariableTarget();
		float GetTarget();
		float GetCurrent();
		float GetAcceleration();
		bool EnableVariableTarget(bool InVariable);
		bool ChangeState(const class FString& InState);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPoolableActorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBPoolableActorInterface : public UInterface
	{
	public:
		void NotifyDeactivated();
		void NotifyActivated();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPostProcessChecker
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBPostProcessChecker : public AActor
	{
	public:
		TArray<class APostProcessVolume*>                          PostProcessVolumes;                                      // 0x0228(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void InitPostProcessVolumeList();
		class UTexture* GetPostProcessColorGradingLUT(const struct FPostProcessSettings& Settings, float* ColorGradingIntensity);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProfileBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProfileBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class USBProfilePlayerState* GetProfilePlayerState(class UObject* WorldContextObject, const class FString& CharacterId);
		bool GetProfileMenuData(class UObject* WorldContextObject, const class FString& CharacterId, struct FPlayerProfileMenuDetailData* OutData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProfileManager
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USBProfileManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_SX4W[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (PADDING)

	public:
		class USBProfilePlayerState* GetProfilePlayerState(const class FString& InCharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProfilePlayerState
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class USBProfilePlayerState : public UObject
	{
	public:
		unsigned char                                              UnknownData_BVJR[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FUniqueNetIdRepl                                    UniqueId;                                                // 0x0030(0x0028) Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RGR0[0x50];                                  // 0x0058(0x0050) MISSED OFFSET (PADDING)

	public:
		bool IsActive();
		bool HasOnlineStatus(ESBOnlineStatus InOnlineStatus);
		class FString GetZoneId();
		bool GetProfileMenuDataForBP(struct FPlayerProfileMenuDetailData* OutData);
		ESBTensionTagType GetMoodIconId();
		class FText GetDisplayName();
		bool CanJump();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileBase
	 * Size -> 0x00C8 (FullSize[0x02F0] - InheritedSize[0x0228])
	 */
	class ASBProjectileBase : public AActor
	{
	public:
		unsigned char                                              UnknownData_55AP[0x88];                                  // 0x0228(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBProjectileParamComponent*                         ParamComp;                                               // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileDestroyConditionComponent*              DestroyCondComp;                                         // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileAttachToActorComponent*                 AttachToActorComp;                                       // 0x02C0(0x0008) Edit, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileHitChainComponent*                      HitChainComp;                                            // 0x02C8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBTargetableComponent*                              TargetableComp;                                          // 0x02D0(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBNamePlateComponent2D*                             NamePlateComp;                                           // 0x02D8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileHealthConditionComponent*               HealthCondComp;                                          // 0x02E0(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              SpawnerMesh;                                             // 0x02E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetTargetableMode(bool InIsTargetable);
		void RequestSpawnProjectileAsChainLaunch(const struct FDataTableRowHandle& SpawnProjectileHandle, const struct FTransform& SpawnTrans, class USceneComponent* OverrideTargetComp, class AActor* IgnoreHitActor);
		void RegisterSpawnerMesh(class USkeletalMeshComponent* InSpawnerMesh);
		void PlaySound(class UAkAudioEvent* Event);
		void OnProjectileEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
		void NotifyOrderedChainHit();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRangedProjectile
	 * Size -> 0x0208 (FullSize[0x04F8] - InheritedSize[0x02F0])
	 */
	class ASBRangedProjectile : public ASBProjectileBase
	{
	public:
		unsigned char                                              UnknownData_8RHS[0x1A0];                                 // 0x02F0(0x01A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     CachedHitComponent;                                      // 0x0490(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6O82[0x4];                                   // 0x0498(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ChainMovementIndex;                                      // 0x049C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R7SW[0x1C];                                  // 0x04A0(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsInstigatorPlayer : 1;                                 // 0x04BC(0x0001) BIT_FIELD Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y0Z1[0x3];                                   // 0x04BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UShapeComponent*                                     GroundCollisionComp;                                     // 0x04C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileCollisionComponent*                     CollisionComp;                                           // 0x04C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileAttackParamComponent*                   AttackParamComp;                                         // 0x04D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileEffectComponent*                        EffectComp;                                              // 0x04D8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileMeshControllComponent*                  MeshControllComp;                                        // 0x04E0(0x0008) Edit, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileAttachToActorOnHitComponent*            AttachHitComp;                                           // 0x04E8(0x0008) Edit, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileSummonImagineComponent*                 SummonImagineComp;                                       // 0x04F0(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetTakeoverAttackInfo(const struct FSBAttackID& AttackID);
		void ServerTakeDamage(const struct FSBDamageEvent& SBDamageEvent, class AController* EventInstigator, class AActor* DamageSrc);
		void ProjectileNotifySendTakeDamageOnServer(const struct FSBDamageEvent& InDamageEvent, class AActor* InOtherActor);
		void ProjectileNotifyOnGroundtHit(class USceneComponent* InHitSelfComponent, class AActor* InOtherActor, class UPrimitiveComponent* InOtherComponent, const struct FVector& InNormalImpulse);
		void ProjectileNotifyOnBeginOverlapToOtherActor(class USceneComponent* InHitCauserComp, class AActor* InCauserActor, class UPrimitiveComponent* InHitSelfComp);
		void ProjectileNotifyOnBeginOverlap(class USceneComponent* InHitSelfComp, class AActor* InOtherActor, class UPrimitiveComponent* InOtherComp);
		void ProjectileNotifyOnAttackHit(class USceneComponent* InHitSelfComponent, class AActor* InOtherActor, class UPrimitiveComponent* InOtherComponent, const struct FVector& InHitCheckPoint);
		void MulticastTakeDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageSrc);
		struct FVector GetTargetPosition();
		class USceneComponent* GetTargetComp();
		class FName GetNowMovementLabel();
		class USBProjectileMeshControllComponent* GetMeshControllComponent();
		struct FVector GetAttackCollisionScale();
		struct FVector GetAttackCollision(struct FVector* Center, struct FVector* CenterOffset);
		bool ChangeMovementToNext();
		bool ChangeMovementByLabel(const class FName& InChangeLabel);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectile_AlongGround
	 * Size -> 0x0008 (FullSize[0x0500] - InheritedSize[0x04F8])
	 */
	class ASBProjectile_AlongGround : public ASBRangedProjectile
	{
	public:
		class USBProjectileMovementBaseComponent*                  MoveComp;                                                // 0x04F8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectile_Beam
	 * Size -> 0x0030 (FullSize[0x0528] - InheritedSize[0x04F8])
	 */
	class ASBProjectile_Beam : public ASBRangedProjectile
	{
	public:
		class USBProjectileBeamComponent*                          BeamComp;                                                // 0x04F8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileTrailImpactComponent*                   TrailImpactComp;                                         // 0x0500(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileBeamImpactComponent*                    BeamImpactComp;                                          // 0x0508(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBLineSoundComponent*                               LineSoundComp;                                           // 0x0510(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZED1[0x10];                                  // 0x0518(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnSbProjectileConfigRep();
		struct FVector GetBeamStartPos();
		struct FVector GetBeamEndPos();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectile_Custom
	 * Size -> 0x0008 (FullSize[0x0500] - InheritedSize[0x04F8])
	 */
	class ASBProjectile_Custom : public ASBRangedProjectile
	{
	public:
		class USBProjectileMovementBaseComponent*                  MoveComp;                                                // 0x04F8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetMovementComponentBP(class USBProjectileMovementBaseComponent* comp);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectile_Fix
	 * Size -> 0x0000 (FullSize[0x04F8] - InheritedSize[0x04F8])
	 */
	class ASBProjectile_Fix : public ASBRangedProjectile
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectile_Parabola
	 * Size -> 0x0008 (FullSize[0x0500] - InheritedSize[0x04F8])
	 */
	class ASBProjectile_Parabola : public ASBRangedProjectile
	{
	public:
		class USBProjectileMovementBaseComponent*                  MoveComp;                                                // 0x04F8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectile_Straight
	 * Size -> 0x0008 (FullSize[0x0500] - InheritedSize[0x04F8])
	 */
	class ASBProjectile_Straight : public ASBRangedProjectile
	{
	public:
		class USBProjectileMovementBaseComponent*                  MoveComp;                                                // 0x04F8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectile_StraightBox
	 * Size -> 0x0000 (FullSize[0x0500] - InheritedSize[0x0500])
	 */
	class ASBProjectile_StraightBox : public ASBProjectile_Straight
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileActSpawnComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBProjectileActSpawnComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_58DQ[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (PADDING)

	public:
		void SpawnProjectile(const struct FSBProjectileSelectHandle& ProjectileHandle);
		void Setup(float InStartDelay, float InEndDelay, const struct FSBProjectileSelectHandle& InHandle);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileRapidComponent
	 * Size -> 0x0088 (FullSize[0x0140] - InheritedSize[0x00B8])
	 */
	class USBProjectileRapidComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_0CUA[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBProjectileSelectHandle                           RapidProjectileSelectHandle;                             // 0x00D8(0x0018) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FProjectileRapidParam                               RapidParam;                                              // 0x00F0(0x0038) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WHOV[0x18];                                  // 0x0128(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileAreaAttackComponent
	 * Size -> 0x0020 (FullSize[0x0160] - InheritedSize[0x0140])
	 */
	class USBProjectileAreaAttackComponent : public USBProjectileRapidComponent
	{
	public:
		float                                                      EffectiveRadius;                                         // 0x0140(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EProjectileAreaAttackSpawnOrder                            Order;                                                   // 0x0144(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EMH1[0x3];                                   // 0x0145(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsUpperSphere : 1;                                      // 0x0148(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAdjustGround : 1;                                     // 0x0148(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XC4W[0x17];                                  // 0x0149(0x0017) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileAssetLoader
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBProjectileAssetLoader : public UActorComponent
	{
	public:
		TArray<struct FSBProjectileMasterInfo>                     ProjectileBuildResource;                                 // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FCDV[0x10];                                  // 0x00C8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileAttachInfoInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileAttachInfoInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileAttachToActorBaseComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBProjectileAttachToActorBaseComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_D5W3[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FProjectileAttachInfo                               AtachInfo;                                               // 0x00C8(0x0040) BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileAttachToActorOnHitComponent
	 * Size -> 0x0000 (FullSize[0x0108] - InheritedSize[0x0108])
	 */
	class USBProjectileAttachToActorOnHitComponent : public USBProjectileAttachToActorBaseComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileAttachToActorComponent
	 * Size -> 0x0000 (FullSize[0x0108] - InheritedSize[0x0108])
	 */
	class USBProjectileAttachToActorComponent : public USBProjectileAttachToActorBaseComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileAttackCollisionInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileAttackCollisionInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileAttackParamComponent
	 * Size -> 0x0090 (FullSize[0x0148] - InheritedSize[0x00B8])
	 */
	class USBProjectileAttackParamComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_WUG4[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class USceneComponent>>              TargetCompList;                                          // 0x00D0(0x0010) ExportObject, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate
		struct FVector_NetQuantize                                 TargetPoint;                                             // 0x00E0(0x000C) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bValidTargetPoint : 1;                                   // 0x00EC(0x0001) BIT_FIELD Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_73X5[0x3];                                   // 0x00ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector_NetQuantize                                 TargetVectorOnSpawn;                                     // 0x00F0(0x000C) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      Speed;                                                   // 0x00FC(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector_NetQuantizeNormal                           Direction;                                               // 0x0100(0x000C) Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PenetrateObstacleTime;                                   // 0x010C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      IgnoreHitActorList;                                      // 0x0110(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		struct FVector_NetQuantize                                 ReplicatedVelocity;                                      // 0x0120(0x000C) Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0TH8[0x10];                                  // 0x012C(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RequestServerOnlyFixDamage;                              // 0x013C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RequestServerOnlyRateDamage;                             // 0x0140(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      InitCollisionScale;                                      // 0x0144(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateTargetInfoSetFromInstigator();
		void OnRep_TargetPoint();
		void OnRep_TargetableComp();
		void OnRep_Speed();
		void OnRep_Direction();
		struct FVector GetInitialDirection();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileBDFObjectComponent
	 * Size -> 0x0060 (FullSize[0x0118] - InheritedSize[0x00B8])
	 */
	class USBProjectileBDFObjectComponent : public UActorComponent
	{
	public:
		TMap<ESBProjectileBDFRotType, struct FSBProjectileSelectHandle> BDFProjectileHandleList;                                 // 0x00B8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2SBN[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (PADDING)

	public:
		bool SpawnProjectileHandle(const struct FSBProjectileSelectHandle& ProjectileHandle);
		bool SpawnChainBeamProjectile(ESBProjectileBDFRotType RotType);
		bool OwnerHasAuthority();
		void Multicast_SwitchMesh();
		void Multicast_Initialize(ESBBDFObjectType ObjType);
		void Multicast_Detach();
		void Multicast_Destroy();
		void Multicast_Dead();
		void Multicast_Collect();
		void Multicast_Attach(const class FString& SocketName);
		void EndOverlap(class AActor* OverlapActor);
		void DestroyChainBeamProjectile();
		void BP_SwitchMesh();
		void BP_Initialize(ESBBDFObjectType ObjType);
		void BP_Detach();
		void BP_Destroy();
		void BP_Dead();
		void BP_Collect();
		void BP_Attach(const class FString& SocketName);
		void BeginOverlap(class AActor* OverlapActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileCollisionComponent
	 * Size -> 0x0108 (FullSize[0x0310] - InheritedSize[0x0208])
	 */
	class USBProjectileCollisionComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_3GWN[0x8];                                   // 0x0208(0x0008) Fix Super Size
		unsigned char                                              UnknownData_Y2PK[0x40];                                  // 0x0210(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FValidHitOverlapActorInfo>                   ValidHitOverlapActorInfoList;                            // 0x0250(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      ReserveRemoveValidHitOverlapActorInfoList;               // 0x0260(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VIPN[0x18];                                  // 0x0270(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPrimitiveComponent*>                         CollisionList;                                           // 0x0288(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LAGL[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlockingCollisionActor                             BlockingCollisionInfo;                                   // 0x02A0(0x0004) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7S7A[0xC];                                   // 0x02A4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCollisionHitSettingExtended                        CacheCollisionHitSettingExtended;                        // 0x02B0(0x0030) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FCollisionOnOffData>                         CacheCollisionOnOffDataList;                             // 0x02E0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		struct FVector                                             ScaleVector;                                             // 0x02F0(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ScaleVectorFromZero : 1;                                 // 0x02FC(0x0001) BIT_FIELD Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TL0Y[0x3];                                   // 0x02FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveBase*                                          ScaleCurve;                                              // 0x0300(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsInheritanceInstigatorScale : 1;                       // 0x0308(0x0001) BIT_FIELD Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IGYJ[0x7];                                   // 0x0309(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetCollisionEnableMode(ESBProjectileCollisionSpecificGroup SpecificGroup, bool bEnable);
		void OnAttackEndOverlap(class USceneComponent* HitSelfComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnAttackBeginOverlap(class USceneComponent* HitSelfComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		int32_t GetHitNum();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileBeamCollisionComponent
	 * Size -> 0x0040 (FullSize[0x0350] - InheritedSize[0x0310])
	 */
	class USBProjectileBeamCollisionComponent : public USBProjectileCollisionComponent
	{
	public:
		unsigned char                                              UnknownData_LSSP[0x40];                                  // 0x0310(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileBeamComponent
	 * Size -> 0x00A0 (FullSize[0x0158] - InheritedSize[0x00B8])
	 */
	class USBProjectileBeamComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KYZN[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ConfigBeamMainParticle[0x28];                            // 0x0108(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              ConfigBeamEndParticle[0x28];                             // 0x0130(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileBeamImpactComponent
	 * Size -> 0x0040 (FullSize[0x0180] - InheritedSize[0x0140])
	 */
	class USBProjectileBeamImpactComponent : public USBProjectileRapidComponent
	{
	public:
		unsigned char                                              UnknownData_H72M[0x40];                                  // 0x0140(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileBoxComponent
	 * Size -> 0x0030 (FullSize[0x04C0] - InheritedSize[0x0490])
	 */
	class USBProjectileBoxComponent : public UBoxComponent
	{
	public:
		unsigned char                                              UnknownData_WRZN[0x30];                                  // 0x0490(0x0030) MISSED OFFSET (PADDING)

	public:
		void OnAttackEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnAttackBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileBPFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileBPFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool SpawnProjectileProfessional(class AActor* ExecActor, const struct FDataTableRowHandle& Handle, const class FName& UniqueName, class AActor* OwnerActor, class APawn* InstigatorPawn, class AActor* Spawner, bool bManage);
		bool SpawnProjectileDefOnSpawnerOffsetPos(class APawn* InstigatorPawn, const struct FDataTableRowHandle& Handle, class AActor* Spawner, const struct FVector& InOffsetPos);
		bool SpawnProjectileDefOnSpawner(class APawn* InstigatorPawn, const struct FDataTableRowHandle& Handle, class AActor* Spawner);
		bool SpawnEmitterAttachByEffectID(class AActor* ExecActor, EEffectId ID, class USceneComponent* AttachComp, ESBEffectVisibleType VisibleType, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, float ScaleValue, EAttachLocation LocationType, bool bAutoDestroy);
		bool RequestSpawnProjectileOrderedBySystem(class AActor* ExecActor, class AActor* OwnerPawn, class APawn* InstigatorPawn, const struct FDataTableRowHandle& Handle, class AActor* Spawner);
		int32_t GetProjectileActiveListNumALL(class ASBCharacter* InProjectileInstigator);
		int32_t GetProjectileActiveListNum(const struct FDataTableRowHandle& InProjectileHandle, class ASBCharacter* InProjectileInstigator);
		void EditorLoadSyncProjectileBuildResource(class UDataTable* ProjectileConfig, class UDataTable* ProjectileEffect);
		void DisableAutoDestroyEffect();
		bool DestroyProjectileForManage(class AActor* ExecActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileCapsuleComponent
	 * Size -> 0x0028 (FullSize[0x04B0] - InheritedSize[0x0488])
	 */
	class USBProjectileCapsuleComponent : public UCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_H1AM[0x8];                                   // 0x0488(0x0008) Fix Super Size
		unsigned char                                              UnknownData_3WB0[0x20];                                  // 0x0490(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnAttackEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnAttackBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileChainMovementParamBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBProjectileChainMovementParamBase : public UDataAsset
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileChainMovementParamStraight
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class USBProjectileChainMovementParamStraight : public USBProjectileChainMovementParamBase
	{
	public:
		struct FProjectileMoveBaseConfig                           MoveBaseConfig;                                          // 0x0030(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FProjectileHomingConfig                             MoveHomingConfig;                                        // 0x0070(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileChainMovementParamAlongGround
	 * Size -> 0x0020 (FullSize[0x00D0] - InheritedSize[0x00B0])
	 */
	class USBProjectileChainMovementParamAlongGround : public USBProjectileChainMovementParamStraight
	{
	public:
		struct FSBProjectileAlongGroundParameter                   AlongGroundConfig;                                       // 0x00B0(0x001C) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BZFC[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileChainMovementParamSimulatePhysics
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBProjectileChainMovementParamSimulatePhysics : public USBProjectileChainMovementParamBase
	{
	public:
		bool                                                       bIsVelocityTakeover;                                     // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TJB3[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LaunchVelocity;                                          // 0x0034(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LinearDamping;                                           // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AngularDamping;                                          // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FakeGravityZ;                                            // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxVelocity;                                             // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileChainMovementParamMovementMagnet
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class USBProjectileChainMovementParamMovementMagnet : public USBProjectileChainMovementParamBase
	{
	public:
		class FName                                                MagnetSpawnerSocketName;                                 // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InitSpeed;                                               // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AccelSpeed;                                              // 0x003C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSpeed;                                                // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DecelerationStartDistance;                               // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DecelerationSpeed;                                       // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotateLerpRate;                                          // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileDebugComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBProjectileDebugComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_SBBI[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileDestroyConditionComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBProjectileDestroyConditionComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_2J7P[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetDestroyEnableModeByStageHit(bool bIsEnable);
		void RequestDestroyMyself();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileEffect
	 * Size -> 0x00D8 (FullSize[0x0300] - InheritedSize[0x0228])
	 */
	class ASBProjectileEffect : public AActor
	{
	public:
		unsigned char                                              UnknownData_L6PW[0x70];                                  // 0x0228(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBProjectileEffectComponent*                        EffectComp;                                              // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBEffectValueComponent*                             EffectValueComp;                                         // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAkEventVariables                                   AkEvent;                                                 // 0x02A8(0x0040) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<float>                                              RequestSoundDelayTimeList;                               // 0x02E8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		ESBEffectVisibleType                                       VisibleTypeParamOnSpawnBP;                               // 0x02F8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N2S4[0x7];                                   // 0x02F9(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetEffectVisibleType(ESBEffectVisibleType VisibleType);
		void RequestPlaySound(float Delay);
		void ReflectEffectVisibleTypeOnSpawnBP();
		ESBEffectVisibleType GetEffectVisibleType();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileEffectComponent
	 * Size -> 0x01A8 (FullSize[0x03B0] - InheritedSize[0x0208])
	 */
	class USBProjectileEffectComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_5DFL[0x8];                                   // 0x0208(0x0008) Fix Super Size
		struct FParticleParameter                                  ParticleParam;                                           // 0x0210(0x0090) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FEffectActorParameter                               EffectActorParam;                                        // 0x02A0(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      SpawnDelayTime;                                          // 0x0300(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBEffectVisibleType                                       MainEffectVisibleType;                                   // 0x0304(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O27I[0x1B];                                  // 0x0305(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAkEventVariables                                   SpawnEffectSound;                                        // 0x0320(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ROG1[0x10];                                  // 0x0360(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBLineSoundComponent*                               LineSoundComp;                                           // 0x0370(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCircleSoundComponent*                             CircleSoundComp;                                         // 0x0378(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_18HG[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBManageEffectActor>                        ManageEffectActorList;                                   // 0x0388(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2A0T[0x4];                                   // 0x0398(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SpawnEffectSoundPlayingId;                               // 0x039C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QGNV[0x10];                                  // 0x03A0(0x0010) MISSED OFFSET (PADDING)

	public:
		bool IsAliveEffect();
		void AddManageEffectActor(class AActor* EffectActor, bool bAutoDestroy);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileExtendCompInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileExtendCompInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileOnConstructionCompInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileOnConstructionCompInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileDestoryCondCompInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileDestoryCondCompInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileTickControlCompInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileTickControlCompInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileFollowMoveParam
	 * Size -> 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
	 */
	class USBProjectileFollowMoveParam : public USBProjectileChainMovementParamMovementMagnet
	{
	public:
		struct FVector                                             HomingOffsetPos;                                         // 0x0050(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartHomingLength;                                       // 0x005C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EndHomingLength;                                         // 0x0060(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WR42[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileFollowMoveComponent
	 * Size -> 0x0038 (FullSize[0x0188] - InheritedSize[0x0150])
	 */
	class USBProjectileFollowMoveComponent : public USBMagnetMovementComponent
	{
	public:
		class USBProjectileFollowMoveParam*                        InputMagnetParam;                                        // 0x0150(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AXTZ[0x8];                                   // 0x0158(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               AttachActor;                                             // 0x0160(0x0008) Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             AttachPos;                                               // 0x0168(0x000C) Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GroundHitTime;                                           // 0x0174(0x0004) Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CalcHomingOffsetPos;                                     // 0x0178(0x000C) Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VIDK[0x4];                                   // 0x0184(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdateAttachLocation();
		void StopMove(const struct FVector& StopLocation);
		void SetHomingOffsetPos(const struct FVector& OffsetPos);
		void SetForceRotStop(bool IsEnable);
		void SetForceMoveStop(bool ForceStop);
		void SetFollowRotType(EFollowRotType RotType);
		bool IsFollowMoveEnable();
		struct FVector GetHomingOffsetPos();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileForecastComponent
	 * Size -> 0x0088 (FullSize[0x0140] - InheritedSize[0x00B8])
	 */
	class USBProjectileForecastComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_N6FH[0x88];                                  // 0x00B8(0x0088) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileGroundCollisionBox
	 * Size -> 0x0020 (FullSize[0x04B0] - InheritedSize[0x0490])
	 */
	class USBProjectileGroundCollisionBox : public UBoxComponent
	{
	public:
		unsigned char                                              UnknownData_MFMI[0x20];                                  // 0x0490(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetGroundCollisionEnableMode(bool enable);
		void OnGroundComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileGroundCollisionCommonInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileGroundCollisionCommonInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileGroundCollisionComponent
	 * Size -> 0x0028 (FullSize[0x04B0] - InheritedSize[0x0488])
	 */
	class USBProjectileGroundCollisionComponent : public UCapsuleComponent
	{
	public:
		unsigned char                                              UnknownData_YSHJ[0x8];                                   // 0x0488(0x0008) Fix Super Size
		unsigned char                                              UnknownData_49PI[0x20];                                  // 0x0490(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetGroundCollisionEnableMode(bool enable);
		void OnGroundComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileHealthConditionComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBProjectileHealthConditionComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_B2UA[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBProjectileHealthConditionConfig                  HealthConditionConfig;                                   // 0x00C8(0x0008) Edit, Transient, DisableEditOnInstance, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      CurrentHitPoint;                                         // 0x00D0(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1GTQ[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (PADDING)

	public:
		float GetHitPointMax();
		float GetCurrentHitPoint();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileHitChainComponent
	 * Size -> 0x00C0 (FullSize[0x0178] - InheritedSize[0x00B8])
	 */
	class USBProjectileHitChainComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_PX87[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FProjectileHitChainConfig                           HitChainConfig;                                          // 0x00D8(0x0070) Transient, Protected, NativeAccessSpecifierProtected
		struct FProjectileSelfDeadChainConfig                      SelfDeadChainConfig;                                     // 0x0148(0x0030) Transient, Protected, NativeAccessSpecifierProtected

	public:
		void OnGroundHitChainProjectile(class UPrimitiveComponent* HitSelfComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileHitTargetLimitComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBProjectileHitTargetLimitComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_EDOO[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileImagineCharacter
	 * Size -> 0x0140 (FullSize[0x0630] - InheritedSize[0x04F0])
	 */
	class ASBProjectileImagineCharacter : public AASCharacterBase
	{
	public:
		unsigned char                                              UnknownData_27FT[0xB8];                                  // 0x04F0(0x00B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bOverrideCameraDistanceTransparent;                      // 0x05A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IG7J[0x3];                                   // 0x05A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CameraDistanceTransparent;                               // 0x05AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideCameraShieldingTransparentParam;                // 0x05B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MCOR[0x3];                                   // 0x05B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCameraShieldingTransparentParam                  CameraShieldingTransparentParam;                         // 0x05B4(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V0BL[0x24];                                  // 0x05BC(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBProjectileSummonImagineComponent*                 SummonImagineComp;                                       // 0x05E0(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBProjectileSpawnComponent*                         SpawnComp;                                               // 0x05E8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBFootprintComponent*                               FootprintComp;                                           // 0x05F0(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBCheckSwimmingAreaBImagine*                        CheckSwimmingAreaComp;                                   // 0x05F8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UASStateMachine*                                     StateMachine;                                            // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UASAnimationSet*                                     AnimationSet;                                            // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSBElementDamageSetting                             DefaultAttackElement;                                    // 0x0610(0x0010) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      TransitionLoopTime;                                      // 0x0620(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AuraEffectScale;                                         // 0x0624(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5PD9[0x8];                                   // 0x0628(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetRequestSpawnProjectileAsInstigatorSpawn();
		void ResetExecutedTime();
		void RequestFinishCutIn();
		void NotifyImagineArtsMotionEnd();
		void NotifyCapturedEndPoseSnapShot();
		bool IsTransitionLoopOut();
		bool IsNotifiedImagineArtsMotionEnd();
		bool IsEnableDisappearSummonEffect();
		bool IsDispCutInDemo();
		bool IsCanDispCutInDemo();
		class USBCheckSwimmingAreaBImagine* GetCheckSwimmingAreaComp();
		void AddnExecutedTime(float InDeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileImagineCharacterAnimInstance
	 * Size -> 0x0028 (FullSize[0x1000] - InheritedSize[0x0FD8])
	 */
	class USBProjectileImagineCharacterAnimInstance : public USBCharacterAnimInstance
	{
	public:
		unsigned char                                              AnimationSet[0x28];                                      // 0x0FD8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		void UpdateCharacterVariables(float FrameDeltaTime);
		bool IsNotifiedMotionEnd();
		float GetStateMachinePlayRate();
		class UASStateMachine* GetStateMachine();
		class UASAnimationSet* GetAnimationSet();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileImagineCreationCharacter
	 * Size -> 0x0030 (FullSize[0x0660] - InheritedSize[0x0630])
	 */
	class ASBProjectileImagineCreationCharacter : public ASBProjectileImagineCharacter
	{
	public:
		unsigned char                                              UnknownData_ATUL[0x8];                                   // 0x0630(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            OffMaterialIndexes;                                      // 0x0638(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M24B[0x8];                                   // 0x0648(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBCharaCreateComponent*                             CharaCreateComponent;                                    // 0x0650(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCharaPartsFaceComponent*                          FaceComp;                                                // 0x0658(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void StartSummonEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileImagineMeterialReferenceReplaceDataAsset
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBProjectileImagineMeterialReferenceReplaceDataAsset : public UPrimaryDataAsset
	{
	public:
		TArray<struct FSBReferenceReplaceDataSet>                  DataArray;                                               // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileImagineProcInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileImagineProcInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileManager
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class USBProjectileManager : public UObject
	{
	public:
		class UClass*                                              ProjectileDefaultPath;                                   // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<ESBProjectileSplashSize, struct FSBProjectileManageEffect> InWaterEffectList;                                       // 0x0030(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<ESBProjectileMeshCollisionType, class UStaticMesh*>   MeshCollisionMap;                                        // 0x0080(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_67PW[0x14];                                  // 0x00D0(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExclusionObstacleHitDistance;                            // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UObject*>                                     StationaryLoadedAssets;                                  // 0x00E8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate, CPF_SkipSerialization

	public:
		void RequestDestroyProjectile(class AActor* InProjectileInstigator, class UDataTable* InDataTable, const class FName& InRowName);
		bool IsExistProjectile(class AActor* InProjectileInstigator, class UDataTable* InDataTable, const class FName& InRowName);
		float GetExclusionObstacleHitDistance();
		void GatherProjectileListBP(TArray<class AActor*>* OutList, class AActor* Instigator, const struct FDataTableRowHandle& InHandle);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileMeshComponent
	 * Size -> 0x0038 (FullSize[0x0530] - InheritedSize[0x04F8])
	 */
	class USBProjectileMeshComponent : public UStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_KL0S[0x8];                                   // 0x04F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_TT8E[0x20];                                  // 0x0500(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             BaseScaleVector;                                         // 0x0520(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A1HH[0x4];                                   // 0x052C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnAttackEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnAttackBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileMeshControllComponent
	 * Size -> 0x0028 (FullSize[0x0230] - InheritedSize[0x0208])
	 */
	class USBProjectileMeshControllComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_YZDW[0x8];                                   // 0x0208(0x0008) Fix Super Size
		unsigned char                                              UnknownData_TL78[0x20];                                  // 0x0210(0x0020) MISSED OFFSET (PADDING)

	public:
		TArray<class UPrimitiveComponent*> GetControllMeshList();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileMovementFakeFall
	 * Size -> 0x0018 (FullSize[0x0158] - InheritedSize[0x0140])
	 */
	class USBProjectileMovementFakeFall : public USBProjectileMovementBaseComponent
	{
	public:
		unsigned char                                              UnknownData_HSJW[0x18];                                  // 0x0140(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileParamComponent
	 * Size -> 0x00F8 (FullSize[0x01B0] - InheritedSize[0x00B8])
	 */
	class USBProjectileParamComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_E146[0x18];                                  // 0x00B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSbProjectileConfigRep;                                 // 0x00D0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		TWeakObjectPtr<class AActor>                               ProjectileSpawner;                                       // 0x00E0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSBProjectileSelectHandle                           ProjectileConfigHandle;                                  // 0x00E8(0x0018) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDataTableRowHandle                                 ProjectileEffectHandle;                                  // 0x0100(0x0010) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZKTI[0x45];                                  // 0x0110(0x0045) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EProjectileNetworkSpawnType                                NetworkSpawnTypeConcrete;                                // 0x0155(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O1BQ[0x2];                                   // 0x0156(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BaseLifeTime;                                            // 0x0158(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XONJ[0x4];                                   // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint64_t                                                   AuthoritySpawnID;                                        // 0x0160(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		uint64_t                                                   AuthoritySpawnerSpawnID;                                 // 0x0168(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bSpecialAttack : 1;                                      // 0x0170(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L3V6[0x3];                                   // 0x0171(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SkillIDPosition;                                         // 0x0174(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0QEL[0x3];                                   // 0x0175(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   ImagineStackBNum;                                        // 0x0178(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4K6H[0x4];                                   // 0x017C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int8_t>                                             ParamCompEncryptionKeyList;                              // 0x0180(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		int32_t                                                    SkillId;                                                 // 0x0190(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsRequestedSpawnOnServer : 1;                           // 0x0194(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SXDS[0x3];                                   // 0x0195(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProjectileBaseScale;                                     // 0x0198(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector_NetQuantize                                 InitProjectilePos;                                       // 0x019C(0x000C) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		uint32_t                                                   ChainDisappearID;                                        // 0x01A8(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsDestroyInstigatorActionSuspendChainDisappearIDOnce;   // 0x01AC(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TB4A[0x3];                                   // 0x01AD(0x0003) MISSED OFFSET (PADDING)

	public:
		void OnRep_ProjectileConfigHandle();
		void OnRep_NetworkSpawnTypeConcrete();
		void OnRep_ChainDisappearID();
		void OnRep_BaseLifeTime();
		void OnProjectileConfigRepDelegate__DelegateSignature();
		class AActor* GetSpawner();
		unsigned char GetSkillIDPosition();
		int32_t GetSkillID();
		float GetRemainLifeTime();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectilePartyShotComponent
	 * Size -> 0x0020 (FullSize[0x0160] - InheritedSize[0x0140])
	 */
	class USBProjectilePartyShotComponent : public USBProjectileRapidComponent
	{
	public:
		TArray<class USceneComponent*>                             ListTargetComp;                                          // 0x0140(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GUDU[0x10];                                  // 0x0150(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectilePath
	 * Size -> 0x0058 (FullSize[0x0280] - InheritedSize[0x0228])
	 */
	class ASBProjectilePath : public AActor
	{
	public:
		int32_t                                                    MaxSplineMeshComponent;                                  // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XWQE[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         ProjectilePathMesh;                                      // 0x0230(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterial*                                           ProjectilePathMaterial;                                  // 0x0238(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     RootSceneComp;                                           // 0x0240(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    SplineComp;                                              // 0x0248(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USplineMeshComponent*>                        SplineMeshCompList;                                      // 0x0250(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_USZ3[0x10];                                  // 0x0260(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     SplineDirectionList;                                     // 0x0270(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		void SetAllSplineMeshVisible(bool bVisible);
		void ResetSplineMeshComponent();
		void RegisterSplineMeshComponent(class USplineMeshComponent* SplineMesh);
		void RecalcSplinePath();
		void InitBuildSplineMesh();
		class USplineMeshComponent* GetSplineMeshComponentIndex(int32_t Index);
		struct FVector GetSplineDirection(int32_t Index);
		class USplineComponent* GetSplineComponent();
		int32_t GetRegisterSplineMeshComponentNum();
		void GetRegisterSplineMeshComponent(TArray<class USplineMeshComponent*>* OutArray);
		class UStaticMesh* GetProjectilePathMesh();
		class UMaterial* GetProjectilePathMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.ProjectileRandomShotConfig
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UProjectileRandomShotConfig : public UDataAsset
	{
	public:
		TArray<struct FProjectileRandomShotInfo>                   ProjectileInfoList;                                      // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileRandomShotComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBProjectileRandomShotComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_Q73U[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UProjectileRandomShotConfig*                         RandomShotConfig;                                        // 0x00C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsEndSpawnProjectile;                                   // 0x00C8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F1ZT[0xF];                                   // 0x00C9(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSendNetDataComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBProjectileSendNetDataComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_EHA0[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		void ServerRemoteProjectileOfReservedChainMovementIndex(int32_t InReservedChainMovementIndex, class AActor* InProjectileInstigator, int64_t InAuthoritySpawnID);
		void ServerRemoteProjectileOfDestroy(uint32_t Reasons, class AActor* InProjectileInstigator, int64_t InAuthoritySpawnID);
		void ServerRemoteChainDisappearProjectile(class AActor* InProjectileInstigator, int32_t InDisappearID);
		void MulticastRemoteProjectileOfReservedChainMovementIndex(int32_t InReservedChainMovementIndex, class AActor* InProjectileInstigator, int64_t InAuthoritySpawnID);
		void MulticastRemoteProjectileOfDestroy(uint32_t Reasons, class AActor* InProjectileInstigator, int64_t InAuthoritySpawnID);
		void MulticastRemoteProjectileLimitDamageOver(class AActor* Owner, const struct FSBProjectileIdentifyHandle& Handle);
		void MulticastRemoteChainDisappearProjectile(class AActor* InProjectileInstigator, int32_t InDisappearID);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSequencer
	 * Size -> 0x0018 (FullSize[0x0308] - InheritedSize[0x02F0])
	 */
	class ASBProjectileSequencer : public ASBProjectileBase
	{
	public:
		class USceneComponent*                                     SceneComp;                                               // 0x02F0(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileEffectComponent*                        EffectComp;                                              // 0x02F8(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBProjectileAttackParamComponent*                   AttackParamComp;                                         // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSequencerLauncherRapid
	 * Size -> 0x0000 (FullSize[0x0308] - InheritedSize[0x0308])
	 */
	class ASBProjectileSequencerLauncherRapid : public ASBProjectileSequencer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSequencerLauncherWide
	 * Size -> 0x0000 (FullSize[0x0308] - InheritedSize[0x0308])
	 */
	class ASBProjectileSequencerLauncherWide : public ASBProjectileSequencer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSequencerLauncherArea
	 * Size -> 0x0000 (FullSize[0x0308] - InheritedSize[0x0308])
	 */
	class ASBProjectileSequencerLauncherArea : public ASBProjectileSequencer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSequencerLauncherParty
	 * Size -> 0x0000 (FullSize[0x0308] - InheritedSize[0x0308])
	 */
	class ASBProjectileSequencerLauncherParty : public ASBProjectileSequencer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSequencerLauncherForecast
	 * Size -> 0x0000 (FullSize[0x0308] - InheritedSize[0x0308])
	 */
	class ASBProjectileSequencerLauncherForecast : public ASBProjectileSequencer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileShareHitComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBProjectileShareHitComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_SCY1[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSpawnComponent
	 * Size -> 0x00A8 (FullSize[0x0160] - InheritedSize[0x00B8])
	 */
	class USBProjectileSpawnComponent : public UActorComponent
	{
	public:
		TArray<struct FSBProjectileMasterInfo>                     ProjectileBuildResource;                                 // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S5YA[0x38];                                  // 0x00C8(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<uint32_t, struct FProjectileSpawnRelayParameter>      ProjectileCacheArray;                                    // 0x0100(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3EF4[0x10];                                  // 0x0150(0x0010) MISSED OFFSET (PADDING)

	public:
		void ServerPushHitInfo(int64_t HitTime, const struct FSBProjectileIdentifyHandle& Handle, const struct FSBDamageEvent& DamageEventEncrypted, class AActor* DamageDst, class AActor* Instigator, int16_t PrimitiveCollisionIndex);
		void RequestSpawnRapidParameterServer(uint32_t CacheID, const struct FProjectileSpawnRapidParameter& RapidParam, class AActor* OwnerActor, class APawn* InstigatorPawn, class ACharacter* RequestedCharacterOnClient, bool isSpawnOnServer);
		void RequestSpawnRapidParameterMulticast(int32_t CacheID, const struct FProjectileSpawnRapidParameter& RapidParam, class AActor* OwnerActor, class APawn* InstigatorPawn, class ACharacter* RequestedCharacterOnClient);
		void RequestSpawnParameterServerOnDelegatedSpawnAuth(const struct FProjectileSpawnRelayParameter& ProjSpawnRelayParam, class AActor* OwnerActor, class APawn* InstigatorPawn, class ACharacter* RequestedCharacterOnClient, uint32_t CacheID, bool isSpawnOnServer);
		void RequestSpawnParameterServer(const struct FProjectileSpawnRelayParameter& ProjSpawnRelayParam, class AActor* OwnerActor, class APawn* InstigatorPawn, class ACharacter* RequestedCharacterOnClient, uint32_t CacheID, bool isSpawnOnServer);
		void RequestSpawnParameterMulticast(const struct FProjectileSpawnRelayParameter& ProjSpawnRelayParam, class AActor* OwnerActor, class APawn* InstigatorPawn, class ACharacter* RequestedCharacterOnClient, uint32_t CacheID);
		void RequestSpawnEmitterBySplashTypeServer(ESBProjectileSplashSize SplashSize, const struct FVector_NetQuantize& Pos, const struct FRotator& Rot, float ScaleValue, bool bAutoDestroy);
		void RequestSpawnEmitterBySplashTypeMulticast(ESBProjectileSplashSize SplashSize, const struct FVector_NetQuantize& Pos, const struct FRotator& Rot, float ScaleValue, bool bAutoDestroy);
		void RequestSpawnEmitterByProjectileIDServer(const struct FSBRequiredParam_SpawnEmitterByProjectileID& RequiredParam, const struct FSBCustomParam_SpawnEmitterByProjectileID& CustomParam);
		void RequestSpawnEmitterByProjectileIDMulticast(const struct FSBRequiredParam_SpawnEmitterByProjectileID& RequiredParam, const struct FSBCustomParam_SpawnEmitterByProjectileID& CustomParam);
		void RequestSpawnEmitterAttachServer(EEffectId ID, class USceneComponent* AttachComp, ESBEffectVisibleType VisibleType, const class FName& AttachPointName, const struct FVector_NetQuantize& Location, const struct FRotator& Rotation, float ScaleValue, EAttachLocation LocationType, bool bAutoDestroy, bool bHeal);
		void RequestSpawnEmitterAttachMulticast(EEffectId ID, class USceneComponent* AttachComp, ESBEffectVisibleType VisibleType, const class FName& AttachPointName, const struct FVector_NetQuantize& Location, const struct FRotator& Rotation, float ScaleValue, EAttachLocation LocationType, bool bAutoDestroy, bool bHeal);
		void RequestProjectileRapidEndServer(uint32_t CacheID);
		void RequestProjectileRapidEndMulticast(uint32_t CacheID);
		void RequestPlaySoundServer(uint64_t AuthoritySpawnID, class ASBCharacter* TargetCharacter, class UAkAudioEvent* Event);
		void RequestPlaySoundMulticast(uint64_t AuthoritySpawnID, class ASBCharacter* TargetCharacter, class UAkAudioEvent* Event);
		void NotifyOrderedChainHitProjectileServer(uint64_t AuthoritySpawnID, class ASBCharacter* TargetCharacter, uint64_t OtherAuthoritySpawnID, class ASBCharacter* OtherTargetCharacter);
		void NotifyOrderedChainHitProjectileMulticast(uint64_t AuthoritySpawnID, class ASBCharacter* TargetCharacter, uint64_t OtherAuthoritySpawnID, class ASBCharacter* OtherTargetCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSpawnInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileSpawnInterface : public UInterface
	{
	public:
		class USBProjectileSpawnComponent* GetProjectileSpawnComponent();
		class USBProjectileShareHitComponent* GetProjectileShareHitComponent();
		class USBProjectileSendNetDataComponent* GetProjectileSendNetDataComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSphereComponent
	 * Size -> 0x0028 (FullSize[0x04B0] - InheritedSize[0x0488])
	 */
	class USBProjectileSphereComponent : public USphereComponent
	{
	public:
		unsigned char                                              UnknownData_7BIK[0x8];                                   // 0x0488(0x0008) Fix Super Size
		unsigned char                                              UnknownData_YTWV[0x20];                                  // 0x0490(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnAttackEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnAttackBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileStateComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBProjectileStateComponent : public UActorComponent
	{
	public:
		int32_t                                                    NowState;                                                // 0x00B8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    RequestNewState;                                         // 0x00BC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3757[0x10];                                  // 0x00C0(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetStateBP();
		void Server_RequestChangeStateProxy(int32_t InState);
		void Server_RequestChangeState(int32_t InState);
		void RequestChangeState(int32_t InState, bool IsRequestProxy);
		bool IsRequestChangeState();
		int32_t GetState();
		int32_t GetRequestState();
		void Client_RequestChangeState(int32_t InState);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileStateManageComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBProjectileStateManageComponent : public UActorComponent
	{
	public:
		TArray<TWeakObjectPtr<class AActor>>                       ProjectileList;                                          // 0x00B8(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		void Server_RequestChangeProjectileState(int32_t ProjectileStateNum, int64_t AuthoritySpawnID);
		void Client_RequestChangeProjectileState(int32_t ProjectileStateNum, int64_t AuthoritySpawnID);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileSummonImagineComponent
	 * Size -> 0x0048 (FullSize[0x0100] - InheritedSize[0x00B8])
	 */
	class USBProjectileSummonImagineComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_DEY6[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SummonImagineCharacterAsset[0x28];                       // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class AASCharacterBase*                                    ImagineCharacterInstance;                                // 0x00F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7G9X[0x8];                                   // 0x00F8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileTickable_BlueprintBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBProjectileTickable_BlueprintBase : public UObject
	{
	public:
		void ReceiveTick(float DeltaTime, class AActor* OwnerActor);
		void ReceiveEndPlay(class AActor* OwnerActor);
		void ReceiveBeginPlay(class AActor* OwnerActor);
		void DrawDebugSphere(class AActor* Owner, const struct FVector& Center, float Radius, int32_t Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
		void DrawDebugPoint(class AActor* Owner, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
		void DrawDebugLine(class AActor* Owner, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
		void DrawDebugCircle(class AActor* Owner, const struct FVector& Center, float Radius, int32_t NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
		void DrawDebugBox(class AActor* Owner, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness);
		void DrawDebugArrow(class AActor* Owner, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileTickAttackComponent
	 * Size -> 0x0028 (FullSize[0x00E0] - InheritedSize[0x00B8])
	 */
	class USBProjectileTickAttackComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_9YKZ[0x28];                                  // 0x00B8(0x0028) MISSED OFFSET (PADDING)

	public:
		void SpawnProjectile(const struct FSBProjectileSelectHandle& ProjectileHandle);
		void Setup(float InStartDelay, float InEndDelay, const struct FSBProjectileSelectHandle& InHandle);
		void ProcTick(float DeltaTime);
		bool IsFinish();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileTrailImpactComponent
	 * Size -> 0x0080 (FullSize[0x0138] - InheritedSize[0x00B8])
	 */
	class USBProjectileTrailImpactComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KDY5[0x30];                                  // 0x00B8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBProjectileTrailImpactInfo                        TrailImpactInfo;                                         // 0x00E8(0x0050) Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBProjectileWideShotComponent
	 * Size -> 0x0030 (FullSize[0x0170] - InheritedSize[0x0140])
	 */
	class USBProjectileWideShotComponent : public USBProjectileRapidComponent
	{
	public:
		unsigned char                                              UnknownData_SAOY[0x30];                                  // 0x0140(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEnemyPtAltEffectFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBEnemyPtAltEffectFunctionLibrary : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTCriterionPawns
	 * Size -> 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
	 */
	class USBPTCriterionPawns : public UAIFwPTCriterionSquadMember
	{
	public:
		bool                                                       IsDetectHostile;                                         // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YQSC[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinHostileLevel;                                         // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDetectNeutral;                                         // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsDetectFriendly;                                        // 0x0051(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WFTI[0x2];                                   // 0x0052(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinFriendlyLevel;                                        // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IgnoreDied;                                              // 0x0058(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R2WX[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTCriterionSquadMember
	 * Size -> 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
	 */
	class USBPTCriterionSquadMember : public UAIFwPTCriterionSquadMember
	{
	public:
		bool                                                       IgnoreDied;                                              // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GMGL[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RoleClass;                                               // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTCriterionSquadMemberDestinations
	 * Size -> 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
	 */
	class USBPTCriterionSquadMemberDestinations : public UAIFwPTCriterionSquadMemberDestinations
	{
	public:
		bool                                                       IgnoreDied;                                              // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LF7W[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              RoleClass;                                               // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationActionArea
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationActionArea : public UAIFwPTEvaluationNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationAngle
	 * Size -> 0x0058 (FullSize[0x00A8] - InheritedSize[0x0050])
	 */
	class USBPTEvaluationAngle : public UAIFwPTEvaluationNodeUseCriterion
	{
	public:
		bool                                                       Vector1_UseFromDirection;                                // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPTCriterionSlot                                           Vector1_From;                                            // 0x0051(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPTCriterionSlot                                           Vector1_To;                                              // 0x0052(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       Vector2_UseFromDirection;                                // 0x0053(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPTCriterionSlot                                           Vector2_From;                                            // 0x0054(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPTCriterionSlot                                           Vector2_To;                                              // 0x0055(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ENXT[0x2];                                   // 0x0056(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAIFwBTNodePropertyBool                             Is2D;                                                    // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AngleMin;                                                // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            AngleMax;                                                // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       UseNegativeAngle;                                        // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V63W[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationCanHitAttack
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationCanHitAttack : public UAIFwPTEvaluationNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationComponent
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationComponent : public UAIFwPTEvaluationNode
	{
	public:
		class UClass*                                              ComponentClass;                                          // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationDistance
	 * Size -> 0x0060 (FullSize[0x00B0] - InheritedSize[0x0050])
	 */
	class USBPTEvaluationDistance : public UAIFwPTEvaluationNodeUseCriterion
	{
	public:
		struct FAIFwBTNodePropertyBool                             b2D;                                                     // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            BaseDistance;                                            // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            MinDistance;                                             // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            MaxDistance;                                             // 0x0098(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationDistanceFromBattleRange
	 * Size -> 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationDistanceFromBattleRange : public UAIFwPTEvaluationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            MinDistance;                                             // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            MaxDistance;                                             // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationDistanceToNavWall
	 * Size -> 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationDistanceToNavWall : public UAIFwPTEvaluationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            MinDistance;                                             // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            MaxDistance;                                             // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationEnemyDensity
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationEnemyDensity : public UAIFwPTEvaluationNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationHate
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationHate : public UAIFwPTEvaluationNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationHeightDifference
	 * Size -> 0x0030 (FullSize[0x0080] - InheritedSize[0x0050])
	 */
	class USBPTEvaluationHeightDifference : public UAIFwPTEvaluationNodeUseCriterion
	{
	public:
		struct FAIFwBTNodePropertyFloat                            MinHeight;                                               // 0x0050(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            MaxHeight;                                               // 0x0068(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationHP
	 * Size -> 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationHP : public UAIFwPTEvaluationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            FilterHPMin;                                             // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            FilterHPMax;                                             // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             bEvalByHPRate;                                           // 0x0078(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationItemScore
	 * Size -> 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationItemScore : public UAIFwPTEvaluationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            MinScore;                                                // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            MaxScore;                                                // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationOverlapVolume
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationOverlapVolume : public UAIFwPTEvaluationNode
	{
	public:
		class UClass*                                              VolumeClass;                                             // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationOverNavMesh
	 * Size -> 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationOverNavMesh : public UAIFwPTEvaluationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            ProjectDown;                                             // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            Extent;                                                  // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyBool                             Acceptance;                                              // 0x0078(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationRandom
	 * Size -> 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationRandom : public UAIFwPTEvaluationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            MaxValue;                                                // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationRandomByAction
	 * Size -> 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationRandomByAction : public UAIFwPTEvaluationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            MaxValue;                                                // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationRole
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationRole : public UAIFwPTEvaluationNode
	{
	public:
		ESBRoleType                                                RoleType;                                                // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NA7U[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationSquadIMap
	 * Size -> 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationSquadIMap : public UAIFwPTEvaluationNode
	{
	public:
		class FString                                              LayerName;                                               // 0x0048(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinValue;                                                // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxValue;                                                // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationTargetRate
	 * Size -> 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
	 */
	class USBPTEvaluationTargetRate : public UAIFwPTEvaluationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            MinRate;                                                 // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            MaxRate;                                                 // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTEvaluationTrace_UnderFoot
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class USBPTEvaluationTrace_UnderFoot : public UAIFwPTEvaluationTrace
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationCriterion
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPTGenerationCriterion : public UAIFwPTGenerationNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationFieldSpawnPoint
	 * Size -> 0x0048 (FullSize[0x0088] - InheritedSize[0x0040])
	 */
	class USBPTGenerationFieldSpawnPoint : public UAIFwPTGenerationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            Range;                                                   // 0x0040(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            ElavationAngle;                                          // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            ElavationHeight;                                         // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationLocationAnchors
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class USBPTGenerationLocationAnchors : public UAIFwPTGenerationNode
	{
	public:
		struct FAIFwBTNodePropertyInt                              MinimumAnchorIndex;                                      // 0x0040(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyInt                              MaximumAnchorIndex;                                      // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationNonOverlappingCirclesRandom
	 * Size -> 0x0030 (FullSize[0x0070] - InheritedSize[0x0040])
	 */
	class USBPTGenerationNonOverlappingCirclesRandom : public UAIFwPTGenerationNode
	{
	public:
		struct FAIFwBTNodePropertyInt                              MaxCount;                                                // 0x0040(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            CircleRadius;                                            // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationPointInSpawnArea
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBPTGenerationPointInSpawnArea : public UAIFwPTGenerationNode
	{
	public:
		class FString                                              BlackboardKey;                                           // 0x0040(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SearchRadius;                                            // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YZJ7[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationPointsCylinder
	 * Size -> 0x0090 (FullSize[0x00D0] - InheritedSize[0x0040])
	 */
	class USBPTGenerationPointsCylinder : public UAIFwPTGenerationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            Radius;                                                  // 0x0040(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            HoleRadius;                                              // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            HeightOffsetMin;                                         // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            HeightOffsetMax;                                         // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            StepWidth;                                               // 0x00A0(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            StepHeight;                                              // 0x00B8(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationPointsFrontOfActor
	 * Size -> 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
	 */
	class USBPTGenerationPointsFrontOfActor : public UAIFwPTGenerationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            Radius;                                                  // 0x0040(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            HoleRadius;                                              // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            StepWidth;                                               // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            StepDepth;                                               // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationPointsSphere
	 * Size -> 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
	 */
	class USBPTGenerationPointsSphere : public UAIFwPTGenerationNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            OuterRadius;                                             // 0x0040(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            InnerRadius;                                             // 0x0058(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            StepWidth;                                               // 0x0070(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            StepDepth;                                               // 0x0088(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationSensedEnemy
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPTGenerationSensedEnemy : public UAIFwPTGenerationNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTGenerationSpawnArea
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBPTGenerationSpawnArea : public UAIFwPTGenerationNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseAddedSensor
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class USBPTSenseAddedSensor : public UAIFwPTSenseNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseEncounter
	 * Size -> 0x0010 (FullSize[0x0070] - InheritedSize[0x0060])
	 */
	class USBPTSenseEncounter : public UAIFwPTSenseNode
	{
	public:
		float                                                      SensingRangeToTarget;                                    // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SignalSpeed;                                             // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDelay;                                                // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KZI8[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseFilterAppearingBlindness
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPTSenseFilterAppearingBlindness : public UAIFwPTSenseFilterNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseFilterDistanceAccordingToLevelDifference
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class USBPTSenseFilterDistanceAccordingToLevelDifference : public UAIFwPTSenseFilterNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            RangeToLowLevel;                                         // 0x0030(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyInt                              LowLevel;                                                // 0x0048(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyFloat                            RangeToHighLevel;                                        // 0x0060(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyInt                              HighLevel;                                               // 0x0078(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseFilterSamePartyAsSensedTarget
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPTSenseFilterSamePartyAsSensedTarget : public UAIFwPTSenseFilterNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseFilterSenseChanger
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBPTSenseFilterSenseChanger : public UAIFwPTSenseFilterNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseFilterTerritory
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class USBPTSenseFilterTerritory : public UAIFwPTSenseFilterNode
	{
	public:
		struct FAIFwBTNodePropertyFloat                            OffsetRadius;                                            // 0x0030(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseMasterEnemy
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class USBPTSenseMasterEnemy : public UAIFwPTSenseNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPTSenseSupport
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class USBPTSenseSupport : public UAIFwPTSenseNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBQuestBoard
	 * Size -> 0x0058 (FullSize[0x0308] - InheritedSize[0x02B0])
	 */
	class USBQuestBoard : public USBUserWidget
	{
	public:
		class FName                                                QuestBoardId;                                            // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KX9A[0x20];                                  // 0x02B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FQuestBoardQuestData>                        QuestListDone;                                           // 0x02D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FQuestBoardQuestData>                        QuestList;                                               // 0x02E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZPDP[0x10];                                  // 0x02F8(0x0010) MISSED OFFSET (PADDING)

	public:
		void CollectQuest();
		void ApplyFilter(TArray<struct FFilterGroup> InFilters);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBQuestBPFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBQuestBPFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void UpdateQuestRouteGuide(class UObject* WorldContextObject, bool bIsLevelNameOverride);
		bool StartInterruptQuest(class ASBInterruptQuestPoint* InPoint);
		void SetPictureInSkitFadeOutFlag(bool Flag);
		void RequestQuestJingleSound(class UObject* WorldContextObject, bool bIsAccept);
		void Request_InterruptQuestGimmickObjectAppearLog(class UObject* WorldContextObject, class ASBInterruptQuestGimmickActorBase* InGimmickActor, bool InIsAppear, bool InIsVisible);
		int32_t QueryReportableQuest(class UObject* WorldContextObject, const class FName& ReporterId);
		void PlayInterruptQuestSuccess(const class FName& InQuestId);
		void PlayInterruptQuestStepUp(const class FName& InQuestId);
		void PlayInterruptQuestStart(const class FName& InQuestId);
		void PlayInterruptQuestLeave(const class FName& InQuestId);
		void PlayInterruptQuestFailed(const class FName& InQuestId);
		bool IsSubQuest(class UObject* WorldContextObject, int32_t QuestID);
		bool IsStepCompleteNotifyEnable(class UObject* WorldContextObject, int32_t InQuestId, int32_t InStepNo);
		bool IsQuestValidList(class UObject* WorldContextObject);
		bool IsQuestStepRouteGuideProhibit(class UObject* WorldContextObject, int32_t QuestIndex);
		bool IsQuestRewardHaveAnyOverflow(class UObject* WorldContextObject, int32_t InQuestIndex);
		bool IsQuestMissMatchClassType(class USBNetworkDataCache* NetworkDataCache, int32_t QuestIndex);
		bool IsMainQuestAllCompleted(class UObject* WorldContextObject);
		bool IsLotteryTypeRewardOverflow(class UObject* WorldContextObject, int32_t InLotteryGroupId, int32_t InAmount);
		bool IsInterruptQuestStartCheckAreaIn(class UObject* WorldContextObject, class ASBPlayerCharacter* PlayerCharacter);
		bool IsInterruptQuestJoined(class UObject* WorldContextObject);
		bool IsExistQuestTargetNpc(class UObject* WorldContextObject, const class FName& NpcId, int32_t* QuestID);
		bool IsExistQuestStoppingFromNpc(class UObject* WorldContextObject, const class FName& NpcId, int32_t* QuestID);
		bool IsExistQuestStepSynopsis(class UObject* WorldContextObject, int32_t QuestIndex);
		bool IsExistQuestStartFromNpc(class UObject* WorldContextObject, const class FName& NpcId, int32_t* QuestID);
		bool IsExistQuestReportForNpc(class UObject* WorldContextObject, const class FName& NpcId, int32_t* QuestID);
		bool IsDestinationMap(class UObject* WorldContextObject, int32_t QuestIndex);
		bool IsContainInterruptQuestTargetEnemy(class UObject* WorldContextObject, int32_t InQuestIndex, const class FName& InEnemyId);
		void InterruptQuest_ActionNotification_ItemUse(class ASBPlayerCharacter* pPC, int32_t ItemId);
		bool GetWishListProgressUIInfo(class UObject* WorldContextObject, const struct FSBWishListData& InWishListData, TArray<struct FSBQuestProgressItemUIInfo>* OutProgressItemList);
		bool GetStepCompleteText(class UObject* WorldContextObject, class FString* OutText, int32_t InQuestId, int32_t InStepNo);
		class FString GetReportableStatusText(class UObject* WorldContextObject, int32_t QuestIndex);
		int32_t GetRelationQuest(class UObject* WorldContextObject, const class FName& TargetId, TArray<int32_t>* OutQuestIndexList);
		int32_t GetQuestStoppingFromNpc(class UObject* WorldContextObject, const class FName& NpcId);
		class FString GetQuestStep(class UObject* WorldContextObject, int32_t QuestID);
		class FString GetQuestStatusString(class UObject* WorldContextObject, EQuestStatus InQuestStatus);
		ESBQuestStatusOnClassChange GetQuestStatusOnClassChange(class UObject* WorldContextObject, ESBClassType ClassType);
		EQuestStatus GetQuestStatus(class UObject* WorldContextObject, int32_t QuestID);
		int32_t GetQuestStartFromNpc(class UObject* WorldContextObject, const class FName& NpcId);
		bool GetQuestRewardInfoMailData(class UObject* WorldContextObject, int32_t InQuestIndex, TArray<struct FSBMailData>* OutMailDatas);
		bool GetQuestProgressUIInfo(class UObject* WorldContextObject, int32_t QuestIndex, int32_t StepNo, TArray<struct FSBQuestProgressItemUIInfo>* OutProgressItemList);
		bool GetQuestProgressDiffUIInfo(class UObject* WorldContextObject, int32_t QuestIndex, const struct FQuestProgressInfo& PrevProgressInfo, const struct FQuestProgressInfo& AfterProgressInfo, TArray<struct FSBQuestProgressItemUIInfo>* OutProgressItemList);
		void GetQuestPreconditionUIInfo(class UObject* WorldContextObject, int32_t InQuestIndex, TArray<struct FSBQuestPreconditionUIInfo>* OutPreconditionList);
		class FString GetQuestNameByTextId(class UObject* WorldContextObject, const class FName& InTextTableName, const struct FSBTextTableHash& InTextId);
		void GetQuestNameArray(class UObject* WorldContextObject, TArray<int32_t> QuestIndexList, const class FString& FormatText, TArray<class FString>* OutQuestNameList);
		class FString GetQuestName(class UObject* WorldContextObject, int32_t QuestIndex);
		EQuestIconType GetQuestIconType(class UObject* WorldContextObject, int32_t QuestID);
		class FString GetQuestDoneText(class UObject* WorldContextObject, int32_t QuestIndex);
		class FString GetQuestDescByTextId(class UObject* WorldContextObject, const class FName& InTextTableName, const struct FSBTextTableHash& InTextId);
		class FString GetQuestDescAndSynopsis(class UObject* WorldContextObject, int32_t QuestIndex);
		class FString GetQuestDesc(class UObject* WorldContextObject, int32_t QuestIndex);
		bool GetQuestDeadlineOfUnlockCondition(class UObject* WorldContextObject, int32_t InQuestId, struct FDateTime* OutDeadline);
		class FString GetQuestConditionDetailByTextId(class UObject* WorldContextObject, const class FName& InTextTableName, const struct FSBTextTableHash& InTextId);
		class FString GetQuestConditionDetail(class UObject* WorldContextObject, int32_t QuestIndex);
		class FString GetQuestCloseText(class UObject* WorldContextObject, int32_t QuestIndex);
		bool GetQuestAreaIconInfoId(class UObject* WorldContextObject, int32_t InQuestIndex, TArray<class FName>* OutIdArray);
		void GetQuestAdditionalRewardInfo(class UObject* WorldContextObject, int32_t InQuestIndex, TArray<struct FSBQuestAdditionalRewardUIInfo>* OutInfos);
		bool GetQuestAcceptableCount(class UObject* WorldContextObject, int32_t InQuestId, int32_t* OutNum, int32_t* OutMaxNum);
		bool GetPictureInSkitFadeOutFlag();
		EQuestIconType GetNpcQuestIconType(class UObject* WorldContextObject, const class FName& NpcId, int32_t* QuestID);
		bool GetNextMainQuestPrevId(class UObject* WorldContextObject, int32_t* OutNextMainQuestPrevIndex);
		void GetNextMainQuestPreconditionUIInfo(class UObject* WorldContextObject, struct FSBQuestPreconditionUIInfo* OutPrecondition);
		bool GetNextMainQuestId(class UObject* WorldContextObject, int32_t* OutNextMainQuestIndex);
		class FString GetMainQuestIntervalText(class UObject* WorldContextObject);
		int32_t GetLotteryTypeRewardStorageType(class UObject* WorldContextObject, int32_t InLotteryGroupId);
		int32_t GetLatestMainQuest(class UObject* WorldContextObject);
		class FString GetInterruptQuestRemainTimeString(const struct FTimespan& InRemainTime);
		bool GetInterruptQuestProgressUIInfo(int32_t InQuestIndex, const struct FQuestProgressInfo& InProgressInfo, int32_t InStepNo, TArray<struct FSBQuestProgressItemUIInfo>* OutProgressItemList);
		bool GetInterruptQuestName(const class FString& InQuestId, class FString* OutQuestName);
		bool GetDungeonProgressUIInfo(class UObject* WorldContextObject, TArray<struct FSBDungeonProgressItemUIInfo>* OutProgressItemList);
		class FName GetCurrentLevelKillLocationId(class UObject* WorldContextObject);
		int32_t GetConditionNum(class UObject* WorldContextObject, int32_t QuestIndex, int32_t StepNo);
		void GetActiveQuestTargetNpc(class UObject* WorldContextObject, const class FName& NpcId, TArray<int32_t>* OutQuests);
		void GetActiveQuestTargetEnemy(class UObject* WorldContextObject, const class FName& EnemyId, TArray<int32_t>* OutQuests);
		void ConvertRewarIdToRewarInfo(TArray<class FName> InRewarIdList, TArray<struct FRewardInfo>* OutRewarInfoList, EQuestRewardCategory InCategory, bool HiddenFlag);
		bool ContainsCollectTriggerCondition(class UObject* WorldContextObject, int32_t QuestIndex);
		bool ContainsClassTypePrecondition(class UObject* WorldContextObject, int32_t InQuestIndex, ESBClassType ClassType);
		bool ContainsClassPrecondition(class UObject* WorldContextObject, int32_t InQuestIndex, ESBClassType ClassType, int32_t ClassLevel);
		bool ContainsClassLevelPrecondition(class UObject* WorldContextObject, int32_t InQuestIndex, int32_t ClassLevelMin, int32_t ClassLevelMax);
		bool CheckQuestRevivalCondition(class UObject* WorldContextObject, int32_t InQuestIndex, struct FDateTime* OutRevivalDate);
		bool CheckPreconditionByQuestId(class USBNetworkDataCache* InNetworkDataCache, const class FName& InQuestLongId);
		bool CheckPreconditionByIndex(class USBNetworkDataCache* InNetworkDataCache, int32_t InQuestIndex);
		bool CheckPrecoditionForQuestScript(class UObject* WorldContextObject, int32_t InQuestIndex);
		int32_t CalcCompletedConditionNum(class UObject* WorldContextObject, int32_t QuestIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBQuestCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBQuestCheatCommand : public UObject
	{
	public:
		void UpdateUnlockedQuestList();
		void UpdateQuestProgressGather(ESBTreasureBoxRarity TreasureBoxRarity, ESBDayTime DayTime);
		void UnlockQuest(const class FString& InLongId);
		void UnlockAllQuests();
		void StartTestInterruptQuest(const class FName& QuestID);
		void SetRouteGuideQuestId(const class FString& InLongId);
		void SetAutoDeliveryQuestUIQuestIdDraw(bool IsDraw);
		void Server_InterruptQuestLotteryTest(const class FString& InCharacterId, const class FName& QuestID, bool bRandomNumCheck);
		void PutInterruptQuestStatus(const class FName& QuestID);
		void OnCompleteQuestStep(bool bResult, int32_t RetCode, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void OnCompleteQuest(int32_t RetCode, int32_t QuestIndex, EQuestCompleteResult CompleteResult, const struct FSBMailRewardData& MailRewardData);
		void OnChangeQuestStep(bool bResult, int32_t RetCode, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void OnCancelQuest(bool bResult, int32_t QuestID);
		void OnAcceptQuest(bool bResult, EAcceptedQuestErrorCode ErrorCode, int32_t RetCode, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void InterruptQuestPointReset(const class FName& QuestID);
		void InterruptQuestLotteryTest(const class FName& QuestID, bool bRandomNumCheck);
		void DumpUnlockedQuestList();
		void DumpQuestCheckList();
		void DumpAcceptedQuestList();
		void CompleteQuestStep(const class FName& QuestID, const class FName& StepId);
		void CompleteQuest(const class FName& QuestID);
		void ChangeQuestStep(const class FName& QuestID, const class FName& StepId);
		void CancelQuest(const class FName& QuestID);
		void AdventureBoardSetDummyVersion(const class FString& InDummyVersion);
		void AdventureBoardDebugIdDraw(bool bIsDraw);
		void AdvanceQuest(const class FName& QuestID);
		void AdvanceAdventureBoard(int32_t InBoardId);
		void AddAutoOrderQuest(const class FString& QuestID);
		void AcceptQuest(const class FName& QuestID);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBQuestComponent
	 * Size -> 0x0128 (FullSize[0x01E0] - InheritedSize[0x00B8])
	 */
	class USBQuestComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_JW30[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnQuestListDelegete;                                     // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAcceptedQuestListDelegete;                             // 0x00D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAcceptQuestDelegate;                                   // 0x00E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCancelQuestDelegate;                                   // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteQuestDelegate;                                 // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCompleteQuestServerDelegate;                           // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateQuestProgressDelegate;                           // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JA7N[0x58];                                  // 0x0130(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            UpdatedQuests;                                           // 0x0188(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             OnUpdatedQuestsAtJoinDelegete;                           // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSBQuestUpdatedItemsAtJoin>                  UpdatedItemsAtJoin;                                      // 0x01A8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A63A[0x8];                                   // 0x01B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            DeletedQuestList;                                        // 0x01C0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            MainQuestIdList;                                         // 0x01D0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void SyncUpdatedItemsAtJoin();
		void SyncDeletedQuestList();
		void SetRouteGuideQuestId(const class FName& InId);
		void Server_UpdateQuestProgressWarpPortal(const class FName& WarpPortalId);
		void Server_UpdateQuestProgressTalkNpc(int32_t QuestIndex, const class FName& NpcId);
		void Server_UpdateQuestProgressPayedMoney(int32_t QuestIndex, const class FName& InNpcId);
		void Server_UpdateQuestProgressKillEnemy(const class FName& EnemyId);
		void Server_UpdateQuestProgressInteraction(const class FName& ObjectId);
		void Server_UpdateQuestProgressGather(ESBTreasureBoxRarity GatherPointType, ESBDayTime DayTime);
		void Server_UpdateQuestProgressEmote(const class FName& EmoteId);
		void Server_UpdateQuestProgressCraftItem(EItemType ItemType, int32_t ItemId);
		void Server_UpdateQuestProgressCollectTriggerByEnemy(const class FName& EnemyId);
		void Server_UpdateQuestProgressCollectTrigger(int32_t QuestIndex, int32_t ConditionId);
		void Server_UpdateQuestProgressCollectItem(EItemType ItemType, int32_t ItemIndex);
		void Server_UpdateQuestProgressClearID(const class FName& DungeonId);
		void Server_UpdateQuestProgressChallengeQuestStart(const class FName& InQuestId);
		void Server_UpdateQuestProgressArriveAt(const class FName& InPlaceId);
		void Server_UpdateQuestProgressAnyCondition(int32_t QuestIndex, int32_t InConditionId, const class FString& InConditionName);
		void Server_UpdateQuestProgressAdventurerRankUp(int32_t Rank);
		void Server_UpdateQuestProgress(TArray<int32_t> UpdateQuestList);
		void Server_UpdatedQuestsAtJoin();
		void Server_QuestList();
		void Server_OnUpdateQuestProgress(bool Result, int32_t SBRetCode, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void Server_OnCompleteQuest(int32_t InRetCode, const struct FCompleteQuestResponseData& InResponseData);
		void Server_OnCancelQuest(bool Result, int32_t QuestIndex);
		void Server_OnAcceptQuest(bool Result, EAcceptedQuestErrorCode ErrorCode, int32_t RetCode, const struct FAcceptedQuestInfo& Quest);
		void Server_CompleteStep(int32_t InQuestIndex, int32_t InStepNo, int32_t InConditionDataId, bool bCheatCommand);
		void Server_CompleteQuest(int32_t QuestIndex, int32_t RewardIndex, bool bUpsert, bool bIsOverflowLimitDiscard, bool bIsOverflowLimitSell);
		void Server_ChangeStep(int32_t InQuestIndex, int32_t InStepNo);
		void Server_CancelQuest(int32_t QuestIndex);
		void Server_AcceptQuest(int32_t QuestIndex);
		void Server_AcceptedQuestList();
		void SaveRouteGuideQuestId();
		bool Request_UpdateQuestProgressWarpPortal(const class FName& WarpPortalId);
		bool Request_UpdateQuestProgressTalkNpc(int32_t QuestIndex, const class FName& NpcId);
		bool Request_UpdateQuestProgressPayedMoney(int32_t QuestIndex, const class FName& InNpcId);
		bool Request_UpdateQuestProgressKillEnemy(const class FName& EnemyId);
		bool Request_UpdateQuestProgressInteraction(const class FName& ObjectId);
		bool Request_UpdateQuestProgressGather(ESBTreasureBoxRarity GatherPointType, ESBDayTime DayTime);
		bool Request_UpdateQuestProgressEmote(const class FName& EmoteId);
		bool Request_UpdateQuestProgressCraftItem(EItemType ItemType, int32_t ItemIndex);
		bool Request_UpdateQuestProgressCollectTriggerByEnemy(const class FName& EnemyId);
		bool Request_UpdateQuestProgressCollectTrigger(int32_t QuestIndex, int32_t ConditionId);
		bool Request_UpdateQuestProgressClearID(const class FName& OverrideDungeonName);
		bool Request_UpdateQuestProgressChallengeQuestStart(const class FName& InQuestId);
		bool Request_UpdateQuestProgressArriveAt(const class FName& InPlaceId);
		bool Request_UpdateQuestProgressAnyCondition(int32_t QuestIndex, int32_t InConditionId, const class FString& InConditionName);
		bool Request_UpdateQuestProgressAdventurerRankUp(int32_t Rank);
		bool Request_QuestList();
		bool Request_CompleteStep(int32_t InQuestIndex, int32_t InStepNo, int32_t InConditionDataId, bool bCheatCommand);
		bool Request_CompleteQuest(int32_t QuestIndex, int32_t RewardIndex, bool bIsOverflowLimitDiscard, bool bIsOverflowLimitSell);
		bool Request_CancelQuest(int32_t QuestIndex);
		bool Request_AcceptQuest(int32_t QuestIndex);
		bool Request_AcceptedQuestList();
		void OnUpdateQuestProgressDelegate__DelegateSignature(bool Result, int32_t RetCode, const struct FAcceptedQuestInfo& PrevAcceptedQuestInfo);
		void OnUpdatedQuestsAtJoin__DelegateSignature(TArray<int32_t> QuestIndexes);
		void OnQuestListDelegete__DelegateSignature(TArray<struct FUnlockedQuestInfo> QuestList);
		void OnOwnItemPostUpdatedItems();
		void OnOwnItemChangeAmount(const struct FSBChangeItemAmountParam& InParam);
		void OnIDClearConditionComplete(const class FName& InDungeonName);
		void OnCompleteQuestServerDelegate__DelegateSignature(class USBQuestComponent* InComponent, int32_t InRetCode, int32_t InQuestIndex);
		void OnCompleteQuestDelegate__DelegateSignature(int32_t RetCode, int32_t QuestIndex, EQuestCompleteResult CompleteResult, const struct FSBMailRewardData& MailRewardData);
		void OnCancelQuestDelegate__DelegateSignature(bool Result, int32_t QuestIndex);
		void OnAcceptQuestDelegate__DelegateSignature(bool Result, EAcceptedQuestErrorCode ErrorCode, int32_t RetCode, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void OnAcceptedQuestListDelegete__DelegateSignature();
		void LoadRouteGuideQuestId();
		TArray<struct FSBQuestUpdatedItemsAtJoin> GetUpdatedItemsAtJoin();
		class FName GetRouteGuideQuestId();
		TArray<int32_t> GetDeletedQuestList();
		void Client_UpdateQuestProgress(bool Result, int32_t SBRetCode, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void Client_UpdatedQuestsAtJoin(TArray<int32_t> Quests);
		void Client_SyncUpdatesItemsAtJoin(TArray<struct FSBQuestUpdatedItemsAtJoin> UpdatedItems);
		void Client_SyncDeletedQuestList(TArray<int32_t> InDeletedQuestList);
		void Client_QuestList(TArray<struct FUnlockedQuestInfo> QuestList);
		void Client_CompleteQuest(int32_t InRetCode, EQuestCompleteResult InCompleteResult, const struct FCompleteQuestResponseData& InResponseData);
		void Client_CancelQuest(bool Result, int32_t QuestIndex);
		void Client_AcceptQuest(bool Result, EAcceptedQuestErrorCode ErrorCode, int32_t RetCode, const struct FAcceptedQuestInfo& Quest);
		void Client_AcceptedQuestList(TArray<struct FAcceptedQuestInfo> QuestList);
		void ClearDeletedQuestList();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAcceptQuestEventParam
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBAcceptQuestEventParam : public UObject
	{
	public:
		bool                                                       bResult;                                                 // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EAcceptedQuestErrorCode                                    ErrorCode;                                               // 0x0029(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5L2K[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAcceptedQuestInfo                                  AcceptedQuestInfo;                                       // 0x0030(0x0060) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCompleteQuestEventParam
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBCompleteQuestEventParam : public UObject
	{
	public:
		int32_t                                                    RetCode;                                                 // 0x0028(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    QuestIndex;                                              // 0x002C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUpdateQuestProgressEventParam
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBUpdateQuestProgressEventParam : public UObject
	{
	public:
		bool                                                       bResult;                                                 // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZCWF[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAcceptedQuestInfo                                  PrevAcceptedQuestInfo;                                   // 0x0030(0x0060) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCancelQuestEventParam
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBCancelQuestEventParam : public UObject
	{
	public:
		bool                                                       bResult;                                                 // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_39Z4[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    QuestIndex;                                              // 0x002C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOnLoadRouteGuideQuestIdEventParam
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBOnLoadRouteGuideQuestIdEventParam : public UObject
	{
	public:
		bool                                                       bResult;                                                 // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7W9B[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                QuestID;                                                 // 0x002C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PTX9[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBQuestList
	 * Size -> 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
	 */
	class USBQuestList : public USBUserWidget
	{
	public:
		struct FSBQuestListFilterSetting                           FilterSetting;                                           // 0x02B0(0x0010) BlueprintVisible, NativeAccessSpecifierPublic
		TArray<struct FQuestListQuestData>                         QuestList;                                               // 0x02C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<int32_t>                                            ReferenceList;                                           // 0x02D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void SortList();
		void SetQuestStatus(int32_t InQuestIndex, EQuestStatus InQuestStatus);
		void SetFilterSetting(EQuestListFilterType InFilterType, bool bInFlag);
		void RemoveFromListByQuestIndex(int32_t InQuestIndex);
		void CollectQuest();
		bool CheckFilter(int32_t InQuestIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBQuestManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBQuestManager : public UObject
	{
	public:
		class UClass*                                              ScriptActorClass;                                        // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BEPE[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBQuestMiscSaveGame
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBQuestMiscSaveGame : public USaveGame
	{
	public:
		class FString                                              SaveSlotName;                                            // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   UserIndex;                                               // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K1PR[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class FString>                         RouteGuideQuestIdTable;                                  // 0x0040(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRaidBattleBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBRaidBattleBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void RaidBattleScoreCount_GimmickAction(class UObject* WorldContextObject, class ASBPlayerCharacter* Player);
		bool IsRaidBattle(class UObject* WorldContextObject);
		void GetRaidBattleMasterDataList(TArray<struct FSBRaidBattleMasterData>* MasterDataList, bool* IsExists);
		bool GetRaidBattleMasterData(const class FString& InGameContentId, struct FSBRaidBattleMasterData* OutRaidBattleMasterData);
		bool GetRaidBattleData(class UObject* InWorldContextObject, const class FString& InGateName, class FString* OutDungeonId, class FString* OutTermId, bool IsLogPut);
		int32_t GetAwardNum(class UObject* InWorldContextObject);
		void DebugPrintRaidResult(class UObject* InWorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRaidBattleComponent
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class USBRaidBattleComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnRaidBattleOccurringDelegete;                           // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsRaidGateActiveDelegete;                              // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_IsGateActive(const class FString& GateName);
		void Request_IsGateActive(const class FString& GateName);
		void OnRaidBattleOccurringDelegete__DelegateSignature(const class FString& InMapId, const class FString& InQuestName);
		void OnIsRaidGateActiveDelegete__DelegateSignature(const class FString& InMapId, bool IsActive);
		void Client_RaidBattleOccurringInfo(const class FString& InMapId, const class FString& InQuestName);
		void Client_IsGateActive(const class FString& InGateName, const class FString& InDungeonId, const class FString& InTermId, bool InOpen);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRaidBattleDungeonEntranceBase
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBRaidBattleDungeonEntranceBase : public AActor
	{
	public:
		class FString                                              GateId;                                                  // 0x0228(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void EntranceOpen();
		void EntranceClose();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRaidBattleGameInstance
	 * Size -> 0x0140 (FullSize[0x0368] - InheritedSize[0x0228])
	 */
	class ASBRaidBattleGameInstance : public AActor
	{
	public:
		unsigned char                                              UnknownData_EJ7B[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ERaidBattleGameStatus                                      m_Status;                                                // 0x0230(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ERaidBattleGameResult                                      m_Result;                                                // 0x0231(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NYX6[0x136];                                 // 0x0232(0x0136) MISSED OFFSET (PADDING)

	public:
		void SetResult(ERaidBattleGameResult InResult);
		void Server_SetScore(ERAID_BATTLE_SCORE ScoreType, class ASBPlayerCharacter* pPlayer, float InPoint);
		void Server_LeavePlayer(class ASBPlayerCharacter* InLeaveMember);
		void Server_JoinPlayer(class ASBPlayerCharacter* InJoinMember);
		void Server_AddScore(ERAID_BATTLE_SCORE ScoreType, class ASBPlayerCharacter* pPlayer, float InPoint);
		class FString GetRewardId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRaidBattleManager
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBRaidBattleManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_JI7P[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		void Request_GateServerStatusPut(class ASBPlayerCharacter* pPC, const class FString& GateName);
		void GateOpen(struct FSBRaidBattleData* Data);
		void GateClose(struct FSBRaidBattleData* Data);
		void DelegeteGateOpen(const class FString& TermId);
		void DelegeteGateClose(const class FString& TermId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRandomDungeonFieldMeshActor
	 * Size -> 0x0020 (FullSize[0x0258] - InheritedSize[0x0238])
	 */
	class ASBRandomDungeonFieldMeshActor : public AStaticMeshActor
	{
	public:
		struct FSBDungeonRect                                      RoomByRect;                                              // 0x0238(0x001C) Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PF9W[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRandomDungeonGenerator
	 * Size -> 0x0078 (FullSize[0x02A0] - InheritedSize[0x0228])
	 */
	class ASBRandomDungeonGenerator : public AActor
	{
	public:
		float                                                      MapCellSizeX;                                            // 0x0228(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MapCellSizeY;                                            // 0x022C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              EntranceActorClass;                                      // 0x0230(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRandomStream                                       RandomDungeonGeneratorStream;                            // 0x0238(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic
		int32_t                                                    MapCellNumMaxX;                                          // 0x0240(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MapCellNumMaxY;                                          // 0x0244(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSBRandomDungeonMakeParamTable>              RandomDungeonMakeParamTable;                             // 0x0248(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		class UDataTable*                                          RandomDungeonMakeParamSetTable;                          // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LoadMapTableRowName;                                     // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0SYQ[0x10];                                  // 0x0268(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBRandomDungeonAriaConnectInfo>             RandomDungeonRouteInfoParam;                             // 0x0278(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBDungeonRect>                              DungeonRectList;                                         // 0x0288(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic
		bool                                                       DebugDrawMapBox;                                         // 0x0298(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DebugViewImpossibleAria;                                 // 0x0299(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3FWP[0x6];                                   // 0x029A(0x0006) MISSED OFFSET (PADDING)

	public:
		bool BuildRandomDungeon();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRandomLightMaterialComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBRandomLightMaterialComponent : public UActorComponent
	{
	public:
		int32_t RewriteMaterialsOfStaticMeshesForPreview(TArray<class UMaterialInstance*> SourceMaterials, TArray<class UMaterialInstanceDynamic*> PreviewMaterials);
		int32_t RewriteMaterialsOfStaticMeshes(TArray<class UMaterialInstance*> TargetMaterials);
		int32_t RewriteMaterialsOfDecals(TArray<class UMaterialInstance*> TargetMaterials);
		void RewriteMaterialsCore(class UStaticMeshComponent* MeshComp, class UMaterialInstance* TargetMaterial, int32_t Idx);
		int32_t MeshesResetToDefaultMaterials(TArray<class UMaterialInstance*> SourceMaterials);
		class UMaterialInstanceDynamic* FindDecalsMaterial(class UDecalComponent* DecalComp, class UMaterialInstance* TargetMaterial, int32_t Idx);
		int32_t EditorPreview(float TimeRate, bool Preview);
		bool CheckEditorPreviewInit(TArray<class UMaterialInstance*> SourceMaterials);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRankingWidget
	 * Size -> 0x00D0 (FullSize[0x0380] - InheritedSize[0x02B0])
	 */
	class USBRankingWidget : public USBUserWidget
	{
	public:
		TArray<struct FRankingData>                                RankingList;                                             // 0x02B0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FRankingHistoryData>                         RankingHistoryList;                                      // 0x02C0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FRankingHistoryData>                         HistoryComboBoxList;                                     // 0x02D0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       IsLoaded;                                                // 0x02E0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1O4Z[0x3];                                   // 0x02E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MyRank;                                                  // 0x02E4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    IsRankingOut;                                            // 0x02E8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsRankingAggregation;                                    // 0x02EC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NEX5[0x3];                                   // 0x02ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRankingData                                        MyRankData;                                              // 0x02F0(0x0088) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    totalCount;                                              // 0x0378(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AP7U[0x4];                                   // 0x037C(0x0004) MISSED OFFSET (PADDING)

	public:
		struct FRankingHistoryData SearchRankingHistoryData(const struct FRankingHistoryData& InHistoryData, ESBClassType InClassType);
		bool Request_RankingPageView(class ASBPlayerController* PlayerController, const struct FRankingHistoryData& InHistoryData, const class FString& InCharacterId, ESBClassType InClassType, int32_t InPageIndex);
		bool Request_RankingHistory(class ASBPlayerController* PlayerController);
		void OnFailedRankingView();
		void OnCompletedRankingView();
		void OnCompletedRankingHistory();
		bool IsLoad();
		int32_t GetTotalCount();
		TArray<struct FRankingData> GetRankingList();
		TArray<struct FRankingHistoryData> GetRankingHistoryList();
		int32_t GetMyRank();
		TArray<struct FRankingHistoryData> GetHistoryComboBoxList();
		int32_t GetCharacterRank(const class FString& InCharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRankingPartyWidget
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBRankingPartyWidget : public USBUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicatedAlwaysGimmick
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBReplicatedAlwaysGimmick : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicatedGimmick
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBReplicatedGimmick : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraph
	 * Size -> 0x0150 (FullSize[0x05F8] - InheritedSize[0x04A8])
	 */
	class USBReplicationGraph : public UReplicationGraph
	{
	public:
		TArray<class UClass*>                                      SpatializedClasses;                                      // 0x04A8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      NonSpatializedChildClasses;                              // 0x04B8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AlwaysRelevantClasses;                                   // 0x04C8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class UReplicationGraphNode_GridSpatialization2D*          GridNode;                                                // 0x04D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReplicationGraphNode_ActorList*                     AlwaysRelevantNode;                                      // 0x04E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y0EJ[0x50];                                  // 0x04E8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBReplicationGraphNode*>                     SBReplicationGraphNodeList;                              // 0x0538(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      ExplicitySetReplicationInfoClasses;                      // 0x0548(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6WZS[0x98];                                  // 0x0558(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CurrentOneFrameProcessedConnections;                     // 0x05F0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QGEG[0x4];                                   // 0x05F4(0x0004) Fix size for supers

	public:
		void NotifyPlayerReplicateState(class AActor* PlayerActor, const struct FVector& Location);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraph_City
	 * Size -> 0x0018 (FullSize[0x0610] - InheritedSize[0x05F8])
	 */
	class USBReplicationGraph_City : public USBReplicationGraph
	{
	public:
		class USBReplicationGraphNode_City_PlayerState_ForConnection* PlayerStateConnectionNode;                               // 0x05F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBReplicationGraphNode_Player_ForGlobalConnection*  PlayerCharacterConnectionNode;                           // 0x0600(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBReplicationGraphNode_Player_ForGlobalConnection*  PlayerCharacterConnectionNode2;                          // 0x0608(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationTestComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBReplicationTestComponent : public UActorComponent
	{
	public:
		void RequestRepTest();
		void Multicast_RepTest();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicateTestActor
	 * Size -> 0x0018 (FullSize[0x04D0] - InheritedSize[0x04B8])
	 */
	class ASBReplicateTestActor : public ACharacter
	{
	public:
		class FScriptMulticastDelegate                             OnPostNetReceiveSignature;                               // 0x04B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBReplicationTestComponent*                         TestComp;                                                // 0x04C8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraph_Field
	 * Size -> 0x0048 (FullSize[0x0640] - InheritedSize[0x05F8])
	 */
	class USBReplicationGraph_Field : public USBReplicationGraph
	{
	public:
		TArray<class APlayerState*>                                WorldPlayerStateList;                                    // 0x05F8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class ASBPlayerCharacter*>                          WorldPlayerCharacterList;                                // 0x0608(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class ASBEnemyCharacter*>                           WorldEnemyCharacterList;                                 // 0x0618(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class USBReplicationGraphNode_City_PlayerState_ForConnection* PlayerStateConnectionNode;                               // 0x0628(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBReplicationGraphNode_Player_ForGlobalConnection*  PlayerCharacterConnectionNode;                           // 0x0630(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBReplicationGraphNode_Player_ForGlobalConnection*  EnemyCharacterConnectionNode;                            // 0x0638(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_AlwaysRelevant_ForConnection
	 * Size -> 0x0230 (FullSize[0x0280] - InheritedSize[0x0050])
	 */
	class USBReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_PSSW[0x220];                                 // 0x0050(0x0220) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              LastPawn;                                                // 0x0270(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7UVU[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_PlayerStateFrequencyLimiter
	 * Size -> 0x0028 (FullSize[0x0078] - InheritedSize[0x0050])
	 */
	class USBReplicationGraphNode_PlayerStateFrequencyLimiter : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_O2AV[0x28];                                  // 0x0050(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class USBReplicationGraphNode : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_J3ZF[0x10];                                  // 0x0050(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_GlobalPlayer
	 * Size -> 0x0020 (FullSize[0x0080] - InheritedSize[0x0060])
	 */
	class USBReplicationGraphNode_GlobalPlayer : public USBReplicationGraphNode
	{
	public:
		TArray<struct FSBGlobalRepTargetInfo>                      WorldActorList;                                          // 0x0060(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZC60[0x10];                                  // 0x0070(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_ViewController_ForConnection
	 * Size -> 0x0008 (FullSize[0x0068] - InheritedSize[0x0060])
	 */
	class USBReplicationGraphNode_ViewController_ForConnection : public USBReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_9Q1U[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_City_PlayerState_ForConnection
	 * Size -> 0x0028 (FullSize[0x0088] - InheritedSize[0x0060])
	 */
	class USBReplicationGraphNode_City_PlayerState_ForConnection : public USBReplicationGraphNode
	{
	public:
		TArray<struct FSBPlayerStateRepForCity>                    PlayerRepStateList;                                      // 0x0060(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y2Q2[0x18];                                  // 0x0070(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_Player_ForGlobalConnection
	 * Size -> 0x0060 (FullSize[0x00E0] - InheritedSize[0x0080])
	 */
	class USBReplicationGraphNode_Player_ForGlobalConnection : public USBReplicationGraphNode_GlobalPlayer
	{
	public:
		struct FSBReplicationPlayerSyncImportant                   SyncObject;                                              // 0x0080(0x0060) NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_Field_PlayerState_ForConnection
	 * Size -> 0x0050 (FullSize[0x00A0] - InheritedSize[0x0050])
	 */
	class USBReplicationGraphNode_Field_PlayerState_ForConnection : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_7VZM[0x50];                                  // 0x0050(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_Field_PlayerCharacter_ForConnection
	 * Size -> 0x0030 (FullSize[0x0080] - InheritedSize[0x0050])
	 */
	class USBReplicationGraphNode_Field_PlayerCharacter_ForConnection : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_GCRL[0x30];                                  // 0x0050(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReplicationGraphNode_Field_EnemyCharacter_ForConnection
	 * Size -> 0x0030 (FullSize[0x0080] - InheritedSize[0x0050])
	 */
	class USBReplicationGraphNode_Field_EnemyCharacter_ForConnection : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_JVRA[0x30];                                  // 0x0050(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReportComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBReportComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnRequestReportSendDelegate;                             // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BC39[0x20];                                  // 0x00C8(0x0020) MISSED OFFSET (PADDING)

	public:
		void ServerRequestReportSend(const struct FReportData& ReportData);
		void SaveReportedLog(const class FString& TargetCharacterId);
		void RequestReportSend(const struct FReportData& ReportData);
		void OnRequestReportSendDelegate__DelegateSignature(bool bWasSuccessful, int32_t RetCode);
		bool IsAbleToReport(const class FString& TargetCharacterId);
		void ClientRequestReportSendComplete(bool bWasSuccessful, int32_t RetCode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReportLogSaveGame
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class USBReportLogSaveGame : public USaveGame
	{
	public:
		class FString                                              SaveSlotName;                                            // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   UserIndex;                                               // 0x0038(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5U4G[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, struct FSBReportedInfo>                ReportedInfoMaps;                                        // 0x0040(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBResearchTeamComponent
	 * Size -> 0x0070 (FullSize[0x0128] - InheritedSize[0x00B8])
	 */
	class USBResearchTeamComponent : public USBPlayerControllerComponentBase
	{
	public:
		class FScriptMulticastDelegate                             OnGetListDelegate;                                       // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActivateDelegate;                                      // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XG59[0x50];                                  // 0x00D8(0x0050) MISSED OFFSET (PADDING)

	public:
		void Server_OnActivate(int32_t InRetCode, const struct FSBResearchTeamData& InData);
		void Server_Activate();
		void Request_GetList();
		void Request_Activate();
		void OnGetListDelegate__DelegateSignature(bool Result);
		void OnGetList(int32_t InRetCode);
		void OnActivateDelegate__DelegateSignature(bool Result);
		TArray<struct FSBResearchTeamData> GetList();
		struct FTimespan GetDuration();
		struct FSBResearchTeamData GetData();
		void Client_Sync(const struct FSBResearchTeamData& InData);
		void Client_Activate(bool Result, const struct FSBResearchTeamData& InData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRespawnHUD
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBRespawnHUD : public UUserWidget
	{
	public:
		bool                                                       IsGameOver;                                              // 0x0278(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsInit;                                                  // 0x0279(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsBattleAreaMessage;                                     // 0x027A(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0SEY[0x5];                                   // 0x027B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel*                                        RootPanel;                                               // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPanelWidget*                                        KeyOverlay;                                              // 0x0288(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCountdownUI*                                      CountdownUI;                                             // 0x0290(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnUpdateGauge();
		void DisableRespawn();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRespawnPointBase
	 * Size -> 0x0020 (FullSize[0x0270] - InheritedSize[0x0250])
	 */
	class ASBRespawnPointBase : public ANavigationObjectBase
	{
	public:
		class FName                                                RespawnPointTag;                                         // 0x0250(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RespawnAreaRadius;                                       // 0x0258(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RespawnPointPTCheckAll;                                  // 0x025C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       RespawnPointPTCheckOnce;                                 // 0x025D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YY49[0x2];                                   // 0x025E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                MiniMapId;                                               // 0x0260(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       MiniMapRouteVisibility;                                  // 0x0268(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C80J[0x7];                                   // 0x0269(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRespawnPoint
	 * Size -> 0x0008 (FullSize[0x0278] - InheritedSize[0x0270])
	 */
	class ASBRespawnPoint : public ASBRespawnPointBase
	{
	public:
		class UShapeComponent*                                     CollisionComponent;                                      // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRespawnPointField
	 * Size -> 0x0028 (FullSize[0x0298] - InheritedSize[0x0270])
	 */
	class ASBRespawnPointField : public ASBRespawnPointBase
	{
	public:
		unsigned char                                              UnknownData_AQ78[0x8];                                   // 0x0270(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     ActivatedEffect;                                         // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent*                            ActivatedEffectComponent;                                // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBInteractionTargetComponent*                       InteractionTargetComponent;                              // 0x0290(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ServerRegisterRespawnPoint(class ASBPlayerCharacter* PlayerCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBResponseChecker
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBResponseChecker : public UUserWidget
	{
	public:
		void Request_GetAPICheck(class ASBPlayerController* InPlayerController, bool bServer, const class FString& URL);
		void Request_APICheck(class ASBPlayerController* InPlayerController, bool bServer, const class FString& URL, const class FString& PostData);
		void OnCompleteAPICheck(bool bWasSuccessful, const class FString& Response);
		class FString GenerateParamData(TArray<struct FSBDebugPostDataType> PostData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBResultBaseWidget
	 * Size -> 0x0080 (FullSize[0x02F8] - InheritedSize[0x0278])
	 */
	class USBResultBaseWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnEndDelegate;                                           // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FKey                                                MenuGamePadKey_;                                         // 0x0288(0x0018) Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FKey                                                MenuKeyboardKey_;                                        // 0x02A0(0x0018) Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBUIKeyConfigAction                                       ShortcutRingKeyConfigAct_;                               // 0x02B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KPQS[0x7];                                   // 0x02B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FKey>                                        ShortcutRingGamePadKey_;                                 // 0x02C0(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FKey>                                        ShortcutRingKeyboardKey_;                                // 0x02D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MRAG[0x18];                                  // 0x02E0(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateFooterBtn();
		void UnbindShortcutRing(class USBShortcutRingWidget* InShortcutRing);
		void SwitchingShortcutRing();
		void SwitchingResultWindow();
		void SetVisibleScreenOver(bool IsVisible);
		void SetVisibleResultWindow(bool IsVisible);
		void SetVisibleMouseCursor(bool IsVisible);
		void SetVisibleKeyGuideShortcutRing(bool IsVisible);
		void SetVisibleKeyGuideMenu(bool IsVisible);
		void SetVisibleKeyGuide(bool IsVisible);
		void SetVisibleFooter(bool IsVisible);
		void SetResultWindowBtnEnable(bool IsEnabled);
		void SetFooterBtnEnable(bool IsEnable);
		void SetEnableControlShortcutRing(bool Flag);
		void SetEnableControlMenu(bool Flag);
		void SetActiveScreenOver(int32_t InIndex);
		void OpenShortcutRing();
		void OpenDialogLetter();
		void OpenDialogAbility();
		void Open();
		void OnTerminateKeyGuide();
		void OnTerminate();
		void OnInitializeKeyGuide();
		void OnInitialize();
		void OnEventKeyUp(const struct FKeyEvent& Event);
		void OnEventKeyDown(const struct FKeyEvent& Event);
		void OnEndDelegate__DelegateSignature();
		void OnEnd();
		bool isVisibleResultWindow();
		bool isVisibleFooter();
		bool IsShowDetailWindow();
		bool isOpenShortcutRing();
		bool isLearningAbility();
		bool IsEnableControlShortcutRing();
		bool IsEnableControlMenu();
		class USBResultPanelBaseWidget* GetResultWidget();
		class USBShortcutRingWidget* GetResultShortcutRing();
		class USBResultKeyGuide* GetResultKeyGuide();
		class USBResultFooter* GetFooter();
		void ExecuteShortcutRing();
		void ExecuteMenu();
		void EventKeyUp(const struct FKeyEvent& Event);
		void EventKeyDown(const struct FKeyEvent& Event);
		void End();
		void DebugPrint(const class FString& inString);
		void CloseShortcutRing();
		void Close();
		void BindShortcutRing(class USBShortcutRingWidget* InShortcutRing);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBResultBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBResultBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsGameOverResult(class UObject* InWorldContextObject);
		bool IsEndResult(class UObject* InWorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBResultFooter
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBResultFooter : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        CPBtn;                                                   // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BtnTextID;                                               // 0x0280(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YSEO[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetupTimer(float InTime);
		void SetBtnTextID(int32_t InTextId);
		void SetBtnEnable(bool IsEnable);
		void PlayAnimOut();
		void PlayAnimInBtn();
		void PlayAnimIn();
		void OnSetBtnTextID(int32_t InTextId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBResultKeyGuide
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBResultKeyGuide : public UUserWidget
	{
	public:
		class UTextBlock*                                          MenuKeyGuide;                                            // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          ShortcutRingKeyGuide;                                    // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSpaceGuide;                                            // 0x0288(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsShortcutRingGuide;                                     // 0x0289(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6O98[0x6];                                   // 0x028A(0x0006) MISSED OFFSET (PADDING)

	public:
		void Setup(const struct FKey& InKey, ESBUIKeyConfigAction InKeyConfigAction);
		class FText GetTextShortcutRingGuide();
		class FText GetTextMenuGuide();
		class FText FormatText(const class FText& InFormat, const class FText& InKeyString);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBResultPanelBaseWidget
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBResultPanelBaseWidget : public UUserWidget
	{
	public:
		void Setup();
		void SetBtnEnable(bool IsEnabled);
		void Open();
		bool IsShowDetailWindow();
		void End();
		void Close();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReticleCharge
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class USBReticleCharge : public UUserWidget
	{
	public:
		class UImage*                                              ShotCharge;                                              // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TextLevel;                                               // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextLevelValue;                                          // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z856[0x10];                                  // 0x0290(0x0010) MISSED OFFSET (PADDING)

	public:
		void Setup(int32_t InLevel, bool IsLockOn, bool IsCharge, float InChargeRate);
		void SetRayHit(bool bRayHit);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBReticleComponent
	 * Size -> 0x0098 (FullSize[0x0150] - InheritedSize[0x00B8])
	 */
	class USBReticleComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_Q5A6[0x7C];                                  // 0x00B8(0x007C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      m_RayLength;                                             // 0x0134(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DebugDrawLineTrace;                                      // 0x0138(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1M4F[0x3];                                   // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DebugDrawLineLifetime;                                   // 0x013C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I3F0[0x10];                                  // 0x0140(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRichTextBlock
	 * Size -> 0x04A0 (FullSize[0x05C0] - InheritedSize[0x0120])
	 */
	class USBRichTextBlock : public UWidget
	{
	public:
		class FName                                                TextTableName;                                           // 0x0120(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBTextTableAsset*                                   TextTableAsset;                                          // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsNumberId;                                             // 0x0130(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JWKQ[0x3];                                   // 0x0131(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TextId;                                                  // 0x0134(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                TextIdString;                                            // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                Text;                                                    // 0x0140(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		bool                                                       UsePlainText;                                            // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnableWidthFitting;                                     // 0x0159(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UE5Z[0x2];                                   // 0x015A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      TextDelegate;                                            // 0x015C(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_904P[0x4];                                   // 0x016C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateFontInfo                                      Font;                                                    // 0x0170(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateFontInfo                                      RubyFont;                                                // 0x01F8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    RubySize;                                                // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           RubyOffset;                                              // 0x0284(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BigRubySize;                                             // 0x028C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           BigRubyOffset;                                           // 0x0290(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        Color;                                                   // 0x0298(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETextJustify                                               Justification;                                           // 0x02A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoWrapText;                                            // 0x02A9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I3VA[0x2];                                   // 0x02AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WrapTextAt;                                              // 0x02AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FMargin                                             Margin;                                                  // 0x02B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		float                                                      LineHeightPercentage;                                    // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AKVP[0x4];                                   // 0x02C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBRichTextBlockDecorator*                           Decorator;                                               // 0x02C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTextBlockStyle                                     DefaultStyle;                                            // 0x02D0(0x02A0) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UFPQ[0x20];                                  // 0x0570(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLinkClicked;                                           // 0x0590(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6W1W[0x20];                                  // 0x05A0(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetText(const class FText& InText);
		void SetColor(const struct FLinearColor& InColor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRichTextBlockDecorator
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBRichTextBlockDecorator : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRmShopComponent
	 * Size -> 0x0150 (FullSize[0x0208] - InheritedSize[0x00B8])
	 */
	class USBRmShopComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnCertificationDelegate;                                 // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetHistoryDelegate;                                    // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetCryptocurrencyDelegate;                             // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AV1I[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGetHistoryExpiredDelegate;                             // 0x00F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCheckStatus;                                           // 0x0100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetShopItemsDelegate;                                  // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnValidateItemDelegate;                                  // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetShopItemsRoPSDelegate;                              // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPurchaseRoPS;                                          // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRetryPurchaseRoPS;                                     // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCancelPurchaseRoPS;                                    // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNotifyPayment;                                         // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SU5X[0x8];                                   // 0x0180(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPurchaseFS;                                            // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCheckCouponCode;                                       // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTermsOfUseGet;                                         // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTermsOfUseRead;                                        // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPurchaseSPS;                                           // 0x01C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnExchangeItemDelegate;                                  // 0x01D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetUserCouponDelegate;                                 // 0x01E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGenerateCouponDelegate;                                // 0x01F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void ServerGetUserCoupon();
		void ServerGenerateCoupon(int32_t CouponId);
		void ServerCertification(int32_t InYear, int32_t InMonth);
		void Server_ValidateItem(ESBRmShopMenuType InShopType, int32_t InItemID, int32_t InAmount);
		void Server_RetryPurchaseRoPS();
		void Server_PurchaseSPS(int32_t InItemID, int32_t InAmount, int32_t InPayType, int32_t InSeasonId);
		void Server_PurchaseRoPS(const class FString& InPaymentType, int32_t InShopId, int32_t InItemID);
		void Server_PurchaseFS(ESBRmShopMenuType InShopType, int32_t InItemID, int32_t InAmount, const class FString& InCoupon);
		void Server_OnSellOwnItem(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems, int32_t BpPointAfter);
		void Server_GetHistoryExpired(ESBHistoryType InHistoryType);
		void Server_GetHistory(ESBHistoryType InType, int32_t InYear, int32_t InMonth, int32_t InIndex, int32_t InCount);
		void Server_GetCryptocurrency();
		void Server_ExchangeItem(TArray<class FString> UniqueIdList, TArray<int32_t> ItemAmountList);
		void Server_CheckCouponCode(const class FString& CouponCode);
		void Server_CancelPurchaseRoPS();
		void SaveSeasonPoint(int32_t InSeasonPoint);
		void RequestTermsOfUseRead(TArray<int32_t> InIds);
		void RequestTermsOfUseGet();
		void RequestGetUserCoupon();
		void RequestGenerateCoupon(int32_t CouponId);
		void Request_ValidateItem(ESBRmShopMenuType ShopType, int32_t InItemID, int32_t InAmount);
		void Request_RetryPurchaseRoPS();
		void Request_PurchaseSPS(int32_t InItemID, int32_t InAmount, int32_t InPayType, int32_t InSeasonId);
		void Request_PurchaseRoPS(const class FString& InPaymentType, int32_t InShopId, int32_t InItemID);
		void Request_PurchaseFS(ESBRmShopMenuType ShopType, int32_t InItemID, int32_t InAmount, const class FString& InCoupon);
		void Request_GetShopItemsRoPS(int32_t InShopId);
		void Request_GetShopItems(ESBRmShopMenuType ShopType, int32_t InShopId);
		void Request_GetHistoryExpired(class ASBPlayerController* InPlayerController, ESBHistoryType InHistoryType);
		void Request_GetHistory(ESBHistoryType InType, int32_t InYear, int32_t InMonth, int32_t InIndex, int32_t InCount);
		bool Request_GetCryptocurrency(class ASBPlayerController* InPlayerController);
		void Request_ExchangeItem(TArray<class FString> UniqueIdList, TArray<int32_t> ItemAmountList);
		void Request_CheckStatus(ESBRmShopType ShopType);
		void Request_CheckCouponCode(const class FString& CouponCode);
		void Request_Certification(int32_t Year, int32_t Month);
		void Request_CancelPurchaseRoPS();
		void OnValidateItemDelegate__DelegateSignature(bool Result, int32_t RetCode, bool IsOk, const struct FSBPurchaseCondition& InPurchaseConditionData);
		void OnTermsOfUseRead__DelegateSignature(int32_t RetCode);
		void OnTermsOfUseGet__DelegateSignature(TArray<struct FSBTermsOfUseInfo> TermsOfUseList);
		void OnRetryPurchaseRoPS__DelegateSignature(bool Result, int32_t RetCode);
		void OnPurchaseSPS__DelegateSignature(bool Result, int32_t RetCode, const struct FSBPurchaseFSResponse& ResponseData);
		void OnPurchaseRoPS__DelegateSignature(bool Result, int32_t RetCode, const struct FSBPurchaseRoPSResponse& ResponseData);
		void OnPurchaseFS__DelegateSignature(bool Result, int32_t RetCode, const struct FSBPurchaseFSResponse& ResponseData);
		void OnNotifyPayment__DelegateSignature(bool Result, int32_t RetCode, const struct FSBPurchaseRoPSResponse& ResponseData);
		void OnGetUserCouponDelegate__DelegateSignature(int32_t RetCode, bool IsSuccess, bool IsQuestClear, const struct FSBUserCoupon& UserCoupon);
		void OnGetShopItemsRoPS__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FSBShopItemRoPS> ResponseData, int32_t PruchasePrice);
		void OnGetShopItemsDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FSBShopItem> ShopItems);
		void OnGetHistoryExpiredDelegate__DelegateSignature(bool Result, int32_t RetCode, const struct FSBHistoryExpired& HistoryExpired);
		void OnGetHistoryDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<struct FSBCashHistory> HistoryData);
		void OnGetCryptocurrencyDelegate__DelegateSignature(bool Result, int32_t RetCode, const struct FSBCryptoCurrency& Cryptocurrency);
		void OnGenerateCouponDelegate__DelegateSignature(int32_t RetCode, const struct FSBUserCoupon& UserCoupon);
		void OnExchangeItemDelegate__DelegateSignature(int32_t RetCode, int32_t BP_Point);
		void OnCheckStatus__DelegateSignature(ESBRmShopErrorStatus Result, int32_t RetCode);
		void OnCheckCouponCode__DelegateSignature(bool Result, int32_t RetCode, bool IsEnable, int32_t Rate);
		void OnCertificationDelegate__DelegateSignature(bool Result, int32_t RetCode);
		void OnCancelPurchaseRoPS__DelegateSignature(bool Result, int32_t RetCode);
		int32_t GetSeasonPoint();
		void CreateURL(const class FString& InURL, class FString* OutURL);
		void ClientGetUserCoupon(int32_t InRetCode, bool IsSuccess, bool IsQuestClear, const struct FSBUserCoupon& UserData);
		void ClientGenerateCoupon(int32_t InRetCode, const struct FSBUserCoupon& UserData);
		void ClientCertificationComplete(bool bInWasSuccessful, int32_t InRetCode);
		void Client_ValidateItem(bool bInWasSuccessful, int32_t InRetCode, bool IsOk, const struct FSBPurchaseCondition& InPurchaseConditionData);
		void Client_SellOwnItem(int32_t InRetCode, TArray<struct FOwnItemInfo> DiffOwnItemList, int32_t BpPointAfter);
		void Client_RetryPurchaseRoPS(bool bInWasSuccessful, int32_t InRetCode);
		void Client_PurchaseRoPS(bool bInWasSuccessful, int32_t InRetCode, const struct FSBPurchaseRoPSResponse& InResponseData);
		void Client_PurchaseFS(bool bInWasSuccessful, int32_t InRetCode, const struct FSBPurchaseFSResponse& InResponseData);
		void Client_GetHistoryExpired(bool bInWasSuccessful, int32_t InRetCode, const struct FSBHistoryExpired& InHistoryExpired);
		void Client_GetHistory(bool bInWasSuccessful, int32_t InRetCode, TArray<struct FSBCashHistory> InHistoryData);
		void Client_GetCryptocurrency(bool bInWasSuccessful, int32_t InRetCode, const struct FSBCryptoCurrency& InCryptocurrency);
		void Client_CheckCouponCode(bool bInWasSuccessful, int32_t InRetCode, bool InEnable, int32_t InRate);
		void Client_CancelPurchaseRoPS(bool bInWasSuccessful, int32_t InRetCode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRmShopMenu
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBRmShopMenu : public USBUserWidget
	{
	public:
		int32_t                                                    Cert_Year;                                               // 0x02B0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Cert_Month;                                              // 0x02B4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Cert_Count;                                              // 0x02B8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Cert_Age;                                                // 0x02BC(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetEscIconVisibility(bool IsShow);
		void OnSubMenuTermReady_RoPurchaseEx();
		void OnSubMenuTermReady();
		void OnSubDialogCloseReady();
		void OnRsDialogManagerCloseReady();
		void OnEndOutAnim();
		void OnEndInAnim();
		void DialogOpen_Certification();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRmShopMenuChildBase
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBRmShopMenuChildBase : public UUserWidget
	{
	public:
		ESBRmShopMenuType                                          CurrentShopType;                                         // 0x0278(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R7W5[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBRmShopMenu*                                       OwnerRmShopMenu;                                         // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsMaintenanceAll;                                        // 0x0288(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_24HK[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (PADDING)

	public:
		void ShopOutAnim();
		void ShopInAnim();
		void SetOwnerRmShopMenu(class USBRmShopMenu* InOwnerRmShopMenu);
		void SetMaintenanceAll(bool InIsMaintenanceAll);
		void SetCurrentShopType(ESBRmShopMenuType InCurrentShopType);
		void ListenInput(bool IsStart);
		bool GetMaintenanceAll();
		void CloseExWindow();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRootCoordinator
	 * Size -> 0x0068 (FullSize[0x02A8] - InheritedSize[0x0240])
	 */
	class ASBRootCoordinator : public ASBSquadAI
	{
	public:
		class UClass*                                              FactionSquadClass;                                       // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, class ASBSquadAI*>                       FactionSquads;                                           // 0x0248(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<class USBSquadMemberComponent*>                     Members;                                                 // 0x0298(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRouteGuide
	 * Size -> 0x0068 (FullSize[0x0290] - InheritedSize[0x0228])
	 */
	class ASBRouteGuide : public AActor
	{
	public:
		bool                                                       Available;                                               // 0x0228(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       DebugDraw;                                               // 0x0229(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       GuideUpdateFlag;                                         // 0x022A(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9MGJ[0x1];                                   // 0x022B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CurrentDestination;                                      // 0x022C(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2RXQ[0xC];                                   // 0x0234(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          RouteTexture;                                            // 0x0240(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2NSU[0x10];                                  // 0x0248(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBRouteGuideArea                                          PlayersArea;                                             // 0x0258(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I0TX[0x13];                                  // 0x0259(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseRouteFindPatch;                                      // 0x026C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J154[0x3];                                   // 0x026D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBRouteGuideDebugInfo                              DebugInfo;                                               // 0x0270(0x0020) BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic

	public:
		ESBRouteGuideArea UpdatePlayersArea(const struct FVector& Location, float Scale);
		void SetRouteMapData(class UTexture2D* Texture);
		bool SetDestination(const class FName& DestinationId, ESBRouteGuideDestIdType IdType);
		void Set2DArea(const struct FVector& Root, float Size);
		bool SearchNearestRoutePt(ESBRouteGuideArea Area, int32_t Range, float PosX, float PosY, int32_t* OutX, int32_t* OutY, int32_t* OutZ, int32_t* Cntr);
		void OverridePlayersArea(ESBRouteGuideArea Area, bool Overlapping);
		void OnChangeAvailability();
		int32_t MemAccessTest(int32_t Count);
		void LineCheck(int32_t DX, int32_t DY, TArray<struct FVector2D>* Points);
		bool IsDebugDraw();
		void InnerCulling(TArray<struct FVector2D> CurrentPts, TArray<struct FVector2D> InnerPts, TArray<struct FVector2D>* Points);
		void InitRouteLevelLink(TArray<struct FSBRouteGuideDestinationLevelLink> LinkData, TMap<class FName, struct FVector4>* OutData);
		void GetTexelColorInfo(class UTexture2D* Texture, TArray<struct FSBTexelColorInfo>* Out);
		int32_t GetRoutePtValue(ESBRouteGuideArea Area, int32_t X, int32_t Y);
		ESBRouteGuideArea FindRoutePtAreaValue(ESBRouteGuideArea Area, int32_t X, int32_t Y, int32_t* Z);
		class UNavigationPath* FindPath(const struct FVector& PathStart, const struct FVector& PathGoal, class AActor* PathfindingContext, int32_t MaxSearchNode, TArray<struct FVector>* NavPathPoints);
		void CircleCheck(int32_t Radius, TArray<struct FVector2D>* Points);
		void ChangePlayersArea(ESBRouteGuideArea Area);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRouteGuideMarker
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBRouteGuideMarker : public AActor
	{
	public:
		bool IsMarkerVisible();
		struct FVector GetMarkerLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRouteGuideShape
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBRouteGuideShape : public AActor
	{
	public:
		void UpdateRouteGuideShapeInstances(TArray<struct FSBTexelColorInfo> ShapeInfo, int32_t MaxLevel);
		void AddRouteGuideShapeInstance(int32_t X, int32_t Y, int32_t Z, int32_t Type);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRouteGuideTool
	 * Size -> 0x0028 (FullSize[0x0250] - InheritedSize[0x0228])
	 */
	class ASBRouteGuideTool : public AActor
	{
	public:
		TArray<struct FIntPoint>                                   FillBuff;                                                // 0x0228(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XBHO[0x18];                                  // 0x0238(0x0018) MISSED OFFSET (PADDING)

	public:
		void GetRouteFill(class UTextureRenderTarget2D* RenderTarget, const struct FIntPoint& Seed, TArray<struct FIntPoint>* DrawPts);
		bool GetNavPolysInBox(const struct FBox& Box, const struct FVector& RoutePt, const struct FVector2D& Scale, TArray<struct FSBRouteGuideAreaPoly>* Polys);
		bool FillRoute(class UCanvas* Canvas, ESBRouteGuideArea RouteGuideArea, float Height, TArray<struct FIntPoint> Points);
		void DrawRouteSplines(class UCanvas* Canvas, ESBRouteGuideArea RouteGuideArea, const struct FVector& RootPoint, const struct FVector2D& Scale, class UInstancedStaticMeshComponent* Instances, float Thickness, int32_t LinkLength, float BaseHeight, float StartHeight, float EndHeight);
		void DrawRouteAreas(class UCanvas* Canvas, ESBRouteGuideArea RouteGuideArea, TArray<struct FSBRouteGuideAreaPoly> Polys);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRouteGuideToolArea
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBRouteGuideToolArea : public AActor
	{
	public:
		ESBRouteGuideArea                                          AreaColor;                                               // 0x0228(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R0OX[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRS_MovementModeChange
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class USBRS_MovementModeChange : public UAIFwReactiveSkill
	{
	public:
		void OnMovementModeChange(class ACharacter* Character, EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRsDialog
	 * Size -> 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
	 */
	class USBRsDialog : public USBUserWidget
	{
	public:
		unsigned char                                              UnknownData_W32F[0x18];                                  // 0x02B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      EndDynamicDelegate;                                      // 0x02C8(0x0010) BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		ERsDialogResult                                            OkOperation;                                             // 0x02D8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ERsDialogResult                                            CancelOperation;                                         // 0x02D9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FPVZ[0x6];                                   // 0x02DA(0x0006) MISSED OFFSET (PADDING)

	public:
		void StartProcessingRsDialog(const class FText& Message);
		void StartErrorMessageRsDialog(int32_t MessageId, int32_t ErrorCode);
		void SetYesButtonClickSe(class UAkAudioEvent* AkEvent, const class FString& EventName);
		void SetDefaultOperation(ERsDialogResult InOkOperation, ERsDialogResult InCancelOperation);
		void OnEndDialog(ERsDialogResult Result);
		void EndProcessingRsDialog();
		void DialogEndDynamicDelegate__DelegateSignature(ERsDialogResult Result);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRsDialogBPFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBRsDialogBPFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class USBRsDialog* ShowProcessingRsDialog(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FText& Message, class UUserWidget* InParentWidget, EUIZOrder InZOrder);
		void ShowMessageDialog(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FText& Message, class UUserWidget* InParentWidget, EUIZOrder InZOrder);
		void ShowErrorMessageRsDialog(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, int32_t MessageId, int32_t ErrorCode, class UUserWidget* InParentWidget, EUIZOrder InZOrder);
		void HideProcessingRsDialog(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBRTPCAkComponent
	 * Size -> 0x0040 (FullSize[0x0430] - InheritedSize[0x03F0])
	 */
	class USBRTPCAkComponent : public UAkComponent
	{
	public:
		class FString                                              PostEventAtSameTimeBGMEvet;                              // 0x03F0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsSelfRTPCTarget;                                        // 0x0400(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EUZ8[0x7];                                   // 0x0401(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBRTPCAkComponentData>                      RTPCDataList;                                            // 0x0408(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected
		float                                                      UpdateInterval;                                          // 0x0418(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsEndFade;                                              // 0x041C(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DCBJ[0x3];                                   // 0x041D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EndFadeTime;                                             // 0x0420(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZA97[0xC];                                   // 0x0424(0x000C) MISSED OFFSET (PADDING)

	public:
		void BGMPostEvent(const class FString& PostEventName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBScbPopup
	 * Size -> 0x0048 (FullSize[0x02C0] - InheritedSize[0x0278])
	 */
	class USBScbPopup : public UUserWidget
	{
	public:
		TArray<struct FSBScbClassData>                             ClassDataList;                                           // 0x0278(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		struct FSBScbClassData                                     TotalData;                                               // 0x0288(0x0024) BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D9QK[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBScbClassConditionsData>                   ClassConditionsDataList;                                 // 0x02B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void CreateDummyData();
		void CreateData();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBScbUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBScbUtility : public UBlueprintFunctionLibrary
	{
	public:
		struct FSBScbClassData GetScbTotalData(class UObject* WorldContextObject);
		struct FSBScbClassData GetScbClassData(class UObject* WorldContextObject, ESBClassType ClassType, int32_t OverrideClassLevel);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBScreenShotUtils
	 * Size -> 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
	 */
	class USBScreenShotUtils : public UObject
	{
	public:
		unsigned char                                              UnknownData_1SKR[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SaveMyDocumentsFolderPathProjectName;                    // 0x0040(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              SaveFileNameBase;                                        // 0x0050(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAddTimestampString;                                     // 0x0060(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSaveToMyDocuments;                                      // 0x0061(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowUi;                                                 // 0x0062(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAddUniqueSuffix;                                        // 0x0063(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JZW7[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWatermarkSetting>                           WatermarkSettings;                                       // 0x0068(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P4DV[0x10];                                  // 0x0078(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ScreenshotNotificationClass;                             // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         ScreenshotNotification;                                  // 0x0090(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0QKX[0xC];                                   // 0x0098(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SaveProcessFlag;                                         // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LAH0[0x10];                                  // 0x00A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDebugUseEngineProcess;                                  // 0x00B8(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDebugStopOnCaptured;                                    // 0x00B9(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDebugStopOnCompressed;                                  // 0x00BA(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SQ10[0x5];                                   // 0x00BB(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUploadImageContainer
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USBUploadImageContainer : public UObject
	{
	public:
		unsigned char                                              UnknownData_0DIM[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBUploadImage>                              UploadImageList;                                         // 0x0038(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class UTexture2DDynamic*                                   TempTextureDynamic;                                      // 0x0048(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<unsigned char>                                      TempPngData;                                             // 0x0050(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8AQ2[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		bool SetSaveUploadImage(int32_t ImageCount, class UTexture2DDynamic* UploadTexture, TArray<unsigned char> InPNGData);
		void OnRequestScreenShot(class UObject* Sender, class UObject* Param);
		TArray<class UTexture2DDynamic*> GetUploadTextureList();
		TArray<struct FSBUploadImage> GetUploadImageList();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUploadImageContainerUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUploadImageContainerUtility : public UBlueprintFunctionLibrary
	{
	public:
		class USBUploadImageContainer* GetUploadImageContainer(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBEventSuspend
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBEventSuspend : public UObject
	{
	public:
		unsigned char                                              UnknownData_K3OY[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		bool IsSuspend();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBScriptActor
	 * Size -> 0x0838 (FullSize[0x0A60] - InheritedSize[0x0228])
	 */
	class ASBScriptActor : public AActor
	{
	public:
		TArray<class UDataTable*>                                  DefineTableList;                                         // 0x0228(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FSBScriptActorCreateDesc                            CreateDesc;                                              // 0x0238(0x00A0) BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayEnd;                                               // 0x02D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5PQ3[0xD8];                                  // 0x02E8(0x00D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, class AActor*>                           SubActors;                                               // 0x03C0(0x0050) BlueprintVisible, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      ReferenceActor;                                          // 0x0410(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IDRC[0x8];                                   // 0x0420(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              LastSpeaker;                                             // 0x0428(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FU3G[0x630];                                 // 0x0430(0x0630) MISSED OFFSET (PADDING)

	public:
		void ShowQuestJingle();
		void ShowQuestCompleteJingle(int32_t InQuestIndex);
		void ShowClassLevelUpEffect();
		void SetTalkModeFilterEnable(bool bInEnable);
		void SetFastForwardInfoDisplayFlag(bool bInFlag);
		void SetFastForwardFlag(bool bInFlag);
		void RetryConnectToServer();
		void OnYesNoPopupSelected(int32_t SelectItem);
		void OnYesNoDialogSelected(int32_t SelectItem);
		void OnWeaponSyntheMenuFinish(bool bDoSynthe);
		void OnWeaponAbilityRemoverFinish(bool bInDoRemoved);
		void OnWeaponAbilityReconditionFinish(bool bInDoRecondition);
		void OnWeaponAbilityExtenderFinish(bool bInDoExtended);
		void OnWeaponAbilityBuildupFinish(bool bInDoRecondition);
		void OnWarpMenuFinish();
		void OnWaitToIdlePlayerFinish();
		void OnWaitMusicCueFinished();
		void OnUpdateQuestProgressByTalkNpc(bool Result, int32_t RetCode);
		void OnUpdateQuestProgress(bool Result, int32_t RetCode, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void OnUnlockImagineRecipesFinished(int32_t RetCode);
		void OnUnlockCraftRecipesFinished(int32_t ErrorCode, TArray<struct FCharacterCraftRecepi> InUpdatedRecipe);
		void OnTitle2ndUIFinish();
		void OnTextWindowTurnText();
		void OnTApartMenuFinish();
		void OnStoragePresetEquipSetMenuFinish();
		void OnStorageMenuFinish();
		void OnStorageAbilityShopFinish();
		void OnStartInstanceBattleFailed(class USBMatchingGameState* InMatchedGame, ESBMatchingFailureType InFailureType);
		void OnSpawnSubActorFinished(const class FName& InProfileId, class AActor* InActor);
		void OnShowTutorialHelpFinished();
		void OnShowRankingBoardFinish();
		void OnShowDhcUIMenuFinish(int32_t Select);
		void OnShowColosseumMenu(const class FString& InMapName);
		void OnShopMenuFinish();
		void OnSetViewTargetFinish();
		void OnSetUserData(bool Result);
		void OnSetTalkModeFinished();
		void OnSetQuestEventModeFinished();
		void OnSetHiddenBuddyNpcFinished();
		void OnSetFieldShopModeFinished();
		void OnSetDemoModeFinish();
		void OnSetContentLockFinish(bool bInResult);
		void OnSendMailFinish(bool bInResult);
		void OnSelectMenu_SelectItem(int32_t SelectItem);
		void OnSaveDemoBrowsedFlagFinish(bool bSuccess);
		void OnRmShopMenuFinish();
		void OnResetViewTargetFinish();
		void OnResearchTeamMenuFinish();
		void OnRequestMyRoomFinish();
		void OnRequestFreeBuffEffectActivationFinished();
		void OnReportQuest(bool Result, int32_t QuestIndex);
		void OnQuestRequestMenuFinish(bool bInAccepted);
		void OnQuestConfirmFinish();
		void OnQuestCancelMenuFinish();
		void OnQuestBoardFinish();
		void OnQuestAccept(bool Result, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void OnPlaySubTitleFinish();
		void OnPlayerCraftMenuFinish(bool bInDoCraft);
		void OnPlayEnd__DelegateSignature();
		void OnPickQuestFinish(int32_t InQuestIndex);
		void OnMessageDialogFinished();
		void OnMediaPlayerFinish();
		void OnMatchingFinished(bool IsCanceled);
		void OnLookAtLocationFinished();
		void OnLookAtActorForPlayerFinished();
		void OnLoginBonusCheckFinish();
		void OnLiquidMemoryShopFinish(bool bIsLiquidMemoryUsed);
		void OnLayoutSelected(int32_t Layout);
		void OnInteractNappoFinish(bool retlua);
		void OnImaginLevelingFinish();
		void OnImagineTypeSelectFinish(int32_t selectType);
		void OnImagineStackBFinish();
		void OnImagineCraftFinish();
		void OnGuildMenuFinish();
		void OnGuildJoinMenuFinish();
		void OnGetValidSubEventFinished(const class FName& InEventId);
		void OnGetEmoteFinish(bool bResult);
		void OnForceNavi_ShowMaskFinish();
		void OnForceNavi_EquipMountImagineFinish();
		void OnForceNavi_DelayFinish();
		void OnFmMenuFinish();
		void OnFang_expeditionFinish();
		void OnFadeFinish();
		void OnExecChildProcessFinished(class AActor* Actor, EEndPlayReason EndPlayReason);
		void OnEventShopFinish();
		void OnEstheMenuFinish();
		void OnEnhanceMenuFinish(bool bInDoEnhance);
		void OnDemoFinishBP(bool bSuccess);
		void OnDelayFinish();
		void OnDebugSetAdventurerRankFinished(int32_t InRetCode);
		void OnCompleteQuestStep(bool bResult, const struct FAcceptedQuestInfo& AcceptedQuestInfo);
		void OnCommandMenuAdventureBoardFinish();
		void OnColoringShopMenuFinish();
		void OnColorFilterFinish();
		void OnCloseNappoUIAndCheckCompleteFinish();
		void OnClassChangeMenuFinish(bool bInResult);
		void OnChoiceDialogFinish(int32_t SelectItem);
		void OnCashExchangeShopFinish();
		void OnCancelQuest(bool bResult, int32_t QuestIndex);
		void OnApplyDofSettingsFinish();
		void OnAdventurerRankUpFinish(bool bSuccess);
		void OnAdventurerRankShopMenuFinish();
		void OnActivateWarpPointFinish();
		void OnActivateContent(bool bInResult);
		bool GetFastForwardInfoDisplayFlag();
		bool GetFastForwardFlag();
		void BP_WaitToIdlePlayer();
		void BP_WaitMusicCue();
		void BP_UpdateQuestProgressByTalkNpc(int32_t InQuestIndex, const class FName& NpcId);
		void BP_StopCameraShake(const class FName& InId);
		void BP_StartActorLipSyncAnim(class USBCharaPartsFaceComponent* FaceComponent, float Speed, float Duration);
		void BP_SpawnSubActor(const class FName& InCharacterId, const struct FVector& Location);
		void BP_ShowYesNoPopup();
		void BP_ShowYesNoDialog(const class FText& MessageText);
		void BP_ShowWeaponSyntheMenu();
		void BP_ShowWeaponAbilityRemover();
		void BP_ShowWeaponAbilityReconditioner();
		void BP_ShowWeaponAbilityExtender();
		void BP_ShowWeaponAbilityBuildup();
		void BP_ShowWarpMenu();
		void BP_ShowTutorialHelp(const class FName& InId);
		void BP_ShowTitle2ndUI();
		void BP_ShowTextWindowHigh(const class FText& InText, EUIZOrder InZOrder, float InYOffset);
		void BP_ShowTextWindow(const class FText& InText, bool bWaitUserInput);
		void BP_ShowTApartMenu();
		void BP_ShowTAbilityShopMenu(EShopType InShopType);
		void BP_ShowStoragePresetEquipSetMenu();
		void BP_ShowStorageMenu();
		void BP_ShowStorageAbilityShop();
		void BP_ShowShopMenu(EShopType InShopType, const class FName& InProductListId);
		void BP_ShowSelectMenu(TArray<class FText> InItems, float YOffset);
		void BP_ShowRmShopMenu();
		void BP_ShowResearchTeamMenu();
		void BP_ShowRankingBoard();
		void BP_ShowQuestRequestMenu(int32_t InQuestIndex);
		void BP_ShowQuestJingle();
		void BP_ShowQuestConfirm(int32_t InQuestIndex);
		void BP_ShowQuestCompleteJingle(int32_t InQuestIndex);
		void BP_ShowQuestCancelMenu();
		void BP_ShowQuestBoard(const class FName& InQuestBoardId);
		void BP_ShowPlayerCraftMenu();
		void BP_ShowMoneyUI();
		void BP_ShowMessageDialog(const class FText& MessageText);
		void BP_ShowMediaPlayerUI(const class FName& SourceId);
		void BP_ShowLiquidMemoryShopMenu();
		void BP_ShowImaginLeveling();
		void BP_ShowImagineTypeSelector();
		void BP_ShowImagineStackB();
		void BP_ShowImaginCraft(bool bIsBattleImagine);
		void BP_ShowHudLayoutSelectPreset();
		void BP_ShowGuildMenu();
		void BP_ShowGuildJoinMenu();
		void BP_ShowFmMenu();
		void BP_ShowFang_expedition();
		void BP_ShowEventShopMenu(EShopType InShopType);
		void BP_ShowEstheMenu();
		void BP_ShowEnhanceMenu();
		void BP_ShowEngramUI();
		void BP_ShowDhcUIMenu(bool IsDhcMapMode);
		void BP_ShowConnectToServerError(int32_t RetCode);
		void BP_ShowCommandMenuAdventureBoard();
		void BP_ShowColosseumMenu();
		void BP_ShowColoringShop(bool InIsCostumeChange, bool InIsColorSVEnabled);
		void BP_ShowChoiceDialog(const class FText& InQuestion, TArray<class FText> InItems);
		void BP_ShowCashExchangeShopMenu();
		void BP_ShowBalloonWindow(class ACharacter* InAttachCharacter, const class FText& InText);
		void BP_ShowAdventurerRankUp();
		void BP_ShowAdventurerRankShopMenu();
		void BP_SetViewTargetPreset(const class FName& InCameraId, const struct FVector& InOffsetLocation, float InBlendTime);
		void BP_SetViewTargetActor(class AActor* InNewTarget, bool bInRelative);
		void BP_SetViewTarget(const struct FVector& InTargetLocation, const struct FRotator& InTargetRotation, float InBlendTime);
		void BP_SetUserData(const class FName& InKey, const class FString& InValue);
		void BP_SetTalkModeFixed(class AActor* InOtherActor, const class FName& ViewParamId, bool bIsNoCheckAtTeleportPlayer, float InCameraZOffset);
		void BP_SetTalkMode(class AActor* InOtherActor, float InDistancePlayer, bool bIsNoCheckAtTeleportPlayer, float InCameraZOffset);
		void BP_SetSpeaker(const class FName& InName);
		void BP_SetQuestEventMode();
		void BP_SetHiddenBuddyNpc();
		void BP_SetEnvironmentMeshShadow(const class FName& RowName, bool bCastShadow);
		void BP_SetDemoModeWait();
		void BP_SetContentLock(ESBContentLockType InContentLockType, bool bInLock);
		void BP_SetColorFilter(const struct FLinearColor& InColor, float InDuration);
		void BP_SendMail(const class FName& InMailId);
		void BP_SaveDemoBrowsedFlag(const class FName& InDemoName);
		void BP_ResumeChange();
		void BP_ResetViewTarget();
		void BP_ResetColorFilter(float InDuration);
		void BP_RequestMyRoom(int32_t InRoomId);
		void BP_RequestFreeBuffEffectActivation(class ASBFieldActorFreeBuffPoint* BuffPoint, class AActor* PlayerCharacter);
		void BP_ReportQuest(int32_t QuestIndex);
		void BP_QuestAccept(int32_t QuestIndex);
		void BP_PlaySubTitle(const class FName& InId);
		void BP_PlayParticleFromActor(class AActor* InTargetActor, const class FName& InParticleId, const class FName& InAttachSocketId, const struct FVector& InOffsetLocation);
		void BP_PlayDemo_SkipSave(const class FName& InDemoName);
		void BP_PlayDemo(const class FName& InDemoName);
		void BP_PlayCameraShake(const class FName& InId);
		void BP_PickQuest(const class FName& InClientId);
		void BP_OnStart();
		void BP_LookAtLocation(class AActor* InActor, const struct FVector& InTargetLocation);
		void BP_LookAtActorForPlayer(class AActor* SourceActor, class AActor* DestinationActor, bool bIsMount);
		void BP_LoginBonusCheck();
		void BP_IsMatchingCanselMenu();
		void BP_InteractNappo(const class FString& NappoId);
		void BP_HideMoneyUI();
		void BP_HideEngramUI();
		void BP_GetValidSubEvent(TArray<class FName> InSubEvents);
		void BP_GetEmote(const class FName& InEmoteId);
		void BP_ForceNavi_WaitEquipMountImagine();
		void BP_ForceNavi_ShowMask(const class FName& TableKeyName, bool bIsNoWait);
		void BP_ForceNavi_OpenCommandMenu();
		void BP_ForceNavi_Mask_DebugExit();
		void BP_ForceNavi_Delay(float InDelayTime);
		void BP_ForceNavi_CloseMask();
		void BP_FadeOut(float InDuration, bool bInWait);
		void BP_FadeIn(float InDuration, bool bInWait);
		void BP_Delay(float InDelayTime);
		void BP_CompleteQuestStep(int32_t InQuestIndex, int32_t InStepIndex, int32_t InConditionDataId);
		void BP_CloseTextWindowHigh();
		void BP_CloseNappoUIAndCheckComplete();
		void BP_ClassChangeMenu();
		void BP_ApplyDofSettings(const class FName& InSettingId, float InTransitionTime);
		void BP_ActivateWarpPoint(const class FName& InWarpPointId);
		void BP_ActivateContentsOnComplete(bool bAll);
		void BP_ActivateContent(const class FName& InContentId, bool bIsStartMatching);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBScriptAsset
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBScriptAsset : public UDataAsset
	{
	public:
		class FString                                              Code;                                                    // 0x0030(0x0010) Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class FString BP_GetCode();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBScriptBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBScriptBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool SuspendScript(class UObject* InWorldContextObject, int32_t InHandle);
		int32_t StartScript_TalkByTriggerArray(class UObject* InWorldContextObject, TArray<class FName> InMainTriggers, TArray<class FName> InSubTriggers, TMap<class FName, class FString> ParamMap);
		int32_t StartScript_TalkByTrigger(class UObject* InWorldContextObject, const class FName& InTrigger, TArray<class FName> InSubTriggers, TMap<class FName, class FString> ParamMap);
		int32_t StartScript_Talk(class UObject* InWorldContextObject, class USBScriptAsset* InScriptAsset, TMap<class FName, class FString> ParamMap);
		int32_t StartScript(class UObject* InWorldContextObject, const struct FSBScriptActorCreateDesc& InCreateDesc);
		void SetLocalVariable(class UObject* InWorldContextObject, const class FName& InName, const class FString& InValue);
		bool GetUserFlag(class UObject* InWorldContextObject, const class FName& InName, bool* bOutExist);
		ESBScriptStatus GetScriptStatus(class UObject* InWorldContextObject, int32_t InScriptHandle);
		class USBScriptManager* GetScriptManager(class UObject* InWorldContextObject);
		bool GetScriptActorFastForwardFlag(class UObject* InWorldContextObject);
		bool GetRequestOpenCommandMenuByScript(class UObject* InWorldContextObject);
		class ASBScriptActor* GetActiveScriptActor(class UObject* InWorldContextObject);
		bool CheckEventTriggerConditionByTriggerId(class UObject* InWorldContextObject, const class FName& InTriggerId);
		bool CheckEventTriggerCondition(class UObject* InWorldContextObject, const struct FSBEventTriggerCondition& InCondition);
		bool CheckEventTriggerCloseConditionByTriggerId(class UObject* InWorldContextObject, const class FName& InTriggerId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBScriptExecutor
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBScriptExecutor : public UUserWidget
	{
	public:
		class FString LoadStringFromFile(const class FString& InFilePath);
		TArray<class FString> GetLuaScripts();
		void ExecuteSBScript(const class FString& InScriptCode);
		void ExecuteConsoleCommands(const class FString& InConsoleCommands);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBScriptManager
	 * Size -> 0x00F8 (FullSize[0x0120] - InheritedSize[0x0028])
	 */
	class USBScriptManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_ODFZ[0xD0];                                  // 0x0028(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             BeginScriptDelegate;                                     // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EndScriptDelegate;                                       // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S42A[0x8];                                   // 0x0118(0x0008) MISSED OFFSET (PADDING)

	public:
		bool IsScriptRunning();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassMenu
	 * Size -> 0x0000 (FullSize[0x02A8] - InheritedSize[0x02A8])
	 */
	class USBSeasonPassMenu : public USBCommandMenuChildBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassPurchaseMenu
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBSeasonPassPurchaseMenu : public UUserWidget
	{
	public:
		TArray<class USBSeasonPassPurchasePlanData*>               DataList;                                                // 0x0278(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		int32_t GetDataNum();
		class USBSeasonPassPurchasePlanData* GetData(int32_t Index);
		void CreateDummyData();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassMenuRewardItemData
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBSeasonPassMenuRewardItemData : public UObject
	{
	public:
		class FName                                                SeasonPassRewardId;                                      // 0x0028(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBSeasonPassRewardType                                    Plan;                                                    // 0x0030(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I4ED[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                RewardId;                                                // 0x0034(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Rank;                                                    // 0x003C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsReceived;                                             // 0x0040(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KPXY[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class USBSeasonPassMenuRewardRankData>      Owner;                                                   // 0x0044(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TF23[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool IsValid();
		bool IsMaxRankData();
		bool IsAchieved();
		ESBSeasonPassRewardItemState GetState();
		class FString GetItemName(bool* bValid);
		class FName GetItemImageId();
		struct FSBMasterReward FindMasterReward(bool* bExists);
		bool CanReceive();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassMenuRewardRankData
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBSeasonPassMenuRewardRankData : public UObject
	{
	public:
		int32_t                                                    Rank;                                                    // 0x0028(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FJ9N[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBSeasonPassMenuRewardItemData*                     FreeReward;                                              // 0x0030(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBSeasonPassMenuRewardItemData*                     SubscribedReward1;                                       // 0x0038(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBSeasonPassMenuRewardItemData*                     SubscribedReward2;                                       // 0x0040(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBSeasonPassMenuRewardItemData*                     SubscribedReward3;                                       // 0x0048(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class USBSeasonPassMenuRewardData>          Owner;                                                   // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool IsLastReward();
		bool IsCurrentRank();
		bool IsAchieved();
		bool HasCanReceiveItemData();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassMenuRewardData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBSeasonPassMenuRewardData : public UObject
	{
	public:
		TArray<class USBSeasonPassMenuRewardRankData*>             RewardList;                                              // 0x0028(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void Update();
		void Init();
		int32_t GetMaxRank();
		int32_t GetAchievedRank();
		void CreateDummyData();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassPurchaseRewardItemData
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class USBSeasonPassPurchaseRewardItemData : public UObject
	{
	public:
		ESBSeasonPassPurchaseRewordType                            Type;                                                    // 0x0028(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBSeasonPassPlanState                                     PassType;                                                // 0x0029(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0B6F[0x2];                                   // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Amount;                                                  // 0x002C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    CurrentRunk;                                             // 0x0030(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    AfterRunk;                                               // 0x0034(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsOverMax;                                              // 0x0038(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4YSH[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                RewardId;                                                // 0x003C(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SJI5[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		struct FSBMasterReward FindMasterReward(bool* bExists);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassPurchasePlanData
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USBSeasonPassPurchasePlanData : public UObject
	{
	public:
		int32_t                                                    PlanIndex;                                               // 0x0028(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBSeasonPassPlanState                                     PassType;                                                // 0x002C(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ODUK[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Name;                                                    // 0x0030(0x0018) BlueprintVisible, NativeAccessSpecifierPublic
		class FText                                                Description;                                             // 0x0048(0x0018) BlueprintVisible, NativeAccessSpecifierPublic
		int32_t                                                    Price;                                                   // 0x0060(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PaidOnly;                                                // 0x0064(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BGNW[0x3];                                   // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBSeasonPassPurchaseRewardItemData*>         RewardItemList;                                          // 0x0068(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USBSeasonPassPurchaseRewardItemData*>         ReceiptRewardItemList;                                   // 0x0078(0x0010) BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		bool Init(int32_t InPaidPlanIndex);
		void CreateDummyData(int32_t InPlanIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassQuestMenu
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBSeasonPassQuestMenu : public UUserWidget
	{
	public:
		TArray<class USBSeasonPassQuestMenuListData*>              QuestDataList;                                           // 0x0278(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void SetQuestListManager(const struct FSBSeasonPassQuestListManager& InListManager);
		void Init();
		class USBSeasonPassQuestMenuListData* GetWeeklyQuestData();
		class USBSeasonPassQuestMenuListData* GetSeasonQuestData();
		class USBSeasonPassQuestMenuListData* GetDailyQuestData();
		class USBSeasonPassQuestMenuListData* GetBonusQuestData();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassQuestMenuBlurprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBSeasonPassQuestMenuBlurprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		int32_t GetSeasonWeek(class UObject* WorldContextObject, const struct FDateTime& InStartDate, const struct FDateTime& InEndDate);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSeasonPassQuestMenuListData
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBSeasonPassQuestMenuListData : public UObject
	{
	public:
		struct FSBSeasonPassQuestListData                          Data;                                                    // 0x0028(0x0018) BlueprintVisible, NativeAccessSpecifierPublic

	public:
		bool IsShowReloadButton();
		TArray<struct FSBSeasonPassQuestItemData> GetWeekData(class UObject* WorldContextObject, int32_t WeekCount, ESBSeasonPassQuestFilterType InFilter);
		TArray<struct FSBSeasonPassQuestItemData> GetStandardDataList(class UObject* WorldContextObject, ESBSeasonPassQuestFilterType InFilter);
		TArray<struct FSBSeasonPassQuestItemData> GetQuestItemList(class UObject* WorldContextObject, ESBSeasonPassQuestFilterType InFilter);
		int32_t GetLastWeekCount();
		TArray<struct FSBSeasonPassQuestItemData> GetEventDataList(class UObject* WorldContextObject, ESBSeasonPassQuestFilterType InFilter);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSecondPasswordSender
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBSecondPasswordSender : public UUserWidget
	{
	public:
		void OnAuthorizeSecondPassword(bool bWasSuccessful, int32_t ExpireCount, ESendSecondPasswordRole Role, bool bWasAuthorized);
		void AuthorizeSecondPassword(int32_t Password, ESendSecondPasswordRole Role);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSegmentNavLinkProxyWithAnchor
	 * Size -> 0x0000 (FullSize[0x0270] - InheritedSize[0x0270])
	 */
	class ASBSegmentNavLinkProxyWithAnchor : public ASBSegmentNavLinkProxy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSerialCodeComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBSerialCodeComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnSerialCodeAuthenticateDelegate;                        // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		bool Request_SerialCodeAuthenticate(const class FString& InSerialCode);
		void OnSerialCodeAuthenticateDelegate__DelegateSignature(bool Result, bool AuthenticateSuccessed);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSerializeTextTableDataFiles
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class USBSerializeTextTableDataFiles : public UObject
	{
	public:
		unsigned char                                              UnknownData_EIIL[0xA0];                                  // 0x0028(0x00A0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSerializeTextTableFiles
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class USBSerializeTextTableFiles : public UObject
	{
	public:
		unsigned char                                              UnknownData_1RDS[0xA0];                                  // 0x0028(0x00A0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBServerDamageEventInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBServerDamageEventInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBServerSelectWindow
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBServerSelectWindow : public UUserWidget
	{
	public:
		TArray<struct FSBServerEntry>                              ServerList;                                              // 0x0278(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WGEB[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateServerList(class UObject* WorldContextObject);
		void RequestInformationList();
		void OnUpdatedServerList(bool IsExists);
		void OnLoginFailure(int32_t InRetCode);
		void OnInformationList(bool bWasSuccessful, TArray<struct FSBOperationInformation> InformationList);
		void OnFailedConnectServer(int32_t RetCode);
		bool GetKeyValue(const class FString& CharacterId, const class FString& InKeyName, class FString* OutValue);
		bool ConnectToServerAtFriendSession(class UObject* WorldContextObject, const class FString& CharacterId, const class FString& InFriendCharacterId);
		bool ConnectToServer(class UObject* WorldContextObject, const class FString& CharacterId, bool bReturnDisconnect);
		void ConnectToJoinServer(int32_t SessionIndexInSearchResults);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShieldGuardComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBShieldGuardComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShieldGuardInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBShieldGuardInterface : public UInterface
	{
	public:
		void NotifyGuardSucceeded(const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser);
		void NotifyGuardFail(const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser);
		bool IsGuardBreak();
		bool IsGuard();
		class UPrimitiveComponent* GetHitCollision(class AActor* HitActor, class UPrimitiveComponent* HitComp);
		struct FVector GetGuardDirection();
		struct FSBDefenceGuardConfig GetDefenceGuardConfig(class UPrimitiveComponent* DamagedComp);
		bool CanUseShield();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBShortcutBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool IsSameItemInfo(const struct FShortcutItemInfo& Lhs, const struct FShortcutItemInfo& rhs);
		bool CommandIDToBookMarkerSlot(EShortcutIconCommandID InCommandID, ESBBookMarkerSlot* OutBookMarkSlot);
		bool CommandIDToBookMark(class UObject* WorldContextObject, EShortcutIconCommandID InCommandID, class FString* OutBookMark);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingWidget
	 * Size -> 0x00B0 (FullSize[0x0328] - InheritedSize[0x0278])
	 */
	class USBShortcutRingWidget : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             EventOnOpen;                                             // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EventOnClose;                                            // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EventOnOpenEdit;                                         // 0x0298(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EventOnCloseEdit;                                        // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UWidgetSwitcher*                                     Switcher;                                                // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CPRoot;                                                  // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingRing*                                 Ring;                                                    // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingKeyGuidePlate*                        KeyGuidePlate;                                           // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEdit*                                 EditWindow;                                              // 0x02D8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_901W[0x48];                                  // 0x02E0(0x0048) MISSED OFFSET (PADDING)

	public:
		void UnregistShortcutKey();
		void SetupRing();
		void SetOptionEditMode(bool IsOptionEditMode);
		void Reset(int32_t Index);
		void RegistShortcutKey();
		void PlaySESelectIcon();
		void PlaySEExecute();
		void PlayAnimOut();
		void PlayAnimIn();
		void OpenEnd();
		void OnUnbind();
		void OnDeleteEditWindow();
		void OnCreateEditWindow();
		void OnBind();
		bool IsOpenFlag();
		int32_t GetSelectSlotID();
		void ExecuteKeyF9();
		void ExecuteKeyF8();
		void ExecuteKeyF7();
		void ExecuteKeyF6();
		void ExecuteKeyF5();
		void ExecuteKeyF12();
		void ExecuteKeyF11();
		void ExecuteKeyF10();
		void EventShortcutRing__DelegateSignature();
		void DeleteEditWindow();
		void CreatedEditWindow();
		void CloseEnd();
		void Close();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEdit
	 * Size -> 0x00C8 (FullSize[0x0340] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEdit : public UUserWidget
	{
	public:
		class USBShortcutRingEditTabList*                          TabList;                                                 // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditFilter*                           Filter;                                                  // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditRing*                             Ring;                                                    // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditIndexList*                        IndexList;                                               // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSList;                                                  // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditIconList*                         IconList;                                                // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditIconGroupList*                    GroupList;                                               // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             EventOnClose;                                            // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z505[0x80];                                  // 0x02C0(0x0080) MISSED OFFSET (PADDING)

	public:
		void SetupMouseTrackIconUI(const struct FShortcutItemInfo& InItemInfo);
		void SelectIcon(class USBShortcutRingIcon* InSelectIcon);
		void RightClickedRingIcon(int32_t InIndex);
		void ResetMouseTrackIconUI();
		void PlayAnimOut();
		void PlayAnimIn();
		bool OnUpdateIcon(const struct FShortcutItemInfo& InItemInfo);
		void OnUnbind();
		void OnSetupInventory(const struct FOwnItemInfo& InItemInfo);
		void OnSetupFixedPhrase();
		void OnSetupCommand();
		void OnPlaySESelect();
		void OnPlaySELeftClickRingIcon();
		void OnPlaySECancel();
		void OnBind();
		void LeftClickedRingIcon(int32_t InIndex);
		bool IsKeyDownCloseButton();
		bool IsClickedLMB();
		void EventShortcutRingEdit__DelegateSignature();
		void DeleteMouseTrackIconUI();
		void CreateMouseTrackIconUI();
		void Close();
		void ClickedTab();
		void ClickedStampCategory(const struct FSBStampCategoryMasterData& InMasterData);
		void ClickedRingIndex();
		void ClickedGroupListTitle(const class FString& InMapName, bool IsOpen);
		void ClickedFilter();
		void CallEventOnClose();
		void AddLeftPageItemInfoList(const struct FShortcutItemInfo& InItemInfo);
		void AddItemInfo(int32_t InItemIndex, bool IsCanUse);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditFilter
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditFilter : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 Text;                                                    // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OSUN[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnShowStampCategory();
		struct FSBStampCategoryMasterData GetSelectStampCategoryMasterData();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditIconGroup
	 * Size -> 0x0058 (FullSize[0x02D0] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditIconGroup : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnEventClickTitle;                                       // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnEventClickIcon;                                        // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class UGridPanel*                                          IconList;                                                // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBSwitchingTitle*                                   Title;                                                   // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ColumnsWarp;                                             // 0x02A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FMargin                                             PaddingWarp;                                             // 0x02AC(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsOpen;                                                 // 0x02BC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EW9N[0x13];                                  // 0x02BD(0x0013) MISSED OFFSET (PADDING)

	public:
		void OnUnbindIcon(class USBShortcutRingIcon* InIcon);
		void OnEventTitleClick__DelegateSignature(const class FString& InMapName, bool IsOpen);
		void OnEventIconClick__DelegateSignature(class USBShortcutRingIcon* InIcon);
		class USBShortcutRingIcon* OnCreateIcon();
		void OnClickTitle(bool IsOpen);
		void OnClickIcon(class USBShortcutRingIcon* InIcon);
		void OnBindIcon(class USBShortcutRingIcon* InIcon);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditIconGroupList
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditIconGroupList : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnEventClickTitle;                                       // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnEventClickIcon;                                        // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class UVerticalBox*                                        VBGroup;                                                 // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnUnbindGroup(class USBShortcutRingEditIconGroup* InGroup);
		void OnEventTitleClick__DelegateSignature(const class FString& InMapName, bool IsOpen);
		void OnEventIconClick__DelegateSignature(class USBShortcutRingIcon* InIcon);
		class USBShortcutRingEditIconGroup* OnCreateGroup(bool IsOpen);
		void OnClickGroupTitle(const class FString& InMapName, bool IsOpen);
		void OnClickGroupIcon(class USBShortcutRingIcon* InIcon);
		void OnBindGroup(class USBShortcutRingEditIconGroup* InGroup);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditIconList
	 * Size -> 0x0048 (FullSize[0x02C0] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditIconList : public UUserWidget
	{
	public:
		class UGridPanel*                                          IconList;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ColumnsIcon;                                             // 0x0280(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ColumnsText;                                             // 0x0284(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ColumnsCommand;                                          // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FMargin                                             PaddingIcon;                                             // 0x028C(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FMargin                                             PaddingText;                                             // 0x029C(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FMargin                                             PaddingCommand;                                          // 0x02AC(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I4AB[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnUnbindIcon(class USBShortcutRingIcon* InIcon);
		class USBShortcutRingIcon* OnCreateIcon();
		void OnBindIcon(class USBShortcutRingIcon* InIcon);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditIndex
	 * Size -> 0x0208 (FullSize[0x0480] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditIndex : public UUserWidget
	{
	public:
		class USBRuntimeTextBlock*                                 TxtIndex;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtTitle;                                                // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBButtonBase*                                       Button;                                                  // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Index;                                                   // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2N1S[0x4];                                   // 0x0294(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateColor                                         ActiveTextColor;                                         // 0x0298(0x0028) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FSlateColor                                         DisableTextColor;                                        // 0x02C0(0x0028) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FSlateBrush                                         SlateBrushButtonNormal;                                  // 0x02E8(0x0088) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FSlateBrush                                         SlateBrushButtonHovered;                                 // 0x0370(0x0088) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FSlateBrush                                         SlateBrushButtonPressed;                                 // 0x03F8(0x0088) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditIndexList
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditIndexList : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnClickIndex;                                            // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CanvasPanel;                                             // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditIndex*                            LastSelectedRingIndex;                                   // 0x0290(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YP5S[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetSelectIndex(int32_t InIndex);
		void OnClickIndex__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditRing
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditRing : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CanvasPanel;                                             // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditRingIcon
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditRingIcon : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     FrameSwitcher;                                           // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingIcon*                                 Icon;                                                    // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetHover(bool IsCondition);
		void PlayAnimClick();
		void OnPlayHoverSE();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditTab
	 * Size -> 0x0068 (FullSize[0x02E0] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditTab : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     TabSwitcher;                                             // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 Text;                                                    // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TextId;                                                  // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PNIK[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateColor                                         ActiveTextColor;                                         // 0x0290(0x0028) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FSlateColor                                         DisableTextColor;                                        // 0x02B8(0x0028) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingEditTabList
	 * Size -> 0x0050 (FullSize[0x02C8] - InheritedSize[0x0278])
	 */
	class USBShortcutRingEditTabList : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnClickTab;                                              // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class USBShortcutRingEditTab*                              TabItem;                                                 // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditTab*                              TabFixedPhrase;                                          // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditTab*                              TabStamp;                                                // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditTab*                              TabGesture;                                              // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditTab*                              TabCommand;                                              // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditTab*                              TabWarp;                                                 // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingEditTab*                              LastSelectedTab;                                         // 0x02B8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NIF1[0x8];                                   // 0x02C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetSelectType(EShortcutType InType);
		void OnClickTab__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingIcon
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBShortcutRingIcon : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        CanvasPanel;                                             // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USBShortcutRingIconBase*                             ActiveIcon;                                              // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Setup(const struct FShortcutItemInfo& InInfo);
		void SetSelect(bool InSelect);
		void OnUnbindIcon(class USBShortcutRingIconBase* InIcon);
		class USBShortcutRingIconBase* OnCreateWarpIcon();
		class USBShortcutRingIconBase* OnCreateTextIcon();
		class USBShortcutRingIconBase* OnCreateNoneIcon();
		class USBShortcutRingIconBase* OnCreateCommandIcon();
		class USBShortcutRingIconBase* OnCreateBasicIcon();
		void OnBindIcon(class USBShortcutRingIconBase* InIcon);
		struct FShortcutItemInfo GetShortcutItemInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingIconBase
	 * Size -> 0x0088 (FullSize[0x0300] - InheritedSize[0x0278])
	 */
	class USBShortcutRingIconBase : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnHover;                                                 // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnUnhover;                                               // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CPBtnGrp;                                                // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSButton;                                                // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SR8Q[0x58];                                  // 0x02A8(0x0058) MISSED OFFSET (PADDING)

	public:
		void SetHover(bool InHover);
		void PlayAnimPressed();
		void OnExecuteError();
		bool IsEnableHoverFlag();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingIconNone
	 * Size -> 0x0000 (FullSize[0x0300] - InheritedSize[0x0300])
	 */
	class USBShortcutRingIconNone : public USBShortcutRingIconBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingIconBasic
	 * Size -> 0x0000 (FullSize[0x0300] - InheritedSize[0x0300])
	 */
	class USBShortcutRingIconBasic : public USBShortcutRingIconBase
	{
	public:
		void OnSetVisibleShortcutIcon(bool InVisible);
		void OnSetSupply(int32_t InItemIndex, int32_t InItemAmount);
		void OnSetStamp(const class FString& InStampId);
		void OnSetOwnItem(int32_t InItemIndex);
		void OnSetGrayOut(bool InGrayOut);
		void OnSetEnableToolTip(bool InEnable);
		void OnSetEmotion(const class FString& InEmotionId);
		void OnSetCoolTime(bool InIsShow);
		void OnExecuteSupply(int32_t InItemIndex, ESBItemUseStatus InItemUseStatus);
		void OnExecuteOwnItem(const class FString& InUniqueId, int32_t InItemIndex, ESBItemUseStatus InItemUseStatus);
		void OnClearBP();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingIconText
	 * Size -> 0x0010 (FullSize[0x0310] - InheritedSize[0x0300])
	 */
	class USBShortcutRingIconText : public USBShortcutRingIconBase
	{
	public:
		class UTextBlock*                                          Message;                                                 // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBTextTableAsset*                                   TextTableAsset;                                          // 0x0308(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingIconCommand
	 * Size -> 0x0060 (FullSize[0x0360] - InheritedSize[0x0300])
	 */
	class USBShortcutRingIconCommand : public USBShortcutRingIconBase
	{
	public:
		class UCanvasPanel*                                        CP_Command;                                              // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              Icon;                                                    // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 Text;                                                    // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          CommandDataTable;                                        // 0x0318(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ActiveColor;                                             // 0x0320(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        DisableColor;                                            // 0x0330(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TextNum;                                                 // 0x0340(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P2LE[0x1C];                                  // 0x0344(0x001C) MISSED OFFSET (PADDING)

	public:
		void OnSetEnableToolTip(bool InEnable);
		class FText GetViewToolTipText();
		bool GetKeyconfigItemsStr(EShortcutIconCommandID CommandID, class FString* OutString);
		bool GetBookmarkFieldStr(EShortcutIconCommandID CommandID, class FString* OutString);
		bool GetBookmarkFieldAbbrStr(EShortcutIconCommandID CommandID, class FString* OutString);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingIconWarp
	 * Size -> 0x0078 (FullSize[0x0378] - InheritedSize[0x0300])
	 */
	class USBShortcutRingIconWarp : public USBShortcutRingIconBase
	{
	public:
		class UImage*                                              Icon;                                                    // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CPText1;                                                 // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CPText2;                                                 // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 Text1;                                                   // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 Text2;                                                   // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          WarpIconTexture;                                         // 0x0328(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          WarpIconTexturePublicDungeon;                            // 0x0330(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ActiveColor;                                             // 0x0338(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        DisableColor;                                            // 0x0348(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TextNum;                                                 // 0x0358(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RTPF[0x1C];                                  // 0x035C(0x001C) MISSED OFFSET (PADDING)

	public:
		void OnSetEnableToolTip(bool InEnable);
		class FText GetViewToolTipText();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingIndex
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBShortcutRingIndex : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Index;                                                   // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6YD2[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnSetSelectedButton(bool InIsSelected);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingKeyGuidePlate
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBShortcutRingKeyGuidePlate : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        CanvasPanelEdit;                                         // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CanvasPanelWheel;                                        // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnSetup();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortcutRingRing
	 * Size -> 0x0080 (FullSize[0x02F8] - InheritedSize[0x0278])
	 */
	class USBShortcutRingRing : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        BG;                                                      // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        Icons;                                                   // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBShortcutRingIndex*                                RingIndex;                                               // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   PosNone;                                                 // 0x0290(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   PosBasic;                                                // 0x02A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   PosText;                                                 // 0x02B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   PosCommand;                                              // 0x02C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   PosWarp;                                                 // 0x02D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    BGInexNone;                                              // 0x02E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BGInexBasic;                                             // 0x02E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BGInexText;                                              // 0x02E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BGInexCommand;                                           // 0x02EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BGInexWarp;                                              // 0x02F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FF2O[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (PADDING)

	public:
		void PlayAnimOut();
		void PlayAnimIn();
		int32_t GetIconIndex(class USBShortcutRingIcon* InIcon);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortPinWidget
	 * Size -> 0x0058 (FullSize[0x02D0] - InheritedSize[0x0278])
	 */
	class USBShortPinWidget : public UUserWidget
	{
	public:
		float                                                      RemoveTime;                                              // 0x0278(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PWQL[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSBShortPinInfo                                     PinInfo;                                                 // 0x0288(0x0048) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		void UpdatePinInfo(bool IsNew);
		void RemovePin();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBShortPinView
	 * Size -> 0x0070 (FullSize[0x02E8] - InheritedSize[0x0278])
	 */
	class USBShortPinView : public UUserWidget
	{
	public:
		TArray<struct FKey>                                        RayKeyPad;                                               // 0x0278(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FKey>                                        RayKeyBoard;                                             // 0x0288(0x0010) Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class USBShortPinWidget*>                           ShortPinList;                                            // 0x0298(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UUserWidget*                                         CommonAimModeUI;                                         // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsEnemyTarget;                                           // 0x02B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LHVR[0x7];                                   // 0x02B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              EnemyTargetID;                                           // 0x02B8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsRayButtonDown;                                         // 0x02C8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8AS1[0x7];                                   // 0x02C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDateTime                                           SetPinTime;                                              // 0x02D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T1J6[0x10];                                  // 0x02D8(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetPinPosition(class USBShortPinWidget* ShortPin);
		void SetPinInfo();
		void SetPinFromPlayer();
		void SetPinFromEnemy();
		bool IsKeyDownRayButton();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSimpleBattleTester
	 * Size -> 0x0018 (FullSize[0x0240] - InheritedSize[0x0228])
	 */
	class ASBSimpleBattleTester : public AActor
	{
	public:
		TArray<class USBUtilityDataProvider_BlueprintBase*>        Conditions;                                              // 0x0228(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		bool                                                       bIsTestStarted;                                          // 0x0238(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WPHO[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (PADDING)

	public:
		void StartTest();
		void EndTest();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSitTargetSoundInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBSitTargetSoundInterface : public UInterface
	{
	public:
		ESBSitTargetSoundType GetSitTargetSoundType();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkeletalMeshActor
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class ASBSkeletalMeshActor : public ASkeletalMeshActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkeletalMeshBImagineWeaponComponent
	 * Size -> 0x0060 (FullSize[0x0FE0] - InheritedSize[0x0F80])
	 */
	class USBSkeletalMeshBImagineWeaponComponent : public USBSkeletalMeshComponent
	{
	public:
		unsigned char                                              UnknownData_NTRC[0x40];                                  // 0x0F80(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBWeaponAnimationSetting>                   AnimationList;                                           // 0x0FC0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		int32_t                                                    InventoryIdentifyIndex;                                  // 0x0FD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IU0S[0xC];                                   // 0x0FD4(0x000C) MISSED OFFSET (PADDING)

	public:
		void ReceivePlayWeaponAnimation(int32_t Anim);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillForecast
	 * Size -> 0x0010 (FullSize[0x0238] - InheritedSize[0x0228])
	 */
	class ASBSkillForecast : public AActor
	{
	public:
		class USceneComponent*                                     SceneRootComponent;                                      // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDecalComponent*                                     DecalComponent;                                          // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerAerialSkillInfo
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBPlayerAerialSkillInfo : public USBSkillInfoClass
	{
	public:
		float                                                      TakeBonusHeight;                                         // 0x02B0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NeedHeight;                                              // 0x02B4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FloatingTime;                                            // 0x02B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallSpeed;                                               // 0x02BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBPlayerEnemyStepJumpSkillInfo
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class USBPlayerEnemyStepJumpSkillInfo : public USBSkillInfoClass
	{
	public:
		float                                                      XYLaunchAmount;                                          // 0x02B0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SheatheZLaunchAmount;                                    // 0x02B4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnsheatheZLaunchAmount;                                  // 0x02B8(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverrideGravityScale;                                    // 0x02BC(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverrideAirControl;                                      // 0x02C0(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverrideAirControlBoostMultiplier;                       // 0x02C4(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUkemiSkillInfo
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class USBUkemiSkillInfo : public USBSkillInfoClass
	{
	public:
		unsigned char                                              UnknownData_W3UM[0x8];                                   // 0x02B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBCurveMoveSetting>                         CurveMoveSettingList;                                    // 0x02B8(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillInfoBaseWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBSkillInfoBaseWidget : public UUserWidget
	{
	public:
		bool                                                       bStopUpdate;                                             // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVisibleIconDisable;                                     // 0x0279(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESkillActionPosition                                       SkillActionPosition;                                     // 0x027A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HKX9[0x5];                                   // 0x027B(0x0005) MISSED OFFSET (PADDING)

	public:
		void SetStopUpdate(bool InStopUpdate);
		void OnIconDisableChange(bool bVisible);
		bool GetStopUpdate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillInfoGaugeSpecialWidget
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class USBSkillInfoGaugeSpecialWidget : public USBSkillInfoBaseWidget
	{
	public:
		class UWidgetSwitcher*                                     SwitchSet;                                               // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnUpdateIconTexture(bool inbActive);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillInfoGaugeActiveWidget
	 * Size -> 0x0018 (FullSize[0x0298] - InheritedSize[0x0280])
	 */
	class USBSkillInfoGaugeActiveWidget : public USBSkillInfoBaseWidget
	{
	public:
		class UWidgetSwitcher*                                     SwitchSet;                                               // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I77C[0x4];                                   // 0x0288(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MySkillId;                                               // 0x028C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBSkillIconBgType                                         IconBgType;                                              // 0x0290(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAttackUp;                                             // 0x0291(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZMB8[0x6];                                   // 0x0292(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnUpdateIconTexture(class UTexture2D* SkillIconSmall);
		void OnStopBerserkMode();
		void OnStartBerserkMode();
		void OnSetKeyGuideVisible(bool IsVisible);
		void OnAttackUpChange(bool InAttackUp, class USBPlayerSkillActionComponent* SkillActionComp);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillInfoGaugeImagineWidget
	 * Size -> 0x0018 (FullSize[0x0298] - InheritedSize[0x0280])
	 */
	class USBSkillInfoGaugeImagineWidget : public USBSkillInfoBaseWidget
	{
	public:
		int32_t                                                    SlotNum;                                                 // 0x0280(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9SSC[0x14];                                  // 0x0284(0x0014) MISSED OFFSET (PADDING)

	public:
		void OnUpdateIconTexture(const class FString& inImagineUniqueId, const class FName& InImagineName);
		void OnStopHyouiAnimation();
		void OnStartHyouiAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillInfoItemWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBSkillInfoItemWidget : public UUserWidget
	{
	public:
		ESkillActionPosition                                       SkillActionPosition;                                     // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRecastWait;                                             // 0x0279(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SG5E[0x2];                                   // 0x027A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CachedRecastTime;                                        // 0x027C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxCachedRecastTime;                                     // 0x0280(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCachedShowInfo;                                         // 0x0284(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnCastSkill;                                            // 0x0285(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bChargeStartAnim;                                        // 0x0286(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEndFlowWait;                                            // 0x0287(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnUpdatePercent();
		void OnPlayAnimUse(bool Init);
		void OnPlayAnimChargeStart();
		void OnPlayAnimChargeEnd();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillInfoWidget
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class USBSkillInfoWidget : public UUserWidget
	{
	public:
		bool                                                       IsEditMode;                                              // 0x0278(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInfoIn;                                                 // 0x0279(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2SIH[0x6];                                   // 0x027A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBSkillInfoItemWidget*>                      SkillInfoItemList;                                       // 0x0280(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        SkillGrp;                                                // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowAlwaysHUD;                                          // 0x0298(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBPlayerSkillPaletteSide                                  LastPaletteSide;                                         // 0x0299(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBackPaletteVisible;                                     // 0x029A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N953[0x5];                                   // 0x029B(0x0005) MISSED OFFSET (PADDING)

	public:
		void OnInAnimation(bool bForward);
		void OnChangePalette(ESBPlayerSkillPaletteSide PaletteSide);
		void OnChangeBackPaletteVisible(bool Visible);
		bool IsPlayAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkillMarker
	 * Size -> 0x0020 (FullSize[0x0248] - InheritedSize[0x0228])
	 */
	class ASBSkillMarker : public AActor
	{
	public:
		unsigned char                                              UnknownData_Q4LK[0x18];                                  // 0x0228(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         SizeChangeCurve;                                         // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetShowDecal(bool bShowDecal);
		void SetRadius(float Radius);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkinMaterialManager
	 * Size -> 0x0230 (FullSize[0x0258] - InheritedSize[0x0028])
	 */
	class USBSkinMaterialManager : public UObject
	{
	public:
		struct FSBSkinData                                         M300;                                                    // 0x0028(0x00F0) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		struct FSBSkinData                                         F300;                                                    // 0x0118(0x00F0) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		TMap<EFSBReplaceMaterialBaseType, struct FSBMaterialBaseReplaceDataArray> MaterialBaseReplaceDataArrayMap;                         // 0x0208(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkyMeshComponent
	 * Size -> 0x0168 (FullSize[0x0660] - InheritedSize[0x04F8])
	 */
	class USBSkyMeshComponent : public UStaticMeshComponent
	{
	public:
		class UMaterialInterface*                                  SkyMaterial;                                             // 0x04F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   ZenithColorCurve;                                        // 0x0500(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   SkyColorCurve;                                           // 0x0508(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         HorizonBrightnessCurve;                                  // 0x0510(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         HorizonAreaContrastCurve;                                // 0x0518(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         HorizonReduceShadowSideCurve;                            // 0x0520(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SunSideHardnessCurve;                                    // 0x0528(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SunSideRadiusCurve;                                      // 0x0530(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SunSideBrightnessCurve;                                  // 0x0538(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SunLightAreaHardnessCurve;                               // 0x0540(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SunLightAreaRadiusCurve;                                 // 0x0548(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SunLightAreaMaskDistortionScaleCurve;                    // 0x0550(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   ShadowSideColorCurve;                                    // 0x0558(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ShadowSideHardnessCurve;                                 // 0x0560(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ShadowSideRadiusCurve;                                   // 0x0568(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   SunDiskColorCurve;                                       // 0x0570(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         DaytimeNightCurve;                                       // 0x0578(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SkySphereContrastCurve;                                  // 0x0580(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         MoonOpacityCurve;                                        // 0x0588(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   CloudColorFrontCurve;                                    // 0x0590(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   CloudColorMiddleCurve;                                   // 0x0598(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   CloudColorShadowCurve;                                   // 0x05A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         CloudsBrightnessSunSideCurve;                            // 0x05A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         CloudsSaturationCurve;                                   // 0x05B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         MoonLightAreaMaskDistortionScaleCurve;                   // 0x05B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SunMoonLightBrightnessCurve;                             // 0x05C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         VertexNormalFlipTimingCurve;                             // 0x05C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         CloudShadingStepBalanceSunSideCurve;                     // 0x05D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         CloudShadingStepBalanceShadowSideCurve;                  // 0x05D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         CloudShadingContrastShadowSideCurve;                     // 0x05E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SunDiskBrightnessCurve;                                  // 0x05E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   SkyBottomColorCurve;                                     // 0x05F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SkyBottomAreaContrastCurve;                              // 0x05F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   HorizonColorHighCurve;                                   // 0x0600(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   HorizonColorLowCurve;                                    // 0x0608(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   HorizonColorMiddleCurve;                                 // 0x0610(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         HorizonColorShiftCurve;                                  // 0x0618(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         HorizonAddSunSideCurve;                                  // 0x0620(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SkyBottomReduceShadowSideCurve;                          // 0x0628(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   SunSideColorInsideCurve;                                 // 0x0630(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveLinearColor*                                   SunSideColorOutsideCurve;                                // 0x0638(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         RingBrightnessCurve;                                     // 0x0640(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SkyColorRefrectionAreaContrastCurve;                     // 0x0648(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SkyColorRefrectionScaleCurve;                            // 0x0650(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_87U1[0x8];                                   // 0x0658(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSkySphere
	 * Size -> 0x0140 (FullSize[0x0368] - InheritedSize[0x0228])
	 */
	class ASBSkySphere : public AActor
	{
	public:
		class USBSkyMeshComponent*                                 Mesh;                                                    // 0x0228(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                OcclusionQuerySun;                                       // 0x0230(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ADirectionalLight*                                   DirectionalLightActor;                                   // 0x0238(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SunDiskPitch;                                            // 0x0240(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SunDiskYaw;                                              // 0x0244(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LightVectorZMax;                                         // 0x0248(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RoundSpeed;                                              // 0x024C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RoundOffset;                                             // 0x0250(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2YHB[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveLinearColor*                                   LightColor;                                              // 0x0258(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         LightIntensity;                                          // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         ToonIntensityScale;                                      // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J612[0x24];                                  // 0x0270(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ElapsedTime;                                             // 0x0294(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UHUA[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PreviewHour;                                             // 0x02A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    PreviewMinute;                                           // 0x02A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeRate;                                                // 0x02A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       EnableTimeProgression;                                   // 0x02AC(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5DJ1[0x3];                                   // 0x02AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Morning;                                                 // 0x02B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    DayTime;                                                 // 0x02B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Dusk;                                                    // 0x02B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Night;                                                   // 0x02BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B9TN[0x22];                                  // 0x02C0(0x0022) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLightPreviewInitialized;                                // 0x02E2(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SUIB[0x85];                                  // 0x02E3(0x0085) MISSED OFFSET (PADDING)

	public:
		void UpdateSkySphere();
		void UpdateScheduleLightPreview(float PreviewTimeRate, bool SWITCH);
		void UpdateLightsImmidiate();
		bool SetSkyTime(const struct FDateTime& GameTime, const struct FDateTime& ServerTime, bool InEnableTimeProgression, bool Overridden);
		bool SetPreviewTime(int32_t InHour, int32_t InMinute);
		int32_t SetMinutesPerDaytime(int32_t InMinutesPerDaytime);
		int32_t SetMinutesPerDay(int32_t InMinutesPerDay);
		void ScheduleLightPreviewInit(bool Sw);
		bool IsLightDirectionLimited();
		struct FVector2D GetSunScreenPosition();
		struct FVector GetSunLocation();
		float GetSunLastPixelsPercentage();
		struct FRotator GetSunDiskRotation(int32_t Index);
		class FString GetStringServerTime();
		class FString GetStringPreviewTime();
		class FString GetStringGameTime();
		bool GetPrevTimeUpdated();
		struct FDateTime GetPreviewTime();
		int32_t GetActiveLightIndex();
		float CalcPreviewTime(float DeltaSeconds);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSliderBase
	 * Size -> 0x0018 (FullSize[0x0528] - InheritedSize[0x0510])
	 */
	class USBSliderBase : public USlider
	{
	public:
		bool                                                       PadAndKeyInputEnabled;                                   // 0x0510(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AW4Q[0x17];                                  // 0x0511(0x0017) MISSED OFFSET (PADDING)

	public:
		void SetSliderStepSize(float InValue);
		void SetPadAndKeyInputEnabled(bool InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSegmentNavLinkComponent
	 * Size -> 0x00C0 (FullSize[0x01A8] - InheritedSize[0x00E8])
	 */
	class USBSegmentNavLinkComponent : public UNavRelevantComponent
	{
	public:
		unsigned char                                              UnknownData_8UE0[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   NavLinkUserId;                                           // 0x00F0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XSYJ[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              EnabledAreaClass;                                        // 0x00F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              DisabledAreaClass;                                       // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LinkRelativeStartMin;                                    // 0x0108(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LinkRelativeStartMax;                                    // 0x0114(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LinkRelativeEndMin;                                      // 0x0120(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LinkRelativeEndMax;                                      // 0x012C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ENavLinkDirection                                          LinkDirection;                                           // 0x0138(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YRV9[0x3];                                   // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLinkEnabled : 1;                                        // 0x013C(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNotifyWhenEnabled : 1;                                  // 0x013C(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNotifyWhenDisabled : 1;                                 // 0x013C(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCreateBoxObstacle : 1;                                  // 0x013C(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q467[0x3];                                   // 0x013D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ObstacleOffset;                                          // 0x0140(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             ObstacleExtent;                                          // 0x014C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              ObstacleAreaClass;                                       // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BroadcastRadius;                                         // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BroadcastInterval;                                       // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECollisionChannel                                          BroadcastChannel;                                        // 0x0168(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3WX3[0x3F];                                  // 0x0169(0x003F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSortFilterBluePrintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBSortFilterBluePrintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FFilterGroup RemoveFilter(struct FFilterGroup* Filters, EItemFilterType Type);
		EItemFilterType Protector2ItemFilter(EProtectorCategory Protector);
		EItemFilterType PassiveImagineSlot2Filter(ESBPlayerPassiveImagineSlotType PassiveSlotType);
		EItemFilterType ItemCategory2ItemFilter(EItemCategory Category);
		EItemFilterType GetQuestBoardClassLevelFilter(int32_t Index);
		struct FFilterGroup EmptyFilter(struct FFilterGroup* Filters);
		EItemFilterType Class2ItemFilter(ESBClassType ClassType);
		EItemFilterType Class2FusionItemFilter(ESBClassType ClassType);
		EItemFilterType Attribute2ItemFilter(ESBAttribute Attribute);
		EItemFilterType AdventureBoardFilter(int32_t TextId);
		struct FFilterGroup AddFilter(struct FFilterGroup* Filters, EItemFilterType Type);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBLineSoundInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBLineSoundInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSoundManager
	 * Size -> 0x0DA8 (FullSize[0x0DD0] - InheritedSize[0x0028])
	 */
	class USBSoundManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_RGC2[0x88];                                  // 0x0028(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedAkEvent;                                           // 0x00B0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I0UA[0x30];                                  // 0x00C0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     LoadedResidentAssets;                                    // 0x00F0(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              ResidentAkEventTable[0x28];                              // 0x0100(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              SystemSETable[0x28];                                     // 0x0128(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_OV0F[0x18];                                  // 0x0150(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFinishedLoadResidentAsset;                             // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              ScriptSEDataTable[0x28];                                 // 0x0178(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FScriptMulticastDelegate                             OnSBSoundMusicCue;                                       // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBGMPostEvent;                                          // 0x01B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSBBGMInitializeValueData                           BGMInitializeValueData;                                  // 0x01C0(0x0128) Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              BossBGMDataTable[0x28];                                  // 0x02E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UDataTable*                                          MapBossBGMDataTable;                                     // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          ServerBossBGMDataTable;                                  // 0x0318(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          BGMEventAssetDataTable;                                  // 0x0320(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          BGMTimeAttackAreaIDDataTable;                            // 0x0328(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          BGMMuteInTheaterDataTable;                               // 0x0330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PUQK[0x488];                                 // 0x0338(0x0488) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              WindParticleSoundDataTable[0x28];                        // 0x07C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<TWeakObjectPtr<class UAkComponent>>                 AmbientAkComponents;                                     // 0x07E8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T7L4[0xB0];                                  // 0x07F8(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          SoundEnemyIdDataTable;                                   // 0x08A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              PlayerSkillVoiceTable[0x28];                             // 0x08B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<int32_t>                                            UseCurrentSkillChargeLevelSkillIDList;                   // 0x08D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UDataTable*                                          EnemyTypeSwitchListDataTable;                            // 0x08E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          UniqueEnemyVoiceDataTable;                               // 0x08F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VXSQ[0xB0];                                  // 0x08F8(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          VoiceEffectCharaPartsNameTable;                          // 0x09A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CE97[0x88];                                  // 0x09B0(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          LODDistanceDataTable;                                    // 0x0A38(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBAkEventLOD                                              DefaultLOD;                                              // 0x0A40(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z29L[0x7];                                   // 0x0A41(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESBAkEventLOD, float>                                 FootprintLODByCharacterSizeMap;                          // 0x0A48(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UDataTable*>                                  CostumeMaterialTables;                                   // 0x0A98(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class UDataTable*>                                  CostumeMaterialActorTables;                              // 0x0AA8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FSBRTPCEventData>                            RTPCEventDataArray;                                      // 0x0AB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UBON[0x50];                                  // 0x0AC8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              DemoSoundDataTable[0x28];                                // 0x0B18(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_4EQQ[0xF8];                                  // 0x0B40(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDataTable*>                                  ImagineSoundDataTables;                                  // 0x0C38(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FString, float>                                 CharacterSizeSwitchMap;                                  // 0x0C48(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FString, struct FSBSoundEventTermData>          EventTermIDDataMap;                                      // 0x0C98(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LA0J[0xD0];                                  // 0x0CE8(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBSoundQuestProgressStateData>              QuestProgressStateDataArray;                             // 0x0DB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N8JY[0x8];                                   // 0x0DC8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateSoundEventTerm();
		void SetForceListenerPosition(ESBListenerPosition ListenerPosition);
		void SetDebugCostumeMaterial(ESBClothSwitchType Type, ESBCostumeMaterial Material);
		void ResetDebugCostumeMaterial();
		void RequestSkipDemoEvent();
		class UAkComponent* RequestAmbientSoundBySceneComponent(class UAkAudioEvent* AudioEvent, class USceneComponent* Component);
		class UAkComponent* RequestAmbientSoundByActor(class UAkAudioEvent* AudioEvent, class AActor* Actor);
		class UAkComponent* RequestAmbientSoundAtLocation(class UAkAudioEvent* AudioEvent, const struct FVector& Location);
		void RequestAmbientSound(class UAkComponent* AkComponent);
		void RemoveExcludeEventTerm(const class FName& SubLevelName);
		void PostWindParticleSound(class UParticleSystemComponent* ParticleComponent);
		bool PlayPlayerVoiceAtLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FSBPlayerVoiceVariables& PlayerVoiceVariables);
		bool PlayPlayerVoiceAtListener(const struct FSBPlayerVoiceVariables& PlayerVoiceVariables);
		int32_t PlayPlayerVoice(class UAkComponent* AkComponent, const struct FSBPlayerVoiceVariables& PlayerVoiceVariables);
		int32_t PlayPlayerSkillVoice(class UAkComponent* AkComponent, const struct FSBPlayerVoiceVariables& PlayerVoiceVariables);
		void OnSBSoundMusicCue__DelegateSignature();
		void OnFinishedWindComponent(class UParticleSystemComponent* FinishedComponent);
		void OnFinishedPlayingBuddyVoice(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
		void OnFinishedLoadResidentAssetDelegate__DelegateSignature();
		void OnDungeonResult();
		void OnClearDungeon(const class FName& InDungeonName);
		void OnBGMPostEventDelegate__DelegateSignature(const class FString& EventName);
		void LoadResidentAsset();
		void GetSystemSEEvent(const class FName& InId);
		class UAkAudioEvent* GetResidentAkEvent(const class FName& InId);
		struct FVector GetListenerLocation();
		void AddExcludeEventTerm(const class FName& SubLevelName);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSoundInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBSoundInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSpawnArea
	 * Size -> 0x0090 (FullSize[0x02B8] - InheritedSize[0x0228])
	 */
	class ASBSpawnArea : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnFirstSpawnDelegate;                                    // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PM9S[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAIFwParameterizedBTRequest                         SubSpawnQuery;                                           // 0x0240(0x0018) Edit, EditConst, Protected, NativeAccessSpecifierProtected
		struct FAIFwParameterizedBTRequest                         FindSpawnPointQuery;                                     // 0x0258(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0270(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnabled : 1;                                            // 0x0278(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YF1O[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBSpawnSourceComponent*                             SpawnSourceComponent;                                    // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bGenerateSpawnPoint : 1;                                 // 0x0288(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bProjectOnNavMesh : 1;                                   // 0x0288(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9YPQ[0x3];                                   // 0x0289(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             Extent;                                                  // 0x028C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StepSize;                                                // 0x0298(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BGZF[0x1C];                                  // 0x029C(0x001C) MISSED OFFSET (PADDING)

	public:
		bool SetSpawnQueryArgument(const class FString& ArgName, bool BoolValue, int32_t IntValue, float FloatValue, const class FString& StringValue);
		EAIFwBTParamType GetSpawnQueryArgument(const class FString& ArgName, bool* BoolValue, int32_t* IntValue, float* FloatValue, class FString* StringValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSpawnAreaDungeon
	 * Size -> 0x0018 (FullSize[0x02D0] - InheritedSize[0x02B8])
	 */
	class ASBSpawnAreaDungeon : public ASBSpawnArea
	{
	public:
		TArray<TWeakObjectPtr<class ASBEnemySenseChanger>>         EnemySenseChangers;                                      // 0x02B8(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class FName                                                SpawnedEnemyTag;                                         // 0x02C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void LoadEnemyAssets();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSpawnAreaRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class USBSpawnAreaRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_P6B7[0x8];                                   // 0x0468(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSpawnEmitterAkEventAssetUserData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBSpawnEmitterAkEventAssetUserData : public UAssetUserData
	{
	public:
		class UAkAudioEvent*                                       AkEvent;                                                 // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBAkEventLOD                                              LOD;                                                     // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_89EB[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSpawnSourceComponent
	 * Size -> 0x0078 (FullSize[0x0150] - InheritedSize[0x00D8])
	 */
	class USBSpawnSourceComponent : public UAIFwSmartObjectComponent
	{
	public:
		struct FAIFwParameterizedBTRequest                         SpawnTree;                                               // 0x00D8(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BRNV[0x10];                                  // 0x00F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USBSTInitializer*>                            Initializers;                                            // 0x0100(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      SpawnedActors;                                           // 0x0110(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A32H[0x30];                                  // 0x0120(0x0030) MISSED OFFSET (PADDING)

	public:
		void NotifyActorDestroyed(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSpawnWaveArea
	 * Size -> 0x00C8 (FullSize[0x0380] - InheritedSize[0x02B8])
	 */
	class ASBSpawnWaveArea : public ASBSpawnArea
	{
	public:
		class FScriptMulticastDelegate                             OnWaveStarted;                                           // 0x02B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAssetLoadBegan;                                        // 0x02C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAssetLoadCompleted;                                    // 0x02D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSettingWaveDataEnd;                                    // 0x02E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndWaveDelegate;                                       // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USBSpawnWaveConditionComponent*                      SpawnWaveConditionComponent;                             // 0x0308(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                SpawnedEnemyTag;                                         // 0x0310(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LLRY[0x18];                                  // 0x0318(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ASBEnemyCharacter*>                           SpawnedEnemies;                                          // 0x0330(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3HAB[0x24];                                  // 0x0340(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                EnemyWaveId;                                             // 0x0364(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DXHD[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class ASBEnemySenseChanger>>         EnemySenseChangers;                                      // 0x0370(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		void StopWave();
		void StartWave();
		void OnWaveStartedSignature__DelegateSignature(int32_t WaveNo);
		void OnSettingWaveDataEndSignature__DelegateSignature();
		void OnEndWaveDelegate__DelegateSignature();
		void OnAssetLoadCompletedSignature__DelegateSignature();
		void OnAssetLoadBeganSignature__DelegateSignature();
		void OnActorDamaged(float Damage, const struct FSBDamageEvent& DamageEvent, class AActor* DamageCauser, class AActor* DamageDst);
		bool NextWave();
		void LoadEnemyAssets();
		bool IsAssetLoading();
		bool IsAssetLoaded();
		int32_t GetTotalEnemyCount();
		int32_t GetMaxStepIndex();
		int32_t GetCurrentStepIndex();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSpawnWaveConditionComponent
	 * Size -> 0x0048 (FullSize[0x0100] - InheritedSize[0x00B8])
	 */
	class USBSpawnWaveConditionComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_VY5I[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpawnedCallTime;                                         // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RR01[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        StepTimerHandle;                                         // 0x00D0(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        SpawnedTimerHandle;                                      // 0x00D8(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FSOK[0x20];                                  // 0x00E0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSphereSoundComponent
	 * Size -> 0x0028 (FullSize[0x04B0] - InheritedSize[0x0488])
	 */
	class USBSphereSoundComponent : public USphereComponent
	{
	public:
		class UAkComponent*                                        AkComponent;                                             // 0x0488(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CK3M[0x20];                                  // 0x0490(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSplineMeshActor
	 * Size -> 0x0010 (FullSize[0x0240] - InheritedSize[0x0230])
	 */
	class ASBSplineMeshActor : public ASplineMeshActor
	{
	public:
		bool                                                       ForceAdjustAverageSplinePoint;                           // 0x0230(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       LockAdjustAverageSplinePoint;                            // 0x0231(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJ10[0x2];                                   // 0x0232(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RoadMeshNumMax;                                          // 0x0234(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ForceAdjustAverageSplinePointTM;                         // 0x0238(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5M0A[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RoadTrackMeshNumMax;                                     // 0x023C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetStaticMeshParam(class UStaticMeshComponent* StaticMeshComponent, float DesiredMaxDrawDistance, bool SetAllowCullDistanceVolume);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSplineSoundComponent
	 * Size -> 0x0040 (FullSize[0x05A0] - InheritedSize[0x0560])
	 */
	class USBSplineSoundComponent : public USplineComponent
	{
	public:
		unsigned char                                              UnknownData_33PT[0x8];                                   // 0x0560(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDebugDisplay;                                           // 0x0568(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DYF9[0x3];                                   // 0x0569(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UAkComponent>                         AkComponent;                                             // 0x056C(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G5SW[0x4];                                   // 0x0574(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       PlayEvent;                                               // 0x0578(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       StopEvent;                                               // 0x0580(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttenuationScalingFactor;                                // 0x0588(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G9VE[0x14];                                  // 0x058C(0x0014) MISSED OFFSET (PADDING)

	public:
		void StopUpdate();
		void StartUpdate();
		void SetAkEvent(class UAkAudioEvent* InPlay, class UAkAudioEvent* InStop);
		void SetAkComponent(class UAkComponent* InAkComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadAI_Battle
	 * Size -> 0x0008 (FullSize[0x0248] - InheritedSize[0x0240])
	 */
	class ASBSquadAI_Battle : public ASBSquadAI
	{
	public:
		class USBAIRoleDistributionComponent*                      RoleDistributionComponent;                               // 0x0240(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetTarget(const class FName& TargetFaction, int32_t TargetClusterNo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadAI_BlueprintBase
	 * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
	 */
	class ASBSquadAI_BlueprintBase : public ASBSquadAI
	{
	public:
		class ASBSquadAI* ReceiveFindSubSquad(const struct FSBSquadMemberContext& Context);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadMemberComponent
	 * Size -> 0x0088 (FullSize[0x0180] - InheritedSize[0x00F8])
	 */
	class USBSquadMemberComponent : public USBAIHierarchyComponent
	{
	public:
		struct FSBSquadMemberContext                               Context;                                                 // 0x00F8(0x0030) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		class USBAIWorldProfilerComponent*                         WorldProfilerComponent;                                  // 0x0128(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIRoleComponent*                                  RoleComponent;                                           // 0x0130(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_543R[0x48];                                  // 0x0138(0x0048) MISSED OFFSET (PADDING)

	public:
		void SetContextSituation(ESBSMCSituation Situation);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadMessageListener
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBSquadMessageListener : public UObject
	{
	public:
		class USBSquadMemberComponent*                             SquadMemberComponent;                                    // 0x0028(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X1O9[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadMessageListener_Buff
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBSquadMessageListener_Buff : public USBSquadMessageListener
	{
	public:
		int32_t                                                    MaxTargetNum;                                            // 0x0040(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSelfOnly;                                               // 0x0044(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DMUI[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDistance;                                             // 0x0048(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_87VP[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ESBAIPartyStrategy>                                 ExcludeStrategies;                                       // 0x0050(0x0010) BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		TArray<class FString>                                      TargetAppearanceIds;                                     // 0x0060(0x0010) BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected
		class FString                                              Command;                                                 // 0x0070(0x0010) BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadMessageListener_ConcentratedAttack
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class USBSquadMessageListener_ConcentratedAttack : public USBSquadMessageListener
	{
	public:
		int32_t                                                    MinMemberNum;                                            // 0x0040(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxMemberNum;                                            // 0x0044(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinDistance;                                             // 0x0048(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistance;                                             // 0x004C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCheckDistanceFromParty;                                 // 0x0050(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V4ZB[0x3];                                   // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDistanceFromParty;                                    // 0x0054(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      ExcludeRoleClasses;                                      // 0x0058(0x0010) BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, UObjectWrapper, NativeAccessSpecifierProtected
		class FString                                              Command;                                                 // 0x0068(0x0010) BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadMessageListener_CoopAction
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class USBSquadMessageListener_CoopAction : public USBSquadMessageListener
	{
	public:
		class FString                                              Command;                                                 // 0x0040(0x0010) BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadMessageListener_Defend
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBSquadMessageListener_Defend : public USBSquadMessageListener
	{
	public:
		float                                                      MaxDistance;                                             // 0x0040(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S893[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ESBAIPartyStrategy>                                 ExcludeStrategies;                                       // 0x0048(0x0010) BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSquadMessageListener_Heal
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBSquadMessageListener_Heal : public USBSquadMessageListener
	{
	public:
		int32_t                                                    MaxTargetNum;                                            // 0x0040(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinHPRate;                                               // 0x0044(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxHPRate;                                               // 0x0048(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxDistance;                                             // 0x004C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              Command;                                                 // 0x0050(0x0010) BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStackBBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBStackBBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FOwnItemInfo OverwriteStackB(const struct FOwnItemInfo& Info, int32_t StackBNum);
		bool IsWithinLevel(const struct FSBStackBTicketData& Ticket, int32_t Level);
		bool IsStackBMax(const struct FOwnItemInfo& Info);
		bool IsStackBInhelitable(const struct FOwnItemInfo& Info, TArray<struct FSBStackBPerk> Perks, TArray<struct FSBStackBPerk> SelectPerks);
		bool IsFullyContent(class UObject* InWorldContextObject, const struct FOwnItemInfo& Target, const struct FSBStackBTicketData& TicketData, const struct FSBStackBMasterData& MasterData, class USBOwnItemListContainer* Storage, bool bUseTicket);
		int32_t GetStackBMax(const struct FOwnItemInfo& Info);
		class FString GetStackBKeyByTypeID(EItemType ItemType, int32_t Index);
		class FString GetStackBKey(const struct FOwnItemInfo& Info);
		ESBStackBItemType GetStackBItemType(const struct FOwnItemInfo& Info);
		TArray<struct FSBStackBPerk> GenerateStackBPerkList(const struct FOwnItemInfo& Target, TArray<struct FOwnItemInfo> Materials);
		struct FOwnItemInfo GenerateStackBItemBase(const struct FOwnItemInfo& Target, TArray<struct FOwnItemInfo> Materials, bool bNoStackUp);
		struct FSBStackBMasterData FindStackBMasterData(const struct FOwnItemInfo& Info);
		bool ContainsStackBMaterials(class USBTemporallyStorage* InStorage);
		int32_t CalculateStackBWeaponStatusValueByEnableType(const struct FOwnItemInfo& InOwnItemInfo, ESBWeaponStatus InStatusType, int32_t InStatusValue, ESBStackBEnableType InEnableType);
		struct FSBWeaponLevelStatusMasterData CalculatedStackBWeaponParamsByWeaponId(int32_t InItemID, int32_t InStackBNum, bool bIsMax);
		int32_t CalculatedStackBWeaponParam(const struct FOwnItemInfo& Info, ESBWeaponStatus Type);
		struct FImagineParameter CalculatedStackBImagineParamsByImagineId(int32_t InItemID, int32_t InItemLevel, int32_t InStackBNum, bool bIsMax);
		struct FImagineParameter CalculatedStackBImagineParamsByEnableType(const struct FOwnItemInfo& InOwnItemInfo, const struct FImagineParameter& InImagineParam, ESBStackBEnableType InEnableType);
		struct FImagineParameter CalculatedStackBImagineParams(const struct FOwnItemInfo& Info);
		struct FSBStackBWeaponParam CalcStackBWeaponDiffParam(const struct FOwnItemInfo& Base, const struct FOwnItemInfo& After);
		struct FSBStackBImagineParam CalcStackBImagineDiffParam(const struct FOwnItemInfo& Base, const struct FOwnItemInfo& After);
		struct FOwnItemInfo BuildAfterStackBWeaponData(const struct FOwnItemInfo& Target, TArray<struct FOwnItemInfo> Materials, TArray<struct FSBStackBPerk> Perks, const class FString& SpecialUID, const class FString& SubAbilityUID);
		struct FOwnItemInfo BuildAfterStackBImagineData(const struct FOwnItemInfo& Target, const struct FOwnItemInfo& Ability);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStackBMainViewBase
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBStackBMainViewBase : public UUserWidget
	{
	public:
		void Update();
		void Term();
		void Init();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTInitializer
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBSTInitializer : public UAIFwBTDecoratorNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTActorTag
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBSTActorTag : public USBSTInitializer
	{
	public:
		struct FAIFwBTNodePropertyString                           Tag;                                                     // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStartState_Emote
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBStartState_Emote : public UASCustomStartSate_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStateInitializerComponent
	 * Size -> 0x0070 (FullSize[0x0128] - InheritedSize[0x00B8])
	 */
	class USBStateInitializerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ER7O[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FSBSpawnActionSetting>            SpawnActionSettingMap;                                   // 0x00D8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStatusAlimentNotifyWidget
	 * Size -> 0x00E0 (FullSize[0x0358] - InheritedSize[0x0278])
	 */
	class USBStatusAlimentNotifyWidget : public UUserWidget
	{
	public:
		class AActor*                                              ParentActor;                                             // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         DistanceScaleRateCurve;                                  // 0x0280(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, struct FSlateColor>                    TextStatusColors;                                        // 0x0288(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		TMap<class FString, struct FSlateColor>                    TextBgColors;                                            // 0x02D8(0x0050) Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
		class UScaleBox*                                           SBRoot;                                                  // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSBasePlate;                                             // 0x0330(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSPlateCaver;                                            // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBBuffIcon*                                         BuffIcon;                                                // 0x0340(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextStatus;                                              // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5GRG[0x8];                                   // 0x0350(0x0008) MISSED OFFSET (PADDING)

	public:
		void PlayAnimInOut(bool IsForward);
		void Play(class AActor* InParent, const struct FSBStatusAilmentIconConfig& InStatusAliment);
		class FText GetTextStatus(const class FName& InTextId);
		class UTexture2D* FindIconAssetData(const struct FSBStatusAilmentIconConfig& InStatusAliment, class FName* OutTextID, bool* IsBuff, ESBStatusAilmentPlateType* OutType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStatusAlimentNotifyWidgetOwner
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBStatusAlimentNotifyWidgetOwner : public UUserWidget
	{
	public:
		class UClass*                                              StatusAlimentNotifyWidgetClass;                          // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PopInterval;                                             // 0x0280(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PIYZ[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCanvasPanel*                                        Canvas;                                                  // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void AddProcessing(const struct FSBStatusAilmentIconConfig& InStatusAilmentIconType, class AActor* InOwnerActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTBattleSequence
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBSTBattleSequence : public USBSTInitializer
	{
	public:
		bool                                                       bContinuous;                                             // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V4VG[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTDestroyMode
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBSTDestroyMode : public USBSTInitializer
	{
	public:
		bool                                                       bWhenNoPlayersNearby;                                    // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DJPC[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTEffectSettings
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBSTEffectSettings : public USBSTInitializer
	{
	public:
		bool                                                       bSpawnEffect;                                            // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6NLZ[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTEnemyWave
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBSTEnemyWave : public UAIFwBTDecoratorNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTEnemyWaveArea
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBSTEnemyWaveArea : public UAIFwBTDecoratorNode
	{
	public:
		struct FAIFwBTNodePropertyString                           SpawnAreaKey;                                            // 0x0038(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepList
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class USBStepList : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     Switcher;                                                // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBStepListQuest*                                    StepListQuest;                                           // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBStepListWishList*                                 StepListWishList;                                        // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBStepListAdventureBoard*                           StepListAdventureBoard;                                  // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_923B[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (PADDING)

	public:
		void Unbind();
		void SetVisibleWishList(bool IsVisible);
		void SetVisibleQuestList(bool IsVisible);
		void SetVisibleAdventureBoard(bool IsVisible);
		void SetVisible(bool InVisible);
		void SetupList();
		void SetupKeyGuide();
		void SetEnable(bool IsEnable);
		void SetEditMode(bool IsEdit);
		void PlayAnim();
		void OnSetupTitle(const class FName& TitleTextId, const class FName& TitleBackTextID);
		void OnSetupKeyGuide();
		void NextPage();
		bool IsPlayAnim();
		bool IsEnable();
		void Bind();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListAdventureBoard
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBStepListAdventureBoard : public UUserWidget
	{
	public:
		class USBStepListAdventureBoardItem*                       AdventureBoardItem;                                      // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FSBAdventureBoardCondition CreateAdventureBoardCondition();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListAdventureBoardItem
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBStepListAdventureBoardItem : public UUserWidget
	{
	public:
		class USBStepListTitle*                                    StepListTitle;                                           // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        List;                                                    // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListCheckIcon
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBStepListCheckIcon : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     SwitchOffOn;                                             // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3M7X[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListProgressListItem
	 * Size -> 0x0068 (FullSize[0x02E0] - InheritedSize[0x0278])
	 */
	class USBStepListProgressListItem : public UUserWidget
	{
	public:
		class USBTextTableAsset*                                   TextTableAsset;                                          // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox*                                      HorizontalBox;                                           // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBStepListCheckIcon*                                CheckIcon;                                               // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        CPBonus;                                                 // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          LabelBonus;                                              // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          LabelCondition;                                          // 0x02A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          LabelProgress;                                           // 0x02A8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SizeX;                                                   // 0x02B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LineSize;                                                // 0x02B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LineCount;                                               // 0x02B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9NZD[0x4];                                   // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                Text;                                                    // 0x02C0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		int32_t                                                    TextNum;                                                 // 0x02D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UW2T[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListQuest
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBStepListQuest : public UUserWidget
	{
	public:
		class UVerticalBox*                                        VBox;                                                    // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WDJ2[0x10];                                  // 0x0280(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListQuestItem
	 * Size -> 0x0048 (FullSize[0x02C0] - InheritedSize[0x0278])
	 */
	class USBStepListQuestItem : public UUserWidget
	{
	public:
		class USBStepListTitle*                                    StepListTitle;                                           // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBStepListQuestItemTimer*                           Timer;                                                   // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBStepListQuestItemNFTAreaTimer*                    NFTAreaTimer;                                            // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        List;                                                    // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        DefaultOutlineColor;                                     // 0x0298(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        DoneOutlineColor;                                        // 0x02A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GBDV[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSetQuestTitle(const struct FQuestMasterData& QuestMasterData);
		void OnSetNFTTitle();
		void OnSetInterruptQuestTitle();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListQuestItemNFTAreaTimer
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBStepListQuestItemNFTAreaTimer : public UUserWidget
	{
	public:
		class UTextBlock*                                          LabelTime;                                               // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QDEO[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListQuestItemTimer
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class USBStepListQuestItemTimer : public UUserWidget
	{
	public:
		class UTextBlock*                                          LabelTime;                                               // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3DT4[0x10];                                  // 0x0280(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListTitle
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBStepListTitle : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     IconSwitcher;                                            // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextTitle;                                               // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              RouteGuideIcon;                                          // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    TextNum;                                                 // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YNR3[0x4];                                   // 0x0294(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnSetIconWishList(EQuestStatus InQuestStatus);
		void OnSetIconQuest(int32_t InQuestIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListWishList
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBStepListWishList : public UUserWidget
	{
	public:
		class UVerticalBox*                                        VBox;                                                    // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStepListWishListItem
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBStepListWishListItem : public UUserWidget
	{
	public:
		class USBStepListTitle*                                    StepListTitle;                                           // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        List;                                                    // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTLeader
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USBSTLeader : public USBSTInitializer
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStorageCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBStorageCheatCommand : public UObject
	{
	public:
		void UseItem(int32_t InItemIndex, int32_t InStorageNo);
		void SetActiveItemRemainTime(int32_t InItemID, int32_t InHour, int32_t InMinute, int32_t InSecond);
		void OnUseItemFinish(int32_t InRetCode, TArray<struct FOwnItemInfo> InDirtyItems);
		void OnCancelActiveItemFinish(int32_t InRetCode, const class FString& InId);
		void OnAddStorageFinish(int32_t InRetCode, TArray<struct FSBDiffItemInfo> InAddItemData, TArray<struct FSBMasterReward> OutRewardList, const struct FFieldActorPickupNotifyInfo& FieldActorPickupInfo);
		void CheckActiveItemLifetime();
		void CancelActiveItem(int32_t InItemIndex);
		void BulkGetItemSet(const class FName& ItemSetName);
		void BulkGetItemMenu();
		void AddWeapon(int32_t WeaponID, int32_t InStorageNo);
		void AddMountImagine(int32_t InId, int32_t InStorageNo);
		void AddMasterItemsMenu();
		void AddItem(int32_t ItemIndex, int32_t Amount, int32_t StorageNo);
		void AddImagineByName(const class FName& Name);
		void AddImagine(int32_t InId, int32_t InStorageNo);
		void AddCostume(int32_t WeaponID, int32_t InStorageNo);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTPickSpawnSettings
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class USBSTPickSpawnSettings : public UAIFwBTNode
	{
	public:
		class FString                                              LocationKey;                                             // 0x0040(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EnemyIdKey;                                              // 0x0050(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              LevelMinKey;                                             // 0x0060(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              LevelMaxKey;                                             // 0x0070(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              RespawnTimeKey;                                          // 0x0080(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStraightMovementComponent
	 * Size -> 0x0000 (FullSize[0x0218] - InheritedSize[0x0218])
	 */
	class USBStraightMovementComponent : public USBProjectileMovementHomingComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBStreamingVolume
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class ASBStreamingVolume : public AVolume
	{
	public:
		class FName                                                LevelToLoad;                                             // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASBLevelStreamingManager*                            StreamingManager;                                        // 0x0268(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTRespawnSettings
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBSTRespawnSettings : public USBSTInitializer
	{
	public:
		struct FAIFwBTNodePropertyFloat                            RespawnTime;                                             // 0x0038(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTSpawnActor
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class USBSTSpawnActor : public UAIFwBTNode
	{
	public:
		class UClass*                                              ActorClass;                                              // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              Location;                                                // 0x0048(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTSpawnEnemy
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBSTSpawnEnemy : public UAIFwBTNode
	{
	public:
		class UClass*                                              EnemyClass;                                              // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              Location;                                                // 0x0048(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMin;                                                // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMax;                                                // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMin2;                                               // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMax2;                                               // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMin3;                                               // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMax3;                                               // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMin4;                                               // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMax4;                                               // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMin5;                                               // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    LevelMax5;                                               // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTSpawnEnemyById
	 * Size -> 0x0070 (FullSize[0x00B0] - InheritedSize[0x0040])
	 */
	class USBSTSpawnEnemyById : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           EnemyId;                                                 // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           Location;                                                // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyInt                              LevelMin;                                                // 0x0080(0x0018) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyInt                              LevelMax;                                                // 0x0098(0x0018) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTSpawnEnemyBySetId
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USBSTSpawnEnemyBySetId : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           EnemySetId;                                              // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected
		struct FAIFwBTNodePropertyString                           Location;                                                // 0x0060(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTSpawnEnemySet
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBSTSpawnEnemySet : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           Location;                                                // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTSpawnEnemyWaveBySetId
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBSTSpawnEnemyWaveBySetId : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           Location;                                                // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTWaitForEnemyWaveAssetLoaded
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBSTWaitForEnemyWaveAssetLoaded : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           SpawnAreaKey;                                            // 0x0040(0x0020) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTWaitForEnemyWaveStepSatisfied
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class USBSTWaitForEnemyWaveStepSatisfied : public UAIFwBTNode
	{
	public:
		struct FAIFwBTNodePropertyString                           SpawnAreaKey;                                            // 0x0040(0x0020) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTWaitForMasterDataToReady
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class USBSTWaitForMasterDataToReady : public UAIFwBTNode
	{
	public:
		ESBSTMasterDataType                                        MasterDataType;                                          // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZSW2[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSTWaitForWaveRuleSatisfied
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class USBSTWaitForWaveRuleSatisfied : public UAIFwBTNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSubMenuInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBSubMenuInterface : public UInterface
	{
	public:
		ESubMenuTermRequestReply TermRequest(ESubMenuTermReason InReason);
		void ResetMouseCursorTypeToDefaultRequest();
		void OnSubMenuUpdate(int32_t MainPage, int32_t SubPage);
		void OnSameMenuBookmarkAccessNew(const class FString& InBookMarkType);
		void OnRMShopClosed();
		void OnParentTerm();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSubMenuSubButtonInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBSubMenuSubButtonInterface : public UInterface
	{
	public:
		void BookmarkUpdateRequest();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSubsystemConnection
	 * Size -> 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
	 */
	class USBSubsystemConnection : public UObject
	{
	public:
		class FString                                              ServerScheme;                                            // 0x0028(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ServerHost;                                              // 0x0038(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ServerPort;                                              // 0x0048(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ServerApiPort;                                           // 0x004C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              AppId;                                                   // 0x0050(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              XmppServerDomain;                                        // 0x0060(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              XmppServerMUCServicePrefix;                              // 0x0070(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A3SG[0x90];                                  // 0x0080(0x0090) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSwitchableNavModifierComponent
	 * Size -> 0x0038 (FullSize[0x0240] - InheritedSize[0x0208])
	 */
	class USBSwitchableNavModifierComponent : public USceneComponent
	{
	public:
		class UClass*                                              NavModifierArea;                                         // 0x0208(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsCubeBrush;                                            // 0x0210(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LIM6[0x3];                                   // 0x0211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBCubeBuilderParameter                             CubeBuilderParameter;                                    // 0x0214(0x000C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSBCylinderBuilderParameter                         CylinderBuilderParameter;                                // 0x0220(0x000C) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ASBAutoCreatedSwitchableNavModifierVolume> CreatedVolume;                                           // 0x022C(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRebuildBrush;                                           // 0x0234(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRebuildAllBrush;                                        // 0x0235(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1TUH[0xA];                                   // 0x0236(0x000A) MISSED OFFSET (PADDING)

	public:
		void SetNavAreaInGameplay_Client(class UClass* NewAreaClass);
		void SetNavAreaInGameplay(class UClass* NewAreaClass);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSwitchingTitle
	 * Size -> 0x0048 (FullSize[0x02C0] - InheritedSize[0x0278])
	 */
	class USBSwitchingTitle : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnClick;                                                 // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSBG;                                                    // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              ButtonImage;                                             // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TextTitle;                                               // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          OpenTexture;                                             // 0x02A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          CloseTexture;                                            // 0x02A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           TitlePosition;                                           // 0x02B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    BGIndex;                                                 // 0x02B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsOpen;                                                 // 0x02BC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7XTL[0x3];                                   // 0x02BD(0x0003) MISSED OFFSET (PADDING)

	public:
		void Swiching();
		void SetTextTable(class USBTextTableAsset* InTextTable);
		void SetTextIDForName(const class FName& InTextId);
		void SetTextId(int32_t InTextId);
		void SetText(const class FText& InText);
		void OnPlaySE(bool IsOpen);
		void OnEventSwitchingTitle__DelegateSignature(bool IsOpen);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSwitchManager
	 * Size -> 0x0048 (FullSize[0x0270] - InheritedSize[0x0228])
	 */
	class ASBSwitchManager : public AActor
	{
	public:
		TArray<float>                                              PanelLamp;                                               // 0x0228(0x0010) BlueprintVisible, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       bSwitchGateOpen;                                         // 0x0238(0x0001) BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QKW0[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBRandomSwitchs                                    SetRandomPattern;                                        // 0x023C(0x0010) BlueprintVisible, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4TI1[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      IconNames;                                               // 0x0250(0x0010) BlueprintVisible, Net, ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInitRandomSwitchPattern;                               // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void ServerUpdateRandomPattern(const struct FSBRandomSwitchs& InSetRandomPattern, bool RetryUpdateNotify);
		void RequestUpdateRandomPatternMC(const struct FSBRandomSwitchs& InSetRandomPattern, bool RetryUpdateNotify);
		void RequestUpdateRandomPattern(const struct FSBRandomSwitchs& InSetRandomPattern, bool RetryUpdateNotify);
		void OnUpdateRandomPattern();
		void OnRep_SwitchGateOpen();
		void OnRep_RandomPattern();
		void OnRep_PanelLamp();
		void OnInitRandomSwitchPattern__DelegateSignature();
		void MultiCastUpdateRandomPattern(const struct FSBRandomSwitchs& InSetRandomPattern, bool RetryUpdateNotify);
		void ClientUpdateRandomPattern(const struct FSBRandomSwitchs& InSetRandomPattern, bool RetryUpdateNotify);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSystemMessage
	 * Size -> 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
	 */
	class USBSystemMessage : public USBUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnEndSystemMessageDelegete;                              // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void StartMessage(const class FText& Message);
		void OnEndSystemMessageDelegete__DelegateSignature();
		void OnEndShowMessage();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBSystemMessageManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBSystemMessageManager : public UObject
	{
	public:
		class USBTextTableAsset*                                   TextTableAsset;                                          // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SystemMessageUI;                                         // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ShowMessageByFlagWithMessage(class UObject* WorldContextObject, const class FText& Message, bool bIsLowerPosition);
		void ShowMessageByFlag(class UObject* WorldContextObject, ESBSystemMessageFlag InFlag, bool bIsLowerPosition);
		void ShowMessage_NpcTalkMode(class UObject* WorldContextObject, const class FText& Message);
		void ShowMessage(class UObject* WorldContextObject, const class FText& Message, bool IsLowerPosition, bool bDoNotSkip);
		void ShowItemGetFailureInventoryFullMessage(class UObject* WorldContextObject);
		void ShowHealStationHealDoneMessage(class UObject* WorldContextObject);
		void ShowGetEmoteMessage(class UObject* WorldContextObject, const class FName& EmoteId);
		bool IsSystemMessageShowingOrStandby();
		bool IsDemoPlaying(class UObject* WorldContextObject);
		bool GetContentActivateMessage(TArray<class FName> ContentId, class FText* Message);
		class USBSystemMessage* CreateSysMsgUI(class UObject* WorldContextObject, const class FText& Message);
		void ClearSystemMessage();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBT_ApartWidget
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBT_ApartWidget : public USBUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBT_ApartItemListWidget
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBT_ApartItemListWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_CERP[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (PADDING)

	public:
		void CalcApart(TArray<struct FSBApartItem> InEquipment, TArray<struct FSBApartItem>* OutItems);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTargetableComponent
	 * Size -> 0x0018 (FullSize[0x0220] - InheritedSize[0x0208])
	 */
	class USBTargetableComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_HG25[0x8];                                   // 0x0208(0x0008) Fix Super Size
		float                                                      AttackMoveTargetRangeForCumulate;                        // 0x0210(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O1DU[0xC];                                   // 0x0214(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetIsTargetable(bool bTargetable);
		bool IsTargetable();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTargetableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBTargetableInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTargetCursorWidget
	 * Size -> 0x0028 (FullSize[0x02A0] - InheritedSize[0x0278])
	 */
	class USBTargetCursorWidget : public UUserWidget
	{
	public:
		class UWidgetSwitcher*                                     SwitchAuto;                                              // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     SwitchLockon;                                            // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UOverlay*                                            Overlay_1;                                               // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBTargetableComponent*                              TargetableComponent;                                     // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsFirstLock;                                             // 0x0298(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       IsPlaySE;                                                // 0x0299(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J2NH[0x6];                                   // 0x029A(0x0006) MISSED OFFSET (PADDING)

	public:
		void OnPlayLockOnSe();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelemetryLogBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBTelemetryLogBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void Log_PushCharacterCreateButton(class UObject* InWorldContextObject);
		void Log_CloseTutorialHelp(class UObject* InWorldContextObject, const class FName& InTutorialHelpId);
		void Log_AccessibilitySetting_TTS(class UObject* InWorldContextObject);
		void Log_AccessibilitySetting_STT(class UObject* InWorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBTelopBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopEventParamClassLevelUp
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBTelopEventParamClassLevelUp : public UObject
	{
	public:
		unsigned char                                              UnknownData_267T[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		int32_t GetPrevLevel();
		ESBRewardItemType GetIconType();
		int32_t GetIconID();
		int32_t GetIconAmount();
		int32_t GetCurrentLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopEventParamInterruptQuestJoin
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBTelopEventParamInterruptQuestJoin : public UObject
	{
	public:
		unsigned char                                              UnknownData_F562[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		bool IsFirst();
		class FName GetQuestId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopEventParamInterruptQuestSuccess
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBTelopEventParamInterruptQuestSuccess : public UObject
	{
	public:
		unsigned char                                              UnknownData_1VPW[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		bool IsSuccess();
		class FName GetQuestId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopEventParamInterruptQuestFailed
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBTelopEventParamInterruptQuestFailed : public UObject
	{
	public:
		unsigned char                                              UnknownData_OY9Z[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		class FName GetQuestId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopEventParamLearningSkill
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBTelopEventParamLearningSkill : public UObject
	{
	public:
		unsigned char                                              UnknownData_5B9N[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		TArray<struct FCharaSkillMasteryInfo> GetSkill();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopEventParamProficiencyUp
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBTelopEventParamProficiencyUp : public UObject
	{
	public:
		unsigned char                                              UnknownData_JQYS[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		int32_t GetValueMax();
		int32_t GetValue();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopBase
	 * Size -> 0x0090 (FullSize[0x0308] - InheritedSize[0x0278])
	 */
	class USBTelopBase : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnFinishDelegate;                                        // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FPAW[0x80];                                  // 0x0288(0x0080) MISSED OFFSET (PADDING)

	public:
		void StopAnim();
		void Stop();
		void SetBG(int32_t Index);
		void PlaySE(class UAkAudioEvent* SE);
		void PlayBGM();
		void PlayAnim();
		void OnPlay();
		void OnFinishDelegate__DelegateSignature();
		bool IsPlayAnim();
		class USBRuntimeTextBlock* GetTextEffect();
		class USBRuntimeTextBlock* GetText();
		class UTextBlock* GetSubText();
		struct FSBTelopPlayParam GetParam();
		struct FSBTelopDataParam GetData();
		void Finish();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTelopManager
	 * Size -> 0x0050 (FullSize[0x02C8] - InheritedSize[0x0278])
	 */
	class USBTelopManager : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnFinishDelegate;                                        // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UDataTable*                                          TelopDataTable;                                          // 0x0288(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          TelopOverrideDataTable;                                  // 0x0290(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WS_Telop;                                                // 0x0298(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBTelopBase*                                        PlayTelop_;                                              // 0x02A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_50EU[0x20];                                  // 0x02A8(0x0020) MISSED OFFSET (PADDING)

	public:
		void PlayRequest(bool isForce, const struct FSBTelopPlayParam& TelopParam);
		void Pause(bool IsPause);
		void OnTerminate();
		void OnInitialize();
		class USBTelopBase* OnGetTelop(ESBTelopType TelopType);
		void OnFinishDelegate__DelegateSignature(const struct FSBTelopPlayParam& InTelopParam);
		bool IsRegist();
		bool IsPlayTelop();
		bool IsPause();
		void Finished();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTextBlock
	 * Size -> 0x00A0 (FullSize[0x01C0] - InheritedSize[0x0120])
	 */
	class USBTextBlock : public UWidget
	{
	public:
		class FText                                                Text;                                                    // 0x0120(0x0018) Edit, NativeAccessSpecifierPublic
		class FScriptDelegate                                      TextDelegate;                                            // 0x0138(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		struct FSlateColor                                         ColorAndOpacity;                                         // 0x0148(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FScriptDelegate                                      ColorAndOpacityDelegate;                                 // 0x0170(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		struct FVector2D                                           ShadowOffset;                                            // 0x0180(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        ShadowColorAndOpacity;                                   // 0x0188(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      ShadowColorAndOpacityDelegate;                           // 0x0198(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class UFont*                                               Font;                                                    // 0x01A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1XXO[0x10];                                  // 0x01B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetText(const class FText& InText);
		void SetShadowOffset(const struct FVector2D& InShadowOffset);
		void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
		void SetOpacity(float InOpacity);
		void SetFont(class UFont* InFont);
		void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
		class FText GetText();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTextBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBTextBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool NotEnable_SBTextTableHash(const struct FSBTextTableHash& InHash);
		class FString GetZoneShortNameByZoneId(const class FName& InZoneId);
		class FString GetZoneShortNameByContentId(const class FName& InContentId);
		class FString GetZoneNameByZoneId(const class FName& InZoneId);
		class FString GetZoneName(int32_t InTextId);
		class FString GetWeaponTypeText(ESBWeaponType InWeaponType);
		class FString GetWeaponText(const struct FSBTextTableHash& InTextId);
		class FString GetWeaponPerkText(const struct FSBTextTableHash& InTextId);
		class FString GetWarpPointName(const class FName& InWarpPointId);
		class FString GetUICancelText(ESBOperateMode InOperateMode);
		class FString GetTokenText(const struct FSBTextTableHash& InTextId);
		class FString GetTitleName();
		class FString GetText(const class FName& InTableName, const struct FSBTextTableHash& InTextId);
		class FString GetSystemMessage(const class FName& InTextId);
		class FString GetSystemLogMessage(const class FName& InTextId);
		class FString GetSubLocationName(const class FName& InTextId);
		class FString GetStampText(const struct FSBTextTableHash& InTextId);
		class FString GetStampSetText(const struct FSBTextTableHash& InTextId);
		class FString GetStackBText(const struct FSBTextTableHash& InTextId);
		class FString GetStackBImagineParamText(const struct FSBTextTableHash& InTextId);
		class FString GetStackBImagineDescTextByItemId(int32_t InItemID, int32_t InStackBNum, bool bIsMax);
		class FString GetStackBImagineDescText(const struct FOwnItemInfo& Info);
		class FString GetSBRetMessage_RetryMode(int32_t InSBRetCode);
		class FString GetSBRetMessage(int32_t InSBRetCode);
		class FString GetRoomsText(const struct FSBTextTableHash& InTextId);
		class FString GetRoomPutsText(const struct FSBTextTableHash& InTextId);
		class FString GetRewardName(ESBRewardItemType InRewardItemType);
		class FString GetRewardItemTypeName(ESBRewardItemType InRewardItemType);
		class FString GetRecipeSetText(const struct FSBTextTableHash& InTextId);
		class FString GetPlayerTagText(const struct FSBTextTableHash& InTextId);
		class FString GetPerkName(const struct FSBTextTableHash& InTextId);
		class FString GetOrnamentText(const struct FSBTextTableHash& InTextId);
		class FString GetObjectName(const class FName& InObjectId);
		class FString GetNotifyMessage(const class FName& InTextId);
		class FString GetNoticeBoardText(const struct FSBTextTableHash& InTextId);
		class FString GetNameText(int32_t ItemId, EItemType ItemType);
		class FString GetMoneyName();
		class FString GetMasterWarehouseAbilityRecipeText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterTokenText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterSkillDataText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterSeasonPassShopText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterRoseOrbShopText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterRoseOrbPurchaseShopText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterRealMoneyShopText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterRealGoodsText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterMountImagineText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterInterruptQuestText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterImagineText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterHistoryActionTypeText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterEventShopText(const struct FSBTextTableHash& InTextId);
		class FString GetMasterBPPointShopText(const struct FSBTextTableHash& InTextId);
		class FString GetMainAbilityCourseText(int32_t InId);
		class FString GetLocationName(const class FName& InTextId);
		class FString GetLiquidMemoryText(const struct FSBTextTableHash& InTextId);
		class FString GetLiquidMemoryEfficacyLogMessage(int32_t InTextId);
		class FString GetKeyTextByKey(const struct FKey& Key, bool bReplaceFunction);
		class FString GetKeyText(const class FName& Name, bool bReplaceFunction);
		class FString GetKeyShortText(const class FName& Name, bool bReplaceFunction);
		class FString GetItemText(const struct FSBTextTableHash& InTextId);
		class FString GetImagineHyouiAbilityPatternParamTextByParamType(const class FString& ParamType, int32_t InStackBNum, bool bIsMax);
		class FString GetImagineHyouiAbilityPatternParamText(const struct FSBTextTableHash& InTextId);
		class FString GetHelpMatchingModeText(const struct FSBTextTableHash& InTextId);
		class FString GetGuildRankUnlockText(const struct FSBTextTableHash& InTextId);
		class FString GetGashaText(const struct FSBTextTableHash& InTextId);
		class FString GetGamepadStickCharaCode(bool RightStick);
		class FString GetGameBuffTypeText(EOutGameBuffType InOutGameBuffType);
		struct FSBAbilityTextData GetFusionItemTextCollection(bool* bIsValid, int32_t InItemID);
		class FString GetFreeCurrencyName();
		class FString GetFixedPhrase(int32_t InTextId);
		class FString GetEventTriggerName(const class FName& InEventTriggerId);
		class FString GetEquipmentSeriesText(const struct FSBTextTableHash& InTextId);
		class FString GetEnemyRaceIdName(const struct FSBTextTableHash& InTextId);
		class FString GetEnemyName(const struct FSBTextTableHash& InTextId);
		class FString GetEmotionTextTarget(const class FName& Name);
		class FString GetEmotionTextSelf(const class FName& Name);
		class FString GetEmotionName(const class FName& Name);
		class FString GetDungeonText(const class FName& InTextId);
		class FString GetDungeonRuleName(const class FName& DungeonId);
		class FString GetDungeonRuleDesc(const class FName& DungeonId);
		class FString GetDungeonName(const class FName& InTextId);
		class FString GetDungeonDisplayName(const class FName& DungeonId);
		class FString GetDungeonDisplayDesc(const class FName& DungeonId);
		class FString GetDungeonClearConditionText(const class FName& InTextId);
		class FString GetDigitLimitText(int32_t Num, int32_t Digit);
		class FString GetCurrentZoneName(class UObject* WorldContextObject);
		class FString GetCostumeText(const struct FSBTextTableHash& InTextId);
		class FString GetCommonText(const struct FSBTextTableHash& InTextId);
		class FString GetCommonSkillText(const struct FSBTextTableHash& InTextId);
		class FString GetCommonSkillCategoryText(const struct FSBTextTableHash& InTextId);
		class FString GetCoinName();
		class FString GetCharacterNameByProfileId(const class FName& InProfileId);
		class FString GetCharacterName(const class FName& InTextId);
		class FString GetBattleLogMessage(int32_t InTextId);
		class FString GetAwardsText(const struct FSBTextTableHash& InTextId);
		class FString GetAestheShopCourseText(const struct FSBTextTableHash& InTextId);
		class FString GetAdventureCardDecorationText(const struct FSBTextTableHash& InTextId);
		class FString GetAchievementName(const struct FSBTextTableHash& InTextId);
		class FString GetAchievementDescription(const struct FSBTextTableHash& InTextId);
		class FString GetAcceptQuestErrorCodeText(EAcceptedQuestErrorCode InErrorCode);
		void GetAbilityValueTextByAbilityId(class UObject* InWorldContextObject, int32_t AbilityID, int32_t Value1, int32_t Value2, class FString* Value1Text, class FString* Value2Text);
		class FString GetAbilityValueText(int32_t Value, ESBAbilityValueUnitType Type);
		struct FSBAbilityTextData GetAbilityTextDataCollection(int32_t InAbilityEffectId);
		bool Enable_SBTextTableHash(const struct FSBTextTableHash& InHash);
		class FString Conv_SBTextTableHashToString(const struct FSBTextTableHash& InHash);
		struct FSBTextTableHash Conv_SBTextTableHashToInt(int32_t inInt);
		struct FSBTextTableHash Conv_SBTextTableHashToByte(unsigned char InByte);
		int32_t Conv_IntToSBTextTableHash(const struct FSBTextTableHash& InHash);
		void CollectWeaponAbilityTextData(const struct FOwnItemInfo& Info, struct FSBAbilityTextData* MainAbility, struct FSBAbilityTextData* SubAbility);
		void ClipPaste(class FString* Text);
		void ClipCopy(const class FString& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTextBoxBase
	 * Size -> 0x0008 (FullSize[0x0AC8] - InheritedSize[0x0AC0])
	 */
	class USBTextBoxBase : public UEditableTextBox
	{
	public:
		unsigned char                                              UnknownData_834S[0x8];                                   // 0x0AC0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPrepareScreenshot(class UObject* Sender, class UObject* Param);
		void OnFinishScreenshot(class UObject* Sender, class UObject* Param);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTextSettings
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBTextSettings : public UObject
	{
	public:
		bool                                                       EnableTextVersionDialog;                                 // 0x0028(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UnauthorizedTextConcealment;                             // 0x0029(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FAKO[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTextTableAsset
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USBTextTableAsset : public UObject
	{
	public:
		TArray<struct FSBTextData>                                 TextTable;                                               // 0x0028(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NYR9[0x30];                                  // 0x0038(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTextWindowBase
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBTextWindowBase : public UUserWidget
	{
	public:
		void Show();
		void SetText(const class FText& InText);
		void SetSpeaker(const class FName& InProfileId);
		void SetNextMarkVisibility(bool bInVisibility);
		bool IsShow();
		void Hide();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTextWindow
	 * Size -> 0x0020 (FullSize[0x0298] - InheritedSize[0x0278])
	 */
	class USBTextWindow : public USBTextWindowBase
	{
	public:
		class FScriptMulticastDelegate                             ShowTextAllDelegate;                                     // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             TurnTextDelegate;                                        // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate

	public:
		void TurnTextDelegate__DelegateSignature();
		void ShowTextAllDelegate__DelegateSignature();
		void SetBGVisible(bool bVisible);
		void HideWithoutBG();
		void HideAndDestruct();
		bool GetBGVisible();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTheaterComponent
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class USBTheaterComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_5DKG[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGetDemoListDelegate;                                   // 0x00C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3DE8[0x18];                                  // 0x00D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSaveDemoBrowsedDelegate;                               // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void StartTheater();
		void Server_SaveDemoBrowsed(const class FName& DemoId, bool IsTheater);
		void Server_GetDemoList();
		void Request_SaveDemoFromTheater(const class FName& DemoId);
		void Request_SaveDemoBrowsed(const class FName& DemoId);
		void Request_GetDemoList();
		void RemoveIDsFromLoadDemoList(TArray<class FName> RemoveList);
		void OnSaveDemoBrowsedDelegate__DelegateSignature(bool Result, int32_t RetCode, const class FName& DemoId);
		void OnGetDemoListDelegate__DelegateSignature(bool Result, int32_t RetCode, TArray<class FName> DemoList);
		bool GetSkipFlag();
		TArray<class FName> GetLoadDemoList();
		void EndTheater();
		void Client_SaveDemoBrowsed(bool bIsSuccess, int32_t RetCode, const class FName& DemoId, int32_t ResponseCode);
		void Client_GetDemoList(bool bInWasSuccessful, int32_t InRetCode, TArray<class FName> InDemoList);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTickerMessageBase
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBTickerMessageBase : public UUserWidget
	{
	public:
		void DumpDebugInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTickerMessageManager
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USBTickerMessageManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_7FCD[0x40];                                  // 0x0028(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTickerMessageChangedDelegete;                          // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetWidget(class USBTickerMessageBase* InWidget);
		int32_t GetNextValidMesssageIndex(int32_t InStartIndex);
		int32_t GetMessageNum();
		void Debug_AddMessage(const struct FSBTickerMessageInfo& InMessage);
		void ClearPastMessage();
		struct FSBTickerMessageInfo BP_GetMessageNum(int32_t InIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTidalAreaVolume
	 * Size -> 0x0038 (FullSize[0x0260] - InheritedSize[0x0228])
	 */
	class ASBTidalAreaVolume : public AActor
	{
	public:
		class UFont*                                               FontObject;                                              // 0x0228(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZJHY[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TideRate;                                                // 0x0238(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M5DB[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TideDirection;                                           // 0x0240(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              LowTideNavArea;                                          // 0x0250(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              HighTideNavArea;                                         // 0x0258(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTidalOceanGrid
	 * Size -> 0x0038 (FullSize[0x0348] - InheritedSize[0x0310])
	 */
	class ASBTidalOceanGrid : public ASBOceanGrid
	{
	public:
		class UBoxComponent*                                       TideBox;                                                 // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         TideCurve;                                               // 0x0318(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      WaterHeight;                                             // 0x0320(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxTideHeight;                                           // 0x0324(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTideHeight;                                           // 0x0328(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxTideMoveSpeed;                                        // 0x032C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TidePreview;                                             // 0x0330(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBTidalOceanGridPlayInEditor                              PlayInEditorPreview;                                     // 0x0334(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N4MI[0x13];                                  // 0x0335(0x0013) MISSED OFFSET (PADDING)

	public:
		float GetCurrentTideOffsetHeight();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTideManager
	 * Size -> 0x0040 (FullSize[0x0268] - InheritedSize[0x0228])
	 */
	class ASBTideManager : public AActor
	{
	public:
		class FScriptMulticastDelegate                             OnHighTideDelegate;                                      // 0x0228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLowTideDelegate;                                       // 0x0238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartHighTideDelegate;                                 // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartLowTideDelegate;                                  // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic

	public:
		void PlayTide(bool Sw, float Time);
		void OnStartLowTideDelegate__DelegateSignature();
		void OnStartHighTideDelegate__DelegateSignature();
		void OnLowTideDelegate__DelegateSignature();
		void OnHighTideDelegate__DelegateSignature();
		bool IsSublevelInitialLoaded();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTideSoundComponent
	 * Size -> 0x0008 (FullSize[0x0210] - InheritedSize[0x0208])
	 */
	class USBTideSoundComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_PNSC[0x8];                                   // 0x0208(0x0008) Fix Super Size

	public:
		void SetTidePercent(float InTidePercent);
		float GetTidePercent();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTimeAttackHUD
	 * Size -> 0x0000 (FullSize[0x02D8] - InheritedSize[0x02D8])
	 */
	class USBTimeAttackHUD : public USBContentsHUDBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTimeNotifyBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBTimeNotifyBase : public UObject
	{
	public:
		bool                                                       bIsInstanced;                                            // 0x0028(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETimeNotifyNetMode                                         NotifyNetMode;                                           // 0x0029(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_37E2[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTimeNotify
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTimeNotify : public USBTimeNotifyBase
	{
	public:
		bool Received_Notify();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTimeNotify_Sample
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBTimeNotify_Sample : public USBTimeNotify
	{
	public:
		class FString                                              SamplePrintString;                                       // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTimeNotifyEventsData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBTimeNotifyEventsData : public UObject
	{
	public:
		TArray<struct FSBTimeNotifyEvent>                          Notifies;                                                // 0x0028(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTimeNotifyState
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTimeNotifyState : public USBTimeNotifyBase
	{
	public:
		bool                                                       bTickEnabledNotifyState;                                 // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7I9R[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		bool Received_NotifyTick(float DeltTime);
		bool Received_NotifyEnd();
		bool Received_NotifyBegin(const struct FSBGameTime& TotalDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTimeNotifyState_Sample
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBTimeNotifyState_Sample : public USBTimeNotifyState
	{
	public:
		class FString                                              PrintString_Begin;                                       // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PrintString_End;                                         // 0x0048(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTimerRespawnHUD
	 * Size -> 0x0030 (FullSize[0x02A8] - InheritedSize[0x0278])
	 */
	class USBTimerRespawnHUD : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_H2Y7[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextBlock*                                          respawncountertextblock;                                 // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          timertextblock_min;                                      // 0x0288(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          timertextblock_sec;                                      // 0x0290(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          timertextblock_millisec;                                 // 0x0298(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          arenaFloortextblock;                                     // 0x02A0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetTimerAndRespawnTextBlock(class UTextBlock* respawncountertextblock, class UTextBlock* timertextblock_min, class UTextBlock* timertextblock_sec, class UTextBlock* timertextblock_millisec);
		void SetTimeAttackBestTime(const class FText& Text);
		void SetHUDVisibility(bool On);
		void SetArenaFloorTextBlock(class UTextBlock* arenaFloortextblock);
		void SetArenaFloorText(const class FText& Text);
		void OnDelegated_StopTimerTimeOver();
		void OnDelegated_StopTimerGameOver();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTitleHUD
	 * Size -> 0x0008 (FullSize[0x0320] - InheritedSize[0x0318])
	 */
	class ASBTitleHUD : public AHUD
	{
	public:
		unsigned char                                              UnknownData_WIJO[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		void TryRequestTitleToCharacterSelectLog();
		void SetFirstTime();
		void RequestTermsOfUseRead(TArray<int32_t> InIds);
		void RequestTermsOfUseGet();
		void OnTermsOfUse(TArray<struct FSBTermsOfUseInfo> TermsOfUseList);
		void OnTermsOfRead(int32_t RetCode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTitleMenuCharaLayer
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBTitleMenuCharaLayer : public UUserWidget
	{
	public:
		void ShowCharaLayer(bool IsSkip);
		void SetFirstPlay(bool IsFirstPlay);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBToken
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class USBToken : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnGetStateListDelegate;                                  // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetExpiredListDelegate;                                // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSBTokenState>                               TokenStateList;                                          // 0x0048(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_47HT[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (PADDING)

	public:
		bool Request_GetExpiredList(class ASBPlayerController* PlayerController);
		bool Request_DeleteExpired(class ASBPlayerController* PlayerController);
		void OnGetStateListDelegate__DelegateSignature(const struct FSBTokenStates& States);
		void OnGetExpiredListDelegate__DelegateSignature(const struct FSBExpiredTokenStates& States);
		TArray<struct FSBTokenState> GetTokenStateList();
		struct FDateTime GetNextRecoveryTimeOfWeek(ESBTokenDayOfWeek inTargetDay);
		struct FDateTime GetNextRecoveryTimeOfTimer(const struct FDateTime& LastRecoveryDate, int32_t RecoveryMin, int32_t RecoverySec);
		struct FDateTime GetNextRecoveryTimeOfMonth();
		struct FDateTime GetNextRecoveryTimeOfDay();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTowerChallengeWatcher
	 * Size -> 0x0098 (FullSize[0x02A0] - InheritedSize[0x0208])
	 */
	class USBTowerChallengeWatcher : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_T8TB[0x8];                                   // 0x0208(0x0008) Fix Super Size
		struct FTowerChallengeInfo                                 TowerChallengeInfo;                                      // 0x0210(0x0018) Net, Transient, RepNotify, NativeAccessSpecifierPrivate
		struct FTowerChallengeProgressInfo                         TowerChallengeProgressInfo;                              // 0x0228(0x0014) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      ChallengeLimitTime;                                      // 0x023C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bActiveChallenge;                                        // 0x0240(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AEGH[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStartDelegate;                                         // 0x0248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChallengeInfoSetDelegate;                              // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUpdateDelegate;                                        // 0x0268(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTimeOutDelegate;                                       // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearDelegate;                                         // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_00CX[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUpdateDelegate__DelegateSignature(const class FName& InChallengeName);
		void OnTimeOutDelegate__DelegateSignature(const class FName& InMissionName);
		void OnStartDelegate__DelegateSignature(const class FName& InChallengeName);
		void OnRep_TowerChallengeProgressInfo();
		void OnRep_TowerChallengeInfo();
		void OnClearDelegate__DelegateSignature(const class FName& InChallengeName);
		void OnChallengeInfoSetDelegate__DelegateSignature(const class FName& InChallengeName);
		void NotifyIncrementFreeCount();
		void Multicast_NotifySucceededTowerChallenge(const class FName& InChallengeName);
		void Multicast_NotifyStartTowerChallenge(const class FName& InChallengeName);
		void Multicast_NotifyFailedTowerChallenge(const class FName& InMissionName);
		bool IsActiveChallenge();
		struct FTowerChallengeProgressInfo GetTowerChallengeProgressInfo();
		struct FTowerChallengeInfo GetTowerChallengeInfo();
		float GetChallengeLimitTime();
		int32_t GetAliveEnemyNum();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTowerHUD
	 * Size -> 0x0008 (FullSize[0x02E0] - InheritedSize[0x02D8])
	 */
	class USBTowerHUD : public USBContentsHUDBase
	{
	public:
		class UTextBlock*                                          Counter;                                                 // 0x02D8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetMaxCount(class UTextBlock* CounterWidget, const class FText& Text);
		void SetCounterWidget(class UTextBlock* CounterTextBlock);
		void SetCounterText(const class FText& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTrackGeneratorSoundComponent
	 * Size -> 0x0068 (FullSize[0x0270] - InheritedSize[0x0208])
	 */
	class USBTrackGeneratorSoundComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_548N[0x8];                                   // 0x0208(0x0008) Fix Super Size
		bool                                                       bDebugDisplay;                                           // 0x0210(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MT88[0xF];                                   // 0x0211(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       FirstSoundEvent;                                         // 0x0220(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       FirstStopEvent;                                          // 0x0228(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FirstAttenuationScalingFactor;                           // 0x0230(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PAEQ[0xC];                                   // 0x0234(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       SecondSoundEvent;                                        // 0x0240(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       SecondStopEvent;                                         // 0x0248(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SecondAttenuationScalingFactor;                          // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    IndexOfStartSecond;                                      // 0x0254(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PTKL[0x18];                                  // 0x0258(0x0018) MISSED OFFSET (PADDING)

	public:
		void StopUpdate();
		void StartUpdate();
		void SetSplineComponent(class USplineComponent* InSpline, int32_t StartSecond, class UAkComponent* InFirstAkComponent, class UAkComponent* InSecondAkComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CanEmote
	 * Size -> 0x0020 (FullSize[0x0070] - InheritedSize[0x0050])
	 */
	class USBTransition_CanEmote : public UASTransition_BlueprintBase
	{
	public:
		TArray<class FName>                                        AnimTags;                                                // 0x0050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        ForbidAnimTags;                                          // 0x0060(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CanSkillAtPosition
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CanSkillAtPosition : public UASTransition_Base
	{
	public:
		ESkillActionPosition                                       SkillPosition;                                           // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EPlayerStateMachine                                        StateMachineType;                                        // 0x0031(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreCommandCheck;                                     // 0x0032(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8HSV[0x5];                                   // 0x0033(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckAnimTime
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USBTransition_CheckAnimTime : public UASTransition_PlayEnd
	{
	public:
		float                                                      Time;                                                    // 0x0038(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7AKN[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckCanGuard
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckCanGuard : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckCommandOR
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class USBTransition_CheckCommandOR : public UASTransition_BlueprintBase
	{
	public:
		TArray<class FName>                                        Commands;                                                // 0x0050(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckElapsedTimeAfterDodgeEnd
	 * Size -> 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
	 */
	class USBTransition_CheckElapsedTimeAfterDodgeEnd : public UASTransition_BlueprintBase
	{
	public:
		float                                                      ElapsedTime;                                             // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1CH7[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckElapsedTimeAfterGuardSucceeded
	 * Size -> 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
	 */
	class USBTransition_CheckElapsedTimeAfterGuardSucceeded : public UASTransition_BlueprintBase
	{
	public:
		float                                                      ElapsedTime;                                             // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H2JY[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckGameInputTime
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckGameInputTime : public UASTransition_Base
	{
	public:
		EGameInput                                                 gameInput;                                               // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6EL5[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Time;                                                    // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckGreatGuardShieldDurability
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckGreatGuardShieldDurability : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckLastSetupSkill
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckLastSetupSkill : public UASTransition_Base
	{
	public:
		int32_t                                                    ActiveArtsID;                                            // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MWNX[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckMeasuredDistance
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckMeasuredDistance : public UASTransition_Base
	{
	public:
		float                                                      Distance;                                                // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUse2D;                                                  // 0x0034(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P2DS[0x3];                                   // 0x0035(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckNextAnimStateCountLimit
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckNextAnimStateCountLimit : public UASTransition_Base
	{
	public:
		int32_t                                                    LimitCount;                                              // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SPU3[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckRoundBlowLoopStamina
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckRoundBlowLoopStamina : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckSkillEquipped
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckSkillEquipped : public UASTransition_Base
	{
	public:
		int32_t                                                    SkillId;                                                 // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SVKT[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckSkillInputCount
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckSkillInputCount : public UASTransition_Base
	{
	public:
		int32_t                                                    InputCount;                                              // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBMagnitudeRelation                                       Relation;                                                // 0x0034(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3LB4[0x3];                                   // 0x0035(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckSkillLevel
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckSkillLevel : public UASTransition_Base
	{
	public:
		int32_t                                                    SkillId;                                                 // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Level;                                                   // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBMagnitudeRelation                                       Relation;                                                // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X4OQ[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckSkillMoveInputActorForward
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckSkillMoveInputActorForward : public UASTransition_Base
	{
	public:
		float                                                      ForwardAngle;                                            // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1HZG[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckSkillWorkTime
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckSkillWorkTime : public UASTransition_Base
	{
	public:
		ESkillActionPosition                                       SkillPosition;                                           // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UWDM[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Time;                                                    // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckSphereSweepHitForward
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckSphereSweepHitForward : public UASTransition_Base
	{
	public:
		float                                                      SweepHitLength;                                          // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SphereRadius;                                            // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<ECollisionChannel>                                  CollisionChannelList;                                    // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckTSkillStepInputDirection
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckTSkillStepInputDirection : public UASTransition_Base
	{
	public:
		ESBTSkillStepInputDirection                                CheckDirection;                                          // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y4FP[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CheckAngle;                                              // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_CheckVoltageGaugeAmount
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_CheckVoltageGaugeAmount : public UASTransition_Base
	{
	public:
		float                                                      VoltageGaugeAmount;                                      // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_N62A[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_DamageDownTime
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_DamageDownTime : public UASTransition_Base
	{
	public:
		float                                                      DamageDownTime;                                          // 0x0030(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KRZX[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_EnemyCastEnd
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_EnemyCastEnd : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_EnemyCheckStance
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_EnemyCheckStance : public UASTransition_Base
	{
	public:
		class FName                                                StanceName;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_EnemyCommonMainFromBattleState
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBTransition_EnemyCommonMainFromBattleState : public UASTransition_Base
	{
	public:
		TArray<class FName>                                        CommandListOR;                                           // 0x0030(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_EnemyIsInAttackRange
	 * Size -> 0x0028 (FullSize[0x0078] - InheritedSize[0x0050])
	 */
	class USBTransition_EnemyIsInAttackRange : public UASTransition_BlueprintBase
	{
	public:
		struct FSBAIAttackableArea                                 AttackableArea;                                          // 0x0050(0x0024) Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1GOK[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_EnemyIsInCylinderArea
	 * Size -> 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
	 */
	class USBTransition_EnemyIsInCylinderArea : public UASTransition_BlueprintBase
	{
	public:
		struct FVector                                             Center;                                                  // 0x0050(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      Radius;                                                  // 0x005C(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      HalfHeight;                                              // 0x0060(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3D9Z[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_EnemyMovement
	 * Size -> 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
	 */
	class USBTransition_EnemyMovement : public UASTransition_BlueprintBase
	{
	public:
		bool                                                       Walking;                                                 // 0x0050(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       Falling;                                                 // 0x0051(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       Flying;                                                  // 0x0052(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       Swimming;                                                // 0x0053(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NSUX[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_EnemySamplingActionDerivation
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_EnemySamplingActionDerivation : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_EnemyTakeDamageCount
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class USBTransition_EnemyTakeDamageCount : public UASTransition_BlueprintBase
	{
	public:
		class FName                                                AttackIDName;                                            // 0x0050(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    Count;                                                   // 0x0058(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESBEnemyTakeDamageCounterComparison                        Comparison;                                              // 0x005C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0HQI[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_FacialType
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_FacialType : public UASTransition_Base
	{
	public:
		ESBFacialType                                              FacialType;                                              // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FBLX[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_FrameCommand
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class USBTransition_FrameCommand : public UASTransition_Base
	{
	public:
		TArray<class FName>                                        CommandList;                                             // 0x0030(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		bool                                                       bOnce;                                                   // 0x0040(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8LUO[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_HasEnterableTransitionInSubStateMachine
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_HasEnterableTransitionInSubStateMachine : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_HasPlayerForecastLocation
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_HasPlayerForecastLocation : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_HasTSkillStepInput
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_HasTSkillStepInput : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_ImagineArtsPress
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_ImagineArtsPress : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IncludeTag
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class USBTransition_IncludeTag : public UASTransition_BlueprintBase
	{
	public:
		TArray<class FName>                                        Tags;                                                    // 0x0050(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_InputPlayerMainAttack
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class USBTransition_InputPlayerMainAttack : public UASTransition_Base
	{
	public:
		bool                                                       IsTackticalSkillInput;                                   // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YSQJ[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              SkillInfoClass[0x28];                                    // 0x0038(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		ESBClassType                                               ClassType;                                               // 0x0060(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JCKQ[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsAimOffset
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsAimOffset : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsAlive
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsAlive : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsBattle
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsBattle : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsChanceTimeDown
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsChanceTimeDown : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsChargeSkill
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsChargeSkill : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsConduitForAnimationSampling
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsConduitForAnimationSampling : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsDebugMoveMode
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsDebugMoveMode : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsDodgeSucceeded
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsDodgeSucceeded : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEffectiveStatusAliment
	 * Size -> 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
	 */
	class USBTransition_IsEffectiveStatusAliment : public UASTransition_BlueprintBase
	{
	public:
		ESBBattleEffective                                         BattleEffectiveType;                                     // 0x0050(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HVCV[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsElementalBurst
	 * Size -> 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
	 */
	class USBTransition_IsElementalBurst : public UASTransition_BlueprintBase
	{
	public:
		uint16_t                                                   Flags;                                                   // 0x0050(0x0002) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CMLS[0x6];                                   // 0x0052(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsElementalBurstWithChanceTime
	 * Size -> 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
	 */
	class USBTransition_IsElementalBurstWithChanceTime : public UASTransition_BlueprintBase
	{
	public:
		ESBTransition_IsElementalBurstWithChanceTimeAutoSettingType AutoSettingType;                                         // 0x0050(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EV9L[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEnemyBDFObjectDestroyed
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBTransition_IsEnemyBDFObjectDestroyed : public UASTransition_Base
	{
	public:
		ESBBDFObjectType                                           Type;                                                    // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BA76[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumDestroyed;                                            // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBBDFObjectDestroyedComparisonOperator                    Operator;                                                // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DPKN[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEnemyBDFPartsBroken
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class USBTransition_IsEnemyBDFPartsBroken : public UASTransition_BlueprintBase
	{
	public:
		TArray<int32_t>                                            RelatedAnchorIDArray;                                    // 0x0050(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEnemyLocomotion
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsEnemyLocomotion : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEnemyProjectileDestroyed
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class USBTransition_IsEnemyProjectileDestroyed : public UASTransition_BlueprintBase
	{
	public:
		struct FDataTableRowHandle                                 Projectile;                                              // 0x0050(0x0010) Edit, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEnemyStrafing
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsEnemyStrafing : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEnemyTideArea
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsEnemyTideArea : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEnemyTurn2DEnd
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsEnemyTurn2DEnd : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEnemyUnableActionCondition
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsEnemyUnableActionCondition : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEscapeJumpBack
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsEscapeJumpBack : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsEscapeJumpForwardMoveInput
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_IsEscapeJumpForwardMoveInput : public UASTransition_Base
	{
	public:
		bool                                                       bIsFront;                                                // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5G26[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InputAngle;                                              // 0x0034(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsFeverTime
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsFeverTime : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsHoldHandActive
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsHoldHandActive : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsHoldHandLeftSide
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsHoldHandLeftSide : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsHoldHandReverse
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsHoldHandReverse : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsHoldHandRightSide
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsHoldHandRightSide : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsLeadStateMachineActive
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_IsLeadStateMachineActive : public UASTransition_Base
	{
	public:
		ESkillActionPosition                                       SkillPosition;                                           // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EPlayerStateMachine                                        StateMachineType;                                        // 0x0031(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WT2X[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsNoDamageDead
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class USBTransition_IsNoDamageDead : public UASTransition_BlueprintBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsOtherStateMachineSetup
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBTransition_IsOtherStateMachineSetup : public UASTransition_Base
	{
	public:
		EPlayerStateMachine                                        StateMachineType;                                        // 0x0030(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3HTZ[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTransition_IsPlayerPassedForecast
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class USBTransition_IsPlayerPassedForecast : public UASTransition_Base
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTraverseCloudWidget
	 * Size -> 0x0048 (FullSize[0x02C0] - InheritedSize[0x0278])
	 */
	class USBTraverseCloudWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_JJ05[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        CountAcrossMapList;                                      // 0x0288(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UDataTable*                                          TraversePointDataTable;                                  // 0x0298(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FAnchors                                            CloudImageAnchors;                                       // 0x02A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FWKJ[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateTraverse(const class FString& InMapId, int32_t InFloor, const struct FVector2D& InMapSizeScale);
		void SetTraversePositionList(TArray<struct FSBTraverseDungeonInfo> List);
		class UUserWidget* OnCreateDungeonTraverse(class UCanvasPanel* CloudCanvas, const class FName& Name, const struct FVector2D& Position, const struct FVector2D& Size);
		class UUserWidget* OnCreateCloudTraverse(class UCanvasPanel* CloudCanvas, const class FName& Name, const struct FVector2D& Position, const struct FVector2D& Size, class UTexture2D* Texture);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTraverseVolume
	 * Size -> 0x0038 (FullSize[0x0298] - InheritedSize[0x0260])
	 */
	class ASBTraverseVolume : public ATriggerVolume
	{
	public:
		class FString                                              TraverseName;                                            // 0x0260(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    Floor;                                                   // 0x0270(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VFYD[0x24];                                  // 0x0274(0x0024) MISSED OFFSET (PADDING)

	public:
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnDemoPlayStart();
		void OnDemoPlayEnd();
		void OnCompleatTraverse(int32_t RetCode);
		class FString GetTraverseName();
		int32_t GetFloor();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTriggerBox
	 * Size -> 0x0008 (FullSize[0x0238] - InheritedSize[0x0230])
	 */
	class ASBTriggerBox : public ATriggerBox
	{
	public:
		bool                                                       bSpriteHiddenInGame;                                     // 0x0230(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3619[0x7];                                   // 0x0231(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBTutorialHelpDialogBoxCommonWidget
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class USBTutorialHelpDialogBoxCommonWidget : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        CanvasPanel_1;                                           // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUIBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		ESBContentLockType ToContentLockType(ESBCommandMenuType InCommandMenuType);
		struct FGuildChangeData ToChangeData(const struct FGuildData& Data);
		void SuppressNiagaraUIIfNeeded(class UObject* InWorldContextObject, bool bInSuppress);
		void SortSkillDatas_Priority(TArray<struct FSBPlayerSkillData>* SkillDatas);
		void SortSkillDatas_Master(TArray<struct FSBPlayerSkillData>* SkillDatas);
		void SortSkillDatas(class UObject* InWorldContextObject, TArray<struct FSBPlayerSkillData>* SkillDatas);
		void SortPasiveSkillDatas_Priority(TArray<struct FSBPlayerPassiveSkillData>* SkillDatas);
		void SortPasiveSkillDatas_Master(TArray<struct FSBPlayerPassiveSkillData>* SkillDatas);
		void SortPasiveSkillDatas(class UObject* InWorldContextObject, TArray<struct FSBPlayerPassiveSkillData>* SkillDatas);
		void SortNameArray(TArray<class FName>* NameList, bool IsAscendingOrder);
		void SortMyCharacterWeaponDataList(EMyCharacterWeaponSortType SortType, TArray<struct FMyCharacterWeaponData>* SortList);
		void SortMapUIMenuList(TMap<class FString, int32_t>* InOutMapSortData);
		void SortEmotionInfo(TArray<struct FSBEmotionInfo>* InfoList);
		void ShowSystemMessageByFlag(class UObject* InWorldContextObject, ESBSystemMessageFlag InFlag, bool bIsLowerPosition);
		void ShowSimpleSystemMessageByNonePlayerCharacter(class UObject* InWorldContextObject, const class FText& Message, bool bIsLowerPosition);
		void ShowSimpleSystemMessage(class UObject* InWorldContextObject, const class FText& Message, bool bIsLowerPosition, bool bDoNotSkip);
		void ShowSimpleAlertByType(ESimpleAlertType Type, class ASBPlayerCharacter* OwnerPlayerCharacter);
		class USBMultipleSelectDialog* ShowMultipleSelectDialog(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FText& Message, TArray<class FText> Selections, const class FScriptDelegate& EndDelegate);
		void ShowMouseCursor(class UObject* InWorldContextObject);
		struct FSBCursorStateHandle ShowCursor(class UObject* InWorldContextObject);
		void SetZOrderInViewport(class UUserWidget* UserWidget, EUIZOrder Priority);
		bool setZOrder_CheckLog(class UWidget* pWidget, int32_t ZOrder);
		void SetupSoftwareCursor(class UObject* InWorldContextObject, const struct FSoftClassPath& CursorClass);
		void SetUIVisibleSettingQuickAccessHud(class UObject* InWorldContextObject, bool bInVisibility);
		void SetUIVisibleSettingOnScreenshot(class UObject* InWorldContextObject, bool bInVisibility);
		void SetUIVisibleSettingOnPhotoPlayerControlMode(class UObject* InWorldContextObject, bool bInVisibility);
		void SetUIVisibleSettingOnMissionCharacterCard(class UObject* InWorldContextObject, bool bInVisibility);
		void SetUIVisibleSettingMenuMode(class UObject* InWorldContextObject, bool bInVisibility, bool bInInstantly);
		void SetUIVisibleSettingDemo(class UObject* InWorldContextObject, bool bInVisibility);
		void SetUIVisibleSetting(class UObject* InWorldContextObject, ESBUIType InUIType, bool bInVisibility);
		void SetUICurrentGameSetting(class UObject* InWorldContextObject, bool bInVisibility);
		void SetUICollapseByWarpAroundEffect(class UObject* InWorldContextObject, bool bInCollapse);
		void SetUICollapseByULTSkill(class UObject* InWorldContextObject, bool bInCollapse);
		void SetSoftwareCursorAvailable(class UObject* InWorldContextObject, bool bInAvailable);
		void SetSelectWidgetToMousePoint(class UObject* InWorldContextObject, class UWidget* InWidget);
		void SetSecondPasswordStatus(class UObject* WorldContextObject, ESkyBlueSecondPasswordStatus Status);
		void SetScrollBarTransparency(class UScrollBox* ScrollBox, float Value);
		void SetQuestListFilterEnable(struct FSBQuestListFilterSetting* InFilterSetting, EQuestListFilterType InFilterType, bool bInEnable);
		void SetMouseCursorPositionByWidget(class UWidget* InWidget, EHorizontalAlignment InHorizontalAlignment, EVerticalAlignment InVerticalAlignment);
		void SetMouseCursorPosition(class UObject* InWorldContextObject, class UWidget* InWidget);
		void SetMenuMusicVolume();
		void SetMenuMode(class UObject* InWorldContextObject, bool bInShowMouseCursor, bool bInDisablePlayerControl, bool bSetMusicVolume, bool bInInstantly);
		void SetInputMode_GameAndUI(class UObject* InWorldContextObject, class UWidget* InWidgetToFocus);
		void SetFontOutlineTransparency(class UTextBlock* InTextBlock, float InValue);
		void SetFontOutlineColor(class UTextBlock* InTextBlock, const struct FLinearColor& Color);
		void SetEnablePadCursorMove(class UObject* InWorldContextObject, bool bValue);
		struct FSBCursorStateHandle SetCursorState(class UObject* InWorldContextObject);
		void SetCursorInput(class UObject* InWorldContextObject, bool bInbIsCursorInput);
		void SetBrushImageSize(class UImage* Image, const struct FVector2D& ImageSize);
		void ResetQuestListFilterEnable(struct FSBQuestListFilterSetting* InFilterSetting, bool bInEnable);
		void ResetMenuMusicVolume();
		void ResetMenuMode(class UObject* InWorldContextObject, bool bInShowedMouseCursor, bool bInDisablePlayerControl, bool bSetMusicVolume);
		void ResetInputMode_GameAndUI(class UObject* InWorldContextObject);
		void ResetCursorState(class UObject* InWorldContextObject, struct FSBCursorStateHandle* InOutHandle);
		void Request_DeleteDownloadImage(class UObject* InWorldContextObject, const class FString& InURL);
		void RegistShopWeaponItemList(const class FName& InListName);
		void RegistShopItemListByItemType(const class FName& InListName, EItemType InItemType);
		void RegistReadedIdByInt(class UObject* WorldContextObject, bool* bIsValid, ENewMarkContentType InCategory, int32_t InId, bool bSkipSave);
		void RegistReadedID(bool* bIsValid, const class FString& InPlayerId, const class FString& InCharacterId, ENewMarkContentType InCategory, const class FString& InId, bool bSkipSave);
		void ReadedIDSave(const class FString& InPlayerId, const class FString& InCharacterId);
		bool ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, struct FVector2D* OutScreenPosition, float* OutDepth, float* OutRHW, bool bPlayerViewportRelative);
		void PrioritizePositiveAkEvent();
		int32_t PlaySE(class UObject* InWorldContextObject, class UAkAudioEvent* AkEvent, bool bStopWhenAttachedToDestroyed);
		void OpenLogFolder();
		void OpenFileDialog(EFileDialogResult* OutResult, TArray<class FString>* FilePath, const class FString& DialogTitle, const class FString& DefaultPath, const class FString& DefaultFile, const class FString& FileType, bool IsMultiple);
		void OpenDirectoryDialog(EFileDialogResult* OutResult, class FString* FilePath, const class FString& DialogTitle, const class FString& DefaultPath);
		class FString MakeMoviePath(const class FString& Filename, const class FString& Prefix);
		int32_t LoopSub(int32_t CurrentValue, int32_t MaxValue);
		int32_t LoopAdd(int32_t CurrentValue, int32_t MaxValue);
		void LoadFileAndGetCharaCreateParameter(const class FString& InFilePath, struct FSBCharaCreateParameter* OutCharaCreateParameter, bool* bIsSuccess);
		void LeaveShopAmbientMode(class UObject* InWorldContextObject);
		bool IsTraverse(class UObject* WorldContextObject, const class FString& TraversedPoint);
		bool IsTimeoutTargetRecepi(class UObject* InWorldContextObject, int32_t RecepiId);
		bool IsTimeoutTargetImagineRecepi(class UObject* InWorldContextObject, int32_t RecepiId);
		bool IsTimeoutItem(class UObject* InWorldContextObject, int32_t ItemId, EItemType Type);
		bool isTargetMarkerShooterType(ESBClassType ClassType);
		bool IsTalkModeShortCycle(class UObject* InWorldContextObject);
		bool IsSyntheableAbility(class UObject* InWorldContextObject, const class FString& WeaponUID, int32_t StorageNo, const class FString& ImagineUID, int32_t ImagineStorageNo);
		bool isStorageItemLockedSimple(class UObject* WorldContextObject, const class FString& InItemUniqueId);
		bool isStorageItemLocked(class UObject* WorldContextObject, int32_t InItemIdx, int32_t InRequiredNum, bool* OutRequiredCnt);
		bool IsSkipLogo(class UObject* WorldContextObject);
		ESBRmShopErrorStatus IsShopCheckStatusRetCode(int32_t InRetCode);
		bool IsScbPopupEnable();
		bool IsReadedIdByInt(class UObject* WorldContextObject, bool* bIsValid, ENewMarkContentType InCategory, int32_t InId);
		bool IsReadedID(bool* IsValid, const class FString& InPlayerId, const class FString& InCharacterId, ENewMarkContentType InCategory, const class FString& InId);
		bool IsPlayerEmotePossession(class UObject* WorldContextObject, int32_t EmoteId);
		bool IsPlayerClassChangeable(class UObject* InWorldContextObject);
		bool IsParentMapFld004(const class FString& MapId);
		bool IsParentMapFld003(const class FString& MapId);
		bool IsParentMapFld002(const class FString& MapId);
		bool IsParentMapFld001(const class FString& MapId);
		bool IsOrnamentMode(class UObject* WorldContextObject);
		bool IsOpenMapUI(class UObject* WorldContextObject);
		bool IsMapUIWarpPointListUse(class UObject* WorldContextObject);
		bool IsMapUIMarkerPinListUse(class UObject* WorldContextObject);
		bool IsMapUIMapSelectListUse(class UObject* WorldContextObject);
		bool IsMapUIMapBlure(class UObject* WorldContextObject);
		bool IsMapUILocationIconUse(class UObject* WorldContextObject);
		bool IsInventoryStorageNumber(int32_t StorageNumber);
		bool isInventoryItemLockedSimple(class UObject* WorldContextObject, const class FString& InItemUniqueId);
		bool isInventoryItemLocked(class UObject* WorldContextObject, int32_t InItemIdx, int32_t InRequiredNum, bool* OutRequiredCnt);
		bool isImagineCraftRecepiMaterialLocked(class UObject* WorldContextObject, int32_t InRecepiId);
		bool IsHaveAdventureBoard(class UObject* InWorldContextObject, int32_t InBoardId);
		bool IsFangExpeditionUsing(class UObject* WorldContextObject, const class FString& InItemUniqueId);
		bool IsExistingTraversal(class UObject* WorldContextObject, const class FString& TraversedPoint, class UDataTable* TraversePointDataTable);
		bool IsEnableOpenRmShopMenu(class UObject* WorldContextObject);
		bool IsEnableMasterySkill(int32_t SkillId);
		bool IsDebug();
		bool IsCursorOverScrollBox(class UObject* InWorldContextObject);
		bool IsCursorOverScrollableWidget(class UObject* InWorldContextObject);
		bool IsCursorOverInteractableWidget(class UObject* InWorldContextObject);
		bool isCraftRecepiMaterialLocked(class UObject* WorldContextObject, int32_t InRecepiId);
		bool isCraftMaterialLocked(class UObject* WorldContextObject, int32_t InItemIndex, int32_t InRequiredNum);
		bool IsCraftableRecepi(class UObject* InWorldContextObject, const struct FCharacterCraftRecepi& InRecepi, bool bIsImagineRecepi);
		ESBCharacterEquipsOrSkillsOrCostumesChangeableRetValues IsCharacterEquipsOrSkillsOrCostumesChangeable(class UObject* InWorldContextObject);
		bool IsBuffStatusAliment(ESBBattleEffective StatusAliment);
		bool IsBppIrredeemable(class UObject* WorldContextObject, const class FString& InItemUniqueId, int32_t StorageNumber);
		bool IsAnyReadedItemStorage(class UObject* InWorldContextObject, bool* IsValid, const class FString& InPlayerId, const class FString& InCharacterId, int32_t StorageNumber);
		bool IsAnyReaded(bool* IsValid, const class FString& InPlayerId, const class FString& InCharacterId, ENewMarkContentType InCategory);
		bool IsActiveStatusAliment(class ASBCharacter* InCharacter, ESBBattleEffective InStatusAliment);
		bool IsActiveAdventureBoard(class UObject* InWorldContextObject);
		void InsertNewLineEachCountRef(class FString* InOutString, int32_t InCount);
		class FString InsertNewLineEachCount(const class FString& inString, int32_t InCount);
		void InitNotificationSaveData(class UObject* WorldContextObject);
		void HideMouseCursor(class UObject* InWorldContextObject);
		void HideCursor(class UObject* InWorldContextObject, struct FSBCursorStateHandle* InOutHandle);
		bool HasTimelimtRecepi(class UObject* InWorldContextObject, int32_t RecepiId);
		bool HasTimelimtImagineRecepi(class UObject* InWorldContextObject, int32_t RecepiId);
		bool HasTimelimit(int32_t Index, EItemType Type);
		ESBWorldUIType GetWorldUIType(class UObject* WorldContextObject);
		int32_t GetUIZOrder(EUIZOrder Type);
		class USBUIVisibleSettings* GetUIVisibleSettings(class UObject* InWorldContextObject);
		bool GetUIVisibleSetting(class UObject* InWorldContextObject, ESBUIType InUIType);
		struct FKey GetUISupportKey(const class FName& InAction, bool* OutGamePadMode);
		struct FVector2D GetUIPosition(class UWidget* InWidget);
		struct FKey GetUIOKKey();
		class ASBUIController* GetUIController(class UObject* InWorldContextObject);
		class USBTickerMessageManager* GetTickerMessageManager(class UObject* InWorldContextObject);
		int32_t GetTextNumFromAsset(class USBTextTableAsset* InTextTableAsset);
		class FString GetTextFromAssetByName(class USBTextTableAsset* InTextTableAsset, const class FName& InTextId);
		class FString GetTextFromAssetAt(class USBTextTableAsset* InTextTableAsset, int32_t InIndex);
		class FString GetTextFromAsset(class USBTextTableAsset* InTextTableAsset, int32_t InTextId);
		class FString GetText(const class FName& InTextTableName, const struct FSBTextTableHash& InTextId);
		bool GetTermStartDateString(class UObject* WorldContextObject, class FString* OutString, const class FString& InTermId);
		bool GetTermStartDate(class UObject* WorldContextObject, struct FDateTime* OutTermDate, const class FString& InTermId);
		bool GetTermEndDateString(class UObject* WorldContextObject, class FString* OutString, const class FString& InTermId);
		bool GetTermEndDate(class UObject* WorldContextObject, struct FDateTime* OutTermDate, const class FString& InTermId);
		float getTargetMarkerNearRange(class ASBPlayerCharacter* Player);
		class FString GetSystemSESoundName(ESystemSE SEId);
		void GetSystemSEEvent(ESystemSE SEId);
		int32_t GetStatusAlimentShowPriority(ESBBattleEffective StatusAliment);
		bool GetStampName(class FString* OutString, int32_t InStampId);
		TArray<ESBClassType> GetSortedPlayerClassList();
		ESBSkillType GetSkillType(int32_t SkillId);
		void GetSkillIdBySkillType(ESBClassType InClassType, TArray<ESBSkillType> InSkilTypes, TArray<int32_t>* OutSkillIds);
		TArray<struct FSBClassChangeBattleCode> GetSelectableBattleCodes(class UObject* InWorldContextObject, ESBClassType ClassType);
		ESkyBlueSecondPasswordStatus GetSecondPasswordStatus(class UObject* WorldContextObject);
		int32_t GetSeasonRankPointMax();
		class USBTelopManager* GetSBTelopManager(class UObject* InWorldContextObject, bool* IsValid);
		int32_t GetRoseOrbMax();
		void GetRevisionText(class FString* VersionText);
		struct FVector2D GetReticleViewportLocation(class UObject* WorldContextObject);
		struct FVector2D GetReticleLocation(class UObject* WorldContextObject);
		bool GetRemainTimeLimitGuideText(class USBTextTableAsset* InTextTableAsset, int32_t InDaysLeft, const class FString& InTimesLeft, class FText* OutRemainGuideText);
		TArray<int32_t> GetQuestUnlockAdventurerRank(class UObject* InWorldContextObject, int32_t InAdventurerRank, EQuestCategory2 InCategory);
		int32_t GetPlayerNumTraversePointInMap(class UObject* WorldContextObject, const class FName& MapName);
		class USBPlayerGaugeBaseWidget* GetPlayerGaugeBaseWidget(class UObject* WorldContextObject);
		bool GetPlatformIconTextureAssetByType(class UObject* WorldContextObject, ESBPlatformType PlatformType, bool bIsOnline, class UTexture2D** LoadedTexture);
		bool GetPlatformIconTextureAssetByIndex(class UObject* WorldContextObject, int32_t platformId, bool bIsOnline, class UTexture2D** LoadedTexture);
		class FString GetPartySystemText(ESBPartySystemTextType InType);
		bool GetOwnPlatformInfo(class UObject* WorldContextObject, struct FSBPlatformInfo* OutPlatformInfo);
		int32_t GetNotificationMenuDataExNum(class UObject* WorldContextObject);
		void GetNotificationMenuDataEx(class UObject* WorldContextObject, TArray<struct FSBNotificationMenuData>* DataList);
		class USBStepList* GetNewStepListWidget(class UObject* WorldContextObject);
		class USBNetworkCafeMessageManager* GetNetworkCafeMessageManager(class UObject* InWorldContextObject);
		int32_t GetMoneyMax();
		TArray<class FName> GetMissionIdsUnlockAdventurerRank(class UObject* InWorldContextObject, int32_t InAdventurerRank);
		int32_t GetMaxNumTraversePointInMap(class UObject* WorldContextObject, const class FName& MapName);
		ESBMapUIType GetMapUIType(class UObject* WorldContextObject);
		void GetMapInfoByMapName(const class FString& MapName, struct FSBMapInfo* MapInfo, bool* IsExists);
		void GetMapInfo(const class FName& MapId, struct FSBMapInfo* MapInfo, bool* IsExists);
		bool GetMapContentIdtoMapName(const class FString& MapContentId, class FString* MapName);
		int32_t GetMainQuestUnlockAdventurerRank(class UObject* InWorldContextObject, int32_t InAdventurerRank);
		bool GetLocalPlayerLoginCharacterId(class ASBCharacter* PlayerCharacter, class FString* OutCharacterId);
		float GetListScrollSpeed();
		bool GetLineRectIntersect(const struct FVector4& InRect, const struct FVector2D& InLineStart, const struct FVector2D& InLineEnd, struct FVector2D* OutIntersect);
		bool GetIsAbilityDBIconTypeAttributeResistUp(ESBStatusAilmentIconType InIconType);
		bool GetIsAbilityDBIconTypeAttributeResistDown(ESBStatusAilmentIconType InIconType);
		bool GetIsAbilityDBIconTypeAttributeResist(ESBStatusAilmentIconType InIconType);
		bool GetIsAbilityDBIconTypeAttributeAttackPowerUp(ESBStatusAilmentIconType InIconType);
		bool GetIsAbilityDBIconTypeAttributeAttackPowerDown(ESBStatusAilmentIconType InIconType);
		bool GetIsAbilityDBIconTypeAttributeAttackPower(ESBStatusAilmentIconType InIconType);
		bool GetIntersectionCircleLine(const struct FVector2D& Center, float Radius, const struct FVector2D& Start, const struct FVector2D& End, struct FVector2D* Ret1, struct FVector2D* Ret2);
		struct FSlateColor GetImpossibleColor();
		TArray<int32_t> GetImagineRecepiIdsUnlockAdventurerRank(class UObject* InWorldContextObject, int32_t InAdventurerRank);
		int32_t GetGuildOrganizedAfterDate(const struct FGuildData& InGuildData);
		int32_t GetGuildMemberRoleTextId(EGuildMemberRole Role);
		bool GetGameConfigValueString(const class FString& InSection, const class FString& InKey, class FString* OutValue);
		void GetFangExpeditionUsingId(class UObject* WorldContextObject, TArray<class FString>* OutUniqueIds);
		int32_t GetExpMax();
		int32_t GetExchangeShopAdventurerRankCount(class UObject* InWorldContextObject, int32_t InAdventurerRank, ESBMerchandiseCounterType Type);
		bool GetEnvText(class FString* EnvText);
		class FString GetEmoteName(const class FName& EmoteId);
		struct FAutoStampWordData GetDefaultAutoStampDataEx(EAutoWordEventType InEventType);
		void GetCursorNavigationCheckHistory(class UObject* InWorldContextObject, bool* bOutResut, struct FVector2D* OutCursorPos, struct FVector2D* OutDirection);
		class FString GetCurrentMapParentId(class UObject* WorldContextObject);
		EMouseCursor GetCurrentCursorType();
		bool GetCraftRecepiUnlockPerkSlotMinMax(const struct FCraftMasterData& InMasterData, int32_t* RetMin, int32_t* RetMax);
		TArray<int32_t> GetCraftRecepiIdsUnlockAdventurerRank(class UObject* InWorldContextObject, int32_t InAdventurerRank);
		void GetClimbingPointActorList(class UObject* WorldContextObject, TArray<class AActor*>* OutList);
		class FString GetClassNameText(ESBClassType InClassType);
		bool GetCharaEquipTypeFromProtectorCategory(EProtectorCategory InProtectorCategory, ESBCharaEquipType* OutCharaEquipType);
		int32_t GetCharacterStorageNumber();
		int32_t GetBPPointSafeMax();
		int32_t GetBPPointMax();
		int32_t GetBPMax();
		int32_t GetBlockListMax();
		void GetAutoDeliveryQuestDesc(class FString* OutMessage, const struct FSBTextTableHash& TextId, ESBSeasonPassQuestCycleType Cycle);
		class FText GetAdventurerRankText(class UObject* InWorldContextObject, int32_t InAdventurerRank);
		int32_t GetAdventurerRank(class UObject* InWorldContextObject);
		void GetActivityTargets(const struct FGuildActivity& Activity, bool* Valid, class FString* TargetUserID1, class FString* TargetCharacterID1, class FString* TargetName1, struct FSBPlatformInfo* PlatformInfo1, bool* valid2, class FString* TargetUserID2, class FString* TargetCharacterID2, class FString* TargetName2, struct FSBPlatformInfo* PlatformInfo2);
		int32_t GetActivityRole(const struct FGuildActivity& Activity);
		int32_t GetActivityRank(const struct FGuildActivity& Activity);
		class FString GetActivityNewGuildName(const struct FGuildActivity& Activity);
		void GetAbilityPartsName(bool* IsValid, int32_t InAbilityEffectId, class FName* AbilityParts1Name, class FName* AbilityParts2Name);
		ESBStatusAilmentIconType GetAbilityDBIconTypeByRowName(const class FName& InRowName);
		void GetAbilityConfigByAbilityDBRowName(const class FName& InRowName, bool* IsValid, struct FSBAbilityConfig* OutAbilityConfig);
		int32_t GetAbilitryNameToUIElementResistanceIndex(const class FName& InObjectName, bool* OutIsParamUp);
		struct FLinearColor FromHexToLinearColor(const class FString& InHexString);
		class FString FormatStringToSpecifiedLineCountAndWordCount(const class FString& inString, int32_t InWordCountPerLine, int32_t InLineCount);
		class FString FormatNumberToCommaFormat(int32_t InNumber);
		class FString FormatNumber(int32_t InNumber, const class FString& InFormatString);
		bool ForceReadMarkMission(class UObject* WorldContextObject);
		bool ForceReadMarkEquipment(class UObject* WorldContextObject);
		void FlushPressedKeys(class UObject* InWorldContextObject);
		void FindSyntheAbilityPickupMasterDataFromP2P(int32_t ID, struct FSBSyntheAbilityData* MinAccuracy, struct FSBSyntheAbilityData* MaxAccuracy);
		struct FSBSyntheAbilityData FindSyntheAbilityPickupMasterDataFromAccuracy(int32_t ID, int32_t Accuracy);
		bool EqualEqual_GuildData_GuildChangeData(const struct FGuildData& lfs, const struct FGuildChangeData& rhs);
		bool EqualEqual_GuildChangeData_GuildData(const struct FGuildChangeData& lfs, const struct FGuildData& rhs);
		bool EqualEqual_GuildChangeData(const struct FGuildChangeData& lfs, const struct FGuildChangeData& rhs);
		void EnterShopAmbientMode(class UObject* InWorldContextObject);
		void DummyCursorUnderWidgetMouseEnter(class UObject* InWorldContextObject);
		class USBDownloadImageImpl* DownloadImage(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FString& URL);
		void DeleteReadedID(bool* bIsValid, const class FString& InPlayerId, const class FString& InCharacterId, ENewMarkContentType InCategory, const class FString& InId);
		void DeleteAllReadedID(bool* bIsValid, const class FString& InPlayerId, const class FString& InCharacterId, ENewMarkContentType InCategory);
		class USpacer* CreateSpacer();
		class USizeBox* CreateSizeBox();
		class FName ConvertParentMapIdName(const class FName& MapId);
		class FString ConvertParentMapId(const class FString& MapId);
		void ConvertDateFormat(const class FString& inString, class FString* OutString);
		class FString ConvertAlphanumericZenToHan(const class FString& inString);
		class FString ConvertAbilityEffectValueText(const class FName& RowName, int32_t Value);
		bool ContainsTimeoutRecepiMaterial(class UObject* InWorldContextObject, int32_t RecepId);
		bool ContainsTimeoutImagineRecepiMaterial(class UObject* InWorldContextObject, int32_t RecepId);
		int32_t ComvertAbilitryElementToUIElementResistance(ESBAttribute InAttributeType);
		void CheckTermStamp(class UObject* WorldContextObject);
		bool CheckQuestListFilter(const struct FSBQuestListFilterSetting& InFilterSetting, int32_t InQuestIndex);
		void CheckNotificationMenuDataAll(class UObject* WorldContextObject, TArray<struct FSBNotificationMenuData> DataAll);
		void CheckNotificationMenuData(class UObject* WorldContextObject, const struct FSBNotificationMenuData& Data);
		void CheckNotificationHistory(class UObject* WorldContextObject);
		bool CheckItemLevelSyncWeaponStorageItem(class UObject* WorldContextObject, const class FString& InItemUniqueId);
		bool CheckItemLevelSyncWeaponItemId(class UObject* WorldContextObject, int32_t InWeaponItemId);
		bool CheckItemLevelSyncWeapon(class UObject* WorldContextObject, const class FString& InItemUniqueId);
		bool CheckItemLevelSyncImagineStorageItem(class UObject* WorldContextObject, const class FString& InItemUniqueId, bool InUseClassTypeForLevelSync, ESBClassType InClassTypeForLevelSync);
		bool CheckItemLevelSyncImagine(class UObject* WorldContextObject, const class FString& InItemUniqueId, bool InUseClassTypeForLevelSync, ESBClassType InClassTypeForLevelSync);
		bool CheckItemLevelStorageItem(class UObject* WorldContextObject, const class FString& InItemUniqueId);
		bool CheckItemLevel(class UObject* WorldContextObject, const class FString& InItemUniqueId);
		bool CheckIfTacticalSkillOrAbilityIsActive(class UObject* InWorldContextObject, int32_t InSkillId);
		bool CheckIfEquipmentIsExpired(class UObject* WorldContextObject, const struct FSBExpiredEquipmentData& InExpiredEquipmentData, const class FString& InEquipmentUniqueId);
		bool CheckIfEquipBImagineHyouiAbilityIsActiveForDhcBattle(class UObject* WorldContextObject, int32_t InWeaponLevel, TArray<struct FSBDhcBattlePlayerEquipImagineInfo> InBImagineEquipInfos, int32_t* OutHyouiImagineId, int32_t* OutHyouiImagineStackBNum);
		bool CheckIfEquipBImagineHyouiAbilityIsActive(class UObject* WorldContextObject, int32_t InWeaponLevel, TArray<class FString> InBImagineUniqueIds, int32_t* OutHyouiImagineId, int32_t* OutHyouiImagineStackBNum);
		ESBItemUseStatus CanUseItem_ItemID(class UObject* WorldContextObject, int32_t ItemId, bool* TypeA);
		ESBItemUseStatus CanUseItem(class UObject* WorldContextObject, const class FString& InItemUniqueId, bool* TypeA, bool bStorageCheck);
		ESBCommandMenuType BookmarkTypeToCommandMenuType(const class FString& InBookmark);
		void ApplyStatusAliment(class ASBCharacter* TargetCharacter, const struct FDataTableRowHandle& StatusAliment);
		bool AnyQuestListFilterEnable(const struct FSBQuestListFilterSetting& InFilterSetting);
		void AddToViewport(class UUserWidget* UserWidget, EUIZOrder Priority);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBDownloadImageImpl
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class USBDownloadImageImpl : public UObject
	{
	public:
		bool                                                       bSuccess;                                                // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bDownload;                                               // 0x0029(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZIP7[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2DDynamic*                                   Texture;                                                 // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WLXW[0x28];                                  // 0x0038(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAsyncTaskDownloadImage*                             AsyncTask;                                               // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2LAJ[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnSuccess(class UTexture2DDynamic* InTexture);
		void OnFail(class UTexture2DDynamic* InTexture);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUICheatCommand
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBUICheatCommand : public UObject
	{
	public:
		unsigned char                                              UnknownData_8SYX[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void TelopStatusCheck();
		void TelopPlayValue(ESBTelopPlayType Type, int32_t Value, int32_t ValueMax);
		void TelopPlayStr(ESBTelopPlayType Type, const class FText& Title, const class FText& Subtitle);
		void TelopPlayIcon(ESBTelopPlayType Type, ESBRewardItemType RewardItemType, int32_t ID, int32_t Amount);
		void TelopPlayBG(ESBTelopPlayType Type, int32_t Index);
		void TelopPlay(ESBTelopPlayType Type);
		void TelopPause(bool IsPause);
		void SetWholeMapPhaseCount(int32_t Value);
		void SetMiniMapPhaseCount(int32_t Value);
		void SetGashaRankUpDemoProbability(const class FName& InRowName, float InProbability);
		void SetGashaItemRarity(ESBRarity InRarity);
		void SetGashaExpectDemoOverride(ESBGashaExpectDemoType InDemoType, ESBGashaDemoRank InDemoRank);
		void SetConfigPlayerIDOverWrite(const class FString& InPlayerId);
		void ResetGashaRankUpDemoProbability();
		void ResetGashaItemRarity();
		void ResetGashaExpectDemoOverride();
		void RemoveUIDebugTag(const class FString& InTag);
		void ReadedDataAllDump();
		void QuestListDebug();
		void PushSystemLog(const class FName& InId, ESBChatLogOption InOption);
		void PushBattleLog(int32_t InId, ESBChatLogOption InOption);
		void PlayGashaSpecialCut(ESBRarity InDemoRarity, ESBRarity InActualRarity);
		void PlayGashaDemo(int32_t InNum, bool bInSkip);
		void OpenCmdMenu();
		void LibraryEnemyListFullOpen(bool bOpen);
		bool IsQuestListDebug();
		void HasUIDebugTag(const class FString& InTag);
		void GetDeliveredTickerMessage();
		void ForceReloadSaveData();
		void DumpUIVisibleState(bool bVerbose);
		void DumpTickerMessage();
		void DumpTelopList();
		void DumpLibraryData();
		void DebugSetMenuMode(bool bMode);
		void ClearConfigPlayerIDOverWrite();
		void AddUIDebugTag(const class FString& InTag);
		void AddTickerMessage(int32_t InId, const class FString& InMessage, const class FString& InStartDateTime, const class FString& InEndDateTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBCmnStatusUDBase
	 * Size -> 0x0000 (FullSize[0x0278] - InheritedSize[0x0278])
	 */
	class USBCmnStatusUDBase : public UUserWidget
	{
	public:
		void SetValue(float Value);
		void Clear();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIController
	 * Size -> 0x0020 (FullSize[0x0248] - InheritedSize[0x0228])
	 */
	class ASBUIController : public AActor
	{
	public:
		class UWidget*                                             CommandMenuCommonCheckWidgetUi;                          // 0x0228(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidget*                                             CommandMenuCommonWidgetUi;                               // 0x0230(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VSZY[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidget*                                             SelectWidgetUi;                                          // 0x0240(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetSelectWidgetToMousePoint(class UWidget* Widget);
		void SetCommandMenuCommonSubButtonListButton(class UWidget* Widget);
		bool GetCommandMenuCommonTouchCheckEnd();
		bool GetCommandMenuCommonSubOn();
		void CheckCommandMenuCommonSubButtonListButtonStart();
		void CheckCommandMenuCommonSubButtonListButton(class UWidget* Widget);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIFocusableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUIFocusableInterface : public UInterface
	{
	public:
		void OnPressOk();
		void OnLostFocus();
		void OnGetFocus();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIGuildActivityUMGBase
	 * Size -> 0x00F0 (FullSize[0x0368] - InheritedSize[0x0278])
	 */
	class USBUIGuildActivityUMGBase : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnRequestCharacterCard;                                  // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FGuildActivity                                      Activity;                                                // 0x0288(0x00E0) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected

	public:
		void SetActivity_Internal(const struct FGuildActivity& Other);
		void SetActivity(const struct FGuildActivity& Other);
		void Request_CharacterCard(const class FString& UserId, const class FString& CharacterId, const class FString& Name);
		void CallCharacterCard__DelegateSignature(const class FString& UserId, const class FString& CharacterId, const class FString& Name);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIInputHandleInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUIInputHandleInterface : public UInterface
	{
	public:
		bool OnRepeat_Up();
		bool OnRepeat_Right();
		bool OnRepeat_Ok();
		bool OnRepeat_Left();
		bool OnRepeat_Down();
		bool OnRepeat_Cancel();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.KeyConfigFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKeyConfigFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FKey ToStanderdKey(const struct FKey& InKey);
		struct FKey ToPadFunctionKey(const struct FKey& InKey);
		struct FKey ToPadFunction2Key(const struct FKey& InKey);
		struct FKey ToFunction3Key(const struct FKey& InKey);
		void SyncBookMark(class UObject* WorldContextObject, const struct FSBPlayerClassKeyConfigData& Data);
		void RemoveBookmarks(struct FSBPlayerClassKeyConfigData* Data);
		ESBKeyConfigGamepadKey PadToKeyConfigKey(const struct FKey& InputKey);
		struct FSBPlayerClassKeyConfigData OverWriteKeyData(struct FSBPlayerClassKeyConfigData* KeyConfigData, ESBKeyConfigAction Action, ESBKeyConfigKeyboardKey KB_Key, ESBKeyConfigMouseKey MS_Key, ESBKeyConfigGamepadKey Pad_Key);
		ESBKeyConfigMouseKey MouseToKeyConfigKey(const struct FKey& InputKey);
		struct FKey MouseKeyToKey(ESBKeyConfigMouseKey MouseKey);
		ESBKeyConfigKeyboardKey KeyToKeyConfigKey(const struct FKey& InputKey);
		bool KeyIsActionKey(const struct FSBPlayerClassKeyConfigData& KeyConfigData, const struct FKey& InputKey, ESBKeyConfigAction KeyConfigAction);
		struct FKey KeyboardKeyToKey(ESBKeyConfigKeyboardKey KeyboardKey);
		bool IsPadAction(ESBKeyConfigAction Type);
		bool IsKeyRegisted(class UObject* WorldContextObject, const struct FKey& InKey);
		bool IsKeyboardAction(ESBKeyConfigAction Type);
		bool IsFunctionPadKey(const struct FSBPlayerClassKeyConfigData& Data, const struct FKey& InKey);
		bool IsFunctionKey(const struct FKey& InKey);
		bool IsFunctionConfigKey(ESBKeyConfigGamepadKey InKey);
		bool IsFunction3Key(const struct FKey& InKey);
		bool IsFunction2PadKey(const struct FSBPlayerClassKeyConfigData& Data, const struct FKey& InKey);
		bool IsFunction2Key(const struct FKey& InKey);
		bool IsFunction2ConfigKey(ESBKeyConfigGamepadKey InKey);
		bool IsContainsDuplicatedKey(const struct FSBPlayerClassKeyConfigData& KeyConfigData);
		bool IsBookMarks(ESBKeyConfigAction Type);
		void GetKeyConfigSliderMinMax(float* Min, float* Max);
		float GetKeyConfigPersentageBias();
		float GetKeyConfigMouseFixedValue();
		float GetKeyConfigMouseBias();
		TArray<struct FKey> GetKeyByActionFunctionPlus(ESBUIKeyConfigAction KeyConfigAction, ESBOperateMode InMode);
		struct FKey GetKeyByAction(ESBUIKeyConfigAction KeyConfigAction);
		TArray<ESBKeyConfigGamepadKey> GetGamepadShortcutKeys(const struct FSBPlayerClassKeyConfigData& KeyConfigData);
		class FString GetDisplayTextByAction(ESBUIKeyConfigAction KeyConfigAction);
		class FString GetDisplayShortTextByAction(ESBUIKeyConfigAction KeyConfigAction);
		ESBKeyConfigGamepadKey GetActionPad(const struct FSBGamePadSettings& PadSetting, ESBKeyConfigAction Action);
		ESBKeyConfigMouseKey GetActionMouse(const struct FSBMouseSettings& MouseSetting, ESBKeyConfigAction Action);
		ESBKeyConfigGamepadKey GetActionKeyPad(const struct FSBPlayerClassKeyConfigData& KeyConfigData, ESBKeyConfigAction KeyConfigAction);
		void GetActionKeyMouse(const struct FSBPlayerClassKeyConfigData& KeyConfigData, ESBKeyConfigAction KeyConfigAction, ESBKeyConfigMouseKey* MouseKey, ESBKeyConfigKeyboardKey* KeyboardKey);
		ESBKeyConfigKeyboardKey GetActionKB(const struct FSBKeyboardSettings& KeyboardSetting, ESBKeyConfigAction Action);
		void GetActionBindNameByAction(TArray<class FName>* OutActionBindNameList, class UObject* WorldContextObject, ESBUIKeyConfigAction KeyConfigAction);
		struct FKey GamepadKeyToKey(ESBKeyConfigGamepadKey GamepadKey);
		void ClearBookMarks(class UObject* WorldContextObject, const struct FSBPlayerClassKeyConfigData& Data);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIAssetManager
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class USBUIAssetManager : public UObject
	{
	public:
		class UClass*                                              DamageUI;                                                // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              BalloonWindowWidget;                                     // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              DialogClass;                                             // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              MultipleSelectDialog;                                    // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SBChoiceDialog;                                          // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CommandMenu;                                             // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              LoadingScreenClass;                                      // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          WordDataDB;                                              // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          RichTextShortSyntaxDB;                                   // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              RmShopDialogClass;                                       // 0x0070(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              ScreenWithWindowsDialogClass;                            // 0x0078(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              TitleMenuCharaLayer[0x28];                               // 0x0080(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              TitleEffectActor[0x28];                                  // 0x00A8(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIManager
	 * Size -> 0x02A8 (FullSize[0x02D0] - InheritedSize[0x0028])
	 */
	class USBUIManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_4K68[0xF8];                                  // 0x0028(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EmotionCoolTime;                                         // 0x0120(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      StampCoolTime;                                           // 0x0124(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CloseAreaDistSquared;                                    // 0x0128(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PF52[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<ESBChatLogType, struct FMssageRestrictionParam>       MssageRestrictionParams;                                 // 0x0130(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<class FString, struct FSBUIAkEventSetting>            AkEventSettingMap;                                       // 0x0180(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBUIAkEventRequest>                         AkEventRequestList;                                      // 0x01D0(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_692K[0x60];                                  // 0x01E0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ServerReconnectionWaitTime;                              // 0x0240(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H7N5[0x4];                                   // 0x0244(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      DebugTags;                                               // 0x0248(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IX8E[0x78];                                  // 0x0258(0x0078) MISSED OFFSET (PADDING)

	public:
		void ShowMouseCursor(class UObject* InWorldContextObject);
		void SetTargetCommandName(const class FString& TargetName);
		void SetStepListViewIndex(int32_t Index);
		void SetSelectItemIndex(int32_t Index);
		void SetLastCommandMenuType(ESBCommandMenuType InType);
		void SetEnableRenderingFlag(class UObject* WorldContextObject, const class FName& SenderTag);
		void SetDisableRenderingFlag(class UObject* WorldContextObject, const class FName& SenderTag);
		void SetCurrMouseCursorType(ESBMouseCursorType InType);
		void SetCurrMouseCursorMapPinId(unsigned char InMapPinId);
		void SetCommandMenuTutorialHelpID(const class FName& InId);
		void SetChatSenderData(const struct FSBChatSenderData& InChatSenderData);
		void ResetEnableRenderingFlag(class UObject* WorldContextObject, const class FName& SenderTag);
		void ResetDisableRenderingFlag(class UObject* WorldContextObject, const class FName& SenderTag);
		void RemoveDirectChatSenderLog(class UObject* InWorldContextObject, const class FString& CharacterId);
		void RegisterSubWidget(class UUserWidget* MainWidget, class UUserWidget* SubWidget);
		bool IsValidChatUnreadNotify();
		bool IsHudVisible();
		void HideMouseCursor(class UObject* InWorldContextObject);
		bool HasDebugTag(const class FString& InTag);
		int32_t GetStepListViewIndex();
		float GetServerReconnectionWaitTime();
		int32_t GetSelectItemIndex();
		int32_t GetRandomLoadingImageIndex(int32_t InMaxPatternNum);
		int32_t GetRandomDungeonLoadingImageIndex(int32_t InMaxPatternNum);
		ESBCommandMenuType GetLastCommandMenuType();
		TArray<struct FSBDirectChatSenderLogData> GetDirectChatSenderLog();
		ESBMouseCursorType GetCurrMouseCursorType();
		unsigned char GetCurrMouseCursorMapPinId();
		class FName GetCommandMenuTutorialHelpID();
		struct FSBChatSenderData GetChatSenderData();
		class UUserWidget* GetCachedToolTip(int32_t ToolTipID);
		void DestructSubWidget(class UUserWidget* MainWidget);
		void ClearCommandMenuTutorialHelpID();
		void ClearCache(class UObject* InWorldContextObject);
		void CacheToolTip(int32_t ToolTipID, class UUserWidget* SubWidget);
		void AddDirectChatSenderLog(class UObject* InWorldContextObject, const struct FSBDirectChatSenderLogData& DirectChatSenderLogData);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIMapBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUIMapBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void SetMapOptionMode(class UObject* WorldContextObject, bool IsEditMode);
		void SetMapInitial(class UObject* WorldContextObject, const struct FSBPlayerMiniMapInfo& Info);
		void SetMapBG(class UObject* WorldContextObject, const class FName& BGConfigName);
		bool MapIconVisibleSettingCheck(class UObject* WorldContextObject, const struct FSBMapIconVisibleSettingTableRow& SettingData);
		bool IsQuestDisableShowIcon(class UObject* WorldContextObject, int32_t QuestIndex);
		bool IsCurrentLevelArea(class UObject* WorldContextObject, const class FName& GameContentId);
		bool IsActivatedDungeon(class UObject* WorldContextObject, ESBLocationInfoType Type, const class FName& DungeonId);
		class USBWholeMap* GetWholemapWidget(class UObject* WorldContextObject);
		bool GetShortPinLocation(class UObject* WorldContextObject, const struct FSBShortPinInfo& PinInfo, struct FVector* WorldLocation);
		void GetQuestStepListData(class UObject* WorldContextObject, TArray<int32_t>* IndexList);
		bool GetQuestLocation(class UObject* WorldContextObject, int32_t QuestIndex, struct FVector* WorldLocation);
		void GetPartyMember(class UObject* WorldContextObject, TArray<class USBPartyMemberState*>* OutPartyMembers, TArray<class ASBPlayerState*>* OutGroupMembers);
		class USBMiniMapWidget* GetMinimapWidget(class UObject* WorldContextObject);
		int32_t GetMiniMapQuestIconZOrder(EQuestCategory2 InCategory, EQuestIconType InQuestType);
		int32_t GetMiniMapNpcIconZOrder(ESBFacilityType InType);
		int32_t GetMiniMapIconZOrder(ESBMiniMapIconType IconType);
		int32_t GetMapNpcIconZOrder(ESBFacilityType InNpcType);
		int32_t GetMapIconZOrderOfPinForComment();
		int32_t GetMapIconZOrder(EMapSymbolIconType InIconType);
		TArray<class FName> GetMapBGConfigRowNames();
		bool FindMapBGConfigDB(const class FName& InRowName, struct FSBMapBGConfigTableRow* OutMapBGConfigTableRow);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBOverKeyInputBase
	 * Size -> 0x0010 (FullSize[0x0288] - InheritedSize[0x0278])
	 */
	class USBOverKeyInputBase : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_H4KH[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (PADDING)

	public:
		void PushPadConvertEnable(bool bEnable);
		void PopPadConvertEnable();
		bool IsPushedFlags();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUIVisibleSettings
	 * Size -> 0x0158 (FullSize[0x0180] - InheritedSize[0x0028])
	 */
	class USBUIVisibleSettings : public UObject
	{
	public:
		unsigned char                                              UnknownData_MCKA[0x148];                                 // 0x0028(0x0148) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             UIVisibleSettingChangeDelegate;                          // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetVisibleSetting(ESBUIType InUIType, bool bInVisibility, bool bInInstantly);
		void SetCollapseFlag(ESBUIType InUIType, ESBUIVisibleSettingOwner InOwner);
		void ResetCollapseFlag(ESBUIType InUIType, ESBUIVisibleSettingOwner InOwner);
		bool GetVisibleSetting(ESBUIType InUIType);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUMGSoundTracNode
	 * Size -> 0x0020 (FullSize[0x0140] - InheritedSize[0x0120])
	 */
	class USBUMGSoundTracNode : public UWidget
	{
	public:
		class FName                                                SeName;                                                  // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PlayRequest;                                             // 0x0128(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3MDS[0x17];                                  // 0x0129(0x0017) MISSED OFFSET (PADDING)

	public:
		void SetPlayRequest(bool InValue);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUncheater
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUncheater : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUncheaterCheatCommand
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUncheaterCheatCommand : public UObject
	{
	public:
		void UncheaterServerInit();
		void UncheaterServerExit();
		void UncheaterExit();
		void UncheaterEnter();
		void SetUncheaterServerPrintServerLogEnable(bool bInEnable);
		void SetUncheaterServerErrorPolicy(int32_t InPolicy);
		void OnUncheaterEnterCompleted(bool bSucceeded);
		void HackDetected(const class FString& InCode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUncheaterComponent
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class USBUncheaterComponent : public USBPlayerPropertyComponent
	{
	public:
		unsigned char                                              UnknownData_71IM[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (PADDING)

	public:
		void Server_ReceiveVerifyCookie(TArray<int8_t> InCookie);
		void Server_OnCheckUser();
		void Client_RequestVerifyCookie(TArray<unsigned char> InCookie, uint64_t InRequestTime);
		void Client_PrintServerMessage(const class FString& InMessage);
		void Client_OnGetCookieComplete(bool bInResult, TArray<int8_t> InCookie, class USBUncheaterComponent* InRequester, const struct FDateTime& InRequestTime);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUncheaterServer
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUncheaterServer : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUpdraft
	 * Size -> 0x0000 (FullSize[0x0228] - InheritedSize[0x0228])
	 */
	class ASBUpdraft : public AActor
	{
	public:
		void RemoveOverlappingToPlayer(class AActor* OverlapActor);
		void AddOverlappingToPlayer(class AActor* OverlapActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUserImageBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUserImageBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class FString GetFullBodyImageURL(const class FString& InCharacterId);
		class FString GetFaceImageURL(const class FString& InCharacterId);
		class FString GetBustUpImageURL(const class FString& InCharacterId);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUserImageComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBUserImageComponent : public USBPlayerPropertyComponent
	{
	public:
		class FScriptMulticastDelegate                             OnUploadUserImageCompleteDelegate;                       // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		bool UploadFullBodyImage_Request(const class FString& InCharacterId, class UTextureRenderTarget2D* InRenderTarget2D, bool IsPublicAPI);
		bool UploadFaceImage_Request(const class FString& InCharacterId, class UTextureRenderTarget2D* InRenderTarget2D, bool IsPublicAPI);
		bool UploadBustUpImage_Request(const class FString& InCharacterId, class UTextureRenderTarget2D* InRenderTarget2D, bool IsPublicAPI);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityAction
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBUtilityAction : public UObject
	{
	public:
		unsigned char                                              UnknownData_IZTA[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityAction_AITask
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class USBUtilityAction_AITask : public USBUtilityAction
	{
	public:
		unsigned char                                              UnknownData_O4W0[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              TaskClass;                                               // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AAIController*                                       AIOwner;                                                 // 0x0048(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityAction_BehaviorTree
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USBUtilityAction_BehaviorTree : public USBUtilityAction
	{
	public:
		struct FAIFwParameterizedBTRequest                         BehaviorTree;                                            // 0x0038(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bLooping;                                                // 0x0050(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KB7J[0xF];                                   // 0x0051(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityAction_Group
	 * Size -> 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
	 */
	class USBUtilityAction_Group : public USBUtilityAction
	{
	public:
		struct FSBUtilitySystem                                    UtilitySystem;                                           // 0x0038(0x0040) Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityAction_HTN
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class USBUtilityAction_HTN : public USBUtilityAction
	{
	public:
		class FString                                              TaskName;                                                // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLooping;                                                // 0x0048(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ALJH[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ReplanningInterval;                                      // 0x004C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwHTNPlanningComponent*                           HTNComponent;                                            // 0x0050(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityBrainComponent
	 * Size -> 0x00B8 (FullSize[0x01C8] - InheritedSize[0x0110])
	 */
	class USBUtilityBrainComponent : public UBrainComponent
	{
	public:
		struct FSBUtilitySystem                                    UtilitySystem;                                           // 0x0110(0x0040) Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_US4E[0x78];                                  // 0x0150(0x0078) MISSED OFFSET (PADDING)

	public:
		void ResumeDelegate__DelegateSignature();
		void AddScriptedOption(class USBUtilityOption* Option);
		void AddOption(class USBUtilityOption* Option);
		void AddChildOption(const class FName& ParentOptionName, class USBUtilityOption* Option);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityDataProvider
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBUtilityDataProvider : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityDataProvider_Attention
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class USBUtilityDataProvider_Attention : public USBUtilityDataProvider
	{
	public:
		float                                                      AttentionRange;                                          // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttentionAngle;                                          // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseTrace;                                               // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRestrictTerritory;                                      // 0x0031(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FVDM[0x2];                                   // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AttackTime;                                              // 0x0034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ReleaseTime;                                             // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AttentionTime;                                           // 0x003C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BlackboardKey;                                           // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBUtilityBrainComponent*                            OwnerComponent;                                          // 0x0050(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0058(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0D6P[0x10];                                  // 0x0060(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityDataProvider_Blackboard
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USBUtilityDataProvider_Blackboard : public USBUtilityDataProvider
	{
	public:
		class FString                                              Key;                                                     // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0038(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X1ZZ[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityDataProvider_BlueprintBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBUtilityDataProvider_BlueprintBase : public USBUtilityDataProvider
	{
	public:
		bool                                                       bNeedsUpdate;                                            // 0x0028(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DOSY[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void ReceiveInitialize(class USBUtilityBrainComponent* OwnerComponent);
		float ReceiveFetchValue();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityDataProvider_Constant
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBUtilityDataProvider_Constant : public USBUtilityDataProvider
	{
	public:
		float                                                      Value;                                                   // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GSN0[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityDataProvider_HasRoleMember
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBUtilityDataProvider_HasRoleMember : public USBUtilityDataProvider
	{
	public:
		class UClass*                                              RoleClass;                                               // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAIRoleDistributionComponent*                      RoleDistributionComponent;                               // 0x0030(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityDataProvider_IsSiege
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBUtilityDataProvider_IsSiege : public USBUtilityDataProvider
	{
	public:
		class ASBCombatCoordinator*                                CombatCoordinator;                                       // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityOption
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class USBUtilityOption : public UDataAsset
	{
	public:
		TArray<struct FSBUtilityCondition>                         Conditions;                                              // 0x0030(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBUtilityService*>                           Services;                                                // 0x0040(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class USBUtilityAction*                                    Action;                                                  // 0x0050(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBUtilityScoreOperator                                    Operation;                                               // 0x0058(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAllowAbortByHighScore;                                  // 0x0059(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9RIN[0x1E];                                  // 0x005A(0x001E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ExecutionTags;                                           // 0x0078(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bAllowOtherOption;                                       // 0x0088(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H19A[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        RestrictionTags;                                         // 0x0090(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class FName                                                OptionName;                                              // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBUtilityOption*                                    SourceOption;                                            // 0x00A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityService
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class USBUtilityService : public UObject
	{
	public:
		unsigned char                                              UnknownData_6H1A[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityService_BlueprintBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class USBUtilityService_BlueprintBase : public USBUtilityService
	{
	public:
		class USBUtilityBrainComponent*                            OwnerComponent;                                          // 0x0030(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ReceiveOnTick(float DeltaTime);
		void ReceiveOnDeactivate();
		void ReceiveOnActivate();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityService_PreventPlanning
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USBUtilityService_PreventPlanning : public USBUtilityService
	{
	public:
		unsigned char                                              UnknownData_H41D[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityService_RunPerceptionTree
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class USBUtilityService_RunPerceptionTree : public USBUtilityService
	{
	public:
		struct FAIFwParameterizedBTRequest                         PerceptionTree;                                          // 0x0030(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FString                                              BlackboardKey;                                           // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinInterval;                                             // 0x0058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxInterval;                                             // 0x005C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAIFwBlackboardComponent*                            BlackboardComponent;                                     // 0x0060(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ACGR[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUtilityService_TacticalSkill
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class USBUtilityService_TacticalSkill : public USBUtilityService
	{
	public:
		class USBAITacticalComponent*                              TacticalComponent;                                       // 0x0030(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      SkillClasses;                                            // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBUVScrollFacialComponent
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class USBUVScrollFacialComponent : public UActorComponent
	{
	public:
		int32_t                                                    ElementIndex;                                            // 0x00B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           UV;                                                      // 0x00BC(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    FaceId;                                                  // 0x00C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ChangeFace(int32_t FaceId, int32_t ElementIndex, const struct FVector2D& UV);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBVersionDataBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBVersionDataBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool NotEqual_VersionData(const struct FSBVersionData& Lhs, const struct FSBVersionData& rhs);
		struct FSBVersionData MakeLiteralVersionData_Integer(int32_t Major, int32_t Minor, int32_t Release);
		struct FSBVersionData MakeLiteralSBVersionData_String(const class FString& InVersionStr);
		bool LessEqual_VersionData(const struct FSBVersionData& Lhs, const struct FSBVersionData& rhs);
		bool Less_VersionData(const struct FSBVersionData& Lhs, const struct FSBVersionData& rhs);
		bool GraterEqual_VersionData(const struct FSBVersionData& Lhs, const struct FSBVersionData& rhs);
		bool Grater_VersionData(const struct FSBVersionData& Lhs, const struct FSBVersionData& rhs);
		bool EqualEqual_VersionData(const struct FSBVersionData& Lhs, const struct FSBVersionData& rhs);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBVersionFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBVersionFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool ValidVariationMission();
		bool ValidTypeAFilterModefi();
		bool ValidTutorialTerm();
		bool ValidTreasureInfo();
		bool ValidTokenOverflowQuest();
		bool ValidTokenOverflow();
		bool ValidTabControl();
		bool ValidT_Apart();
		bool ValidStorageScrollKeep();
		bool ValidStepUpGasha();
		bool ValidStampEmoteTermUpdate();
		bool ValidStampEmoteOrganize();
		bool ValidStackB();
		bool ValidSksBattle();
		bool ValidSimplycityPartyMatchTypeA();
		bool ValidSimplycityPartyImprovement();
		bool ValidSignal();
		bool ValidShortcutRingPortal();
		bool ValidShopNotAvailable();
		bool ValidReversePalletmprovement();
		bool ValidRegularSkillLV5();
		bool ValidPlayerTag();
		bool ValidPineVillage();
		bool ValidPartyRanking();
		bool ValidPartyKickVote();
		bool ValidPartyInviteImproveFriend();
		bool ValidPaidOnly();
		bool ValidOrnament();
		bool ValidMzBattle();
		bool ValidMountStackB();
		bool ValidModifySeasonPass();
		bool ValidMissonRewardEventToken();
		bool ValidLiquidMemoryImprovement();
		bool ValidLimitedRecepi();
		bool ValidLevelIncrease();
		bool ValidKiwami();
		bool ValidKeyConfigWarnMsg();
		bool ValidItemWarning();
		bool ValidIntervalAlter();
		bool ValidImagineTypeSelector();
		bool ValidHideOthersPlayerAtFishing();
		bool ValidHard2();
		bool ValidGashaResultRoseOrb();
		bool ValidGashaBonusDetail();
		bool ValidForceNavigation();
		bool ValidForceMatching();
		bool ValidFangExpedition();
		bool ValidFaceIconEdit();
		bool ValidEquipmentSeries();
		bool ValidDxBattle();
		bool ValidDsState();
		bool ValidContentsRandom();
		bool ValidContentAction();
		bool ValidClassP022();
		bool ValidClassP021();
		bool ValidClassP020();
		bool ValidClassAbility7();
		bool ValidCATutorial();
		bool ValidCameraShakeOption();
		bool ValidBuffToolTip();
		bool ValidBattleScoreWeaponEffectOption();
		bool ValidBattleScore();
		bool ValidAutoStackBStep();
		bool ValidAmazonPayPayment();
		bool ValidAmazonPay1Click();
		bool ValidAdventureCardModifi();
		bool ValidAdvancedR();
		bool ValidAddLibraryPic();
		int32_t GetMaxClassLevel();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWarehouseAbilityComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBWarehouseAbilityComponent : public USBPlayerControllerComponentBase
	{
	public:
		TArray<struct FSBWarehouseAbilityCharacterInfo>            CharacterInfoList;                                       // 0x00B8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		TArray<struct FSBWarehouseAbilityCharacterInfo>            UpdatedCharacterInfoList;                                // 0x00C8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWarehouseAbilityUpdateDelegate;                        // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void Server_OnUpdateCharacerInfo(bool bIsAtCharacterJoin);
		void OnWarehouseAbilityUpdateDelegate__DelegateSignature(TArray<struct FSBWarehouseAbilityNotifyUIInfo> UIInfo);
		void GetShouldBeDisplayedLevelList(ESBWarehouseAbilityCategory InCategory, TArray<int32_t>* OutLevelList);
		void GetLevelButtonUIInfo(int32_t InLevelMin, int32_t InLevelMax, ESBWarehouseAbilityCategory InCategory, struct FSBWarehouseAbilityLevelButtonUiInfo* OutInfo);
		class FText GetAbilityNameTextByRecipeId(int32_t InRecipeId);
		void GetAbilityListUIInfo(int32_t Level, ESBWarehouseAbilityCategory Category, TArray<struct FSBWarehouseAbilityListUIInfo>* OutArray);
		class FText GetAbilityEffectTextByRecipeId(int32_t InRecipeId);
		void GetAbilityConditionUIInfo(class USBTextTableAsset* InTextTableAsset, int32_t InRecipeId, TArray<struct FSBWarehouseAbilityConditionUIInfo>* OutArray);
		struct FSBWarehouseAbilityCharacterInfo FindCharacterInfoByRecipeId(int32_t InRecipeId, bool* bExist);
		void Client_SyncCharacterInfo(TArray<struct FSBWarehouseAbilityCharacterInfo> Infos);
		void Client_OnUpdateCharacterInfo(TArray<struct FSBWarehouseAbilityCharacterInfo> InfoList, bool bIsAtCharacterJoin);
		bool CheckMasteredByRecipeId(int32_t RecipeId);
		bool CheckAbilityNewByCategory(ESBWarehouseAbilityCategory Category);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterAreaVolume
	 * Size -> 0x0018 (FullSize[0x0278] - InheritedSize[0x0260])
	 */
	class ASBWaterAreaVolume : public AVolume
	{
	public:
		class USBChildWaterNavModifierVolumeComponent*             ChildVolume_Default;                                     // 0x0260(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBChildWaterNavModifierVolumeComponent*             ChildVolume_Medium;                                      // 0x0268(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBChildWaterNavModifierVolumeComponent*             ChildVolume_Large;                                       // 0x0270(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterDepthSoundComponent
	 * Size -> 0x0018 (FullSize[0x0220] - InheritedSize[0x0208])
	 */
	class USBWaterDepthSoundComponent : public USceneComponent
	{
	public:
		TArray<struct FSBWaterDepthSoundData>                      WaterDepthSoundDataArray;                                // 0x0208(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6GB6[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterDepthSoundVolume
	 * Size -> 0x0038 (FullSize[0x0298] - InheritedSize[0x0260])
	 */
	class ASBWaterDepthSoundVolume : public AVolume
	{
	public:
		bool                                                       DebugDisplayAkComponent;                                 // 0x0260(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZP0L[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       PlayAudioEvent;                                          // 0x0268(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       StopAudioEvent;                                          // 0x0270(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DistanceInterval;                                        // 0x0278(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    MaxNumberOfSearches;                                     // 0x027C(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBWaterDepthSoundComponent*                         WaterDepthSoundComponent;                                // 0x0280(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7M3W[0x10];                                  // 0x0288(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterFlowActor
	 * Size -> 0x0008 (FullSize[0x0230] - InheritedSize[0x0228])
	 */
	class ASBWaterFlowActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_HJLA[0x8];                                   // 0x0228(0x0008) MISSED OFFSET (PADDING)

	public:
		bool GetWaterFlowParam(const struct FVector& Location, struct FVector* Direction, float* power);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterFlowComponent
	 * Size -> 0x0008 (FullSize[0x00C0] - InheritedSize[0x00B8])
	 */
	class USBWaterFlowComponent : public UActorComponent
	{
	public:
		float                                                      Priority;                                                // 0x00B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R91I[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		float GetWaterFlowPriority();
		bool GetWaterFlowParams(const struct FVector& Location, struct FVector* Direction, float* power);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterFlowInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBWaterFlowInterface : public UInterface
	{
	public:
		float GetWaterFlowPriority();
		bool GetWaterFlowParams(const struct FVector& Location, struct FVector* Direction, float* power);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterFlowListForActor
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USBWaterFlowListForActor : public UObject
	{
	public:
		class AActor*                                              Target;                                                  // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USBWaterFlowComponent*>                       WaterFlowComponents;                                     // 0x0030(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterFlowTick
	 * Size -> 0x0050 (FullSize[0x0278] - InheritedSize[0x0228])
	 */
	class ASBWaterFlowTick : public AActor
	{
	public:
		TMap<class AActor*, class USBWaterFlowListForActor*>       WaterFlowDataList;                                       // 0x0228(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnTargetDestroyed(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterFlowManager
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USBWaterFlowManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_PWDZ[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBWaterFlowTick*                                    ManagerActor;                                            // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		bool RemoveWaterFlowList(class AActor* Actor, class USBWaterFlowComponent* WaterFlow);
		bool AddWaterFlowList(class AActor* Actor, class USBWaterFlowComponent* WaterFlow);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterMeshActor
	 * Size -> 0x0048 (FullSize[0x0280] - InheritedSize[0x0238])
	 */
	class ASBWaterMeshActor : public AStaticMeshActor
	{
	public:
		unsigned char                                              UnknownData_ABRF[0x8];                                   // 0x0238(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Priority;                                                // 0x0240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FluidFriction;                                           // 0x0244(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShallowWater;                                           // 0x0248(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTraceComplex;                                           // 0x0249(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KYPD[0x6];                                   // 0x024A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicalMaterial*                                   PhysMaterialDeepOverride;                                // 0x0250(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                DebugDrawMeshComponent;                                  // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USplineMeshComponent*                                TrackSplineMeshComponent;                                // 0x0260(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsUseWaterSetting;                                       // 0x0268(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerOverlap;                                          // 0x0269(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MJ0U[0x6];                                   // 0x026A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASBPhysicsWaterVolume*                               WaterVolume;                                             // 0x0270(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSkipConstructAfterLoad;                                 // 0x0278(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DCCM[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateWaterVolume();
		void SetWaterVolumeParam();
		class ASBPhysicsWaterVolume* GetWaterVolume();
		void CheckWorld();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWaterNavModifierVolume
	 * Size -> 0x0008 (FullSize[0x0280] - InheritedSize[0x0278])
	 */
	class ASBWaterNavModifierVolume : public ANavModifierVolume
	{
	public:
		unsigned char                                              UnknownData_CLZL[0x8];                                   // 0x0278(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeapon
	 * Size -> 0x0218 (FullSize[0x0440] - InheritedSize[0x0228])
	 */
	class ASBWeapon : public AActor
	{
	public:
		unsigned char                                              UnknownData_2PTL[0x10];                                  // 0x0228(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UASCollisionGroupComponent*                          Collision;                                               // 0x0238(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCharaPartsComponent*                              Mesh;                                                    // 0x0240(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O468[0xE];                                   // 0x0248(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBWeaponType                                              WeaponType;                                              // 0x0256(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBWeaponShapeType                                         WeaponShapeType;                                         // 0x0257(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_26Q2[0x10];                                  // 0x0258(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCharaPartsColorWeaponList*                          ColorList;                                               // 0x0268(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UCharaPartsMaterialSet*>                      CharaPartsMaterialSetList;                               // 0x0270(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_62XP[0x48];                                  // 0x0280(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBEnvironmentWeaponEffect>                  EnvironmentEffectList;                                   // 0x02C8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FSBUnsheatheWeaponEffect>                    UnsheatheEffectList;                                     // 0x02D8(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FSBBattleScoreWeaponEffectParam>             BattleScoreWeaponEffectParams;                           // 0x02E8(0x0010) Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OQIG[0x8];                                   // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSBWeaponAnimationSetting>                   AnimationList;                                           // 0x0300(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PPBE[0x9C];                                  // 0x0310(0x009C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FadeSpeed;                                               // 0x03AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPropagateVisibilityToAdditionalMesh;                    // 0x03B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LDTE[0x17];                                  // 0x03B1(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USBWeaponBowComponent*                               m_pBowComponent;                                         // 0x03C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USBWeaponBallHammerComponent*                        m_pBallHammerComponent;                                  // 0x03D0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class USBCharaPartsComponent*>                      AdditionalMeshComponents;                                // 0x03D8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9GCN[0x58];                                  // 0x03E8(0x0058) MISSED OFFSET (PADDING)

	public:
		void SetMaterialParamToParticle(class UParticleSystemComponent* Particle);
		void SetMaterialIndex(int32_t Index);
		void SetColorData(const struct FSBCharaCreateColorHSV& ColorHSV);
		void ResetAnimation(class USBCharaPartsComponent* TargetMesh);
		void ReceivePlayWeaponAnimation(int32_t Anim);
		class USBWeaponBaseComponent* GetWeaponTypeComponent(ESBWeaponComponentType Type);
		ESBWeaponType GetWeaponType();
		ESBWeaponShapeType GetWeaponShapeType();
		class FName GetWeaponAssetName();
		struct FVector GetSocketLocation(const class FName& SocketName);
		class USBSkeletalMeshComponent* GetSkeletalMeshComponent();
		bool GetMaterialParam(struct FSBWeaponMaterialParam* OutWeaponMaterialParam);
		struct FCharaPartsColorDataWeapon GetDefaultColor();
		class USBCharaPartsComponent* GetCharaPartsComponent();
		void CopyAnimation(class USBCharaPartsComponent* TargetMesh);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBWeaponBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void WeaponLoadWarningLog(const class FString& Name, const class FString& func, const class FString& Msg);
		void WeaponLoadLog(const class FString& Name, const class FString& func, const class FString& Msg);
		void SetWeaponCharaPartsComponentParam(class USBCharaPartsComponent* CharaPartsComponent, class ASBWeapon* Weapon);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponBaseComponent
	 * Size -> 0x0000 (FullSize[0x00B8] - InheritedSize[0x00B8])
	 */
	class USBWeaponBaseComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponBallHammerComponent
	 * Size -> 0x0100 (FullSize[0x01B8] - InheritedSize[0x00B8])
	 */
	class USBWeaponBallHammerComponent : public USBWeaponBaseComponent
	{
	public:
		class UDataTable*                                          SettingDataTable;                                        // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              DefaultBallSkeletalMesh[0x28];                           // 0x00C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FName                                                DefaultBallRootSocketName;                               // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            DefaultBallMaterialIndexList;                            // 0x00F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class USBCharaPartsComponent*                              ShootingBallMeshComponent;                               // 0x0100(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBCharaPartsComponent*                              RotatingEffectBallMeshComponent;                         // 0x0108(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4E06[0x20];                                  // 0x0110(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              ShootingBallMeshAttachParentActor;                       // 0x0130(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HW70[0x68];                                  // 0x0138(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject*                                             m_HoldingBallMeshAssetRef;                               // 0x01A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected, CPF_SkipSerialization
		unsigned char                                              UnknownData_SVAG[0x10];                                  // 0x01A8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponBendComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBWeaponBendComponent : public USBWeaponBaseComponent
	{
	public:
		class UCurveFloat*                                         BendCurve;                                               // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_97IT[0x10];                                  // 0x00C0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponBowCommonInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBWeaponBowCommonInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponBowComponentBase
	 * Size -> 0x01D8 (FullSize[0x0290] - InheritedSize[0x00B8])
	 */
	class USBWeaponBowComponentBase : public USBWeaponBaseComponent
	{
	public:
		TArray<struct FSBEffectSetting>                            m_BowStringEffectUpperList;                              // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FSBEffectSetting>                            m_BowStringEffectLowerList;                              // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FSBPlayingEffect                                    m_PlayingBowStringEffectUpper;                           // 0x00D8(0x00C8) Transient, Protected, NativeAccessSpecifierProtected
		struct FSBPlayingEffect                                    m_PlayingBowStringEffectLower;                           // 0x01A0(0x00C8) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A6NE[0x8];                                   // 0x0268(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                m_HoldingArrowBaseSocket;                                // 0x0270(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                m_HoldingArrowTargetSocket;                              // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FHoldingArrowEffectSetting>                  m_HoldingArrowSettingList;                               // 0x0280(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponBowComponent
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBWeaponBowComponent : public USBWeaponBowComponentBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponBowBImagineComponent
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class USBWeaponBowBImagineComponent : public USBWeaponBowComponentBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenu
	 * Size -> 0x02C8 (FullSize[0x05B0] - InheritedSize[0x02E8])
	 */
	class USBWeaponCustomMenu : public USBCustomMenuBase
	{
	public:
		class UUserWidget*                                         Selector;                                                // 0x02E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBWeaponCustomMenuPartStatusWindow*                 StatusWindow;                                            // 0x02F0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBWeaponCustomMenuPartSlotWindow*                   SlotWindow;                                              // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         Infomation;                                              // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_74MP[0x2A8];                                 // 0x0308(0x02A8) MISSED OFFSET (PADDING)

	public:
		void SetVisibleTokenBox(bool IsVisible);
		void SetupStatusWindow(const struct FOwnItemInfo& InSelectWeapon);
		void SetAfterWeapon(const struct FOwnItemInfo& InWeapon);
		void SelectWeapon(const struct FOwnItemInfo& InSelectWeapon);
		void SelectPerk(int32_t SlotNo);
		void RequestGetRewardBoost();
		void OnTerm();
		void OnSetupSlotWindow(const struct FOwnItemInfo& InSelectWeapon);
		void OnSetupSelector();
		void OnSelectWeapon();
		void OnSelectPerk();
		void OnReset();
		void OnInit();
		class FText GetTokenConfirmDialogText();
		struct FOwnItemInfo GetSelectedWeapon();
		int32_t GetSelectedPerkSlotNo();
		struct FSBCharacterWeaponPerkData GetSelectedPerk();
		struct FOwnItemInfo GetAfterWeapon();
		void CompleteGetRewardBoost(int32_t InRetCode);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuAbilityBuildup
	 * Size -> 0x0018 (FullSize[0x05C8] - InheritedSize[0x05B0])
	 */
	class USBWeaponCustomMenuAbilityBuildup : public USBWeaponCustomMenu
	{
	public:
		class USBWeaponCustomMenuPartAbilityWindow*                AbilityWindow;                                           // 0x05B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UUserWidget*                                         BtnProbability;                                          // 0x05B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VJV4[0x8];                                   // 0x05C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SelectToken(EAbilityBuildupID InSelectID, int32_t InSelectToken);
		void OnSetVisibleTokenBox(bool IsVisible);
		void OnSetupTokenBox();
		void OnSelectToken();
		void OnContinuanceConfirm();
		int32_t GetSelectedTokenId();
		EAbilityBuildupID GetSelectedId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityWindowPartTop
	 * Size -> 0x0028 (FullSize[0x02D8] - InheritedSize[0x02B0])
	 */
	class USBAbilityWindowPartTop : public USBUserWidget
	{
	public:
		class UWidgetSwitcher*                                     WSRarity;                                                // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TextRarity;                                              // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TextRarityColon;                                         // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSAbility;                                               // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TextAbility;                                             // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnSetRarityIcon(ESBWeaponPerkRarity InRarity);
		class FText GetRarityText(ESBWeaponPerkRarity InRarity);
		class FText GetAbilityNoneText();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBAbilityWindowPartText
	 * Size -> 0x0060 (FullSize[0x0310] - InheritedSize[0x02B0])
	 */
	class USBAbilityWindowPartText : public USBUserWidget
	{
	public:
		class UWidgetSwitcher*                                     WSIcon;                                                  // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSValue;                                                 // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSText;                                                  // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextValue;                                               // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextValueMin;                                            // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextValueMax;                                            // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTextBlock*                                          TextDesc;                                                // 0x02E0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    Number;                                                  // 0x02E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TextColorNormal;                                         // 0x02EC(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TextColorMax;                                            // 0x02FC(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SAPP[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPartAbilityBox
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class USBWeaponCustomMenuPartAbilityBox : public USBUserWidget
	{
	public:
		class USBAbilityWindowPartTop*                             Top;                                                     // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAbilityWindowPartText*                            Ability1;                                                // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBAbilityWindowPartText*                            Ability2;                                                // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPartAbilityWindow
	 * Size -> 0x0018 (FullSize[0x02C8] - InheritedSize[0x02B0])
	 */
	class USBWeaponCustomMenuPartAbilityWindow : public USBUserWidget
	{
	public:
		class USBWeaponCustomMenuPartAbilityBox*                   Before;                                                  // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBWeaponCustomMenuPartAbilityBox*                   After;                                                   // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAbilityBuildupID                                          ID;                                                      // 0x02C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5BDJ[0x7];                                   // 0x02C1(0x0007) MISSED OFFSET (PADDING)

	public:
		void Setup(EAbilityBuildupID InId, const struct FOwnItemInfo& InWeapon);
		void PlayAnimArrow();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPartSlotWindow
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBWeaponCustomMenuPartSlotWindow : public USBUserWidget
	{
	public:
		void Setup(const struct FOwnItemInfo& InWeapon);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPartSlotWindowS
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBWeaponCustomMenuPartSlotWindowS : public USBWeaponCustomMenuPartSlotWindow
	{
	public:
		void OnSetup(const struct FOwnItemInfo& InWeapon);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPartSlotWindowL
	 * Size -> 0x0000 (FullSize[0x02B0] - InheritedSize[0x02B0])
	 */
	class USBWeaponCustomMenuPartSlotWindowL : public USBWeaponCustomMenuPartSlotWindow
	{
	public:
		void SetupTuningResult(const struct FOwnItemInfo& InWeaponBefore, const struct FOwnItemInfo& InWeaponAfter, TArray<int32_t> InLockSlotNo);
		void SetupTuning(const struct FOwnItemInfo& InWeapon);
		void SetupSyntheResult(const struct FOwnItemInfo& InWeapon, int32_t InSlotNo);
		void SetupSynthe(const struct FOwnItemInfo& InWeapon, const struct FOwnItemInfo& InFusionItem);
		void SetupRemoveResult(const struct FOwnItemInfo& InWeapon, int32_t InSlotNo, bool IsRemove);
		void SetupRemove(const struct FOwnItemInfo& InWeapon);
		void SetupAddSlotResult(const struct FOwnItemInfo& InWeapon);
		void SetupAddSlot(const struct FOwnItemInfo& InWeapon);
		void OnSetupTuningResult(const struct FOwnItemInfo& InWeaponBefore, const struct FOwnItemInfo& InWeaponAfter, TArray<int32_t> InLockSlotNo);
		void OnSetupTuning(const struct FOwnItemInfo& InWeapon);
		void OnSetupSyntheResult(const struct FOwnItemInfo& InWeapon, int32_t InSlotNo);
		void OnSetupSynthe(const struct FOwnItemInfo& InWeapon, const struct FOwnItemInfo& InFusionItem);
		void OnSetupRemoveResult(const struct FOwnItemInfo& InWeapon, int32_t InSlotNo, bool IsRemove);
		void OnSetupRemove(const struct FOwnItemInfo& InWeapon);
		void OnSetupAddSlotResult(const struct FOwnItemInfo& InWeapon);
		void OnSetupAddSlot(const struct FOwnItemInfo& InWeapon);
		void OnSetup(const struct FOwnItemInfo& InWeapon);
		void OnReset();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPartStatusWindow
	 * Size -> 0x0268 (FullSize[0x0518] - InheritedSize[0x02B0])
	 */
	class USBWeaponCustomMenuPartStatusWindow : public USBCustomMenuPartStatusWindow
	{
	public:
		class UWidgetSwitcher*                                     WSBG;                                                    // 0x02B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtName;                                                 // 0x02B8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtLV;                                                   // 0x02C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtAP;                                                   // 0x02C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtCP;                                                   // 0x02D0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtStr;                                                  // 0x02D8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtVit;                                                  // 0x02E0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtDex;                                                  // 0x02E8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtInt;                                                  // 0x02F0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtMnd;                                                  // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtAttribute;                                            // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtMainAbilityName;                                      // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox*                                      HBMainAbilityValue1;                                     // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHorizontalBox*                                      HBMainAbilityValue2;                                     // 0x0318(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtMainAbilityValue1;                                    // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtMainAbilityValue2;                                    // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtSubAbilityName;                                       // 0x0330(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetSwitcher*                                     WSSubAbilityValue;                                       // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtSubAbilityValue;                                      // 0x0340(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtSubAbilityValueMin;                                   // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtSubAbilityValueMark;                                  // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtSubAbilityValueMax;                                   // 0x0358(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBRuntimeTextBlock*                                 TxtBattleScore;                                          // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TextColorValue;                                          // 0x0368(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TextColorValueMax;                                       // 0x0378(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TextShadowColorValue;                                    // 0x0388(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TextShadowColorValueMax;                                 // 0x0398(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TextColorActive;                                         // 0x03A8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        TextColorDisable;                                        // 0x03B8(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1XOZ[0x150];                                 // 0x03C8(0x0150) MISSED OFFSET (PADDING)

	public:
		void OnSetWeaponData();
		void OnSetMainAbilityRarity(ESBWeaponPerkRarity InRarity);
		void OnSetCaptureStudio(int32_t InWeaponID);
		void OnSetAttributeIcon(ESBAttribute InAttr);
		bool GetWeaponMasterData(struct FSBWeaponMasterData* OutWeaponMasterData);
		struct FOwnItemInfo GetWeapon();
		class FString GetTextNone();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPlugRemove
	 * Size -> 0x0008 (FullSize[0x05B8] - InheritedSize[0x05B0])
	 */
	class USBWeaponCustomMenuPlugRemove : public USBWeaponCustomMenu
	{
	public:
		unsigned char                                              UnknownData_FTST[0x8];                                   // 0x05B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SelectToken(int32_t InSelectToken);
		void OnSetVisibleTokenBox(bool IsVisible);
		void OnSetupTokenBox(int32_t InItemLV);
		void OnSelectToken();
		bool OnIsSelectToken();
		bool IsSelectToken();
		int32_t GetSelectedTokenId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPlugSet
	 * Size -> 0x0168 (FullSize[0x0718] - InheritedSize[0x05B0])
	 */
	class USBWeaponCustomMenuPlugSet : public USBWeaponCustomMenu
	{
	public:
		class FScriptMulticastDelegate                             OnCompleteDataLoad;                                      // 0x05B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UUserWidget*                                         BtnProbability;                                          // 0x05C0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ALCP[0x150];                                 // 0x05C8(0x0150) MISSED OFFSET (PADDING)

	public:
		void UpdateVisibleLiquidMemory();
		void SelectFusionItem(const struct FOwnItemInfo& InFusionItem);
		void Request_MasterDatas(class ASBPlayerController* InPlayerController);
		void PlayAnimBtn();
		void OnShowWallet(int32_t InPrice);
		void OnSetVisiblePrice(bool IsVisible);
		void OnSetVisibleLiquidMemory(bool IsVisible);
		void OnSetVisibleItemBox(bool IsVisible);
		void OnSetupSlotWindowFustion(const struct FOwnItemInfo& InSelectWeapon, const struct FOwnItemInfo& InSelectFusionItem);
		void OnSetupItemBox(int32_t InItemIndex);
		void OnSetPrice(int32_t InValue);
		void OnSelectFusionItem(int32_t InPrice);
		void OnHideWallet();
		int32_t OnGetPrice();
		void OnContinuanceConfirm();
		void OnCompleteDataLoad__DelegateSignature(bool Loaded);
		void OnClickedBack();
		bool IsAllMasterDataLoaded();
		bool IsActiveLiquidMemory();
		struct FOwnItemInfo GetSelectedFusionItem();
		int32_t GetPrice();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuPlugTuning
	 * Size -> 0x0008 (FullSize[0x05B8] - InheritedSize[0x05B0])
	 */
	class USBWeaponCustomMenuPlugTuning : public USBWeaponCustomMenu
	{
	public:
		class UUserWidget*                                         BtnProbability;                                          // 0x05B0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnSetVisibleTokenBox(bool IsVisible);
		void OnSetupTokenBox(int32_t InItemLV);
		void OnClickedLock();
		void ClickedLock(int32_t InLockNum);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponCustomMenuSlotAdd
	 * Size -> 0x0000 (FullSize[0x05B0] - InheritedSize[0x05B0])
	 */
	class USBWeaponCustomMenuSlotAdd : public USBWeaponCustomMenu
	{
	public:
		void OnSetVisibleTokenBox(bool IsVisible);
		void OnSetupTokenBox(int32_t InItemLV, const struct FOwnItemInfo& InSelectWeapon);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponFishingRodComponent
	 * Size -> 0x0188 (FullSize[0x0240] - InheritedSize[0x00B8])
	 */
	class USBWeaponFishingRodComponent : public USBWeaponBaseComponent
	{
	public:
		class FName                                                m_SocketName_Grip;                                       // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FName                                                m_SocketName_Top;                                        // 0x00C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        m_SocketName_Line;                                       // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FSBEffectSetting                                    m_FishingRodLineEffect;                                  // 0x00D8(0x0150) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HSFJ[0x18];                                  // 0x0228(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetFishingRodLineColor(const struct FLinearColor& Color);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponManager
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USBWeaponManager : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnLoadWeaponAssetDelegate;                               // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		TArray<class ASBWeapon*>                                   LoadedWeapons;                                           // 0x0038(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    LoadWeaponMax;                                           // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AddProficiencyValue_EnemyAttack;                         // 0x004C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    AddProficiencyValue_EnemyKill;                           // 0x0050(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FS5J[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		bool RequestLoadWeaponAsset(int32_t WeaponID, bool IsMain);
		void OnLoadWeaponAssetDelegate__DelegateSignature(int32_t WeaponID, bool IsMain, TArray<class ASBWeapon*> Weapons);
		ESBWeaponType GetWeaponTypeByWeaponID(int32_t WeaponID, bool IsMain);
		ESBWeaponType GetWeaponTypeByWeaponAssetName(const class FName& WeaponAssetName);
		int32_t GetWeaponPricePlayerSells(int32_t WeaponID);
		int32_t GetWeaponPricePlayerBuys(int32_t WeaponID);
		int32_t GetWeaponLevelStatusByWeaponIDWithLevelSync(class AController* Controller, int32_t WeaponID, ESBWeaponStatus WeaponStatus, bool IsLevelSync);
		int32_t GetWeaponLevelStatusByWeaponID(int32_t WeaponID, ESBWeaponStatus WeaponStatus);
		int32_t GetWeaponLevelStatusByUniqueID(class AController* Controller, const class FString& UniqueId, ESBWeaponStatus WeaponStatus, bool IsLevelSync, bool IsUseStackB, ESBStackBEnableType InStackBEnableType);
		void GetWeaponIDList(TArray<int32_t>* IDList);
		TArray<struct FSBWeaponAsset> GetWeaponAssets(const class FName& WeaponAssetName);
		int32_t GetDefaultWeaponID(ESBClassType ClassType);
		void DestroyAllLoadedWeaponAsset();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBMasterWeaponUtil
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBMasterWeaponUtil : public UObject
	{
	public:
		int32_t GetLevelStatus(int32_t InWeaponID, int32_t InLevel, ESBWeaponStatus InWeaponStatus);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponShineComponent
	 * Size -> 0x0018 (FullSize[0x00D0] - InheritedSize[0x00B8])
	 */
	class USBWeaponShineComponent : public USBWeaponBaseComponent
	{
	public:
		TArray<struct FSBEffectShaderParameter>                    m_EmissiveParamList;                                     // 0x00B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K8BC[0x8];                                   // 0x00C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ChangeColor(const struct FLinearColor& Color, const class FName& TagString, TArray<int32_t> MaterialIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponUIBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBWeaponUIBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void GetWeaponPerkUIInfoTableByUniqueID(TArray<struct FSBWeaponPerkUIInfo>* OutWeaponPerkUIInfoTable, class AController* Controller, const class FString& WeaponUniqueID);
		void GetWeaponPerkUIInfoTableByPerkID(TArray<struct FSBWeaponPerkUIInfo>* OutWeaponPerkUIInfoTable, TArray<struct FSBCharacterWeaponPerkData>* PerkList);
		bool GetWeaponPerkUIInfo(int32_t PerkId, struct FSBWeaponPerkUIInfo* OutWeaponPerkUIInfo);
		float GetWeaponAttackPower(class AController* Controller, const class FString& WeaponUniqueID);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWeaponVisibilityComponent
	 * Size -> 0x0030 (FullSize[0x00E8] - InheritedSize[0x00B8])
	 */
	class USBWeaponVisibilityComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_VJZ7[0x2A];                                  // 0x00B8(0x002A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESBWeaponVisibleType                                       ConfigWeaponVisibleType;                                 // 0x00E2(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TOUV[0x1];                                   // 0x00E3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bTreatLeftAsShield;                                      // 0x00E4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESBBattleScoreWeaponEffectVisibleType                      ConfigWeaponEffectVisibleType;                           // 0x00E5(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9VGI[0x2];                                   // 0x00E6(0x0002) MISSED OFFSET (PADDING)

	public:
		void SetConfigWeaponVisibleType_Server(ESBWeaponVisibleType VisibleType);
		void SetConfigWeaponVisibleType_Multicast(ESBWeaponVisibleType VisibleType);
		void SetConfigWeaponEffectVisibleType_Server(ESBBattleScoreWeaponEffectVisibleType VisibleType);
		void SetConfigWeaponEffectVisibleType_Multicast(ESBBattleScoreWeaponEffectVisibleType VisibleType);
		void OnRep_ConfigWeaponVisibleType();
		void OnRep_ConfigWeaponEffectVisibleType();
		void OnDelegated_ChangeConfigWeaponVisibleType(ESBWeaponVisibleType VisibleType);
		void OnDelegated_ChangeConfigWeaponEffectVisibleType(ESBBattleScoreWeaponEffectVisibleType VisibleType);
		bool IsOptionHidden();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWholeLowerIcons
	 * Size -> 0x0010 (FullSize[0x0308] - InheritedSize[0x02F8])
	 */
	class USBWholeLowerIcons : public USBMiniMapIconsBase
	{
	public:
		TArray<class USBMapIcon*>                                  WarpPointEx;                                             // 0x02F8(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateState();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWholeIcons
	 * Size -> 0x0118 (FullSize[0x0410] - InheritedSize[0x02F8])
	 */
	class USBWholeIcons : public USBMiniMapIconsBase
	{
	public:
		class USBMapPlayerIcon*                                    PlayerIcon;                                              // 0x02F8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  Buddy;                                                   // 0x0300(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  NamedEnemy;                                              // 0x0310(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  PartyMember;                                             // 0x0320(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  Facility;                                                // 0x0330(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  Quest;                                                   // 0x0340(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  QuestNpc;                                                // 0x0350(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  QuestArea;                                               // 0x0360(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  QuestAreaInterrupt;                                      // 0x0370(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  QuestChallenge;                                          // 0x0380(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  WarpPoint;                                               // 0x0390(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  WarpPointDungeon;                                        // 0x03A0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  ID;                                                      // 0x03B0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  Camp;                                                    // 0x03C0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  Fishing;                                                 // 0x03D0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  Pin;                                                     // 0x03E0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  ShortPin;                                                // 0x03F0(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class USBMapIcon*>                                  NFTArea;                                                 // 0x0400(0x0010) BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateState();
		void SetVisiblePinComment(bool IsVisible);
		class USBMapQuestIcon* IsTypeQuestIcon(EQuestIconType InQuestType, const struct FVector& InLocation);
		void DeleteEnemyIcon(class USBMapIcon* InIcon);
		class USBMapIcon* CreateEnemyIcon(class AActor* InActor);
		class USBMapIcon* AddNamedEnemyIcon(class ASBEnemyCharacter* InActor);
		class USBMapIcon* AddBuddyIcon(class ASBEnemyCharacter* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWholeMap
	 * Size -> 0x0050 (FullSize[0x03B8] - InheritedSize[0x0368])
	 */
	class USBWholeMap : public USBMiniMapWidgetBase
	{
	public:
		class UCanvasPanel*                                        Map;                                                     // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              BG_1;                                                    // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              BG_2;                                                    // 0x0378(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBTraverseCloudWidget*                              TraverseCloud;                                           // 0x0380(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USBMapPlayerIcon*                                    PlayerIcon;                                              // 0x0388(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DPRP[0x28];                                  // 0x0390(0x0028) MISSED OFFSET (PADDING)

	public:
		void UpdateTraverseCloud();
		bool SetEditZoom(float InZoom);
		bool SetEditWindowSizeScaleIndex(int32_t Index);
		bool SetEditWindowSize(const struct FVector2D& InSize);
		bool SetEditPinVisible(bool InChecked);
		bool SetEditOpacity(float InOpacity);
		bool SetEditIconSizeScale(float InScale);
		bool ResetEditParam();
		void PlayAnimOut();
		void PlayAnimIn();
		void Opened();
		void Open(bool isForce);
		void OnOpened();
		void OnOpen();
		void OnDeleteWholeMapEditWindow();
		void OnCreateWholeMapEditWindow();
		void OnClosed();
		void OnClose();
		bool IsActiveTraverseCloud();
		class USBTraverseCloudWidget* GetTraverseCloud();
		class UCanvasPanel* GetMap();
		float GetEditZoom();
		float GetEditWindowSizeScaleTable(int32_t Index);
		int32_t GetEditWindowSizeScaleIndex();
		struct FVector2D GetEditWindowSize();
		bool GetEditPinVisible();
		float GetEditOpacity();
		float GetEditIconSizeScale();
		void DeleteWholeMapEditWindow();
		void CreateWholeMapEditWindow();
		void Closed();
		void Close();
		struct FVector2D CalcWorldToMapPosition(const struct FVector& InWorld);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWidgetComponent
	 * Size -> 0x0000 (FullSize[0x05C0] - InheritedSize[0x05C0])
	 */
	class USBWidgetComponent : public UWidgetComponent
	{
	public:
		struct FLinearColor GetTintColorAndOpacity();
		struct FLinearColor GetBackgroundColor();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWidgetComponent2D
	 * Size -> 0x01F8 (FullSize[0x0400] - InheritedSize[0x0208])
	 */
	class USBWidgetComponent2D : public USceneComponent
	{
	public:
		class UClass*                                              WidgetClass;                                             // 0x0208(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  Material;                                                // 0x0210(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EUIZOrder                                                  ZOrderType;                                              // 0x0218(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QHYW[0x3];                                   // 0x0219(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           Anchor;                                                  // 0x021C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDistanceScaleEnable;                                    // 0x0224(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O08P[0x3];                                   // 0x0225(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DistanceScaleMaxDistance;                                // 0x0228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceScaleValueMin;                                   // 0x022C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClippingEnable;                                         // 0x0230(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QSU9[0x3];                                   // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FarClip;                                                 // 0x0234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUserWidget*                                         Widget;                                                  // 0x0238(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5TIU[0x18];                                  // 0x0240(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            MaterialInstance;                                        // 0x0258(0x0008) ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V2VY[0x88];                                  // 0x0260(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              RenderTarget;                                            // 0x02E8(0x0008) ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UUKN[0x110];                                 // 0x02F0(0x0110) MISSED OFFSET (PADDING)

	public:
		class UUserWidget* GetUserWidgetObject();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWidgetComponent2DContentsInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBWidgetComponent2DContentsInterface : public UInterface
	{
	public:
		void SetScreenPositionOffset(const struct FLinearColor& InScreenPositionOffset);
		void SetDepth(float InDepth);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWorldSettings
	 * Size -> 0x00C0 (FullSize[0x05A0] - InheritedSize[0x04E0])
	 */
	class ASBWorldSettings : public AWorldSettings
	{
	public:
		class FName                                                GameContentId;                                           // 0x04E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SublevelId;                                              // 0x04E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GameTime_Hour;                                           // 0x04F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    GameTime_Minute;                                         // 0x04F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_55L6[0x18];                                  // 0x04F8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSBMapLevelInfo                                     MapLevelInfo;                                            // 0x0510(0x0080) Net, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FKZI[0x1];                                   // 0x0590(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bBlockEdit;                                              // 0x0591(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7MHZ[0xE];                                   // 0x0592(0x000E) MISSED OFFSET (PADDING)

	public:
		void OverrideSublevelId(const class FName& ID);
		void OnRep_MapLevelInfo();
		void OnMapLevelInfoInitialized__DelegateSignature();
		struct FSBMapLevelInfo GetMapLevelInfo();
		class FName GetCurrentSublevelId();
		class FName GetCurrentGameContentId();
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SBWwise
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USBWwise : public UBlueprintFunctionLibrary
	{
	public:
		void UpdateAkComponentOutputBusVolume(class UObject* WorldContextObject);
		void StopAkByPlayingId(int32_t PlayingID, int32_t FadeMilliSeconds);
		class UAkComponent* SpawnAkComponentAtLocationAndRotation(class UObject* WorldContextObject, const struct FAkEventVariables& AkEventVariables, const struct FVector& Location, const struct FRotator& Orientation);
		class UAkComponent* SpawnAkComponentAtLocation(class UObject* WorldContextObject, const struct FAkEventVariables& AkEventVariables, const struct FVector& Location);
		int32_t PostAkEventBySceneComponentCallBack(class USceneComponent* SceneComponent, const struct FAkEventVariables& AkEventVariables, int32_t CallbackMask, const class FScriptDelegate& PostEventCallback);
		int32_t PostAkEventBySceneComponent_Simple(class USceneComponent* SceneComponent, class UAkAudioEvent* Event);
		int32_t PostAkEventBySceneComponent(class USceneComponent* SceneComponent, const struct FAkEventVariables& AkEventVariables);
		int32_t PostAkEventByAkComponentCallBack(class UAkComponent* AkComponent, int32_t CallbackMask, const class FScriptDelegate& PostEventCallback);
		int32_t PostAkEventByAkComponent(class UAkComponent* AkComponent);
		int32_t PostAkEventByActor_Simple(class AActor* AActor, class UAkAudioEvent* Event);
		int32_t PostAkEventByActor(class AActor* AActor, const struct FAkEventVariables& AkEventVariables);
		int32_t PostAkEventAtLocationAndRotation(class USceneComponent* SceneComponent, const struct FAkEventVariables& AkEventVariables, const struct FVector& Location, const struct FRotator& Orientation);
		int32_t PostAkEventAtLocation(class USceneComponent* SceneComponent, const struct FAkEventVariables& AkEventVariables, const struct FVector& Location);
		void PostAkEventAsyncBySceneComponent(class USceneComponent* SceneComponent, const struct FAkEventVariables& AkEventVariables);
		void PostAkEventAsyncByAkComponent(class UAkComponent* AkComponent);
		int32_t PostAkEvent(class UAkAudioEvent* Event);
		static UClass* StaticClass();
	};

	/**
	 * Class SkyBlue.SkyBlueSettings
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USkyBlueSettings : public UObject
	{
	public:
		unsigned char                                              DefaultLevelSequenceClass[0x28];                         // 0x0028(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		int32_t                                                    PlayerMovementReplicationFrequency_Client;               // 0x0050(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    PlayerMovementReplicationFrequencyStopped_Client;        // 0x0054(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
